From 988ba2e5bf80345a864ea7a6137abeaf0a27e5d7 Mon Sep 17 00:00:00 2001
From: Joss Bird <admin@plasam.xyz>
Date: Sat, 27 Jul 2019 21:40:33 +0100
Subject: [PATCH] test


diff --git a/src/main/java/co/aikar/timings/MinecraftTimings.java b/src/main/java/co/aikar/timings/MinecraftTimings.java
index c2d26141..3f9fb6f9 100644
--- a/src/main/java/co/aikar/timings/MinecraftTimings.java
+++ b/src/main/java/co/aikar/timings/MinecraftTimings.java
@@ -32,7 +32,6 @@ public final class MinecraftTimings {
     public static final Timing structureGenerationTimer = Timings.ofSafe("Structure Generation");
 
     public static final Timing processQueueTimer = Timings.ofSafe("processQueue");
-    public static final Timing processTasksTimer = Timings.ofSafe("processTasks");
 
     public static final Timing playerCommandTimer = Timings.ofSafe("playerCommand");
 
diff --git a/src/main/java/co/aikar/timings/WorldTimingsHandler.java b/src/main/java/co/aikar/timings/WorldTimingsHandler.java
index 92c32c48..d5d3b2a2 100644
--- a/src/main/java/co/aikar/timings/WorldTimingsHandler.java
+++ b/src/main/java/co/aikar/timings/WorldTimingsHandler.java
@@ -36,19 +36,12 @@ public class WorldTimingsHandler {
     public final Timing tracker2;
     public final Timing doTick;
     public final Timing tickEntities;
-    public final Timing chunks;
-    public final Timing newEntities;
-    public final Timing raids;
-    public final Timing chunkProviderTick;
-    public final Timing broadcastChunkUpdates;
-    public final Timing countNaturalMobs;
 
     public final Timing syncChunkLoadTimer;
     public final Timing syncChunkLoadDataTimer;
     public final Timing syncChunkLoadStructuresTimer;
     public final Timing syncChunkLoadPostTimer;
     public final Timing syncChunkLoadPopulateTimer;
-    public final Timing chunkAwait;
     public final Timing chunkLoadLevelTimer;
     public final Timing chunkGeneration;
     public final Timing chunkIOStage1;
@@ -91,7 +84,6 @@ public class WorldTimingsHandler {
         syncChunkLoadStructuresTimer = Timings.ofSafe(name + "chunkLoad - recreateStructures");
         syncChunkLoadPostTimer = Timings.ofSafe(name + "chunkLoad - Post");
         syncChunkLoadPopulateTimer = Timings.ofSafe(name + "chunkLoad - Populate");
-        chunkAwait = Timings.ofSafe(name + "chunkAwait");
         chunkLoadLevelTimer = Timings.ofSafe(name + "chunkLoad - Load Level");
         chunkGeneration = Timings.ofSafe(name + "chunkGeneration");
         chunkIOStage1 = Timings.ofSafe(name + "ChunkIO Stage 1 - DiskIO");
@@ -105,13 +97,6 @@ public class WorldTimingsHandler {
         tracker2 = Timings.ofSafe(name + "tracker stage 2");
         doTick = Timings.ofSafe(name + "doTick");
         tickEntities = Timings.ofSafe(name + "tickEntities");
-
-        chunks = Timings.ofSafe(name + "Chunks");
-        newEntities = Timings.ofSafe(name + "New entity registration");
-        raids = Timings.ofSafe(name + "Raids");
-        chunkProviderTick = Timings.ofSafe(name + "Chunk provider tick");
-        broadcastChunkUpdates = Timings.ofSafe(name + "Broadcast chunk updates");
-        countNaturalMobs = Timings.ofSafe(name + "Count natural mobs");
     }
 
     public static Timing getTickList(WorldServer worldserver, String timingsType) {
diff --git a/src/main/java/com/destroystokyo/paper/PaperCommand.java b/src/main/java/com/destroystokyo/paper/PaperCommand.java
index 8db92edc..4a793947 100644
--- a/src/main/java/com/destroystokyo/paper/PaperCommand.java
+++ b/src/main/java/com/destroystokyo/paper/PaperCommand.java
@@ -28,14 +28,14 @@ public class PaperCommand extends Command {
     public PaperCommand(String name) {
         super(name);
         this.description = "Paper related commands";
-        this.usageMessage = "/paper [heap | entity | reload | version | debug | chunkinfo]";
+        this.usageMessage = "/paper [heap | entity | reload | version | debug]";
         this.setPermission("bukkit.command.paper");
     }
 
     @Override
     public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
         if (args.length <= 1)
-            return getListMatchingLast(args, "heap", "entity", "reload", "version", "debug", "chunkinfo");
+            return getListMatchingLast(args, "heap", "entity", "reload", "version", "debug");
 
         switch (args[0].toLowerCase(Locale.ENGLISH))
         {
@@ -49,17 +49,6 @@ public class PaperCommand extends Command {
                 if (args.length == 2) {
                     return getListMatchingLast(args, "help", "chunks");
                 }
-                break;
-            case "chunkinfo":
-                List<String> worldNames = new ArrayList<>();
-                worldNames.add("*");
-                for (org.bukkit.World world : Bukkit.getWorlds()) {
-                    worldNames.add(world.getName());
-                }
-                if (args.length == 2) {
-                    return getListMatchingLast(args, worldNames);
-                }
-                break;
         }
         return Collections.emptyList();
     }
@@ -127,9 +116,6 @@ public class PaperCommand extends Command {
             case "debug":
                 doDebug(sender, args);
                 break;
-            case "chunkinfo":
-                doChunkInfo(sender, args);
-                break;
             case "ver":
             case "version":
                 Command ver = org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
@@ -146,63 +132,6 @@ public class PaperCommand extends Command {
         return true;
     }
 
-    private void doChunkInfo(CommandSender sender, String[] args) {
-        List<org.bukkit.World> worlds;
-        if (args.length < 2 || args[1].equals("*")) {
-            worlds = Bukkit.getWorlds();
-        } else {
-            worlds = new ArrayList<>(args.length - 1);
-            for (int i = 1; i < args.length; ++i) {
-                org.bukkit.World world = Bukkit.getWorld(args[i]);
-                if (world == null) {
-                    sender.sendMessage(ChatColor.RED + "World '" + args[i] + "' is invalid");
-                    return;
-                }
-                worlds.add(world);
-            }
-        }
-
-        for (org.bukkit.World bukkitWorld : worlds) {
-            WorldServer world = ((CraftWorld)bukkitWorld).getHandle();
-
-            int total = 0;
-            int inactive = 0;
-            int border = 0;
-            int ticking = 0;
-            int entityTicking = 0;
-
-            for (PlayerChunk chunk : world.getChunkProvider().playerChunkMap.updatingChunks.values()) {
-                if (chunk.getFullChunkIfCached() == null) {
-                    continue;
-                }
-
-                ++total;
-
-                PlayerChunk.State state = PlayerChunk.getChunkState(chunk.getTicketLevel());
-
-                switch (state) {
-                    case INACCESSIBLE:
-                        ++inactive;
-                        continue;
-                    case BORDER:
-                        ++border;
-                        continue;
-                    case TICKING:
-                        ++ticking;
-                        continue;
-                    case ENTITY_TICKING:
-                        ++entityTicking;
-                        continue;
-                }
-            }
-
-            sender.sendMessage(ChatColor.BLUE + "Chunks in " + ChatColor.GREEN + bukkitWorld.getName() + ChatColor.DARK_AQUA + ":");
-            sender.sendMessage(ChatColor.BLUE + "Total: " + ChatColor.DARK_AQUA + total + ChatColor.BLUE + " Inactive: " + ChatColor.DARK_AQUA
-                               + inactive + ChatColor.BLUE + " Border: " + ChatColor.DARK_AQUA + border + ChatColor.BLUE + " Ticking: "
-                               + ChatColor.DARK_AQUA + ticking + ChatColor.BLUE + " Entity: " + ChatColor.DARK_AQUA + entityTicking);
-        }
-    }
-
     private void doDebug(CommandSender sender, String[] args) {
         if (args.length < 2) {
             sender.sendMessage(ChatColor.RED + "Use /paper debug [chunks] help for more information on a specific command");
@@ -327,14 +256,11 @@ public class PaperCommand extends Command {
     }
 
     private void dumpHeap(CommandSender sender) {
-        java.nio.file.Path dir = java.nio.file.Paths.get("./dumps");
-        String name = "heap-dump-" + DateTimeFormatter.ofPattern("yyyy-MM-dd_HH.mm.ss").format(LocalDateTime.now());
-
-        Command.broadcastCommandMessage(sender, ChatColor.YELLOW + "Writing JVM heap data...");
-
-        java.nio.file.Path file = CraftServer.dumpHeap(dir, name);
-        if (file != null) {
-            Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Heap dump saved to " + file);
+        File file = new File(new File(new File("."), "dumps"),
+                "heap-dump-" + DateTimeFormatter.ofPattern("yyyy-MM-dd_HH.mm.ss").format(LocalDateTime.now()) + "-server.hprof");
+        Command.broadcastCommandMessage(sender, ChatColor.YELLOW + "Writing JVM heap data to " + file);
+        if (CraftServer.dumpHeap(file)) {
+            Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Heap dump complete");
         } else {
             Command.broadcastCommandMessage(sender, ChatColor.RED + "Failed to write heap dump, see sever log for details");
         }
diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index 5942c343..8942a06b 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -71,8 +71,8 @@ public class PaperConfig {
         commands = new HashMap<String, Command>();
         commands.put("paper", new PaperCommand("paper"));
 
-        version = getInt("config-version", 19);
-        set("config-version", 19);
+        version = getInt("config-version", 18);
+        set("config-version", 18);
         readConfig(PaperConfig.class, null);
     }
 
@@ -229,7 +229,7 @@ public class PaperConfig {
 
     public static int regionFileCacheSize = 256;
     private static void regionFileCacheSize() {
-        regionFileCacheSize = Math.max(getInt("settings.region-file-cache-size", 256), 4);
+        regionFileCacheSize = getInt("settings.region-file-cache-size", 256);
     }
 
     public static boolean enablePlayerCollisions = true;
diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index 318a470e..b8540619 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -1,11 +1,7 @@
 package com.destroystokyo.paper;
 
-import java.util.Arrays;
 import java.util.List;
 
-import com.destroystokyo.paper.antixray.ChunkPacketBlockControllerAntiXray.ChunkEdgeMode;
-import com.destroystokyo.paper.antixray.ChunkPacketBlockControllerAntiXray.EngineMode;
-import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.file.YamlConfiguration;
 import org.spigotmc.SpigotWorldConfig;
@@ -261,6 +257,11 @@ public class PaperWorldConfig {
         }
     }
 
+    public boolean firePhysicsEventForRedstone = false;
+    private void firePhysicsEventForRedstone() {
+        firePhysicsEventForRedstone = getBoolean("fire-physics-event-for-redstone", firePhysicsEventForRedstone);
+    }
+
     public int fixedInhabitedTime;
     private void fixedInhabitedTime() {
         if (PaperConfig.version < 16) {
@@ -493,73 +494,4 @@ public class PaperWorldConfig {
         keepLoadedRange = (short) (getInt("keep-spawn-loaded-range", Math.min(spigotConfig.viewDistance, 10)) * 16);
         log( "Keep Spawn Loaded Range: " + (keepLoadedRange/16));
     }
-
-    public int autoSavePeriod = -1;
-    private void autoSavePeriod() {
-        autoSavePeriod = getInt("auto-save-interval", -1);
-        if (autoSavePeriod > 0) {
-            log("Auto Save Interval: " +autoSavePeriod + " (" + (autoSavePeriod / 20) + "s)");
-        } else if (autoSavePeriod < 0) {
-            autoSavePeriod = net.minecraft.server.MinecraftServer.getServer().autosavePeriod;
-        }
-    }
-
-    public int maxAutoSaveChunksPerTick = 24;
-    private void maxAutoSaveChunksPerTick() {
-        maxAutoSaveChunksPerTick = getInt("max-auto-save-chunks-per-tick", 24);
-    }
-
-    public boolean countAllMobsForSpawning = false;
-    private void countAllMobsForSpawning() {
-        countAllMobsForSpawning = getBoolean("count-all-mobs-for-spawning", false);
-        if (countAllMobsForSpawning) {
-            log("Counting all mobs for spawning. Mob farms may reduce natural spawns elsewhere in world.");
-        } else {
-            log("Using improved mob spawn limits (Only Natural Spawns impact spawn limits for more natural spawns)");
-        }
-    }
-
-    public boolean antiXray;
-    public boolean asynchronous;
-    public EngineMode engineMode;
-    public ChunkEdgeMode chunkEdgeMode;
-    public int maxChunkSectionIndex;
-    public int updateRadius;
-    public List<String> hiddenBlocks;
-    public List<String> replacementBlocks;
-    private void antiXray() {
-        antiXray = getBoolean("anti-xray.enabled", false);
-        asynchronous = true;
-        engineMode = EngineMode.getById(getInt("anti-xray.engine-mode", EngineMode.HIDE.getId()));
-        engineMode = engineMode == null ? EngineMode.HIDE : engineMode;
-        chunkEdgeMode = ChunkEdgeMode.getById(getInt("anti-xray.chunk-edge-mode", ChunkEdgeMode.WAIT.getId()));
-        chunkEdgeMode = chunkEdgeMode == null ? ChunkEdgeMode.DEFAULT : chunkEdgeMode;
-
-        if (chunkEdgeMode != ChunkEdgeMode.WAIT) {
-            log("Migrating anti-xray chunk edge mode to " + ChunkEdgeMode.WAIT + " (" + ChunkEdgeMode.WAIT.getId() + ")");
-            chunkEdgeMode = ChunkEdgeMode.WAIT;
-            set("anti-xray.chunk-edge-mode", ChunkEdgeMode.WAIT.getId());
-        }
-
-        maxChunkSectionIndex = getInt("anti-xray.max-chunk-section-index", 3);
-        maxChunkSectionIndex = maxChunkSectionIndex > 15 ? 15 : maxChunkSectionIndex;
-        updateRadius = getInt("anti-xray.update-radius", 2);
-        hiddenBlocks = getList("anti-xray.hidden-blocks", Arrays.asList("gold_ore", "iron_ore", "coal_ore", "lapis_ore", "mossy_cobblestone", "obsidian", "chest", "diamond_ore", "redstone_ore", "clay", "emerald_ore", "ender_chest"));
-        replacementBlocks = getList("anti-xray.replacement-blocks", Arrays.asList("stone", "oak_planks"));
-        if (PaperConfig.version < 19) {
-            hiddenBlocks.remove("lit_redstone_ore");
-            int index = replacementBlocks.indexOf("planks");
-            if (index != -1) {
-                replacementBlocks.set(index, "oak_planks");
-            }
-            set("anti-xray.hidden-blocks", hiddenBlocks);
-            set("anti-xray.replacement-blocks", replacementBlocks);
-        }
-        log("Anti-Xray: " + (antiXray ? "enabled" : "disabled") + " / Engine Mode: " + engineMode.getDescription() + " / Chunk Edge Mode: " + chunkEdgeMode.getDescription() + " / Up to " + ((maxChunkSectionIndex + 1) * 16) + " blocks / Update Radius: " + updateRadius);
-    }
-
-    public boolean disableRelativeProjectileVelocity;
-    private void disableRelativeProjectileVelocity() {
-        disableRelativeProjectileVelocity = getBoolean("game-mechanics.disable-relative-projectile-velocity", false);
-    }
 }
diff --git a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockController.java b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockController.java
deleted file mode 100644
index f7e376ce..00000000
--- a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockController.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.destroystokyo.paper.antixray;
-
-import net.minecraft.server.BlockPosition;
-import net.minecraft.server.Chunk;
-import net.minecraft.server.ChunkSection;
-import net.minecraft.server.EnumDirection;
-import net.minecraft.server.IBlockData;
-import net.minecraft.server.IChunkAccess;
-import net.minecraft.server.IWorldReader;
-import net.minecraft.server.PacketPlayOutMapChunk;
-import net.minecraft.server.PlayerInteractManager;
-import net.minecraft.server.World;
-
-public class ChunkPacketBlockController {
-
-    public static final ChunkPacketBlockController NO_OPERATION_INSTANCE = new ChunkPacketBlockController();
-
-    protected ChunkPacketBlockController() {
-
-    }
-
-    public IBlockData[] getPredefinedBlockData(IWorldReader world, IChunkAccess chunk, ChunkSection chunkSection, boolean initializeBlocks) {
-        return null;
-    }
-
-    public boolean onChunkPacketCreate(Chunk chunk, int chunkSectionSelector, boolean force) {
-        return true;
-    }
-
-    public ChunkPacketInfo<IBlockData> getChunkPacketInfo(PacketPlayOutMapChunk packetPlayOutMapChunk, Chunk chunk,
-                                                          int chunkSectionSelector, boolean forceLoad) {
-        return null;
-    }
-
-    public void modifyBlocks(PacketPlayOutMapChunk packetPlayOutMapChunk, ChunkPacketInfo<IBlockData> chunkPacketInfo, boolean loadChunks, Integer ticketHold) {
-        packetPlayOutMapChunk.setReady(true);
-    }
-
-    public void onBlockChange(World world, BlockPosition blockPosition, IBlockData newBlockData, IBlockData oldBlockData, int flag) {
-
-    }
-
-    public void onPlayerLeftClickBlock(PlayerInteractManager playerInteractManager, BlockPosition blockPosition, EnumDirection enumDirection) {
-
-    }
-}
diff --git a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockControllerAntiXray.java b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockControllerAntiXray.java
deleted file mode 100644
index 23626bef..00000000
--- a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockControllerAntiXray.java
+++ /dev/null
@@ -1,782 +0,0 @@
-package com.destroystokyo.paper.antixray;
-
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.function.Supplier;
-
-import net.minecraft.server.*;
-import org.bukkit.Bukkit;
-import org.bukkit.World.Environment;
-
-import com.destroystokyo.paper.PaperWorldConfig;
-
-public class ChunkPacketBlockControllerAntiXray extends ChunkPacketBlockController {
-
-    private static ExecutorService executorServiceInstance = null;
-    private final ExecutorService executorService;
-    private final boolean asynchronous;
-    private final EngineMode engineMode;
-    private final ChunkEdgeMode chunkEdgeMode;
-    private final int maxChunkSectionIndex;
-    private final int updateRadius;
-    private final IBlockData[] predefinedBlockData;
-    private final IBlockData[] predefinedBlockDataStone;
-    private final IBlockData[] predefinedBlockDataNetherrack;
-    private final IBlockData[] predefinedBlockDataEndStone;
-    private final int[] predefinedBlockDataBitsGlobal;
-    private final int[] predefinedBlockDataBitsStoneGlobal;
-    private final int[] predefinedBlockDataBitsNetherrackGlobal;
-    private final int[] predefinedBlockDataBitsEndStoneGlobal;
-    private final boolean[] solidGlobal = new boolean[Block.REGISTRY_ID.size()];
-    private final boolean[] obfuscateGlobal = new boolean[Block.REGISTRY_ID.size()];
-    private final ChunkSection[] emptyNearbyChunkSections = {Chunk.EMPTY_CHUNK_SECTION, Chunk.EMPTY_CHUNK_SECTION, Chunk.EMPTY_CHUNK_SECTION, Chunk.EMPTY_CHUNK_SECTION};
-    private final int maxBlockYUpdatePosition;
-
-    public ChunkPacketBlockControllerAntiXray(PaperWorldConfig paperWorldConfig) {
-        asynchronous = paperWorldConfig.asynchronous;
-        engineMode = paperWorldConfig.engineMode;
-        chunkEdgeMode = paperWorldConfig.chunkEdgeMode;
-        maxChunkSectionIndex = paperWorldConfig.maxChunkSectionIndex;
-        updateRadius = paperWorldConfig.updateRadius;
-
-        if (asynchronous) {
-            executorService = getExecutorServiceInstance();
-        } else {
-            executorService = null;
-        }
-
-        List<String> toObfuscate;
-
-        if (engineMode == EngineMode.HIDE) {
-            toObfuscate = paperWorldConfig.hiddenBlocks;
-            predefinedBlockData = null;
-            predefinedBlockDataStone = new IBlockData[] {Blocks.STONE.getBlockData()};
-            predefinedBlockDataNetherrack = new IBlockData[] {Blocks.NETHERRACK.getBlockData()};
-            predefinedBlockDataEndStone = new IBlockData[] {Blocks.END_STONE.getBlockData()};
-            predefinedBlockDataBitsGlobal = null;
-            predefinedBlockDataBitsStoneGlobal = new int[] {ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(Blocks.STONE.getBlockData())};
-            predefinedBlockDataBitsNetherrackGlobal = new int[] {ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(Blocks.NETHERRACK.getBlockData())};
-            predefinedBlockDataBitsEndStoneGlobal = new int[] {ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(Blocks.END_STONE.getBlockData())};
-        } else {
-            toObfuscate = new ArrayList<>(paperWorldConfig.replacementBlocks);
-            Set<IBlockData> predefinedBlockDataSet = new HashSet<IBlockData>();
-
-            for (String id : paperWorldConfig.hiddenBlocks) {
-                Block block = IRegistry.BLOCK.getOptional(new MinecraftKey(id)).orElse(null);
-
-                if (block != null && !block.isTileEntity()) {
-                    toObfuscate.add(id);
-                    predefinedBlockDataSet.add(block.getBlockData());
-                }
-            }
-
-            predefinedBlockData = predefinedBlockDataSet.size() == 0 ? new IBlockData[] {Blocks.DIAMOND_ORE.getBlockData()} : predefinedBlockDataSet.toArray(new IBlockData[0]);
-            predefinedBlockDataStone = null;
-            predefinedBlockDataNetherrack = null;
-            predefinedBlockDataEndStone = null;
-            predefinedBlockDataBitsGlobal = new int[predefinedBlockData.length];
-
-            for (int i = 0; i < predefinedBlockData.length; i++) {
-                predefinedBlockDataBitsGlobal[i] = ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(predefinedBlockData[i]);
-            }
-
-            predefinedBlockDataBitsStoneGlobal = null;
-            predefinedBlockDataBitsNetherrackGlobal = null;
-            predefinedBlockDataBitsEndStoneGlobal = null;
-        }
-
-        for (String id : toObfuscate) {
-            Block block = IRegistry.BLOCK.getOptional(new MinecraftKey(id)).orElse(null);
-
-            if (block != null) {
-                obfuscateGlobal[ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(block.getBlockData())] = true;
-            }
-        }
-
-        ChunkEmpty emptyChunk = new ChunkEmpty(null, new ChunkCoordIntPair(0, 0));
-        BlockPosition zeroPos = new BlockPosition(0, 0, 0);
-
-        for (int i = 0; i < solidGlobal.length; i++) {
-            IBlockData blockData = ChunkSection.GLOBAL_PALETTE.getObject(i);
-
-            if (blockData != null) {
-                solidGlobal[i] = blockData.getBlock().isOccluding(blockData, emptyChunk, zeroPos)
-                    && blockData.getBlock() != Blocks.SPAWNER && blockData.getBlock() != Blocks.BARRIER && blockData.getBlock() != Blocks.SHULKER_BOX;
-                // shulker box checks TE.
-            }
-        }
-
-        this.maxBlockYUpdatePosition = (maxChunkSectionIndex + 1) * 16 + updateRadius - 1;
-    }
-
-    private static ExecutorService getExecutorServiceInstance() {
-        if (executorServiceInstance == null) {
-            executorServiceInstance = Executors.newSingleThreadExecutor();
-        }
-
-        return executorServiceInstance;
-    }
-
-    @Override
-    public IBlockData[] getPredefinedBlockData(IWorldReader world, IChunkAccess chunk, ChunkSection chunkSection, boolean initializeBlocks) {
-        //Return the block data which should be added to the data palettes so that they can be used for the obfuscation
-        if (chunkSection.getYPosition() >> 4 <= maxChunkSectionIndex) {
-            switch (engineMode) {
-                case HIDE:
-                    if (world instanceof GeneratorAccess) {
-                        switch (((GeneratorAccess) world).getMinecraftWorld().getWorld().getEnvironment()) {
-                            case NETHER:
-                                return predefinedBlockDataNetherrack;
-                            case THE_END:
-                                return predefinedBlockDataEndStone;
-                            default:
-                                return predefinedBlockDataStone;
-                        }
-                    }
-
-                    return null;
-                default:
-                    return predefinedBlockData;
-            }
-        }
-
-        return null;
-    }
-
-    private final AtomicInteger xrayRequests = new AtomicInteger();
-
-    private Integer addXrayTickets(final int x, final int z, final ChunkProviderServer chunkProvider) {
-        final Integer hold = Integer.valueOf(this.xrayRequests.getAndIncrement());
-
-        // Add at ticket level 33, which is just enough to keep chunks loaded
-        chunkProvider.addTicket(TicketType.ANTIXRAY, new ChunkCoordIntPair(x, z), 0, hold);
-        chunkProvider.addTicket(TicketType.ANTIXRAY, new ChunkCoordIntPair(x - 1, z), 0, hold);
-        chunkProvider.addTicket(TicketType.ANTIXRAY, new ChunkCoordIntPair(x + 1, z), 0, hold);
-        chunkProvider.addTicket(TicketType.ANTIXRAY, new ChunkCoordIntPair(x, z - 1), 0, hold);
-        chunkProvider.addTicket(TicketType.ANTIXRAY, new ChunkCoordIntPair(x, z + 1), 0, hold);
-
-        return hold;
-    }
-
-    private void removeXrayTickets(final int x, final int z, final ChunkProviderServer chunkProvider, final Integer hold) {
-        // Remove at ticket level 33 (same one we added as), which is just enough to keep chunks loaded
-        chunkProvider.removeTicket(TicketType.ANTIXRAY, new ChunkCoordIntPair(x, z), 0, hold);
-        chunkProvider.removeTicket(TicketType.ANTIXRAY, new ChunkCoordIntPair(x - 1, z), 0, hold);
-        chunkProvider.removeTicket(TicketType.ANTIXRAY, new ChunkCoordIntPair(x + 1, z), 0, hold);
-        chunkProvider.removeTicket(TicketType.ANTIXRAY, new ChunkCoordIntPair(x, z - 1), 0, hold);
-        chunkProvider.removeTicket(TicketType.ANTIXRAY, new ChunkCoordIntPair(x, z + 1), 0, hold);
-    }
-
-    private void loadNeighbours(Chunk chunk) {
-        int locX = chunk.getPos().x;
-        int locZ = chunk.getPos().z;
-        chunk.world.getChunkAt(locX - 1, locZ);
-        chunk.world.getChunkAt(locX + 1, locZ);
-        chunk.world.getChunkAt(locX, locZ - 1);
-        chunk.world.getChunkAt(locX, locZ + 1);
-    }
-
-    @Override
-    public boolean onChunkPacketCreate(Chunk chunk, int chunkSectionSelector, boolean force) {
-        int locX = chunk.getPos().x;
-        int locZ = chunk.getPos().z;
-        WorldServer world = (WorldServer)chunk.world;
-        ChunkProviderServer chunkProvider = world.getChunkProvider();
-
-        //Load nearby chunks if necessary
-        if (force || chunkEdgeMode == ChunkEdgeMode.LOAD) { // TODO temporary
-            // if forced, load NOW;
-            this.loadNeighbours(chunk);
-        } else if (chunkEdgeMode == ChunkEdgeMode.WAIT) {
-            if (chunkProvider.getChunkAtIfCachedImmediately(locX - 1, locZ) == null ||
-                chunkProvider.getChunkAtIfCachedImmediately(locX + 1, locZ) == null ||
-                chunkProvider.getChunkAtIfCachedImmediately(locX, locZ - 1) == null ||
-                chunkProvider.getChunkAtIfCachedImmediately(locX, locZ + 1) == null) {
-                //Don't create the chunk packet now, wait until nearby chunks are loaded and create it later
-                return false;
-            }
-        } else if (false && chunkEdgeMode == ChunkEdgeMode.LOAD) {
-            // TODO Note: These should be asynchronous loads; however we have no such thing in 1.14.
-            boolean missingChunk = false;
-            //noinspection ConstantConditions
-            /*
-            missingChunk |= ((WorldServer)chunk.world).getChunkProvider().getChunkAt(chunk.locX - 1, chunk.locZ, true, true, c -> {}) == null;
-            missingChunk |= ((WorldServer)chunk.world).getChunkProvider().getChunkAt(chunk.locX + 1, chunk.locZ, true, true, c -> {}) == null;
-            missingChunk |= ((WorldServer)chunk.world).getChunkProvider().getChunkAt(chunk.locX, chunk.locZ - 1, true, true, c -> {}) == null;
-            missingChunk |= ((WorldServer)chunk.world).getChunkProvider().getChunkAt(chunk.locX, chunk.locZ + 1, true, true, c -> {}) == null;
-             */
-            if (missingChunk) {
-                return false;
-            }
-        }
-
-        //Create the chunk packet now
-        return true;
-    }
-
-    @Override
-    public ChunkPacketInfoAntiXray getChunkPacketInfo(PacketPlayOutMapChunk packetPlayOutMapChunk, Chunk chunk,
-                                                      int chunkSectionSelector, boolean forceLoad) {
-        // Return a new instance to collect data and objects in the right state while creating the chunk packet for thread safe access later
-        // Note: As of 1.14 this has to be moved later due to the chunk system.
-
-        ChunkPacketInfoAntiXray chunkPacketInfoAntiXray = new ChunkPacketInfoAntiXray(packetPlayOutMapChunk, chunk, chunkSectionSelector, this);
-        return chunkPacketInfoAntiXray;
-    }
-
-    @Override
-    public void modifyBlocks(PacketPlayOutMapChunk packetPlayOutMapChunk, ChunkPacketInfo<IBlockData> chunkPacketInfo, boolean loadChunks, Integer hold) {
-        if (!Bukkit.isPrimaryThread()) {
-            // plugins?
-            final Integer finalHold = hold;
-            MinecraftServer.getServer().scheduleOnMain(() -> {
-                this.modifyBlocks(packetPlayOutMapChunk, chunkPacketInfo, loadChunks, finalHold);
-            });
-            return;
-        }
-        Chunk chunk = chunkPacketInfo.getChunk();
-        int locX = chunk.getPos().x;
-        int locZ = chunk.getPos().z;
-        WorldServer world = (WorldServer)chunk.world;
-
-        Chunk[] chunks = new Chunk[] {
-            (Chunk)world.getChunkIfLoadedImmediately(locX - 1, locZ),
-            (Chunk)world.getChunkIfLoadedImmediately(locX + 1, locZ),
-            (Chunk)world.getChunkIfLoadedImmediately(locX, locZ - 1),
-            (Chunk)world.getChunkIfLoadedImmediately(locX, locZ + 1)
-        };
-
-        if (loadChunks) {
-            // Note: This ugly hack is to get us out of the general chunk load/unload queue to prevent deadlock
-
-            if (chunks[0] == null || chunks[1] == null || chunks[2] == null || chunks[3] == null) {
-                // we need to load
-                MinecraftServer.getServer().scheduleOnMain(() -> {
-                    Integer ticketHold = this.addXrayTickets(locX, locZ, world.getChunkProvider());
-                    this.loadNeighbours(chunk);
-                    this.modifyBlocks(packetPlayOutMapChunk, chunkPacketInfo, false, ticketHold);
-                });
-                return;
-            }
-
-            hold = this.addXrayTickets(locX, locZ, world.getChunkProvider());
-            // fall through to normal behavior, our chunks are now loaded & have a ticket
-        }
-
-        ((ChunkPacketInfoAntiXray)chunkPacketInfo).setNearbyChunks(chunks);
-        ((ChunkPacketInfoAntiXray)chunkPacketInfo).ticketHold = hold;
-
-        if (asynchronous) {
-            executorService.submit((ChunkPacketInfoAntiXray) chunkPacketInfo);
-        } else {
-            obfuscate((ChunkPacketInfoAntiXray) chunkPacketInfo);
-        }
-    }
-
-    //Actually these fields should be variables inside the obfuscate method but in sync mode or with SingleThreadExecutor in async mode it's okay
-    private int[] predefinedBlockDataBits;
-    private final boolean[] solid = new boolean[Block.REGISTRY_ID.size()];
-    private final boolean[] obfuscate = new boolean[Block.REGISTRY_ID.size()];
-    //These boolean arrays represent chunk layers, true means don't obfuscate, false means obfuscate
-    private boolean[][] current = new boolean[16][16];
-    private boolean[][] next = new boolean[16][16];
-    private boolean[][] nextNext = new boolean[16][16];
-    private final DataBitsReader dataBitsReader = new DataBitsReader();
-    private final DataBitsWriter dataBitsWriter = new DataBitsWriter();
-    private final ChunkSection[] nearbyChunkSections = new ChunkSection[4];
-
-    public void obfuscate(ChunkPacketInfoAntiXray chunkPacketInfoAntiXray) {
-        try {
-            boolean[] solidTemp = null;
-            boolean[] obfuscateTemp = null;
-            dataBitsReader.setDataBits(chunkPacketInfoAntiXray.getData());
-            dataBitsWriter.setDataBits(chunkPacketInfoAntiXray.getData());
-            int counter = 0;
-
-            for (int chunkSectionIndex = 0; chunkSectionIndex <= maxChunkSectionIndex; chunkSectionIndex++) {
-                if (chunkPacketInfoAntiXray.isWritten(chunkSectionIndex) && chunkPacketInfoAntiXray.getPredefinedObjects(chunkSectionIndex) != null) {
-                    int[] predefinedBlockDataBitsTemp;
-
-                    if (chunkPacketInfoAntiXray.getDataPalette(chunkSectionIndex) == ChunkSection.GLOBAL_PALETTE) {
-                        predefinedBlockDataBitsTemp = engineMode == EngineMode.HIDE ? chunkPacketInfoAntiXray.getChunk().world.getWorld().getEnvironment() == Environment.NETHER ? predefinedBlockDataBitsNetherrackGlobal : chunkPacketInfoAntiXray.getChunk().world.getWorld().getEnvironment() == Environment.THE_END ? predefinedBlockDataBitsEndStoneGlobal : predefinedBlockDataBitsStoneGlobal : predefinedBlockDataBitsGlobal;
-                    } else {
-                        predefinedBlockDataBitsTemp = predefinedBlockDataBits == null ? predefinedBlockDataBits = engineMode == EngineMode.HIDE ? new int[1] : new int[predefinedBlockData.length] : predefinedBlockDataBits;
-
-                        for (int i = 0; i < predefinedBlockDataBitsTemp.length; i++) {
-                            predefinedBlockDataBitsTemp[i] = chunkPacketInfoAntiXray.getDataPalette(chunkSectionIndex).getOrCreateIdFor(chunkPacketInfoAntiXray.getPredefinedObjects(chunkSectionIndex)[i]);
-                        }
-                    }
-
-                    dataBitsWriter.setIndex(chunkPacketInfoAntiXray.getOrCreateIdForIndex(chunkSectionIndex));
-
-                    //Check if the chunk section below was not obfuscated
-                    if (chunkSectionIndex == 0 || !chunkPacketInfoAntiXray.isWritten(chunkSectionIndex - 1) || chunkPacketInfoAntiXray.getPredefinedObjects(chunkSectionIndex - 1) == null) {
-                        //If so, initialize some stuff
-                        dataBitsReader.setBitsPerObject(chunkPacketInfoAntiXray.getBitsPerObject(chunkSectionIndex));
-                        dataBitsReader.setIndex(chunkPacketInfoAntiXray.getOrCreateIdForIndex(chunkSectionIndex));
-                        solidTemp = readDataPalette(chunkPacketInfoAntiXray.getDataPalette(chunkSectionIndex), solid, solidGlobal);
-                        obfuscateTemp = readDataPalette(chunkPacketInfoAntiXray.getDataPalette(chunkSectionIndex), obfuscate, obfuscateGlobal);
-                        //Read the blocks of the upper layer of the chunk section below if it exists
-                        ChunkSection belowChunkSection = null;
-                        boolean skipFirstLayer = chunkSectionIndex == 0 || (belowChunkSection = chunkPacketInfoAntiXray.getChunk().getSections()[chunkSectionIndex - 1]) == Chunk.EMPTY_CHUNK_SECTION;
-
-                        for (int z = 0; z < 16; z++) {
-                            for (int x = 0; x < 16; x++) {
-                                current[z][x] = true;
-                                next[z][x] = skipFirstLayer || !solidGlobal[ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(belowChunkSection.getType(x, 15, z))];
-                            }
-                        }
-
-                        //Abuse the obfuscateLayer method to read the blocks of the first layer of the current chunk section
-                        dataBitsWriter.setBitsPerObject(0);
-                        obfuscateLayer(-1, dataBitsReader, dataBitsWriter, solidTemp, obfuscateTemp, predefinedBlockDataBitsTemp, current, next, nextNext, emptyNearbyChunkSections, counter);
-                    }
-
-                    dataBitsWriter.setBitsPerObject(chunkPacketInfoAntiXray.getBitsPerObject(chunkSectionIndex));
-                    nearbyChunkSections[0] = chunkPacketInfoAntiXray.getNearbyChunks()[0] == null ? Chunk.EMPTY_CHUNK_SECTION : chunkPacketInfoAntiXray.getNearbyChunks()[0].getSections()[chunkSectionIndex];
-                    nearbyChunkSections[1] = chunkPacketInfoAntiXray.getNearbyChunks()[1] == null ? Chunk.EMPTY_CHUNK_SECTION : chunkPacketInfoAntiXray.getNearbyChunks()[1].getSections()[chunkSectionIndex];
-                    nearbyChunkSections[2] = chunkPacketInfoAntiXray.getNearbyChunks()[2] == null ? Chunk.EMPTY_CHUNK_SECTION : chunkPacketInfoAntiXray.getNearbyChunks()[2].getSections()[chunkSectionIndex];
-                    nearbyChunkSections[3] = chunkPacketInfoAntiXray.getNearbyChunks()[3] == null ? Chunk.EMPTY_CHUNK_SECTION : chunkPacketInfoAntiXray.getNearbyChunks()[3].getSections()[chunkSectionIndex];
-
-                    //Obfuscate all layers of the current chunk section except the upper one
-                    for (int y = 0; y < 15; y++) {
-                        boolean[][] temp = current;
-                        current = next;
-                        next = nextNext;
-                        nextNext = temp;
-                        counter = obfuscateLayer(y, dataBitsReader, dataBitsWriter, solidTemp, obfuscateTemp, predefinedBlockDataBitsTemp, current, next, nextNext, nearbyChunkSections, counter);
-                    }
-
-                    //Check if the chunk section above doesn't need obfuscation
-                    if (chunkSectionIndex == maxChunkSectionIndex || !chunkPacketInfoAntiXray.isWritten(chunkSectionIndex + 1) || chunkPacketInfoAntiXray.getPredefinedObjects(chunkSectionIndex + 1) == null) {
-                        //If so, obfuscate the upper layer of the current chunk section by reading blocks of the first layer from the chunk section above if it exists
-                        ChunkSection aboveChunkSection;
-
-                        if (chunkSectionIndex != 15 && (aboveChunkSection = chunkPacketInfoAntiXray.getChunk().getSections()[chunkSectionIndex + 1]) != Chunk.EMPTY_CHUNK_SECTION) {
-                            boolean[][] temp = current;
-                            current = next;
-                            next = nextNext;
-                            nextNext = temp;
-
-                            for (int z = 0; z < 16; z++) {
-                                for (int x = 0; x < 16; x++) {
-                                    if (!solidGlobal[ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(aboveChunkSection.getType(x, 0, z))]) {
-                                        current[z][x] = true;
-                                    }
-                                }
-                            }
-
-                            //There is nothing to read anymore
-                            dataBitsReader.setBitsPerObject(0);
-                            solid[0] = true;
-                            counter = obfuscateLayer(15, dataBitsReader, dataBitsWriter, solid, obfuscateTemp, predefinedBlockDataBitsTemp, current, next, nextNext, nearbyChunkSections, counter);
-                        }
-                    } else {
-                        //If not, initialize the reader and other stuff for the chunk section above to obfuscate the upper layer of the current chunk section
-                        dataBitsReader.setBitsPerObject(chunkPacketInfoAntiXray.getBitsPerObject(chunkSectionIndex + 1));
-                        dataBitsReader.setIndex(chunkPacketInfoAntiXray.getOrCreateIdForIndex(chunkSectionIndex + 1));
-                        solidTemp = readDataPalette(chunkPacketInfoAntiXray.getDataPalette(chunkSectionIndex + 1), solid, solidGlobal);
-                        obfuscateTemp = readDataPalette(chunkPacketInfoAntiXray.getDataPalette(chunkSectionIndex + 1), obfuscate, obfuscateGlobal);
-                        boolean[][] temp = current;
-                        current = next;
-                        next = nextNext;
-                        nextNext = temp;
-                        counter = obfuscateLayer(15, dataBitsReader, dataBitsWriter, solidTemp, obfuscateTemp, predefinedBlockDataBitsTemp, current, next, nextNext, nearbyChunkSections, counter);
-                    }
-
-                    dataBitsWriter.finish();
-                }
-            }
-
-            chunkPacketInfoAntiXray.getPacketPlayOutMapChunk().setReady(true);
-
-        } finally {
-            if (chunkPacketInfoAntiXray.ticketHold != null) {
-                Runnable runnable = () -> {
-                    Chunk chunk = chunkPacketInfoAntiXray.getChunk();
-                    ChunkCoordIntPair chunkPos = chunk.getPos();
-
-                    ChunkPacketBlockControllerAntiXray.this.removeXrayTickets(chunkPos.x, chunkPos.z, (ChunkProviderServer) chunk.world.getChunkProvider(),
-                        chunkPacketInfoAntiXray.ticketHold);
-                };
-                if (MinecraftServer.getServer().isMainThread()) {
-                    runnable.run();
-                } else {
-                    MinecraftServer.getServer().scheduleOnMain(runnable);
-                }
-            }
-        }
-    }
-
-    private int obfuscateLayer(int y, DataBitsReader dataBitsReader, DataBitsWriter dataBitsWriter, boolean[] solid, boolean[] obfuscate, int[] predefinedBlockDataBits, boolean[][] current, boolean[][] next, boolean[][] nextNext, ChunkSection[] nearbyChunkSections, int counter) {
-        //First block of first line
-        int dataBits = dataBitsReader.read();
-
-        if (nextNext[0][0] = !solid[dataBits]) {
-            dataBitsWriter.skip();
-            next[0][1] = true;
-            next[1][0] = true;
-        } else {
-            if (nearbyChunkSections[2] == Chunk.EMPTY_CHUNK_SECTION || !solidGlobal[ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(nearbyChunkSections[2].getType(0, y, 15))] || nearbyChunkSections[0] == Chunk.EMPTY_CHUNK_SECTION || !solidGlobal[ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(nearbyChunkSections[0].getType(15, y, 0))] || current[0][0]) {
-                dataBitsWriter.skip();
-            } else {
-                if (counter >= predefinedBlockDataBits.length) {
-                    counter = 0;
-                }
-
-                dataBitsWriter.write(predefinedBlockDataBits[counter++]);
-            }
-        }
-
-        if (!obfuscate[dataBits]) {
-            next[0][0] = true;
-        }
-
-        //First line
-        for (int x = 1; x < 15; x++) {
-            dataBits = dataBitsReader.read();
-
-            if (nextNext[0][x] = !solid[dataBits]) {
-                dataBitsWriter.skip();
-                next[0][x - 1] = true;
-                next[0][x + 1] = true;
-                next[1][x] = true;
-            } else {
-                if (nearbyChunkSections[2] == Chunk.EMPTY_CHUNK_SECTION || !solidGlobal[ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(nearbyChunkSections[2].getType(x, y, 15))] || current[0][x]) {
-                    dataBitsWriter.skip();
-                } else {
-                    if (counter >= predefinedBlockDataBits.length) {
-                        counter = 0;
-                    }
-
-                    dataBitsWriter.write(predefinedBlockDataBits[counter++]);
-                }
-            }
-
-            if (!obfuscate[dataBits]) {
-                next[0][x] = true;
-            }
-        }
-
-        //Last block of first line
-        dataBits = dataBitsReader.read();
-
-        if (nextNext[0][15] = !solid[dataBits]) {
-            dataBitsWriter.skip();
-            next[0][14] = true;
-            next[1][15] = true;
-        } else {
-            if (nearbyChunkSections[2] == Chunk.EMPTY_CHUNK_SECTION || !solidGlobal[ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(nearbyChunkSections[2].getType(15, y, 15))] || nearbyChunkSections[1] == Chunk.EMPTY_CHUNK_SECTION || !solidGlobal[ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(nearbyChunkSections[1].getType(0, y, 0))] || current[0][15]) {
-                dataBitsWriter.skip();
-            } else {
-                if (counter >= predefinedBlockDataBits.length) {
-                    counter = 0;
-                }
-
-                dataBitsWriter.write(predefinedBlockDataBits[counter++]);
-            }
-        }
-
-        if (!obfuscate[dataBits]) {
-            next[0][15] = true;
-        }
-
-        //All inner lines
-        for (int z = 1; z < 15; z++) {
-            //First block
-            dataBits = dataBitsReader.read();
-
-            if (nextNext[z][0] = !solid[dataBits]) {
-                dataBitsWriter.skip();
-                next[z][1] = true;
-                next[z - 1][0] = true;
-                next[z + 1][0] = true;
-            } else {
-                if (nearbyChunkSections[0] == Chunk.EMPTY_CHUNK_SECTION || !solidGlobal[ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(nearbyChunkSections[0].getType(15, y, z))] || current[z][0]) {
-                    dataBitsWriter.skip();
-                } else {
-                    if (counter >= predefinedBlockDataBits.length) {
-                        counter = 0;
-                    }
-
-                    dataBitsWriter.write(predefinedBlockDataBits[counter++]);
-                }
-            }
-
-            if (!obfuscate[dataBits]) {
-                next[z][0] = true;
-            }
-
-            //All inner blocks
-            for (int x = 1; x < 15; x++) {
-                dataBits = dataBitsReader.read();
-
-                if (nextNext[z][x] = !solid[dataBits]) {
-                    dataBitsWriter.skip();
-                    next[z][x - 1] = true;
-                    next[z][x + 1] = true;
-                    next[z - 1][x] = true;
-                    next[z + 1][x] = true;
-                } else {
-                    if (current[z][x]) {
-                        dataBitsWriter.skip();
-                    } else {
-                        if (counter >= predefinedBlockDataBits.length) {
-                            counter = 0;
-                        }
-
-                        dataBitsWriter.write(predefinedBlockDataBits[counter++]);
-                    }
-                }
-
-                if (!obfuscate[dataBits]) {
-                    next[z][x] = true;
-                }
-            }
-
-            //Last block
-            dataBits = dataBitsReader.read();
-
-            if (nextNext[z][15] = !solid[dataBits]) {
-                dataBitsWriter.skip();
-                next[z][14] = true;
-                next[z - 1][15] = true;
-                next[z + 1][15] = true;
-            } else {
-                if (nearbyChunkSections[1] == Chunk.EMPTY_CHUNK_SECTION || !solidGlobal[ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(nearbyChunkSections[1].getType(0, y, z))] || current[z][15]) {
-                    dataBitsWriter.skip();
-                } else {
-                    if (counter >= predefinedBlockDataBits.length) {
-                        counter = 0;
-                    }
-
-                    dataBitsWriter.write(predefinedBlockDataBits[counter++]);
-                }
-            }
-
-            if (!obfuscate[dataBits]) {
-                next[z][15] = true;
-            }
-        }
-
-        //First block of last line
-        dataBits = dataBitsReader.read();
-
-        if (nextNext[15][0] = !solid[dataBits]) {
-            dataBitsWriter.skip();
-            next[15][1] = true;
-            next[14][0] = true;
-        } else {
-            if (nearbyChunkSections[3] == Chunk.EMPTY_CHUNK_SECTION || !solidGlobal[ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(nearbyChunkSections[3].getType(0, y, 0))] || nearbyChunkSections[0] == Chunk.EMPTY_CHUNK_SECTION || !solidGlobal[ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(nearbyChunkSections[0].getType(15, y, 15))] || current[15][0]) {
-                dataBitsWriter.skip();
-            } else {
-                if (counter >= predefinedBlockDataBits.length) {
-                    counter = 0;
-                }
-
-                dataBitsWriter.write(predefinedBlockDataBits[counter++]);
-            }
-        }
-
-        if (!obfuscate[dataBits]) {
-            next[15][0] = true;
-        }
-
-        //Last line
-        for (int x = 1; x < 15; x++) {
-            dataBits = dataBitsReader.read();
-
-            if (nextNext[15][x] = !solid[dataBits]) {
-                dataBitsWriter.skip();
-                next[15][x - 1] = true;
-                next[15][x + 1] = true;
-                next[14][x] = true;
-            } else {
-                if (nearbyChunkSections[3] == Chunk.EMPTY_CHUNK_SECTION || !solidGlobal[ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(nearbyChunkSections[3].getType(x, y, 0))] || current[15][x]) {
-                    dataBitsWriter.skip();
-                } else {
-                    if (counter >= predefinedBlockDataBits.length) {
-                        counter = 0;
-                    }
-
-                    dataBitsWriter.write(predefinedBlockDataBits[counter++]);
-                }
-            }
-
-            if (!obfuscate[dataBits]) {
-                next[15][x] = true;
-            }
-        }
-
-        //Last block of last line
-        dataBits = dataBitsReader.read();
-
-        if (nextNext[15][15] = !solid[dataBits]) {
-            dataBitsWriter.skip();
-            next[15][14] = true;
-            next[14][15] = true;
-        } else {
-            if (nearbyChunkSections[3] == Chunk.EMPTY_CHUNK_SECTION || !solidGlobal[ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(nearbyChunkSections[3].getType(15, y, 0))] || nearbyChunkSections[1] == Chunk.EMPTY_CHUNK_SECTION || !solidGlobal[ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(nearbyChunkSections[1].getType(0, y, 15))] || current[15][15]) {
-                dataBitsWriter.skip();
-            } else {
-                if (counter >= predefinedBlockDataBits.length) {
-                    counter = 0;
-                }
-
-                dataBitsWriter.write(predefinedBlockDataBits[counter++]);
-            }
-        }
-
-        if (!obfuscate[dataBits]) {
-            next[15][15] = true;
-        }
-
-        return counter;
-    }
-
-    private boolean[] readDataPalette(DataPalette<IBlockData> dataPalette, boolean[] temp, boolean[] global) {
-        if (dataPalette == ChunkSection.GLOBAL_PALETTE) {
-            return global;
-        }
-
-        IBlockData blockData;
-
-        for (int i = 0; (blockData = dataPalette.getObject(i)) != null; i++) {
-            temp[i] = global[ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(blockData)];
-        }
-
-        return temp;
-    }
-
-    @Override
-    public void onBlockChange(World world, BlockPosition blockPosition, IBlockData newBlockData, IBlockData oldBlockData, int flag) {
-        if (oldBlockData != null && solidGlobal[ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(oldBlockData)] && !solidGlobal[ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(newBlockData)] && blockPosition.getY() <= maxBlockYUpdatePosition) {
-            updateNearbyBlocks(world, blockPosition);
-        }
-    }
-
-    @Override
-    public void onPlayerLeftClickBlock(PlayerInteractManager playerInteractManager, BlockPosition blockPosition, EnumDirection enumDirection) {
-        if (blockPosition.getY() <= maxBlockYUpdatePosition) {
-            updateNearbyBlocks(playerInteractManager.world, blockPosition);
-        }
-    }
-
-    private void updateNearbyBlocks(World world, BlockPosition blockPosition) {
-        if (updateRadius >= 2) {
-            BlockPosition temp = blockPosition.west();
-            updateBlock(world, temp);
-            updateBlock(world, temp.west());
-            updateBlock(world, temp.down());
-            updateBlock(world, temp.up());
-            updateBlock(world, temp.north());
-            updateBlock(world, temp.south());
-            updateBlock(world, temp = blockPosition.east());
-            updateBlock(world, temp.east());
-            updateBlock(world, temp.down());
-            updateBlock(world, temp.up());
-            updateBlock(world, temp.north());
-            updateBlock(world, temp.south());
-            updateBlock(world, temp = blockPosition.down());
-            updateBlock(world, temp.down());
-            updateBlock(world, temp.north());
-            updateBlock(world, temp.south());
-            updateBlock(world, temp = blockPosition.up());
-            updateBlock(world, temp.up());
-            updateBlock(world, temp.north());
-            updateBlock(world, temp.south());
-            updateBlock(world, temp = blockPosition.north());
-            updateBlock(world, temp.north());
-            updateBlock(world, temp = blockPosition.south());
-            updateBlock(world, temp.south());
-        } else if (updateRadius == 1) {
-            updateBlock(world, blockPosition.west());
-            updateBlock(world, blockPosition.east());
-            updateBlock(world, blockPosition.down());
-            updateBlock(world, blockPosition.up());
-            updateBlock(world, blockPosition.north());
-            updateBlock(world, blockPosition.south());
-        } else {
-            //Do nothing if updateRadius <= 0 (test mode)
-        }
-    }
-
-    private void updateBlock(World world, BlockPosition blockPosition) {
-        IBlockData blockData = world.getTypeIfLoaded(blockPosition);
-
-        if (blockData != null && obfuscateGlobal[ChunkSection.GLOBAL_PALETTE.getOrCreateIdFor(blockData)]) {
-            //world.notify(blockPosition, blockData, blockData, 3);
-            ((WorldServer)world).getChunkProvider().flagDirty(blockPosition); // We only need to re-send to client
-        }
-    }
-
-    public enum EngineMode {
-
-        HIDE(1, "hide ores"),
-        OBFUSCATE(2, "obfuscate");
-
-        private final int id;
-        private final String description;
-
-        EngineMode(int id, String description) {
-            this.id = id;
-            this.description = description;
-        }
-
-        public static EngineMode getById(int id) {
-            for (EngineMode engineMode : values()) {
-                if (engineMode.id == id) {
-                    return engineMode;
-                }
-            }
-
-            return null;
-        }
-
-        public int getId() {
-            return id;
-        }
-
-        public String getDescription() {
-            return description;
-        }
-    }
-
-    public enum ChunkEdgeMode {
-
-        DEFAULT(1, "default"),
-        WAIT(2, "wait until nearby chunks are loaded"),
-        LOAD(3, "load nearby chunks");
-
-        private final int id;
-        private final String description;
-
-        ChunkEdgeMode(int id, String description) {
-            this.id = id;
-            this.description = description;
-        }
-
-        public static ChunkEdgeMode getById(int id) {
-            for (ChunkEdgeMode chunkEdgeMode : values()) {
-                if (chunkEdgeMode.id == id) {
-                    return chunkEdgeMode;
-                }
-            }
-
-            return null;
-        }
-
-        public int getId() {
-            return id;
-        }
-
-        public String getDescription() {
-            return description;
-        }
-    }
-}
diff --git a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfo.java b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfo.java
deleted file mode 100644
index a68bace3..00000000
--- a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfo.java
+++ /dev/null
@@ -1,81 +0,0 @@
-package com.destroystokyo.paper.antixray;
-
-import net.minecraft.server.Chunk;
-import net.minecraft.server.DataPalette;
-import net.minecraft.server.PacketPlayOutMapChunk;
-
-public class ChunkPacketInfo<T> {
-
-    private final PacketPlayOutMapChunk packetPlayOutMapChunk;
-    private final Chunk chunk;
-    private final int chunkSectionSelector;
-    private byte[] data;
-    private final int[] bitsPerObject = new int[16];
-    private final Object[] dataPalettes = new Object[16];
-    private final int[] dataBitsIndexes = new int[16];
-    private final Object[][] predefinedObjects = new Object[16][];
-
-    public ChunkPacketInfo(PacketPlayOutMapChunk packetPlayOutMapChunk, Chunk chunk, int chunkSectionSelector) {
-        this.packetPlayOutMapChunk = packetPlayOutMapChunk;
-        this.chunk = chunk;
-        this.chunkSectionSelector = chunkSectionSelector;
-    }
-
-    public PacketPlayOutMapChunk getPacketPlayOutMapChunk() {
-        return packetPlayOutMapChunk;
-    }
-
-    public Chunk getChunk() {
-        return chunk;
-    }
-
-    public int getChunkSectionSelector() {
-        return chunkSectionSelector;
-    }
-
-    public byte[] getData() {
-        return data;
-    }
-
-    public void setData(byte[] data) {
-        this.data = data;
-    }
-
-    public int getBitsPerObject(int chunkSectionIndex) {
-        return bitsPerObject[chunkSectionIndex];
-    }
-
-    public void setBitsPerObject(int chunkSectionIndex, int bitsPerObject) {
-        this.bitsPerObject[chunkSectionIndex] = bitsPerObject;
-    }
-
-    @SuppressWarnings("unchecked")
-    public DataPalette<T> getDataPalette(int chunkSectionIndex) {
-        return (DataPalette<T>) dataPalettes[chunkSectionIndex];
-    }
-
-    public void setDataPalette(int chunkSectionIndex, DataPalette<T> dataPalette) {
-        dataPalettes[chunkSectionIndex] = dataPalette;
-    }
-
-    public int getOrCreateIdForIndex(int chunkSectionIndex) {
-        return dataBitsIndexes[chunkSectionIndex];
-    }
-
-    public void setDataBitsIndex(int chunkSectionIndex, int dataBitsIndex) {
-        dataBitsIndexes[chunkSectionIndex] = dataBitsIndex;
-    }
-
-    @SuppressWarnings("unchecked")
-    public T[] getPredefinedObjects(int chunkSectionIndex) {
-        return (T[]) predefinedObjects[chunkSectionIndex];
-    }
-
-    public void setPredefinedObjects(int chunkSectionIndex, T[] predefinedObjects) {
-        this.predefinedObjects[chunkSectionIndex] = predefinedObjects;
-    }
-
-    public boolean isWritten(int chunkSectionIndex) {
-        return bitsPerObject[chunkSectionIndex] != 0;
-    }
-}
diff --git a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfoAntiXray.java b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfoAntiXray.java
deleted file mode 100644
index 067dfb2f..00000000
--- a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfoAntiXray.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package com.destroystokyo.paper.antixray;
-
-import net.minecraft.server.Chunk;
-import net.minecraft.server.IBlockData;
-import net.minecraft.server.PacketPlayOutMapChunk;
-
-public class ChunkPacketInfoAntiXray extends ChunkPacketInfo<IBlockData> implements Runnable {
-
-    private Chunk[] nearbyChunks;
-    private final ChunkPacketBlockControllerAntiXray chunkPacketBlockControllerAntiXray;
-    public Integer ticketHold;
-
-    public ChunkPacketInfoAntiXray(PacketPlayOutMapChunk packetPlayOutMapChunk, Chunk chunk, int chunkSectionSelector,
-                                   ChunkPacketBlockControllerAntiXray chunkPacketBlockControllerAntiXray) {
-        super(packetPlayOutMapChunk, chunk, chunkSectionSelector);
-        this.chunkPacketBlockControllerAntiXray = chunkPacketBlockControllerAntiXray;
-    }
-
-    public Chunk[] getNearbyChunks() {
-        return nearbyChunks;
-    }
-
-    public void setNearbyChunks(Chunk... nearbyChunks) {
-        this.nearbyChunks = nearbyChunks;
-    }
-
-    @Override
-    public void run() {
-        chunkPacketBlockControllerAntiXray.obfuscate(this);
-    }
-}
diff --git a/src/main/java/com/destroystokyo/paper/antixray/DataBitsReader.java b/src/main/java/com/destroystokyo/paper/antixray/DataBitsReader.java
deleted file mode 100644
index cc586827..00000000
--- a/src/main/java/com/destroystokyo/paper/antixray/DataBitsReader.java
+++ /dev/null
@@ -1,56 +0,0 @@
-package com.destroystokyo.paper.antixray;
-
-public class DataBitsReader {
-
-    private byte[] dataBits;
-    private int bitsPerObject;
-    private int mask;
-    private int longInDataBitsIndex;
-    private int bitInLongIndex;
-    private long current;
-
-    public void setDataBits(byte[] dataBits) {
-        this.dataBits = dataBits;
-    }
-
-    public void setBitsPerObject(int bitsPerObject) {
-        this.bitsPerObject = bitsPerObject;
-        mask = (1 << bitsPerObject) - 1;
-    }
-
-    public void setIndex(int index) {
-        this.longInDataBitsIndex = index;
-        bitInLongIndex = 0;
-        init();
-    }
-
-    private void init() {
-        if (dataBits.length > longInDataBitsIndex + 7) {
-            current = ((((long) dataBits[longInDataBitsIndex]) << 56)
-                    | (((long) dataBits[longInDataBitsIndex + 1] & 0xff) << 48)
-                    | (((long) dataBits[longInDataBitsIndex + 2] & 0xff) << 40)
-                    | (((long) dataBits[longInDataBitsIndex + 3] & 0xff) << 32)
-                    | (((long) dataBits[longInDataBitsIndex + 4] & 0xff) << 24)
-                    | (((long) dataBits[longInDataBitsIndex + 5] & 0xff) << 16)
-                    | (((long) dataBits[longInDataBitsIndex + 6] & 0xff) << 8)
-                    | (((long) dataBits[longInDataBitsIndex + 7] & 0xff)));
-        }
-    }
-
-    public int read() {
-        int value = (int) (current >>> bitInLongIndex) & mask;
-        bitInLongIndex += bitsPerObject;
-
-        if (bitInLongIndex > 63) {
-            bitInLongIndex -= 64;
-            longInDataBitsIndex += 8;
-            init();
-
-            if (bitInLongIndex > 0) {
-                value |= current << bitsPerObject - bitInLongIndex & mask;
-            }
-        }
-
-        return value;
-    }
-}
diff --git a/src/main/java/com/destroystokyo/paper/antixray/DataBitsWriter.java b/src/main/java/com/destroystokyo/paper/antixray/DataBitsWriter.java
deleted file mode 100644
index 37093419..00000000
--- a/src/main/java/com/destroystokyo/paper/antixray/DataBitsWriter.java
+++ /dev/null
@@ -1,84 +0,0 @@
-package com.destroystokyo.paper.antixray;
-
-public class DataBitsWriter {
-
-    private byte[] dataBits;
-    private int bitsPerObject;
-    private long mask;
-    private int longInDataBitsIndex;
-    private int bitInLongIndex;
-    private long current;
-    private boolean dirty;
-
-    public void setDataBits(byte[] dataBits) {
-        this.dataBits = dataBits;
-    }
-
-    public void setBitsPerObject(int bitsPerObject) {
-        this.bitsPerObject = bitsPerObject;
-        mask = (1 << bitsPerObject) - 1;
-    }
-
-    public void setIndex(int index) {
-        this.longInDataBitsIndex = index;
-        bitInLongIndex = 0;
-        init();
-    }
-
-    private void init() {
-        if (dataBits.length > longInDataBitsIndex + 7) {
-            current = ((((long) dataBits[longInDataBitsIndex]) << 56)
-                    | (((long) dataBits[longInDataBitsIndex + 1] & 0xff) << 48)
-                    | (((long) dataBits[longInDataBitsIndex + 2] & 0xff) << 40)
-                    | (((long) dataBits[longInDataBitsIndex + 3] & 0xff) << 32)
-                    | (((long) dataBits[longInDataBitsIndex + 4] & 0xff) << 24)
-                    | (((long) dataBits[longInDataBitsIndex + 5] & 0xff) << 16)
-                    | (((long) dataBits[longInDataBitsIndex + 6] & 0xff) << 8)
-                    | (((long) dataBits[longInDataBitsIndex + 7] & 0xff)));
-        }
-
-        dirty = false;
-    }
-
-    public void finish() {
-        if (dirty && dataBits.length > longInDataBitsIndex + 7) {
-            dataBits[longInDataBitsIndex] = (byte) (current >> 56 & 0xff);
-            dataBits[longInDataBitsIndex + 1] = (byte) (current >> 48 & 0xff);
-            dataBits[longInDataBitsIndex + 2] = (byte) (current >> 40 & 0xff);
-            dataBits[longInDataBitsIndex + 3] = (byte) (current >> 32 & 0xff);
-            dataBits[longInDataBitsIndex + 4] = (byte) (current >> 24 & 0xff);
-            dataBits[longInDataBitsIndex + 5] = (byte) (current >> 16 & 0xff);
-            dataBits[longInDataBitsIndex + 6] = (byte) (current >> 8 & 0xff);
-            dataBits[longInDataBitsIndex + 7] = (byte) (current & 0xff);
-        }
-    }
-
-    public void write(int value) {
-        current = current & ~(mask << bitInLongIndex) | (value & mask) << bitInLongIndex;
-        dirty = true;
-        bitInLongIndex += bitsPerObject;
-
-        if (bitInLongIndex > 63) {
-            finish();
-            bitInLongIndex -= 64;
-            longInDataBitsIndex += 8;
-            init();
-
-            if (bitInLongIndex > 0) {
-                current = current & ~(mask >>> bitsPerObject - bitInLongIndex) | (value & mask) >>> bitsPerObject - bitInLongIndex;
-                dirty = true;
-            }
-        }
-    }
-
-    public void skip() {
-        bitInLongIndex += bitsPerObject;
-
-        if (bitInLongIndex > 63) {
-            finish();
-            bitInLongIndex -= 64;
-            longInDataBitsIndex += 8;
-            init();
-        }
-    }
-}
diff --git a/src/main/java/com/destroystokyo/paper/log/LogFullPolicy.java b/src/main/java/com/destroystokyo/paper/log/LogFullPolicy.java
deleted file mode 100644
index db652a1f..00000000
--- a/src/main/java/com/destroystokyo/paper/log/LogFullPolicy.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package com.destroystokyo.paper.log;
-
-import org.apache.logging.log4j.Level;
-import org.apache.logging.log4j.core.async.AsyncQueueFullPolicy;
-import org.apache.logging.log4j.core.async.EventRoute;
-
-public final class LogFullPolicy implements AsyncQueueFullPolicy {
-
-    /*
-     * Prevents log calls being logged out of order when the log queue is full.
-     */
-
-    @Override
-    public EventRoute getRoute(final long backgroundThreadId, final Level level) {
-        return EventRoute.ENQUEUE;
-    }
-}
diff --git a/src/main/java/com/destroystokyo/paper/util/ReentrantLockWithGetOwner.java b/src/main/java/com/destroystokyo/paper/util/ReentrantLockWithGetOwner.java
deleted file mode 100644
index a3b17461..00000000
--- a/src/main/java/com/destroystokyo/paper/util/ReentrantLockWithGetOwner.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package com.destroystokyo.paper.util;
-
-import java.util.concurrent.locks.ReentrantLock;
-
-public class ReentrantLockWithGetOwner extends ReentrantLock {
-
-    @Override
-    public Thread getOwner() {
-        return super.getOwner();
-    }
-}
diff --git a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
index b7f1f39a..a284a940 100644
--- a/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
+++ b/src/main/java/net/minecraft/server/AdvancementDataPlayer.java
@@ -83,7 +83,7 @@ public class AdvancementDataPlayer {
     }
 
     private void d() {
-        Iterator iterator = this.d.getAdvancementData().a().iterator();
+        Iterator iterator = this.d.getAdvancementData().b().iterator();
 
         while (iterator.hasNext()) {
             Advancement advancement = (Advancement) iterator.next();
@@ -117,7 +117,7 @@ public class AdvancementDataPlayer {
     }
 
     private void f() {
-        Iterator iterator = this.d.getAdvancementData().a().iterator();
+        Iterator iterator = this.d.getAdvancementData().b().iterator();
 
         while (iterator.hasNext()) {
             Advancement advancement = (Advancement) iterator.next();
@@ -144,7 +144,7 @@ public class AdvancementDataPlayer {
                         dynamic = dynamic.set("DataVersion", dynamic.createInt(1343));
                     }
 
-                    dynamic = this.d.aB().update(DataFixTypes.ADVANCEMENTS.a(), dynamic, dynamic.get("DataVersion").asInt(0), SharedConstants.a().getWorldVersion());
+                    dynamic = this.d.aA().update(DataFixTypes.ADVANCEMENTS.a(), dynamic, dynamic.get("DataVersion").asInt(0), SharedConstants.a().getWorldVersion());
                     dynamic = dynamic.remove("DataVersion");
                     Map<MinecraftKey, AdvancementProgress> map = (Map) AdvancementDataPlayer.b.getAdapter(AdvancementDataPlayer.c).fromJsonTree((JsonElement) dynamic.getValue());
 
@@ -161,7 +161,7 @@ public class AdvancementDataPlayer {
 
                         if (advancement == null) {
                             // CraftBukkit start
-                            if (entry.getKey().getNamespace().equals("minecraft")) {
+                            if (entry.getKey().b().equals("minecraft")) {
                                 AdvancementDataPlayer.LOGGER.warn("Ignored advancement '{}' in progress file {} - it doesn't exist anymore?", entry.getKey(), this.e);
                             }
                             // CraftBukkit end
@@ -288,7 +288,7 @@ public class AdvancementDataPlayer {
             if (!flag1 && advancementprogress.isDone()) {
                 this.player.world.getServer().getPluginManager().callEvent(new org.bukkit.event.player.PlayerAdvancementDoneEvent(this.player.getBukkitEntity(), advancement.bukkit)); // CraftBukkit
                 advancement.d().a(this.player);
-                if (advancement.c() != null && advancement.c().i() && this.player.world.getGameRules().getBoolean(GameRules.ANNOUNCE_ADVANCEMENTS)) {
+                if (advancement.c() != null && advancement.c().i() && this.player.world.getGameRules().getBoolean("announceAdvancements")) {
                     this.d.getPlayerList().sendMessage(new ChatMessage("chat.type.advancement." + advancement.c().e().a(), new Object[]{this.player.getScoreboardDisplayName(), advancement.j()}));
                 }
             }
diff --git a/src/main/java/net/minecraft/server/AdvancementDataWorld.java b/src/main/java/net/minecraft/server/AdvancementDataWorld.java
index 54f6331e..09f7a84f 100644
--- a/src/main/java/net/minecraft/server/AdvancementDataWorld.java
+++ b/src/main/java/net/minecraft/server/AdvancementDataWorld.java
@@ -7,15 +7,18 @@ import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParseException;
+import java.io.IOException;
 import java.lang.reflect.Type;
+import java.nio.charset.StandardCharsets;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.Map;
 import javax.annotation.Nullable;
+import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class AdvancementDataWorld extends ResourceDataJson {
+public class AdvancementDataWorld implements IResourcePackListener {
 
     private static final Logger LOGGER = LogManager.getLogger();
     public static final Gson DESERIALIZER = (new GsonBuilder()).registerTypeHierarchyAdapter(Advancement.SerializedAdvancement.class, (com.google.gson.JsonDeserializer) (jsonelement, type, jsondeserializationcontext) -> {
@@ -23,35 +26,87 @@ public class AdvancementDataWorld extends ResourceDataJson {
 
         return Advancement.SerializedAdvancement.a(jsonobject, jsondeserializationcontext);
     }).registerTypeAdapter(AdvancementRewards.class, new AdvancementRewards.b()).registerTypeHierarchyAdapter(IChatBaseComponent.class, new IChatBaseComponent.ChatSerializer()).registerTypeHierarchyAdapter(ChatModifier.class, new ChatModifier.ChatModifierSerializer()).registerTypeAdapterFactory(new ChatTypeAdapterFactory()).create();
-    public Advancements REGISTRY = new Advancements();
+    public static final Advancements REGISTRY = new Advancements();
+    public static final int a = "advancements/".length();
+    public static final int b = ".json".length();
+    private boolean f;
 
-    public AdvancementDataWorld() {
-        super(AdvancementDataWorld.DESERIALIZER, "advancements");
-    }
+    public AdvancementDataWorld() {}
 
-    protected void a(Map<MinecraftKey, JsonObject> map, IResourceManager iresourcemanager, GameProfilerFiller gameprofilerfiller) {
-        Map<MinecraftKey, Advancement.SerializedAdvancement> map1 = Maps.newHashMap();
+    private Map<MinecraftKey, Advancement.SerializedAdvancement> b(IResourceManager iresourcemanager) {
+        Map<MinecraftKey, Advancement.SerializedAdvancement> map = Maps.newHashMap();
+        Iterator iterator = iresourcemanager.a("advancements", (s) -> {
+            return s.endsWith(".json");
+        }).iterator();
 
-        map.forEach((minecraftkey, jsonobject) -> {
-            // Spigot start
-            if (org.spigotmc.SpigotConfig.disabledAdvancements != null && (org.spigotmc.SpigotConfig.disabledAdvancements.contains("*") || org.spigotmc.SpigotConfig.disabledAdvancements.contains(minecraftkey.toString()))) {
-                return;
-            }
-            // Spigot end
+        while (iterator.hasNext()) {
+            MinecraftKey minecraftkey = (MinecraftKey) iterator.next();
+            String s = minecraftkey.getKey();
+            MinecraftKey minecraftkey1 = new MinecraftKey(minecraftkey.b(), s.substring(AdvancementDataWorld.a, s.length() - AdvancementDataWorld.b));
 
             try {
-                Advancement.SerializedAdvancement advancement_serializedadvancement = (Advancement.SerializedAdvancement) AdvancementDataWorld.DESERIALIZER.fromJson(jsonobject, Advancement.SerializedAdvancement.class);
-
-                map1.put(minecraftkey, advancement_serializedadvancement);
-            } catch (IllegalArgumentException | JsonParseException jsonparseexception) {
-                AdvancementDataWorld.LOGGER.error("Parsing error loading custom advancement {}: {}", minecraftkey, jsonparseexception.getMessage());
+                IResource iresource = iresourcemanager.a(minecraftkey);
+                Throwable throwable = null;
+                // Spigot start
+                if (org.spigotmc.SpigotConfig.disabledAdvancements != null && (org.spigotmc.SpigotConfig.disabledAdvancements.contains("*") || org.spigotmc.SpigotConfig.disabledAdvancements.contains(minecraftkey.toString()))) {
+                    continue;
+                }
+                // Spigot end
+
+                try {
+                    Advancement.SerializedAdvancement advancement_serializedadvancement = (Advancement.SerializedAdvancement) ChatDeserializer.a(AdvancementDataWorld.DESERIALIZER, IOUtils.toString(iresource.b(), StandardCharsets.UTF_8), Advancement.SerializedAdvancement.class);
+
+                    if (advancement_serializedadvancement == null) {
+                        AdvancementDataWorld.LOGGER.error("Couldn't load custom advancement {} from {} as it's empty or null", minecraftkey1, minecraftkey);
+                    } else {
+                        map.put(minecraftkey1, advancement_serializedadvancement);
+                    }
+                } catch (Throwable throwable1) {
+                    throwable = throwable1;
+                    throw throwable1;
+                } finally {
+                    if (iresource != null) {
+                        if (throwable != null) {
+                            try {
+                                iresource.close();
+                            } catch (Throwable throwable2) {
+                                throwable.addSuppressed(throwable2);
+                            }
+                        } else {
+                            iresource.close();
+                        }
+                    }
+
+                }
+            } catch (IllegalArgumentException | ResourceKeyInvalidException | JsonParseException jsonparseexception) {
+                AdvancementDataWorld.LOGGER.error("Parsing error loading custom advancement {}: {}", minecraftkey1, jsonparseexception.getMessage());
+                this.f = true;
+            } catch (IOException ioexception) {
+                AdvancementDataWorld.LOGGER.error("Couldn't read custom advancement {} from {}", minecraftkey1, minecraftkey, ioexception);
+                this.f = true;
             }
+        }
 
-        });
-        Advancements advancements = new Advancements();
+        return map;
+    }
 
-        advancements.a((Map) map1);
-        Iterator iterator = advancements.b().iterator();
+    @Nullable
+    public Advancement a(MinecraftKey minecraftkey) {
+        return AdvancementDataWorld.REGISTRY.a(minecraftkey);
+    }
+
+    public Collection<Advancement> b() {
+        return AdvancementDataWorld.REGISTRY.c();
+    }
+
+    @Override
+    public void a(IResourceManager iresourcemanager) {
+        this.f = false;
+        AdvancementDataWorld.REGISTRY.a();
+        Map<MinecraftKey, Advancement.SerializedAdvancement> map = this.b(iresourcemanager);
+
+        AdvancementDataWorld.REGISTRY.a(map);
+        Iterator iterator = AdvancementDataWorld.REGISTRY.b().iterator();
 
         while (iterator.hasNext()) {
             Advancement advancement = (Advancement) iterator.next();
@@ -61,15 +116,5 @@ public class AdvancementDataWorld extends ResourceDataJson {
             }
         }
 
-        this.REGISTRY = advancements;
-    }
-
-    @Nullable
-    public Advancement a(MinecraftKey minecraftkey) {
-        return this.REGISTRY.a(minecraftkey);
-    }
-
-    public Collection<Advancement> a() {
-        return this.REGISTRY.c();
     }
 }
diff --git a/src/main/java/net/minecraft/server/Advancements.java b/src/main/java/net/minecraft/server/Advancements.java
index bc043ad4..11c6f1e1 100644
--- a/src/main/java/net/minecraft/server/Advancements.java
+++ b/src/main/java/net/minecraft/server/Advancements.java
@@ -75,6 +75,16 @@ public class Advancements {
         // Advancements.LOGGER.info("Loaded {} advancements", this.advancements.size()); // CraftBukkit - moved to AdvancementDataWorld#reload
     }
 
+    public void a() {
+        this.advancements.clear();
+        this.c.clear();
+        this.d.clear();
+        if (this.e != null) {
+            this.e.a();
+        }
+
+    }
+
     public Iterable<Advancement> b() {
         return this.c;
     }
@@ -93,5 +103,7 @@ public class Advancements {
         void a(Advancement advancement);
 
         void c(Advancement advancement);
+
+        void a();
     }
 }
diff --git a/src/main/java/net/minecraft/server/ArgumentBlock.java b/src/main/java/net/minecraft/server/ArgumentBlock.java
index 97d85f84..1c9edeb3 100644
--- a/src/main/java/net/minecraft/server/ArgumentBlock.java
+++ b/src/main/java/net/minecraft/server/ArgumentBlock.java
@@ -216,7 +216,7 @@ public class ArgumentBlock {
     }
 
     private static <T extends Comparable<T>> SuggestionsBuilder a(SuggestionsBuilder suggestionsbuilder, IBlockState<T> iblockstate) {
-        Iterator iterator = iblockstate.getValues().iterator();
+        Iterator iterator = iblockstate.d().iterator();
 
         while (iterator.hasNext()) {
             T t0 = (T) iterator.next(); // CraftBukkit - decompile error
diff --git a/src/main/java/net/minecraft/server/AttributeInstance.java b/src/main/java/net/minecraft/server/AttributeInstance.java
new file mode 100644
index 00000000..b1900ba3
--- /dev/null
+++ b/src/main/java/net/minecraft/server/AttributeInstance.java
@@ -0,0 +1,33 @@
+package net.minecraft.server;
+
+import java.util.Collection;
+import java.util.UUID;
+import javax.annotation.Nullable;
+
+public interface AttributeInstance {
+
+    IAttribute getAttribute();
+
+    double b();
+
+    void setValue(double d0);
+
+    Collection<AttributeModifier> a(AttributeModifier.Operation attributemodifier_operation);
+
+    Collection<AttributeModifier> c();
+
+    boolean a(AttributeModifier attributemodifier);
+
+    @Nullable
+    AttributeModifier a(UUID uuid);
+
+    default void addModifier(AttributeModifier modifier) { b(modifier); } // Paper - OBFHELPER
+    void b(AttributeModifier attributemodifier);
+
+    default void removeModifier(AttributeModifier modifier) { c(modifier); } // Paper - OBFHELPER
+    void c(AttributeModifier attributemodifier);
+
+    void b(UUID uuid);
+
+    double getValue();
+}
diff --git a/src/main/java/net/minecraft/server/BehaviorFarm.java b/src/main/java/net/minecraft/server/BehaviorFarm.java
index 0b7fa508..373ea3cb 100644
--- a/src/main/java/net/minecraft/server/BehaviorFarm.java
+++ b/src/main/java/net/minecraft/server/BehaviorFarm.java
@@ -1,8 +1,11 @@
 package net.minecraft.server;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.Lists;
 import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
 import javax.annotation.Nullable;
 
 public class BehaviorFarm extends Behavior<EntityVillager> {
@@ -13,68 +16,43 @@ public class BehaviorFarm extends Behavior<EntityVillager> {
     private boolean c;
     private long d;
     private int e;
-    private final List<BlockPosition> f = Lists.newArrayList();
 
     public BehaviorFarm() {
         super(ImmutableMap.of(MemoryModuleType.LOOK_TARGET, MemoryStatus.VALUE_ABSENT, MemoryModuleType.WALK_TARGET, MemoryStatus.VALUE_ABSENT, MemoryModuleType.SECONDARY_JOB_SITE, MemoryStatus.VALUE_PRESENT));
     }
 
     protected boolean a(WorldServer worldserver, EntityVillager entityvillager) {
-        if (!worldserver.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) {
+        if (!worldserver.getGameRules().getBoolean("mobGriefing")) {
             return false;
         } else if (entityvillager.getVillagerData().getProfession() != VillagerProfession.FARMER) {
             return false;
         } else {
-            this.b = entityvillager.er();
-            this.c = false;
-            InventorySubcontainer inventorysubcontainer = entityvillager.getInventory();
-            int i = inventorysubcontainer.getSize();
-
-            for (int j = 0; j < i; ++j) {
-                ItemStack itemstack = inventorysubcontainer.getItem(j);
-
-                if (itemstack.isEmpty()) {
-                    this.c = true;
-                    break;
-                }
-
-                if (itemstack.getItem() == Items.WHEAT_SEEDS || itemstack.getItem() == Items.BEETROOT_SEEDS) {
-                    this.c = true;
-                    break;
-                }
+            Set<BlockPosition> set = (Set) (entityvillager.getBehaviorController().getMemory(MemoryModuleType.SECONDARY_JOB_SITE).get()).stream().map(GlobalPos::getBlockPosition).collect(Collectors.toSet()); // CraftBukkit - decompile error
+            BlockPosition blockposition = new BlockPosition(entityvillager);
+            Stream stream = ImmutableList.of(blockposition.down(), blockposition.south(), blockposition.north(), blockposition.east(), blockposition.west()).stream();
+
+            set.getClass();
+            List<BlockPosition> list = (List) stream.filter(set::contains).collect(Collectors.toList());
+
+            this.b = entityvillager.ep();
+            this.c = entityvillager.eo();
+            List<BlockPosition> list1 = (List) list.stream().map(BlockPosition::up).filter((blockposition1) -> {
+                return this.a(worldserver.getType(blockposition1));
+            }).collect(Collectors.toList());
+
+            if (!list1.isEmpty()) {
+                this.a = (BlockPosition) list1.get(worldserver.getRandom().nextInt(list1.size()));
+                return true;
+            } else {
+                return false;
             }
-
-            BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition(entityvillager.locX, entityvillager.locY, entityvillager.locZ);
-
-            this.f.clear();
-
-            for (int k = -1; k <= 1; ++k) {
-                for (int l = -1; l <= 1; ++l) {
-                    for (int i1 = -1; i1 <= 1; ++i1) {
-                        blockposition_mutableblockposition.c(entityvillager.locX + (double) k, entityvillager.locY + (double) l, entityvillager.locZ + (double) i1);
-                        if (this.a((BlockPosition) blockposition_mutableblockposition, worldserver)) {
-                            this.f.add(new BlockPosition(blockposition_mutableblockposition));
-                        }
-                    }
-                }
-            }
-
-            this.a = this.a(worldserver);
-            return (this.b || this.c) && this.a != null;
         }
     }
 
-    @Nullable
-    private BlockPosition a(WorldServer worldserver) {
-        return this.f.isEmpty() ? null : (BlockPosition) this.f.get(worldserver.getRandom().nextInt(this.f.size()));
-    }
-
-    private boolean a(BlockPosition blockposition, WorldServer worldserver) {
-        IBlockData iblockdata = worldserver.getType(blockposition);
+    private boolean a(IBlockData iblockdata) {
         Block block = iblockdata.getBlock();
-        Block block1 = worldserver.getType(blockposition.down()).getBlock();
 
-        return block instanceof BlockCrops && ((BlockCrops) block).isRipe(iblockdata) && this.c || iblockdata.isAir() && block1 instanceof BlockSoil && this.b;
+        return block instanceof BlockCrops && ((BlockCrops) block).isRipe(iblockdata) && this.c || iblockdata.isAir() && this.b;
     }
 
     protected void a(WorldServer worldserver, EntityVillager entityvillager, long i) {
@@ -93,10 +71,9 @@ public class BehaviorFarm extends Behavior<EntityVillager> {
     }
 
     protected void d(WorldServer worldserver, EntityVillager entityvillager, long i) {
-        if (this.a != null && i > this.d) {
+        if (this.e > 15 && this.a != null && i > this.d) {
             IBlockData iblockdata = worldserver.getType(this.a);
             Block block = iblockdata.getBlock();
-            Block block1 = worldserver.getType(this.a.down()).getBlock();
 
             if (block instanceof BlockCrops && ((BlockCrops) block).isRipe(iblockdata) && this.c) {
                 // CraftBukkit start
@@ -104,9 +81,7 @@ public class BehaviorFarm extends Behavior<EntityVillager> {
                     worldserver.b(this.a, true);
                 }
                 // CraftBukkit end
-            }
-
-            if (iblockdata.isAir() && block1 instanceof BlockSoil && this.b) {
+            } else if (iblockdata.isAir() && this.b) {
                 InventorySubcontainer inventorysubcontainer = entityvillager.getInventory();
 
                 for (int j = 0; j < inventorysubcontainer.getSize(); ++j) {
@@ -139,7 +114,7 @@ public class BehaviorFarm extends Behavior<EntityVillager> {
                     }
 
                     if (flag) {
-                        worldserver.playSound((EntityHuman) null, (double) this.a.getX(), (double) this.a.getY(), (double) this.a.getZ(), SoundEffects.ITEM_CROP_PLANT, SoundCategory.BLOCKS, 1.0F, 1.0F);
+                        worldserver.a((EntityHuman) null, (double) this.a.getX(), (double) this.a.getY(), (double) this.a.getZ(), SoundEffects.ITEM_CROP_PLANT, SoundCategory.BLOCKS, 1.0F, 1.0F);
                         itemstack.subtract(1);
                         if (itemstack.isEmpty()) {
                             inventorysubcontainer.setItem(j, ItemStack.a);
@@ -148,22 +123,12 @@ public class BehaviorFarm extends Behavior<EntityVillager> {
                     }
                 }
             }
-
-            if (block instanceof BlockCrops && !((BlockCrops) block).isRipe(iblockdata)) {
-                this.f.remove(this.a);
-                this.a = this.a(worldserver);
-                if (this.a != null) {
-                    this.d = i + 20L;
-                    entityvillager.getBehaviorController().setMemory(MemoryModuleType.WALK_TARGET, (new MemoryTarget(new BehaviorTarget(this.a), 0.5F, 1))); // CraftBukkit - decompile error
-                    entityvillager.getBehaviorController().setMemory(MemoryModuleType.LOOK_TARGET, (new BehaviorTarget(this.a))); // CraftBukkit - decompile error
-                }
-            }
         }
 
         ++this.e;
     }
 
     protected boolean g(WorldServer worldserver, EntityVillager entityvillager, long i) {
-        return this.e < 200;
+        return this.e < 30;
     }
 }
diff --git a/src/main/java/net/minecraft/server/BehaviorInteractDoor.java b/src/main/java/net/minecraft/server/BehaviorInteractDoor.java
index 01d9c2d9..8cd371ec 100644
--- a/src/main/java/net/minecraft/server/BehaviorInteractDoor.java
+++ b/src/main/java/net/minecraft/server/BehaviorInteractDoor.java
@@ -1,8 +1,6 @@
 package net.minecraft.server;
 
 import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.Sets;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import java.util.stream.Collectors;
@@ -11,7 +9,7 @@ import java.util.stream.Stream;
 public class BehaviorInteractDoor extends Behavior<EntityLiving> {
 
     public BehaviorInteractDoor() {
-        super(ImmutableMap.of(MemoryModuleType.PATH, MemoryStatus.VALUE_PRESENT, MemoryModuleType.INTERACTABLE_DOORS, MemoryStatus.VALUE_PRESENT, MemoryModuleType.OPENED_DOORS, MemoryStatus.REGISTERED));
+        super(ImmutableMap.of(MemoryModuleType.PATH, MemoryStatus.VALUE_PRESENT, MemoryModuleType.INTERACTABLE_DOORS, MemoryStatus.VALUE_PRESENT));
     }
 
     @Override
@@ -25,7 +23,7 @@ public class BehaviorInteractDoor extends Behavior<EntityLiving> {
         Set<BlockPosition> set = this.a(worldserver, list, list1);
         int j = pathentity.f() - 1;
 
-        this.a(worldserver, list1, set, j, entityliving, behaviorcontroller);
+        this.a(worldserver, list1, set, j, entityliving); // CraftBukkit - add entity
     }
 
     private Set<BlockPosition> a(WorldServer worldserver, List<GlobalPos> list, List<BlockPosition> list1) {
@@ -37,15 +35,13 @@ public class BehaviorInteractDoor extends Behavior<EntityLiving> {
         return (Set) stream.filter(list1::contains).collect(Collectors.toSet());
     }
 
-    private void a(WorldServer worldserver, List<BlockPosition> list, Set<BlockPosition> set, int i, EntityLiving entityliving, BehaviorController<?> behaviorcontroller) {
+    private void a(WorldServer worldserver, List<BlockPosition> list, Set<BlockPosition> set, int i, EntityLiving entityliving) { // CraftBukkit - add entity
         set.forEach((blockposition) -> {
             int j = list.indexOf(blockposition);
             IBlockData iblockdata = worldserver.getType(blockposition);
             Block block = iblockdata.getBlock();
 
             if (TagsBlock.WOODEN_DOORS.isTagged(block) && block instanceof BlockDoor) {
-                boolean flag = j >= i;
-
                 // CraftBukkit start - entities opening doors
                 org.bukkit.event.entity.EntityInteractEvent event = new org.bukkit.event.entity.EntityInteractEvent(entityliving.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(entityliving.world, blockposition));
                 entityliving.world.getServer().getPluginManager().callEvent(event);
@@ -53,47 +49,7 @@ public class BehaviorInteractDoor extends Behavior<EntityLiving> {
                     return;
                 }
                 // CaftBukkit end
-                ((BlockDoor) block).setDoor(worldserver, blockposition, flag);
-                GlobalPos globalpos = GlobalPos.create(worldserver.getWorldProvider().getDimensionManager(), blockposition);
-
-                if (!behaviorcontroller.getMemory(MemoryModuleType.OPENED_DOORS).isPresent() && flag) {
-                    behaviorcontroller.setMemory(MemoryModuleType.OPENED_DOORS, Sets.newHashSet(new GlobalPos[]{globalpos})); // CraftBukkit - decompile error
-                } else {
-                    behaviorcontroller.getMemory(MemoryModuleType.OPENED_DOORS).ifPresent((set1) -> {
-                        if (flag) {
-                            set1.add(globalpos);
-                        } else {
-                            set1.remove(globalpos);
-                        }
-
-                    });
-                }
-            }
-
-        });
-        a(worldserver, list, i, entityliving, behaviorcontroller);
-    }
-
-    public static void a(WorldServer worldserver, List<BlockPosition> list, int i, EntityLiving entityliving, BehaviorController<?> behaviorcontroller) {
-        behaviorcontroller.getMemory(MemoryModuleType.OPENED_DOORS).ifPresent((set) -> {
-            Iterator iterator = set.iterator();
-
-            while (iterator.hasNext()) {
-                GlobalPos globalpos = (GlobalPos) iterator.next();
-                BlockPosition blockposition = globalpos.getBlockPosition();
-                int j = list.indexOf(blockposition);
-
-                if (worldserver.getWorldProvider().getDimensionManager() != globalpos.getDimensionManager()) {
-                    iterator.remove();
-                } else {
-                    IBlockData iblockdata = worldserver.getType(blockposition);
-                    Block block = iblockdata.getBlock();
-
-                    if (TagsBlock.WOODEN_DOORS.isTagged(block) && block instanceof BlockDoor && j < i && blockposition.a((IPosition) entityliving.getPositionVector(), 4.0D)) {
-                        ((BlockDoor) block).setDoor(worldserver, blockposition, false);
-                        iterator.remove();
-                    }
-                }
+                ((BlockDoor) block).setDoor(worldserver, blockposition, j >= i);
             }
 
         });
diff --git a/src/main/java/net/minecraft/server/BehaviorMakeLove.java b/src/main/java/net/minecraft/server/BehaviorMakeLove.java
index f958c46f..d4dd2f10 100644
--- a/src/main/java/net/minecraft/server/BehaviorMakeLove.java
+++ b/src/main/java/net/minecraft/server/BehaviorMakeLove.java
@@ -36,10 +36,28 @@ public class BehaviorMakeLove extends Behavior<EntityVillager> {
         if (entityvillager.h((Entity) entityvillager1) <= 5.0D) {
             BehaviorUtil.a((EntityLiving) entityvillager, (EntityLiving) entityvillager1);
             if (i >= this.a) {
-                entityvillager.eo();
-                entityvillager1.eo();
-                this.a(worldserver, entityvillager, entityvillager1);
-            } else if (entityvillager.getRandom().nextInt(35) == 0) {
+                Optional<BlockPosition> optional = this.b(worldserver, entityvillager);
+
+                if (!optional.isPresent()) {
+                    worldserver.broadcastEntityEffect(entityvillager1, (byte) 13);
+                    worldserver.broadcastEntityEffect(entityvillager, (byte) 13);
+                    return;
+                }
+
+                entityvillager.em();
+                entityvillager1.em();
+                Optional<EntityVillager> optional1 = this.a(entityvillager, entityvillager1);
+
+                if (optional1.isPresent()) {
+                    entityvillager.s(12);
+                    entityvillager1.s(12);
+                    this.a(worldserver, (EntityVillager) optional1.get(), (BlockPosition) optional.get());
+                } else {
+                    worldserver.B().b((BlockPosition) optional.get());
+                }
+            }
+
+            if (entityvillager.getRandom().nextInt(35) == 0) {
                 worldserver.broadcastEntityEffect(entityvillager1, (byte) 12);
                 worldserver.broadcastEntityEffect(entityvillager, (byte) 12);
             }
@@ -47,24 +65,6 @@ public class BehaviorMakeLove extends Behavior<EntityVillager> {
         }
     }
 
-    private void a(WorldServer worldserver, EntityVillager entityvillager, EntityVillager entityvillager1) {
-        Optional<BlockPosition> optional = this.b(worldserver, entityvillager);
-
-        if (!optional.isPresent()) {
-            worldserver.broadcastEntityEffect(entityvillager1, (byte) 13);
-            worldserver.broadcastEntityEffect(entityvillager, (byte) 13);
-        } else {
-            Optional<EntityVillager> optional1 = this.a(entityvillager, entityvillager1);
-
-            if (optional1.isPresent()) {
-                this.a(worldserver, (EntityVillager) optional1.get(), (BlockPosition) optional.get());
-            } else {
-                worldserver.B().b((BlockPosition) optional.get());
-            }
-        }
-
-    }
-
     protected void f(WorldServer worldserver, EntityVillager entityvillager, long i) {
         entityvillager.getBehaviorController().removeMemory(MemoryModuleType.BREED_TARGET);
     }
@@ -87,16 +87,10 @@ public class BehaviorMakeLove extends Behavior<EntityVillager> {
 
     private Optional<BlockPosition> b(WorldServer worldserver, EntityVillager entityvillager) {
         return worldserver.B().a(VillagePlaceType.q.c(), (blockposition) -> {
-            return this.a(entityvillager, blockposition);
+            return true;
         }, new BlockPosition(entityvillager), 48);
     }
 
-    private boolean a(EntityVillager entityvillager, BlockPosition blockposition) {
-        PathEntity pathentity = entityvillager.getNavigation().a(blockposition, VillagePlaceType.q.d());
-
-        return pathentity != null && pathentity.h();
-    }
-
     private Optional<EntityVillager> a(EntityVillager entityvillager, EntityVillager entityvillager1) {
         EntityVillager entityvillager2 = entityvillager.createChild(entityvillager1);
         // CraftBukkit start - call EntityBreedEvent
diff --git a/src/main/java/net/minecraft/server/BiomeBase.java b/src/main/java/net/minecraft/server/BiomeBase.java
index a86ece83..72eb669c 100644
--- a/src/main/java/net/minecraft/server/BiomeBase.java
+++ b/src/main/java/net/minecraft/server/BiomeBase.java
@@ -3,7 +3,6 @@ package net.minecraft.server;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-import it.unimi.dsi.fastutil.longs.Long2FloatLinkedOpenHashMap;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
@@ -40,16 +39,6 @@ public abstract class BiomeBase {
     protected final List<WorldGenFeatureConfigured<?>> s = Lists.newArrayList();
     protected final Map<StructureGenerator<?>, WorldGenFeatureConfiguration> t = Maps.newHashMap();
     private final java.util.EnumMap<EnumCreatureType, List<BiomeBase.BiomeMeta>> u = Maps.newEnumMap(EnumCreatureType.class); // Paper
-    private final ThreadLocal<Long2FloatLinkedOpenHashMap> v = ThreadLocal.withInitial(() -> {
-        return (Long2FloatLinkedOpenHashMap) SystemUtils.a(() -> {
-            Long2FloatLinkedOpenHashMap long2floatlinkedopenhashmap = new Long2FloatLinkedOpenHashMap(1024, 0.25F) {
-                protected void rehash(int i) {}
-            };
-
-            long2floatlinkedopenhashmap.defaultReturnValue(Float.NaN);
-            return long2floatlinkedopenhashmap;
-        });
-    });
 
     @Nullable
     public static BiomeBase a(BiomeBase biomebase) {
@@ -128,7 +117,7 @@ public abstract class BiomeBase {
         return 0.1F;
     }
 
-    protected float c(BlockPosition blockposition) {
+    public float getAdjustedTemperature(BlockPosition blockposition) {
         if (blockposition.getY() > 64) {
             float f = (float) (BiomeBase.d.a((double) ((float) blockposition.getX() / 8.0F), (double) ((float) blockposition.getZ() / 8.0F)) * 4.0D);
 
@@ -138,25 +127,6 @@ public abstract class BiomeBase {
         }
     }
 
-    public final float getAdjustedTemperature(BlockPosition blockposition) {
-        long i = blockposition.asLong();
-        Long2FloatLinkedOpenHashMap long2floatlinkedopenhashmap = (Long2FloatLinkedOpenHashMap) this.v.get();
-        float f = long2floatlinkedopenhashmap.get(i);
-
-        if (!Float.isNaN(f)) {
-            return f;
-        } else {
-            float f1 = this.c(blockposition);
-
-            if (long2floatlinkedopenhashmap.size() == 1024) {
-                long2floatlinkedopenhashmap.removeFirstFloat();
-            }
-
-            long2floatlinkedopenhashmap.put(i, f1);
-            return f1;
-        }
-    }
-
     public boolean a(IWorldReader iworldreader, BlockPosition blockposition) {
         return this.a(iworldreader, blockposition, true);
     }
@@ -174,7 +144,7 @@ public abstract class BiomeBase {
                         return true;
                     }
 
-                    boolean flag1 = iworldreader.x(blockposition.west()) && iworldreader.x(blockposition.east()) && iworldreader.x(blockposition.north()) && iworldreader.x(blockposition.south());
+                    boolean flag1 = iworldreader.y(blockposition.west()) && iworldreader.y(blockposition.east()) && iworldreader.y(blockposition.north()) && iworldreader.y(blockposition.south());
 
                     if (!flag1) {
                         return true;
@@ -250,18 +220,7 @@ public abstract class BiomeBase {
             WorldGenFeatureConfigured<?> worldgenfeatureconfigured = (WorldGenFeatureConfigured) iterator.next();
 
             seededrandom.b(i, j, worldgenstage_decoration.ordinal());
-
-            try {
-                worldgenfeatureconfigured.a(generatoraccess, chunkgenerator, seededrandom, blockposition);
-            } catch (Exception exception) {
-                CrashReport crashreport = CrashReport.a(exception, "Feature placement");
-                CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Feature").a("Id", (Object) IRegistry.FEATURE.getKey(worldgenfeatureconfigured.a));
-                WorldGenerator worldgenerator = worldgenfeatureconfigured.a;
-
-                worldgenfeatureconfigured.a.getClass();
-                crashreportsystemdetails.a("Description", worldgenerator::toString);
-                throw new ReportedException(crashreport);
-            }
+            worldgenfeatureconfigured.a(generatoraccess, chunkgenerator, seededrandom, blockposition);
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/Block.java b/src/main/java/net/minecraft/server/Block.java
index e077359b..8f809a4e 100644
--- a/src/main/java/net/minecraft/server/Block.java
+++ b/src/main/java/net/minecraft/server/Block.java
@@ -24,7 +24,7 @@ public class Block implements IMaterial {
         }
     });
     private static final VoxelShape c = VoxelShapes.a(VoxelShapes.b(), a(2.0D, 0.0D, 2.0D, 14.0D, 16.0D, 14.0D), OperatorBoolean.ONLY_FIRST);
-    private static final VoxelShape d = a(7.0D, 0.0D, 7.0D, 9.0D, 10.0D, 9.0D);
+    private static final VoxelShape d = a(6.0D, 0.0D, 6.0D, 10.0D, 10.0D, 10.0D);
     protected final int n;
     public final float strength;
     protected final float durability;
@@ -102,7 +102,7 @@ public class Block implements IMaterial {
 
     @Deprecated
     public boolean a(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition, EntityTypes<?> entitytypes) {
-        return iblockdata.d(iblockaccess, blockposition, EnumDirection.UP) && this.n < 14;
+        return d(iblockdata, iblockaccess, blockposition, EnumDirection.UP);
     }
 
     @Deprecated
@@ -240,23 +240,23 @@ public class Block implements IMaterial {
 
     @Deprecated
     public boolean isOccluding(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return iblockdata.getMaterial().f() && iblockdata.o(iblockaccess, blockposition) && !iblockdata.isPowerSource();
+        return iblockdata.getMaterial().f() && a(iblockdata.getCollisionShape(iblockaccess, blockposition)) && !iblockdata.isPowerSource();
     }
 
     @Deprecated
     public boolean c(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return this.material.isSolid() && iblockdata.o(iblockaccess, blockposition);
+        return this.material.isSolid() && a(iblockdata.getCollisionShape(iblockaccess, blockposition));
     }
 
     @Deprecated
     public boolean a(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition, PathMode pathmode) {
         switch (pathmode) {
             case LAND:
-                return !iblockdata.o(iblockaccess, blockposition);
+                return !a(iblockdata.getCollisionShape(iblockaccess, blockposition));
             case WATER:
                 return iblockaccess.getFluid(blockposition).a(TagsFluid.WATER);
             case AIR:
-                return !iblockdata.o(iblockaccess, blockposition);
+                return !a(iblockdata.getCollisionShape(iblockaccess, blockposition));
             default:
                 return false;
         }
@@ -387,12 +387,12 @@ public class Block implements IMaterial {
 
     @Deprecated
     public void onPlace(IBlockData iblockdata, World world, BlockPosition blockposition, IBlockData iblockdata1, boolean flag) {
-        org.spigotmc.AsyncCatcher.catchOp("block onPlace"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp( "block onPlace"); // Spigot
     }
 
     @Deprecated
     public void remove(IBlockData iblockdata, World world, BlockPosition blockposition, IBlockData iblockdata1, boolean flag) {
-        org.spigotmc.AsyncCatcher.catchOp("block remove"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp( "block remove"); // Spigot
         if (this.isTileEntity() && iblockdata.getBlock() != iblockdata1.getBlock()) {
             world.removeTileEntity(blockposition);
         }
@@ -419,7 +419,7 @@ public class Block implements IMaterial {
         if (this.h == null) {
             MinecraftKey minecraftkey = IRegistry.BLOCK.getKey(this);
 
-            this.h = new MinecraftKey(minecraftkey.getNamespace(), "blocks/" + minecraftkey.getKey());
+            this.h = new MinecraftKey(minecraftkey.b(), "blocks/" + minecraftkey.getKey());
         }
 
         return this.h;
@@ -494,7 +494,7 @@ public class Block implements IMaterial {
     }
 
     public static void a(World world, BlockPosition blockposition, ItemStack itemstack) {
-        if (!world.isClientSide && !itemstack.isEmpty() && world.getGameRules().getBoolean(GameRules.DO_TILE_DROPS)) {
+        if (!world.isClientSide && !itemstack.isEmpty() && world.getGameRules().getBoolean("doTileDrops")) {
             float f = 0.5F;
             double d0 = (double) (world.random.nextFloat() * 0.5F) + 0.25D;
             double d1 = (double) (world.random.nextFloat() * 0.5F) + 0.25D;
@@ -513,7 +513,7 @@ public class Block implements IMaterial {
     }
 
     protected void dropExperience(World world, BlockPosition blockposition, int i, EntityPlayer player) { // Paper
-        if (!world.isClientSide && world.getGameRules().getBoolean(GameRules.DO_TILE_DROPS)) {
+        if (!world.isClientSide && world.getGameRules().getBoolean("doTileDrops")) {
             while (i > 0) {
                 int j = EntityExperienceOrb.getOrbValue(i);
 
@@ -580,7 +580,7 @@ public class Block implements IMaterial {
 
     public void postPlace(World world, BlockPosition blockposition, IBlockData iblockdata, @Nullable EntityLiving entityliving, ItemStack itemstack) {}
 
-    public boolean S_() {
+    public boolean T_() {
         return !this.material.isBuildable() && !this.material.isLiquid();
     }
 
@@ -659,13 +659,13 @@ public class Block implements IMaterial {
         return this.blockData;
     }
 
-    public Block.EnumRandomOffset R_() {
+    public Block.EnumRandomOffset S_() {
         return Block.EnumRandomOffset.NONE;
     }
 
     @Deprecated
     public Vec3D l(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        Block.EnumRandomOffset block_enumrandomoffset = this.R_();
+        Block.EnumRandomOffset block_enumrandomoffset = this.S_();
 
         if (block_enumrandomoffset == Block.EnumRandomOffset.NONE) {
             return Vec3D.a;
diff --git a/src/main/java/net/minecraft/server/BlockBamboo.java b/src/main/java/net/minecraft/server/BlockBamboo.java
index ffb65776..8208e803 100644
--- a/src/main/java/net/minecraft/server/BlockBamboo.java
+++ b/src/main/java/net/minecraft/server/BlockBamboo.java
@@ -23,7 +23,7 @@ public class BlockBamboo extends Block implements IBlockFragilePlantElement {
     }
 
     @Override
-    public Block.EnumRandomOffset R_() {
+    public Block.EnumRandomOffset S_() {
         return Block.EnumRandomOffset.XZ;
     }
 
@@ -40,11 +40,6 @@ public class BlockBamboo extends Block implements IBlockFragilePlantElement {
         return voxelshape.a(vec3d.x, vec3d.y, vec3d.z);
     }
 
-    @Override
-    public boolean a(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition, PathMode pathmode) {
-        return false;
-    }
-
     @Override
     public VoxelShape b(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition, VoxelShapeCollision voxelshapecollision) {
         Vec3D vec3d = iblockdata.l(iblockaccess, blockposition);
@@ -85,7 +80,7 @@ public class BlockBamboo extends Block implements IBlockFragilePlantElement {
         if (!iblockdata.canPlace(world, blockposition)) {
             world.b(blockposition, true);
         } else if ((Integer) iblockdata.get(BlockBamboo.f) == 0) {
-            if (world.random.nextInt(Math.max(1, (int) (100.0F / world.spigotConfig.bambooModifier) * 3)) == 0 && world.isEmpty(blockposition.up()) && world.getLightLevel(blockposition.up(), 0) >= 9) { // Spigot
+            if (random.nextInt(3) == 0 && world.isEmpty(blockposition.up()) && world.getLightLevel(blockposition.up(), 0) >= 9) {
                 int i = this.b((IBlockAccess) world, blockposition) + 1;
 
                 if (i < 16) {
diff --git a/src/main/java/net/minecraft/server/BlockBed.java b/src/main/java/net/minecraft/server/BlockBed.java
index b2525e2a..034226d0 100644
--- a/src/main/java/net/minecraft/server/BlockBed.java
+++ b/src/main/java/net/minecraft/server/BlockBed.java
@@ -171,10 +171,58 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
 
     public static Optional<Vec3D> a(EntityTypes<?> entitytypes, IWorldReader iworldreader, BlockPosition blockposition, int i) {
         EnumDirection enumdirection = (EnumDirection) iworldreader.getType(blockposition).get(BlockBed.FACING);
-    // Paper start - configurable bed search radius
-        return findSafePosition(entitytypes, (World) iworldreader, enumdirection, blockposition);
-    }
-        /*
+        // Paper -  configurable bed search radius
+        World world = (World) iworldreader;
+        int radius = world.paperConfig.bedSearchRadius;
+        if (radius > 0) {
+            for (int r = 1; r <= radius; r++) {
+                int x = -r;
+                int z = r;
+
+                // Iterates the edge of half of the box; then negates for other half.
+                while (x <= r && z > -r) {
+                    for (int y = -1; y <= 1; y++) {
+                        BlockPosition pos = blockposition.add(x, y, z);
+                        Optional<Vec3D> vector;
+                        vector = isSafeRespawn(entitytypes, world, pos);
+                        if (vector.isPresent()) {
+                            if (i-- <= 0) {
+                                return vector;
+                            }
+                        }
+                        pos = blockposition.add(-x, y, -z);
+                        vector = isSafeRespawn(entitytypes, world, pos);
+                        if (vector.isPresent()) {
+                            if (i-- <= 0) {
+                                return vector;
+                            }
+                        }
+
+                        vector = isSafeRespawn(entitytypes, world, pos);
+                        if (vector.isPresent()) {
+                            if (i-- <= 0) {
+                                return vector;
+                            }
+                        }
+
+                        vector = isSafeRespawn(entitytypes, world, pos);
+                        if (vector.isPresent()) {
+                            if (i-- <= 0) {
+                                return vector;
+                            }
+                        }
+                    }
+                    if (x < r) {
+                        x++;
+                    } else {
+                        z--;
+                    }
+                }
+            }
+
+            return Optional.empty();
+        }
+        // Paper end
         int j = blockposition.getX();
         int k = blockposition.getY();
         int l = blockposition.getZ();
@@ -203,101 +251,6 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
 
         return Optional.empty();
     }
-    */
-
-    private static Optional<Vec3D> findSafePosition(EntityTypes<?> entitytypes, World world, EnumDirection updirection, BlockPosition blockposition){
-        int radius = world.paperConfig.bedSearchRadius;
-        double angle = Math.PI / 2;
-        int tmpX = (int)(updirection.getAdjacentX() * Math.cos(angle) - updirection.getAdjacentZ() * Math.sin(angle));
-        int tmpZ = (int)(updirection.getAdjacentX() * Math.sin(angle) + updirection.getAdjacentZ() * Math.cos(angle));
-
-        EnumDirection rightDirection = EnumDirection.a(tmpX, 0, tmpZ);
-        EnumDirection downDirection = updirection.opposite();
-        EnumDirection leftDirection = rightDirection.opposite();
-
-        EnumDirection[] corePositionOutDirection = new EnumDirection[6];
-        corePositionOutDirection[0] = updirection;
-        corePositionOutDirection[1] = leftDirection;
-        corePositionOutDirection[2] = leftDirection;
-        corePositionOutDirection[3] = downDirection;
-        corePositionOutDirection[4] = rightDirection;
-        corePositionOutDirection[5] = rightDirection;
-
-        BlockPosition[] corePosition = new BlockPosition[6];
-        corePosition[0] = blockposition.add(updirection.getAdjacentX(), 0, updirection.getAdjacentZ());
-        corePosition[1] = blockposition.add(leftDirection.getAdjacentX(), 0, leftDirection.getAdjacentZ());
-        corePosition[2] = corePosition[1].add(downDirection.getAdjacentX(), 0, downDirection.getAdjacentZ());
-        corePosition[3] = blockposition.add(2 * downDirection.getAdjacentX(), 0, 2 * downDirection.getAdjacentZ());
-        corePosition[5] = blockposition.add(rightDirection.getAdjacentX(), 0, rightDirection.getAdjacentZ());
-        corePosition[4] = corePosition[5].add(downDirection.getAdjacentX(), 0, downDirection.getAdjacentZ());
-
-        BlockPosition[] tmpPosition = new BlockPosition[8];
-        EnumDirection[] tmpPositionDirection = new EnumDirection[8];
-        tmpPositionDirection[0] = rightDirection;
-        tmpPositionDirection[1] = leftDirection;
-        tmpPositionDirection[2] = updirection;
-        tmpPositionDirection[3] = downDirection;
-        tmpPositionDirection[4] = leftDirection;
-        tmpPositionDirection[5] = rightDirection;
-        tmpPositionDirection[6] = downDirection;
-        tmpPositionDirection[7] = updirection;
-
-        BlockPosition pos;
-        Optional<Vec3D> vector;
-        for (int r = 1; r <= radius; r++) {
-            int h = 0;
-            while (h <= 1) {
-                int numIterated = 0;
-                for (int index = (int)(Math.random() * corePosition.length); numIterated < corePosition.length; index = (index+1) % corePosition.length) {
-                    numIterated++;
-
-                    pos = corePosition[index].add(0, h, 0);
-                    vector = isSafeRespawn(entitytypes, world, pos);
-                    if (vector.isPresent()) {
-                        return vector;
-                    }
-                }
-                tmpPosition[0] = corePosition[0].add(0, h, 0);
-                tmpPosition[1] = corePosition[0].add(0, h, 0);
-                tmpPosition[2] = corePosition[1].add(0, h, 0);
-                tmpPosition[3] = corePosition[2].add(0, h, 0);
-                tmpPosition[4] = corePosition[3].add(0, h, 0);
-                tmpPosition[5] = corePosition[3].add(0, h, 0);
-                tmpPosition[6] = corePosition[4].add(0, h, 0);
-                tmpPosition[7] = corePosition[5].add(0, h, 0);
-                for (int rr = 1; rr <= r; rr++){
-                    numIterated = 0;
-                    for (int index = (int)(Math.random() * tmpPosition.length); numIterated < tmpPosition.length; index = (index+1) % tmpPosition.length) {
-                        numIterated++;
-                        tmpPosition[index] = tmpPosition[index].add(tmpPositionDirection[index].getAdjacentX(), 0, tmpPositionDirection[index].getAdjacentZ());
-                        pos = tmpPosition[index];
-
-                        vector = isSafeRespawn(entitytypes, world, pos);
-                        if (vector.isPresent()) {
-                            return vector;
-                        }
-                    }
-                }
-                switch (h) {
-                    case -1:
-                        h = 1;
-                        break;
-                    case 0:
-                        h = -1;
-                        break;
-                    case 1:
-                        h = Integer.MAX_VALUE;
-                        break;
-                }
-            }
-            for (int index = 0; index < corePosition.length; index++) {
-                EnumDirection tmp = corePositionOutDirection[index];
-                corePosition[index] = corePosition[index].add(tmp.getAdjacentX(), 0, tmp.getAdjacentZ());
-            }
-        }
-        return Optional.empty();
-    }
-    // Paper end
 
     protected static Optional<Vec3D> isSafeRespawn(EntityTypes<?> entityTypes, IWorldReader iworldreader, BlockPosition blockPosition) { return a(entityTypes, iworldreader, blockPosition); } // Paper -- obfhelper
     protected static Optional<Vec3D> a(EntityTypes<?> entitytypes, IWorldReader iworldreader, BlockPosition blockposition) {
@@ -322,10 +275,10 @@ public class BlockBed extends BlockFacingHorizontal implements ITileEntity {
                 if ((double) blockposition.getY() - d0 > 2.0D) {
                     return Optional.empty();
                 } else {
-                    float f = entitytypes.i() / 2.0F;
+                    float f = entitytypes.h() / 2.0F;
                     Vec3D vec3d = new Vec3D((double) blockposition_mutableblockposition.getX() + 0.5D, d0, (double) blockposition_mutableblockposition.getZ() + 0.5D);
 
-                    return iworldreader.c(new AxisAlignedBB(vec3d.x - (double) f, vec3d.y, vec3d.z - (double) f, vec3d.x + (double) f, vec3d.y + (double) entitytypes.j(), vec3d.z + (double) f)) ? Optional.of(vec3d) : Optional.empty();
+                    return iworldreader.c(new AxisAlignedBB(vec3d.x - (double) f, vec3d.y, vec3d.z - (double) f, vec3d.x + (double) f, vec3d.y + (double) entitytypes.i(), vec3d.z + (double) f)) ? Optional.of(vec3d) : Optional.empty();
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/BlockButtonAbstract.java b/src/main/java/net/minecraft/server/BlockButtonAbstract.java
index 1fa20d8a..73dc6462 100644
--- a/src/main/java/net/minecraft/server/BlockButtonAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockButtonAbstract.java
@@ -98,7 +98,7 @@ public abstract class BlockButtonAbstract extends BlockAttachable {
     }
 
     protected void a(@Nullable EntityHuman entityhuman, GeneratorAccess generatoraccess, BlockPosition blockposition, boolean flag) {
-        generatoraccess.playSound(flag ? entityhuman : null, blockposition, this.a(flag), SoundCategory.BLOCKS, 0.3F, flag ? 0.6F : 0.5F);
+        generatoraccess.a(flag ? entityhuman : null, blockposition, this.a(flag), SoundCategory.BLOCKS, 0.3F, flag ? 0.6F : 0.5F);
     }
 
     protected abstract SoundEffect a(boolean flag);
diff --git a/src/main/java/net/minecraft/server/BlockCauldron.java b/src/main/java/net/minecraft/server/BlockCauldron.java
index 44ffa270..ed12cb4d 100644
--- a/src/main/java/net/minecraft/server/BlockCauldron.java
+++ b/src/main/java/net/minecraft/server/BlockCauldron.java
@@ -68,7 +68,7 @@ public class BlockCauldron extends Block {
                     entityhuman.a(StatisticList.FILL_CAULDRON);
                     // this.a(world, blockposition, iblockdata, 3);
                     // CraftBukkit end
-                    world.playSound((EntityHuman) null, blockposition, SoundEffects.ITEM_BUCKET_EMPTY, SoundCategory.BLOCKS, 1.0F, 1.0F);
+                    world.a((EntityHuman) null, blockposition, SoundEffects.ITEM_BUCKET_EMPTY, SoundCategory.BLOCKS, 1.0F, 1.0F);
                 }
 
                 return true;
@@ -90,7 +90,7 @@ public class BlockCauldron extends Block {
                     entityhuman.a(StatisticList.USE_CAULDRON);
                     // this.a(world, blockposition, iblockdata, 0);
                     // CraftBukkit end
-                    world.playSound((EntityHuman) null, blockposition, SoundEffects.ITEM_BUCKET_FILL, SoundCategory.BLOCKS, 1.0F, 1.0F);
+                    world.a((EntityHuman) null, blockposition, SoundEffects.ITEM_BUCKET_FILL, SoundCategory.BLOCKS, 1.0F, 1.0F);
                 }
 
                 return true;
@@ -116,7 +116,7 @@ public class BlockCauldron extends Block {
                             }
                         }
 
-                        world.playSound((EntityHuman) null, blockposition, SoundEffects.ITEM_BOTTLE_FILL, SoundCategory.BLOCKS, 1.0F, 1.0F);
+                        world.a((EntityHuman) null, blockposition, SoundEffects.ITEM_BOTTLE_FILL, SoundCategory.BLOCKS, 1.0F, 1.0F);
                         // this.a(world, blockposition, iblockdata, i - 1);
                         // CraftBukkit end
                     }
@@ -137,7 +137,7 @@ public class BlockCauldron extends Block {
                             }
                         }
 
-                        world.playSound((EntityHuman) null, blockposition, SoundEffects.ITEM_BOTTLE_EMPTY, SoundCategory.BLOCKS, 1.0F, 1.0F);
+                        world.a((EntityHuman) null, blockposition, SoundEffects.ITEM_BOTTLE_EMPTY, SoundCategory.BLOCKS, 1.0F, 1.0F);
                         // this.a(world, blockposition, iblockdata, i + 1);
                         // CraftBukkit end
                     }
diff --git a/src/main/java/net/minecraft/server/BlockChest.java b/src/main/java/net/minecraft/server/BlockChest.java
index 8183a61c..af18759e 100644
--- a/src/main/java/net/minecraft/server/BlockChest.java
+++ b/src/main/java/net/minecraft/server/BlockChest.java
@@ -66,7 +66,7 @@ public class BlockChest extends BlockTileEntity implements IBlockWaterlogged {
 
         @Override
         public IChatBaseComponent getScoreboardDisplayName() {
-            return (IChatBaseComponent) (tileentitychest.hasCustomName() ? tileentitychest.getScoreboardDisplayName() : (tileentitychest1.hasCustomName() ? tileentitychest1.getScoreboardDisplayName() : new ChatMessage("container.chestDouble", new Object[0])));
+            return new ChatMessage("container.chestDouble", new Object[0]);
         }
     };
     // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/BlockCommand.java b/src/main/java/net/minecraft/server/BlockCommand.java
index e3b09089..2768f793 100644
--- a/src/main/java/net/minecraft/server/BlockCommand.java
+++ b/src/main/java/net/minecraft/server/BlockCommand.java
@@ -146,7 +146,7 @@ public class BlockCommand extends BlockTileEntity {
 
             if (!world.isClientSide) {
                 if (itemstack.b("BlockEntityTag") == null) {
-                    commandblocklistenerabstract.a(world.getGameRules().getBoolean(GameRules.SEND_COMMAND_FEEDBACK));
+                    commandblocklistenerabstract.a(world.getGameRules().getBoolean("sendCommandFeedback"));
                     tileentitycommand.b(this == Blocks.CHAIN_COMMAND_BLOCK);
                 }
 
@@ -192,7 +192,7 @@ public class BlockCommand extends BlockTileEntity {
         IBlockData iblockdata;
         int i;
 
-        for (i = gamerules.getInt(GameRules.MAX_COMMAND_CHAIN_LENGTH); i-- > 0; enumdirection = (EnumDirection) iblockdata.get(BlockCommand.a)) {
+        for (i = gamerules.c("maxCommandChainLength"); i-- > 0; enumdirection = (EnumDirection) iblockdata.get(BlockCommand.a)) {
             blockposition_mutableblockposition.c(enumdirection);
             iblockdata = world.getType(blockposition_mutableblockposition);
             Block block = iblockdata.getBlock();
@@ -229,7 +229,7 @@ public class BlockCommand extends BlockTileEntity {
         }
 
         if (i <= 0) {
-            int j = Math.max(gamerules.getInt(GameRules.MAX_COMMAND_CHAIN_LENGTH), 0);
+            int j = Math.max(gamerules.c("maxCommandChainLength"), 0);
 
             BlockCommand.LOGGER.warn("Command Block chain tried to execute more than {} steps!", j);
         }
diff --git a/src/main/java/net/minecraft/server/BlockComposter.java b/src/main/java/net/minecraft/server/BlockComposter.java
index dedb706b..89af64fd 100644
--- a/src/main/java/net/minecraft/server/BlockComposter.java
+++ b/src/main/java/net/minecraft/server/BlockComposter.java
@@ -158,7 +158,7 @@ public class BlockComposter extends Block implements IInventoryHolder {
             }
 
             d(iblockdata, (GeneratorAccess) world, blockposition);
-            world.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_COMPOSTER_EMPTY, SoundCategory.BLOCKS, 1.0F, 1.0F);
+            world.a((EntityHuman) null, blockposition, SoundEffects.BLOCK_COMPOSTER_EMPTY, SoundCategory.BLOCKS, 1.0F, 1.0F);
             return true;
         } else {
             return false;
@@ -191,7 +191,7 @@ public class BlockComposter extends Block implements IInventoryHolder {
     public void tick(IBlockData iblockdata, World world, BlockPosition blockposition, Random random) {
         if ((Integer) iblockdata.get(BlockComposter.a) == 7) {
             world.setTypeAndData(blockposition, (IBlockData) iblockdata.a((IBlockState) BlockComposter.a), 3);
-            world.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_COMPOSTER_READY, SoundCategory.BLOCKS, 1.0F, 1.0F);
+            world.a((EntityHuman) null, blockposition, SoundEffects.BLOCK_COMPOSTER_READY, SoundCategory.BLOCKS, 1.0F, 1.0F);
         }
 
         super.tick(iblockdata, world, blockposition, random);
diff --git a/src/main/java/net/minecraft/server/BlockConcretePowder.java b/src/main/java/net/minecraft/server/BlockConcretePowder.java
index 618a358a..c289d427 100644
--- a/src/main/java/net/minecraft/server/BlockConcretePowder.java
+++ b/src/main/java/net/minecraft/server/BlockConcretePowder.java
@@ -60,7 +60,7 @@ public class BlockConcretePowder extends BlockFalling {
             if (enumdirection != EnumDirection.DOWN || canHarden(iblockdata)) {
                 blockposition_mutableblockposition.g(blockposition).c(enumdirection);
                 iblockdata = iblockaccess.getType(blockposition_mutableblockposition);
-                if (canHarden(iblockdata) && !iblockdata.d(iblockaccess, blockposition, enumdirection.opposite())) {
+                if (canHarden(iblockdata) && !Block.d(iblockdata, iblockaccess, blockposition, enumdirection.opposite())) {
                     flag = true;
                     break;
                 }
diff --git a/src/main/java/net/minecraft/server/BlockCrops.java b/src/main/java/net/minecraft/server/BlockCrops.java
index 9b0c8cd0..bb884e94 100644
--- a/src/main/java/net/minecraft/server/BlockCrops.java
+++ b/src/main/java/net/minecraft/server/BlockCrops.java
@@ -140,7 +140,7 @@ public class BlockCrops extends BlockPlant implements IBlockFragilePlantElement
 
     @Override
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Entity entity) {
-        if (entity instanceof EntityRavager && world.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) {
+        if (entity instanceof EntityRavager && world.getGameRules().getBoolean("mobGriefing")) {
             world.b(blockposition, true);
         }
 
diff --git a/src/main/java/net/minecraft/server/BlockDataAbstract.java b/src/main/java/net/minecraft/server/BlockDataAbstract.java
index b3fe95d8..841c7d19 100644
--- a/src/main/java/net/minecraft/server/BlockDataAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockDataAbstract.java
@@ -44,7 +44,7 @@ public abstract class BlockDataAbstract<O, S> implements IBlockDataHolder<S> {
     }
 
     public <T extends Comparable<T>> S a(IBlockState<T> iblockstate) {
-        return this.set(iblockstate, a(iblockstate.getValues(), this.get(iblockstate))); // Paper - decompile fix
+        return this.set(iblockstate, a(iblockstate.d(), this.get(iblockstate))); // Paper - decompiler fix
     }
 
     protected static <T> T a(Collection<T> collection, T t0) {
@@ -125,7 +125,7 @@ public abstract class BlockDataAbstract<O, S> implements IBlockDataHolder<S> {
             while (unmodifiableiterator.hasNext()) {
                 Entry<IBlockState<?>, Comparable<?>> entry = (Entry) unmodifiableiterator.next();
                 IBlockState<?> iblockstate = (IBlockState) entry.getKey();
-                Iterator iterator = iblockstate.getValues().iterator();
+                Iterator iterator = iblockstate.d().iterator();
 
                 while (iterator.hasNext()) {
                     Comparable<?> comparable = (Comparable) iterator.next();
diff --git a/src/main/java/net/minecraft/server/BlockDirtSnowSpreadable.java b/src/main/java/net/minecraft/server/BlockDirtSnowSpreadable.java
index cb90b74c..377a57c8 100644
--- a/src/main/java/net/minecraft/server/BlockDirtSnowSpreadable.java
+++ b/src/main/java/net/minecraft/server/BlockDirtSnowSpreadable.java
@@ -38,7 +38,7 @@ public abstract class BlockDirtSnowSpreadable extends BlockDirtSnow {
                 }
                 // CraftBukkit end
                 world.setTypeUpdate(blockposition, Blocks.DIRT.getBlockData());
-            } else {
+            } else if (world.getLightLevel(blockposition.up()) >= 4) {
                 if (world.getLightLevel(blockposition.up()) >= 9) {
                     IBlockData iblockdata1 = this.getBlockData();
 
diff --git a/src/main/java/net/minecraft/server/BlockDispenser.java b/src/main/java/net/minecraft/server/BlockDispenser.java
index 88a210b1..72ca187a 100644
--- a/src/main/java/net/minecraft/server/BlockDispenser.java
+++ b/src/main/java/net/minecraft/server/BlockDispenser.java
@@ -129,7 +129,7 @@ public class BlockDispenser extends BlockTileEntity {
     }
 
     public static IPosition a(ISourceBlock isourceblock) {
-        EnumDirection enumdirection = (EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING);
+        EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
         double d0 = isourceblock.getX() + 0.7D * (double) enumdirection.getAdjacentX();
         double d1 = isourceblock.getY() + 0.7D * (double) enumdirection.getAdjacentY();
         double d2 = isourceblock.getZ() + 0.7D * (double) enumdirection.getAdjacentZ();
diff --git a/src/main/java/net/minecraft/server/BlockDoor.java b/src/main/java/net/minecraft/server/BlockDoor.java
index a1a25771..45b1dc40 100644
--- a/src/main/java/net/minecraft/server/BlockDoor.java
+++ b/src/main/java/net/minecraft/server/BlockDoor.java
@@ -129,7 +129,7 @@ public class BlockDoor extends Block {
         IBlockData iblockdata2 = world.getType(blockposition4);
         BlockPosition blockposition5 = blockposition1.shift(enumdirection2);
         IBlockData iblockdata3 = world.getType(blockposition5);
-        int i = (iblockdata.o(world, blockposition2) ? -1 : 0) + (iblockdata1.o(world, blockposition3) ? -1 : 0) + (iblockdata2.o(world, blockposition4) ? 1 : 0) + (iblockdata3.o(world, blockposition5) ? 1 : 0);
+        int i = (a(iblockdata.getCollisionShape(world, blockposition2)) ? -1 : 0) + (a(iblockdata1.getCollisionShape(world, blockposition3)) ? -1 : 0) + (a(iblockdata2.getCollisionShape(world, blockposition4)) ? 1 : 0) + (a(iblockdata3.getCollisionShape(world, blockposition5)) ? 1 : 0);
         boolean flag = iblockdata.getBlock() == this && iblockdata.get(BlockDoor.HALF) == BlockPropertyDoubleBlockHalf.LOWER;
         boolean flag1 = iblockdata2.getBlock() == this && iblockdata2.get(BlockDoor.HALF) == BlockPropertyDoubleBlockHalf.LOWER;
 
@@ -205,7 +205,7 @@ public class BlockDoor extends Block {
         BlockPosition blockposition1 = blockposition.down();
         IBlockData iblockdata1 = iworldreader.getType(blockposition1);
 
-        return iblockdata.get(BlockDoor.HALF) == BlockPropertyDoubleBlockHalf.LOWER ? iblockdata1.d(iworldreader, blockposition1, EnumDirection.UP) : iblockdata1.getBlock() == this;
+        return iblockdata.get(BlockDoor.HALF) == BlockPropertyDoubleBlockHalf.LOWER ? Block.d(iblockdata1, iworldreader, blockposition1, EnumDirection.UP) : iblockdata1.getBlock() == this;
     }
 
     private void b(World world, BlockPosition blockposition, boolean flag) {
diff --git a/src/main/java/net/minecraft/server/BlockFire.java b/src/main/java/net/minecraft/server/BlockFire.java
index 135c6ae4..087535ca 100644
--- a/src/main/java/net/minecraft/server/BlockFire.java
+++ b/src/main/java/net/minecraft/server/BlockFire.java
@@ -69,7 +69,7 @@ public class BlockFire extends Block {
         BlockPosition blockposition1 = blockposition.down();
         IBlockData iblockdata = iblockaccess.getType(blockposition1);
 
-        if (!this.j(iblockdata) && !iblockdata.d(iblockaccess, blockposition1, EnumDirection.UP)) {
+        if (!this.j(iblockdata) && !Block.d(iblockdata, iblockaccess, blockposition1, EnumDirection.UP)) {
             IBlockData iblockdata1 = this.getBlockData();
             EnumDirection[] aenumdirection = EnumDirection.values();
             int i = aenumdirection.length;
@@ -93,7 +93,7 @@ public class BlockFire extends Block {
     public boolean canPlace(IBlockData iblockdata, IWorldReader iworldreader, BlockPosition blockposition) {
         BlockPosition blockposition1 = blockposition.down();
 
-        return iworldreader.getType(blockposition1).d(iworldreader, blockposition1, EnumDirection.UP) || this.canBurn(iworldreader, blockposition);
+        return Block.d(iworldreader.getType(blockposition1), iworldreader, blockposition1, EnumDirection.UP) || this.canBurn(iworldreader, blockposition);
     }
 
     @Override
@@ -103,7 +103,7 @@ public class BlockFire extends Block {
 
     @Override
     public void tick(IBlockData iblockdata, World world, BlockPosition blockposition, Random random) {
-        if (world.getGameRules().getBoolean(GameRules.DO_FIRE_TICK)) {
+        if (world.getGameRules().getBoolean("doFireTick")) {
             if (!iblockdata.canPlace(world, blockposition)) {
                 fireExtinguished(world, blockposition); // CraftBukkit - invalid place location
             }
@@ -127,7 +127,7 @@ public class BlockFire extends Block {
                     if (!this.canBurn(world, blockposition)) {
                         BlockPosition blockposition1 = blockposition.down();
 
-                        if (!world.getType(blockposition1).d(world, blockposition1, EnumDirection.UP) || i > 3) {
+                        if (!Block.d(world.getType(blockposition1), world, blockposition1, EnumDirection.UP) || i > 3) {
                             fireExtinguished(world, blockposition); // CraftBukkit
                         }
 
@@ -140,7 +140,7 @@ public class BlockFire extends Block {
                     }
                 }
 
-                boolean flag1 = world.s(blockposition);
+                boolean flag1 = world.t(blockposition);
                 int k = flag1 ? -50 : 0;
 
                 // CraftBukkit start - add source blockposition to burn calls
diff --git a/src/main/java/net/minecraft/server/BlockFluids.java b/src/main/java/net/minecraft/server/BlockFluids.java
index 56bf0b1d..b4616f25 100644
--- a/src/main/java/net/minecraft/server/BlockFluids.java
+++ b/src/main/java/net/minecraft/server/BlockFluids.java
@@ -171,7 +171,7 @@ public class BlockFluids extends Block implements IFluidSource {
     @Override
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Entity entity) {
         if (this.b.a(TagsFluid.LAVA)) {
-            entity.aC();
+            entity.aB();
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/BlockGrass.java b/src/main/java/net/minecraft/server/BlockGrass.java
index 7168b3ea..b66604b0 100644
--- a/src/main/java/net/minecraft/server/BlockGrass.java
+++ b/src/main/java/net/minecraft/server/BlockGrass.java
@@ -32,7 +32,7 @@ public class BlockGrass extends BlockDirtSnowSpreadable implements IBlockFragile
             while (true) {
                 if (j < i / 16) {
                     blockposition2 = blockposition2.b(random.nextInt(3) - 1, (random.nextInt(3) - 1) * random.nextInt(3) / 2, random.nextInt(3) - 1);
-                    if (world.getType(blockposition2.down()).getBlock() == this && !world.getType(blockposition2).o(world, blockposition2)) {
+                    if (world.getType(blockposition2.down()).getBlock() == this && !a(world.getType(blockposition2).getCollisionShape(world, blockposition2))) {
                         ++j;
                         continue;
                     }
diff --git a/src/main/java/net/minecraft/server/BlockKelp.java b/src/main/java/net/minecraft/server/BlockKelp.java
index 29c7d291..59a2f2b6 100644
--- a/src/main/java/net/minecraft/server/BlockKelp.java
+++ b/src/main/java/net/minecraft/server/BlockKelp.java
@@ -23,7 +23,7 @@ public class BlockKelp extends Block implements IFluidContainer {
     public IBlockData getPlacedState(BlockActionContext blockactioncontext) {
         Fluid fluid = blockactioncontext.getWorld().getFluid(blockactioncontext.getClickPosition());
 
-        return fluid.a(TagsFluid.WATER) && fluid.g() == 8 ? this.a((GeneratorAccess) blockactioncontext.getWorld()) : null;
+        return fluid.a(TagsFluid.WATER) && fluid.f() == 8 ? this.a((GeneratorAccess) blockactioncontext.getWorld()) : null;
     }
 
     public IBlockData a(GeneratorAccess generatoraccess) {
@@ -48,7 +48,7 @@ public class BlockKelp extends Block implements IFluidContainer {
             BlockPosition blockposition1 = blockposition.up();
             IBlockData iblockdata1 = world.getType(blockposition1);
 
-            if (iblockdata1.getBlock() == Blocks.WATER && (Integer) iblockdata.get(BlockKelp.a) < 25 && random.nextDouble() < (100.0D / world.spigotConfig.kelpModifier) * 0.14D) { // Spigot
+            if (iblockdata1.getBlock() == Blocks.WATER && (Integer) iblockdata.get(BlockKelp.a) < 25 && random.nextDouble() < 0.14D) {
                 org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockSpreadEvent(world, blockposition, blockposition1, (IBlockData) iblockdata.a((IBlockState) BlockKelp.a)); // CraftBukkit
             }
 
@@ -61,7 +61,7 @@ public class BlockKelp extends Block implements IFluidContainer {
         IBlockData iblockdata1 = iworldreader.getType(blockposition1);
         Block block = iblockdata1.getBlock();
 
-        return block == Blocks.MAGMA_BLOCK ? false : block == this || block == Blocks.KELP_PLANT || iblockdata1.d(iworldreader, blockposition1, EnumDirection.UP);
+        return block == Blocks.MAGMA_BLOCK ? false : block == this || block == Blocks.KELP_PLANT || Block.d(iblockdata1, iworldreader, blockposition1, EnumDirection.UP);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/BlockLever.java b/src/main/java/net/minecraft/server/BlockLever.java
index 68b64414..7777b334 100644
--- a/src/main/java/net/minecraft/server/BlockLever.java
+++ b/src/main/java/net/minecraft/server/BlockLever.java
@@ -83,7 +83,7 @@ public class BlockLever extends BlockAttachable {
             world.setTypeAndData(blockposition, iblockdata, 3);
             float f = flag ? 0.6F : 0.5F;
 
-            world.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_LEVER_CLICK, SoundCategory.BLOCKS, 0.3F, f);
+            world.a((EntityHuman) null, blockposition, SoundEffects.BLOCK_LEVER_CLICK, SoundCategory.BLOCKS, 0.3F, f);
             this.d(iblockdata, world, blockposition);
             return true;
         }
diff --git a/src/main/java/net/minecraft/server/BlockMagma.java b/src/main/java/net/minecraft/server/BlockMagma.java
index 89cedeac..7f1d75a3 100644
--- a/src/main/java/net/minecraft/server/BlockMagma.java
+++ b/src/main/java/net/minecraft/server/BlockMagma.java
@@ -38,7 +38,7 @@ public class BlockMagma extends Block {
         BlockPosition blockposition1 = blockposition.up();
 
         if (world.getFluid(blockposition).a(TagsFluid.WATER)) {
-            world.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_FIRE_EXTINGUISH, SoundCategory.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
+            world.a((EntityHuman) null, blockposition, SoundEffects.BLOCK_FIRE_EXTINGUISH, SoundCategory.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
             if (world instanceof WorldServer) {
                 ((WorldServer) world).a(Particles.LARGE_SMOKE, (double) blockposition1.getX() + 0.5D, (double) blockposition1.getY() + 0.25D, (double) blockposition1.getZ() + 0.5D, 8, 0.5D, 0.25D, 0.5D, 0.0D);
             }
diff --git a/src/main/java/net/minecraft/server/BlockMinecartDetector.java b/src/main/java/net/minecraft/server/BlockMinecartDetector.java
index c5481d29..8a685617 100644
--- a/src/main/java/net/minecraft/server/BlockMinecartDetector.java
+++ b/src/main/java/net/minecraft/server/BlockMinecartDetector.java
@@ -63,7 +63,6 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
             flag1 = true;
         }
 
-        IBlockData iblockdata1;
         // CraftBukkit start
         if (flag != flag1) {
             org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
@@ -76,21 +75,19 @@ public class BlockMinecartDetector extends BlockMinecartTrackAbstract {
         // CraftBukkit end
 
         if (flag1 && !flag) {
-            iblockdata1 = (IBlockData) iblockdata.set(BlockMinecartDetector.POWERED, true);
-            world.setTypeAndData(blockposition, iblockdata1, 3);
-            this.b(world, blockposition, iblockdata1, true);
+            world.setTypeAndData(blockposition, (IBlockData) iblockdata.set(BlockMinecartDetector.POWERED, true), 3);
+            this.b(world, blockposition, iblockdata, true);
             world.applyPhysics(blockposition, this);
             world.applyPhysics(blockposition.down(), this);
-            world.b(blockposition, iblockdata, iblockdata1);
+            world.m(blockposition);
         }
 
         if (!flag1 && flag) {
-            iblockdata1 = (IBlockData) iblockdata.set(BlockMinecartDetector.POWERED, false);
-            world.setTypeAndData(blockposition, iblockdata1, 3);
-            this.b(world, blockposition, iblockdata1, false);
+            world.setTypeAndData(blockposition, (IBlockData) iblockdata.set(BlockMinecartDetector.POWERED, false), 3);
+            this.b(world, blockposition, iblockdata, false);
             world.applyPhysics(blockposition, this);
             world.applyPhysics(blockposition.down(), this);
-            world.b(blockposition, iblockdata, iblockdata1);
+            world.m(blockposition);
         }
 
         if (flag1) {
diff --git a/src/main/java/net/minecraft/server/BlockMonsterEggs.java b/src/main/java/net/minecraft/server/BlockMonsterEggs.java
index 46d77d17..e7a201d8 100644
--- a/src/main/java/net/minecraft/server/BlockMonsterEggs.java
+++ b/src/main/java/net/minecraft/server/BlockMonsterEggs.java
@@ -27,7 +27,7 @@ public class BlockMonsterEggs extends Block {
     @Override
     public void dropNaturally(IBlockData iblockdata, World world, BlockPosition blockposition, ItemStack itemstack) {
         super.dropNaturally(iblockdata, world, blockposition, itemstack);
-        if (!world.isClientSide && world.getGameRules().getBoolean(GameRules.DO_TILE_DROPS) && EnchantmentManager.getEnchantmentLevel(Enchantments.SILK_TOUCH, itemstack) == 0) {
+        if (!world.isClientSide && world.getGameRules().getBoolean("doTileDrops") && EnchantmentManager.getEnchantmentLevel(Enchantments.SILK_TOUCH, itemstack) == 0) {
             EntitySilverfish entitysilverfish = (EntitySilverfish) EntityTypes.SILVERFISH.a(world);
 
             entitysilverfish.setPositionRotation((double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, 0.0F, 0.0F);
diff --git a/src/main/java/net/minecraft/server/BlockNote.java b/src/main/java/net/minecraft/server/BlockNote.java
index 703379ef..2456765d 100644
--- a/src/main/java/net/minecraft/server/BlockNote.java
+++ b/src/main/java/net/minecraft/server/BlockNote.java
@@ -73,7 +73,7 @@ public class BlockNote extends Block {
         int k = (Integer) iblockdata.get(BlockNote.NOTE);
         float f = (float) Math.pow(2.0D, (double) (k - 12) / 12.0D);
 
-        world.playSound((EntityHuman) null, blockposition, ((BlockPropertyInstrument) iblockdata.get(BlockNote.INSTRUMENT)).a(), SoundCategory.RECORDS, 3.0F, f);
+        world.a((EntityHuman) null, blockposition, ((BlockPropertyInstrument) iblockdata.get(BlockNote.INSTRUMENT)).a(), SoundCategory.RECORDS, 3.0F, f);
         world.addParticle(Particles.NOTE, (double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 1.2D, (double) blockposition.getZ() + 0.5D, (double) k / 24.0D, 0.0D, 0.0D);
         return true;
     }
diff --git a/src/main/java/net/minecraft/server/BlockPiston.java b/src/main/java/net/minecraft/server/BlockPiston.java
index de804348..d548b27b 100644
--- a/src/main/java/net/minecraft/server/BlockPiston.java
+++ b/src/main/java/net/minecraft/server/BlockPiston.java
@@ -194,7 +194,7 @@ public class BlockPiston extends BlockDirectional {
             }
 
             world.setTypeAndData(blockposition, (IBlockData) iblockdata.set(BlockPiston.EXTENDED, true), 67);
-            world.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_PISTON_EXTEND, SoundCategory.BLOCKS, 0.5F, world.random.nextFloat() * 0.25F + 0.6F);
+            world.a((EntityHuman) null, blockposition, SoundEffects.BLOCK_PISTON_EXTEND, SoundCategory.BLOCKS, 0.5F, world.random.nextFloat() * 0.25F + 0.6F);
         } else if (i == 1 || i == 2) {
             TileEntity tileentity = world.getTileEntity(blockposition.shift(enumdirection));
 
@@ -234,7 +234,7 @@ public class BlockPiston extends BlockDirectional {
                 world.a(blockposition.shift(enumdirection), false);
             }
 
-            world.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_PISTON_CONTRACT, SoundCategory.BLOCKS, 0.5F, world.random.nextFloat() * 0.15F + 0.6F);
+            world.a((EntityHuman) null, blockposition, SoundEffects.BLOCK_PISTON_CONTRACT, SoundCategory.BLOCKS, 0.5F, world.random.nextFloat() * 0.15F + 0.6F);
         }
 
         return true;
diff --git a/src/main/java/net/minecraft/server/BlockPortal.java b/src/main/java/net/minecraft/server/BlockPortal.java
index 4eef7127..650eb089 100644
--- a/src/main/java/net/minecraft/server/BlockPortal.java
+++ b/src/main/java/net/minecraft/server/BlockPortal.java
@@ -35,7 +35,7 @@ public class BlockPortal extends Block {
 
     @Override
     public void tick(IBlockData iblockdata, World world, BlockPosition blockposition, Random random) {
-        if (world.spigotConfig.enableZombiePigmenPortalSpawns && world.worldProvider.isOverworld() && world.getGameRules().getBoolean(GameRules.DO_MOB_SPAWNING) && random.nextInt(2000) < world.getDifficulty().a()) { // Spigot
+        if (world.spigotConfig.enableZombiePigmenPortalSpawns && world.worldProvider.isOverworld() && world.getGameRules().getBoolean("doMobSpawning") && random.nextInt(2000) < world.getDifficulty().a()) { // Spigot
             while (world.getType(blockposition).getBlock() == this) {
                 blockposition = blockposition.down();
             }
@@ -45,7 +45,7 @@ public class BlockPortal extends Block {
                 Entity entity = EntityTypes.ZOMBIE_PIGMAN.spawnCreature(world, (NBTTagCompound) null, (IChatBaseComponent) null, (EntityHuman) null, blockposition.up(), EnumMobSpawn.STRUCTURE, false, false, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.NETHER_PORTAL);
 
                 if (entity != null) {
-                    entity.portalCooldown = entity.aX();
+                    entity.portalCooldown = entity.aW();
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
index 16f09304..07b0cc7b 100644
--- a/src/main/java/net/minecraft/server/BlockPosition.java
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -473,18 +473,10 @@ public class BlockPosition extends BaseBlockPosition implements MinecraftSeriali
             return this.d(this.x + i, this.y + j, this.z + k);
         }
 
-        public void o(int i) {
-            this.x = i; // Paper change to x
-        }
-
         public void p(int i) {
             this.y = i; // Paper change to y
         }
 
-        public void q(int i) {
-            this.z = i; // Paper change to z
-        }
-
         @Override
         public BlockPosition immutableCopy() {
             return new BlockPosition(this);
diff --git a/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java b/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java
index 90cdcaf7..56dc91a3 100644
--- a/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockPressurePlateAbstract.java
@@ -25,7 +25,7 @@ public abstract class BlockPressurePlateAbstract extends Block {
     }
 
     @Override
-    public boolean S_() {
+    public boolean T_() {
         return true;
     }
 
@@ -84,11 +84,10 @@ public abstract class BlockPressurePlateAbstract extends Block {
         // CraftBukkit end
 
         if (i != j) {
-            IBlockData iblockdata1 = this.a(iblockdata, j);
-
-            world.setTypeAndData(blockposition, iblockdata1, 2);
+            iblockdata = this.a(iblockdata, j);
+            world.setTypeAndData(blockposition, iblockdata, 2);
             this.a(world, blockposition);
-            world.b(blockposition, iblockdata, iblockdata1);
+            world.m(blockposition);
         }
 
         if (!flag1 && flag) {
diff --git a/src/main/java/net/minecraft/server/BlockPressurePlateBinary.java b/src/main/java/net/minecraft/server/BlockPressurePlateBinary.java
index e063373e..2a8c5398 100644
--- a/src/main/java/net/minecraft/server/BlockPressurePlateBinary.java
+++ b/src/main/java/net/minecraft/server/BlockPressurePlateBinary.java
@@ -29,9 +29,9 @@ public class BlockPressurePlateBinary extends BlockPressurePlateAbstract {
     @Override
     protected void a(GeneratorAccess generatoraccess, BlockPosition blockposition) {
         if (this.material == Material.WOOD) {
-            generatoraccess.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON, SoundCategory.BLOCKS, 0.3F, 0.8F);
+            generatoraccess.a((EntityHuman) null, blockposition, SoundEffects.BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON, SoundCategory.BLOCKS, 0.3F, 0.8F);
         } else {
-            generatoraccess.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_STONE_PRESSURE_PLATE_CLICK_ON, SoundCategory.BLOCKS, 0.3F, 0.6F);
+            generatoraccess.a((EntityHuman) null, blockposition, SoundEffects.BLOCK_STONE_PRESSURE_PLATE_CLICK_ON, SoundCategory.BLOCKS, 0.3F, 0.6F);
         }
 
     }
@@ -39,9 +39,9 @@ public class BlockPressurePlateBinary extends BlockPressurePlateAbstract {
     @Override
     protected void b(GeneratorAccess generatoraccess, BlockPosition blockposition) {
         if (this.material == Material.WOOD) {
-            generatoraccess.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF, SoundCategory.BLOCKS, 0.3F, 0.7F);
+            generatoraccess.a((EntityHuman) null, blockposition, SoundEffects.BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF, SoundCategory.BLOCKS, 0.3F, 0.7F);
         } else {
-            generatoraccess.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF, SoundCategory.BLOCKS, 0.3F, 0.5F);
+            generatoraccess.a((EntityHuman) null, blockposition, SoundEffects.BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF, SoundCategory.BLOCKS, 0.3F, 0.5F);
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java b/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java
index 867d096a..3261195e 100644
--- a/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java
+++ b/src/main/java/net/minecraft/server/BlockPressurePlateWeighted.java
@@ -52,12 +52,12 @@ public class BlockPressurePlateWeighted extends BlockPressurePlateAbstract {
 
     @Override
     protected void a(GeneratorAccess generatoraccess, BlockPosition blockposition) {
-        generatoraccess.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_METAL_PRESSURE_PLATE_CLICK_ON, SoundCategory.BLOCKS, 0.3F, 0.90000004F);
+        generatoraccess.a((EntityHuman) null, blockposition, SoundEffects.BLOCK_METAL_PRESSURE_PLATE_CLICK_ON, SoundCategory.BLOCKS, 0.3F, 0.90000004F);
     }
 
     @Override
     protected void b(GeneratorAccess generatoraccess, BlockPosition blockposition) {
-        generatoraccess.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF, SoundCategory.BLOCKS, 0.3F, 0.75F);
+        generatoraccess.a((EntityHuman) null, blockposition, SoundEffects.BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF, SoundCategory.BLOCKS, 0.3F, 0.75F);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneComparator.java b/src/main/java/net/minecraft/server/BlockRedstoneComparator.java
index 6ff9c874..52246faf 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneComparator.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneComparator.java
@@ -82,7 +82,7 @@ public class BlockRedstoneComparator extends BlockDiodeAbstract implements ITile
             iblockdata = (IBlockData) iblockdata.a((IBlockState) BlockRedstoneComparator.MODE);
             float f = iblockdata.get(BlockRedstoneComparator.MODE) == BlockPropertyComparatorMode.SUBTRACT ? 0.55F : 0.5F;
 
-            world.playSound(entityhuman, blockposition, SoundEffects.BLOCK_COMPARATOR_CLICK, SoundCategory.BLOCKS, 0.3F, f);
+            world.a(entityhuman, blockposition, SoundEffects.BLOCK_COMPARATOR_CLICK, SoundCategory.BLOCKS, 0.3F, f);
             world.setTypeAndData(blockposition, iblockdata, 2);
             this.f(world, blockposition, iblockdata);
             return true;
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneWire.java b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
index 337c03d1..6b5015ce 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneWire.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
@@ -137,10 +137,10 @@ public class BlockRedstoneWire extends Block {
         IBlockData iblockdata1 = iblockaccess.getType(blockposition2);
 
         if (!iblockdata1.isOccluding(iblockaccess, blockposition2)) {
-            boolean flag = iblockdata.d(iblockaccess, blockposition1, EnumDirection.UP) || iblockdata.getBlock() == Blocks.HOPPER;
+            boolean flag = Block.d(iblockdata, iblockaccess, blockposition1, EnumDirection.UP) || iblockdata.getBlock() == Blocks.HOPPER;
 
             if (flag && j(iblockaccess.getType(blockposition1.up()))) {
-                if (iblockdata.o(iblockaccess, blockposition1)) {
+                if (a(iblockdata.getCollisionShape(iblockaccess, blockposition1))) {
                     return BlockPropertyRedstoneSide.UP;
                 }
 
@@ -156,7 +156,7 @@ public class BlockRedstoneWire extends Block {
         BlockPosition blockposition1 = blockposition.down();
         IBlockData iblockdata1 = iworldreader.getType(blockposition1);
 
-        return iblockdata1.d(iworldreader, blockposition1, EnumDirection.UP) || iblockdata1.getBlock() == Blocks.HOPPER;
+        return Block.d(iblockdata1, iworldreader, blockposition1, EnumDirection.UP) || iblockdata1.getBlock() == Blocks.HOPPER;
     }
 
     // Paper start - Optimize redstone
@@ -291,7 +291,7 @@ public class BlockRedstoneWire extends Block {
         int i = (Integer) iblockdata.get(BlockRedstoneWire.POWER);
 
         this.h = false;
-        int j = world.q(blockposition);
+        int j = world.r(blockposition);
 
         this.h = true;
         int k = 0;
diff --git a/src/main/java/net/minecraft/server/BlockSoil.java b/src/main/java/net/minecraft/server/BlockSoil.java
index 2fc6e210..30033ed8 100644
--- a/src/main/java/net/minecraft/server/BlockSoil.java
+++ b/src/main/java/net/minecraft/server/BlockSoil.java
@@ -72,7 +72,7 @@ public class BlockSoil extends Block {
     @Override
     public void fallOn(World world, BlockPosition blockposition, Entity entity, float f) {
         super.fallOn(world, blockposition, entity, f); // CraftBukkit - moved here as game rules / events shouldn't affect fall damage.
-        if (!world.isClientSide && world.random.nextFloat() < f - 0.5F && entity instanceof EntityLiving && (entity instanceof EntityHuman || world.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) && entity.getWidth() * entity.getWidth() * entity.getHeight() > 0.512F) {
+        if (!world.isClientSide && world.random.nextFloat() < f - 0.5F && entity instanceof EntityLiving && (entity instanceof EntityHuman || world.getGameRules().getBoolean("mobGriefing")) && entity.getWidth() * entity.getWidth() * entity.getHeight() > 0.512F) {
             // CraftBukkit start - Interact soil
             org.bukkit.event.Cancellable cancellable;
             if (entity instanceof EntityHuman) {
diff --git a/src/main/java/net/minecraft/server/BlockState.java b/src/main/java/net/minecraft/server/BlockState.java
index 00e67b56..be7e10d8 100644
--- a/src/main/java/net/minecraft/server/BlockState.java
+++ b/src/main/java/net/minecraft/server/BlockState.java
@@ -24,7 +24,7 @@ public abstract class BlockState<T extends Comparable<T>> implements IBlockState
     }
 
     public String toString() {
-        return MoreObjects.toStringHelper(this).add("name", this.b).add("clazz", this.a).add("values", this.getValues()).toString();
+        return MoreObjects.toStringHelper(this).add("name", this.b).add("clazz", this.a).add("values", this.d()).toString();
     }
 
     public boolean equals(Object object) {
diff --git a/src/main/java/net/minecraft/server/BlockStateBoolean.java b/src/main/java/net/minecraft/server/BlockStateBoolean.java
index 7ca302b5..3f085c7d 100644
--- a/src/main/java/net/minecraft/server/BlockStateBoolean.java
+++ b/src/main/java/net/minecraft/server/BlockStateBoolean.java
@@ -13,7 +13,7 @@ public class BlockStateBoolean extends BlockState<Boolean> {
     }
 
     @Override
-    public Collection<Boolean> getValues() {
+    public Collection<Boolean> d() {
         return this.a;
     }
 
diff --git a/src/main/java/net/minecraft/server/BlockStateEnum.java b/src/main/java/net/minecraft/server/BlockStateEnum.java
index 7cdadc6b..82a1fac6 100644
--- a/src/main/java/net/minecraft/server/BlockStateEnum.java
+++ b/src/main/java/net/minecraft/server/BlockStateEnum.java
@@ -36,7 +36,7 @@ public class BlockStateEnum<T extends Enum<T> & INamable> extends BlockState<T>
     }
 
     @Override
-    public Collection<T> getValues() {
+    public Collection<T> d() {
         return this.a;
     }
 
diff --git a/src/main/java/net/minecraft/server/BlockStateInteger.java b/src/main/java/net/minecraft/server/BlockStateInteger.java
index 0499a717..74ef6995 100644
--- a/src/main/java/net/minecraft/server/BlockStateInteger.java
+++ b/src/main/java/net/minecraft/server/BlockStateInteger.java
@@ -34,7 +34,7 @@ public class BlockStateInteger extends BlockState<Integer> {
     }
 
     @Override
-    public Collection<Integer> getValues() {
+    public Collection<Integer> d() {
         return this.a;
     }
 
diff --git a/src/main/java/net/minecraft/server/BlockSweetBerryBush.java b/src/main/java/net/minecraft/server/BlockSweetBerryBush.java
index e16b477e..13a9a704 100644
--- a/src/main/java/net/minecraft/server/BlockSweetBerryBush.java
+++ b/src/main/java/net/minecraft/server/BlockSweetBerryBush.java
@@ -27,7 +27,7 @@ public class BlockSweetBerryBush extends BlockPlant implements IBlockFragilePlan
         super.tick(iblockdata, world, blockposition, random);
         int i = (Integer) iblockdata.get(BlockSweetBerryBush.a);
 
-        if (i < 3 && world.random.nextInt(Math.max(1, (int) (100.0F / world.spigotConfig.sweetBerryModifier) * 5)) == 0 && world.getLightLevel(blockposition.up(), 0) >= 9) { // Spigot
+        if (i < 3 && random.nextInt(5) == 0 && world.getLightLevel(blockposition.up(), 0) >= 9) {
             CraftEventFactory.handleBlockGrowEvent(world, blockposition, (IBlockData) iblockdata.set(BlockSweetBerryBush.a, i + 1), 2); // CraftBukkit
         }
 
@@ -62,7 +62,7 @@ public class BlockSweetBerryBush extends BlockPlant implements IBlockFragilePlan
             int j = 1 + world.random.nextInt(2);
 
             a(world, blockposition, new ItemStack(Items.SWEET_BERRIES, j + (flag ? 1 : 0)));
-            world.playSound((EntityHuman) null, blockposition, SoundEffects.ITEM_SWEET_BERRIES_PICK_FROM_BUSH, SoundCategory.BLOCKS, 1.0F, 0.8F + world.random.nextFloat() * 0.4F);
+            world.a((EntityHuman) null, blockposition, SoundEffects.ITEM_SWEET_BERRIES_PICK_FROM_BUSH, SoundCategory.BLOCKS, 1.0F, 0.8F + world.random.nextFloat() * 0.4F);
             world.setTypeAndData(blockposition, (IBlockData) iblockdata.set(BlockSweetBerryBush.a, 1), 2);
             return true;
         } else {
diff --git a/src/main/java/net/minecraft/server/BlockTNT.java b/src/main/java/net/minecraft/server/BlockTNT.java
index b2689ee8..f717ac87 100644
--- a/src/main/java/net/minecraft/server/BlockTNT.java
+++ b/src/main/java/net/minecraft/server/BlockTNT.java
@@ -76,7 +76,7 @@ public class BlockTNT extends Block {
             EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double) ((float) blockposition.getX() + 0.5F), (double) blockposition.getY(), (double) ((float) blockposition.getZ() + 0.5F), entityliving);
 
             world.addEntity(entitytntprimed);
-            world.playSound((EntityHuman) null, entitytntprimed.locX, entitytntprimed.locY, entitytntprimed.locZ, SoundEffects.ENTITY_TNT_PRIMED, SoundCategory.BLOCKS, 1.0F, 1.0F);
+            world.a((EntityHuman) null, entitytntprimed.locX, entitytntprimed.locY, entitytntprimed.locZ, SoundEffects.ENTITY_TNT_PRIMED, SoundCategory.BLOCKS, 1.0F, 1.0F);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/BlockTallPlant.java b/src/main/java/net/minecraft/server/BlockTallPlant.java
index 227fe073..f2c429f2 100644
--- a/src/main/java/net/minecraft/server/BlockTallPlant.java
+++ b/src/main/java/net/minecraft/server/BlockTallPlant.java
@@ -81,7 +81,7 @@ public class BlockTallPlant extends BlockPlant {
     }
 
     @Override
-    public Block.EnumRandomOffset R_() {
+    public Block.EnumRandomOffset S_() {
         return Block.EnumRandomOffset.XZ;
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockTrapdoor.java b/src/main/java/net/minecraft/server/BlockTrapdoor.java
index 015e8b6a..fccd0058 100644
--- a/src/main/java/net/minecraft/server/BlockTrapdoor.java
+++ b/src/main/java/net/minecraft/server/BlockTrapdoor.java
@@ -158,9 +158,4 @@ public class BlockTrapdoor extends BlockFacingHorizontal implements IBlockWaterl
 
         return super.updateState(iblockdata, enumdirection, iblockdata1, generatoraccess, blockposition, blockposition1);
     }
-
-    @Override
-    public boolean a(IBlockData iblockdata, IBlockAccess iblockaccess, BlockPosition blockposition, EntityTypes<?> entitytypes) {
-        return false;
-    }
 }
diff --git a/src/main/java/net/minecraft/server/BlockTripwireHook.java b/src/main/java/net/minecraft/server/BlockTripwireHook.java
index cc99708e..830fecfa 100644
--- a/src/main/java/net/minecraft/server/BlockTripwireHook.java
+++ b/src/main/java/net/minecraft/server/BlockTripwireHook.java
@@ -42,7 +42,7 @@ public class BlockTripwireHook extends Block {
         BlockPosition blockposition1 = blockposition.shift(enumdirection.opposite());
         IBlockData iblockdata1 = iworldreader.getType(blockposition1);
 
-        return enumdirection.k().c() && iblockdata1.d(iworldreader, blockposition1, enumdirection) && !iblockdata1.isPowerSource();
+        return enumdirection.k().c() && Block.d(iblockdata1, iworldreader, blockposition1, enumdirection) && !iblockdata1.isPowerSource();
     }
 
     @Override
@@ -178,13 +178,13 @@ public class BlockTripwireHook extends Block {
 
     private void a(World world, BlockPosition blockposition, boolean flag, boolean flag1, boolean flag2, boolean flag3) {
         if (flag1 && !flag3) {
-            world.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_TRIPWIRE_CLICK_ON, SoundCategory.BLOCKS, 0.4F, 0.6F);
+            world.a((EntityHuman) null, blockposition, SoundEffects.BLOCK_TRIPWIRE_CLICK_ON, SoundCategory.BLOCKS, 0.4F, 0.6F);
         } else if (!flag1 && flag3) {
-            world.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_TRIPWIRE_CLICK_OFF, SoundCategory.BLOCKS, 0.4F, 0.5F);
+            world.a((EntityHuman) null, blockposition, SoundEffects.BLOCK_TRIPWIRE_CLICK_OFF, SoundCategory.BLOCKS, 0.4F, 0.5F);
         } else if (flag && !flag2) {
-            world.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_TRIPWIRE_ATTACH, SoundCategory.BLOCKS, 0.4F, 0.7F);
+            world.a((EntityHuman) null, blockposition, SoundEffects.BLOCK_TRIPWIRE_ATTACH, SoundCategory.BLOCKS, 0.4F, 0.7F);
         } else if (!flag && flag2) {
-            world.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_TRIPWIRE_DETACH, SoundCategory.BLOCKS, 0.4F, 1.2F / (world.random.nextFloat() * 0.2F + 0.9F));
+            world.a((EntityHuman) null, blockposition, SoundEffects.BLOCK_TRIPWIRE_DETACH, SoundCategory.BLOCKS, 0.4F, 1.2F / (world.random.nextFloat() * 0.2F + 0.9F));
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/BlockTurtleEgg.java b/src/main/java/net/minecraft/server/BlockTurtleEgg.java
index 0118a845..a32ea2a4 100644
--- a/src/main/java/net/minecraft/server/BlockTurtleEgg.java
+++ b/src/main/java/net/minecraft/server/BlockTurtleEgg.java
@@ -61,7 +61,7 @@ public class BlockTurtleEgg extends Block {
     }
 
     private void a(World world, BlockPosition blockposition, IBlockData iblockdata) {
-        world.playSound((EntityHuman) null, blockposition, SoundEffects.ENTITY_TURTLE_EGG_BREAK, SoundCategory.BLOCKS, 0.7F, 0.9F + world.random.nextFloat() * 0.2F);
+        world.a((EntityHuman) null, blockposition, SoundEffects.ENTITY_TURTLE_EGG_BREAK, SoundCategory.BLOCKS, 0.7F, 0.9F + world.random.nextFloat() * 0.2F);
         int i = (Integer) iblockdata.get(BlockTurtleEgg.b);
 
         if (i <= 1) {
@@ -84,7 +84,7 @@ public class BlockTurtleEgg extends Block {
                     return;
                 }
                 // CraftBukkit end
-                world.playSound((EntityHuman) null, blockposition, SoundEffects.ENTITY_TURTLE_EGG_CRACK, SoundCategory.BLOCKS, 0.7F, 0.9F + random.nextFloat() * 0.2F);
+                world.a((EntityHuman) null, blockposition, SoundEffects.ENTITY_TURTLE_EGG_CRACK, SoundCategory.BLOCKS, 0.7F, 0.9F + random.nextFloat() * 0.2F);
                 // world.setTypeAndData(blockposition, (IBlockData) iblockdata.set(BlockTurtleEgg.a, i + 1), 2); // CraftBukkit - handled above
             } else {
                 // CraftBukkit start - Call BlockFadeEvent
@@ -92,7 +92,7 @@ public class BlockTurtleEgg extends Block {
                     return;
                 }
                 // CraftBukkit end
-                world.playSound((EntityHuman) null, blockposition, SoundEffects.ENTITY_TURTLE_EGG_HATCH, SoundCategory.BLOCKS, 0.7F, 0.9F + random.nextFloat() * 0.2F);
+                world.a((EntityHuman) null, blockposition, SoundEffects.ENTITY_TURTLE_EGG_HATCH, SoundCategory.BLOCKS, 0.7F, 0.9F + random.nextFloat() * 0.2F);
                 world.a(blockposition, false);
                 if (!world.isClientSide) {
                     for (int j = 0; j < (Integer) iblockdata.get(BlockTurtleEgg.b); ++j) {
@@ -163,6 +163,6 @@ public class BlockTurtleEgg extends Block {
     }
 
     private boolean a(World world, Entity entity) {
-        return entity instanceof EntityTurtle ? false : (entity instanceof EntityLiving && !(entity instanceof EntityHuman) ? world.getGameRules().getBoolean(GameRules.MOB_GRIEFING) : true);
+        return entity instanceof EntityTurtle ? false : (entity instanceof EntityLiving && !(entity instanceof EntityHuman) ? world.getGameRules().getBoolean("mobGriefing") : true);
     }
 }
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index d604f96c..ef07f665 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -42,7 +42,7 @@ public class Chunk implements IChunkAccess {
     private TickList<Block> o;
     private TickList<FluidType> p;
     private boolean q;
-    public long lastSaved; // Paper
+    private long lastSaved;
     private volatile boolean s;
     private long t;
     @Nullable
@@ -53,7 +53,7 @@ public class Chunk implements IChunkAccess {
     private volatile boolean x;
 
     public Chunk(World world, ChunkCoordIntPair chunkcoordintpair, BiomeBase[] abiomebase) {
-        this(world, chunkcoordintpair, abiomebase, ChunkConverter.a, TickListEmpty.b(), TickListEmpty.b(), 0L, (ChunkSection[]) null, (Consumer) null);
+        this(world, chunkcoordintpair, abiomebase, ChunkConverter.a, TickListEmpty.a(), TickListEmpty.a(), 0L, (ChunkSection[]) null, (Consumer) null);
     }
 
     // Paper start
@@ -315,7 +315,7 @@ public class Chunk implements IChunkAccess {
                 return null;
             }
 
-            chunksection = new ChunkSection(j >> 4 << 4, this, this.world, true); // Paper - Anti-Xray
+            chunksection = new ChunkSection(j >> 4 << 4);
             this.sections[j >> 4] = chunksection;
         }
 
@@ -542,7 +542,7 @@ public class Chunk implements IChunkAccess {
             TileEntity tileentity1 = (TileEntity) this.tileEntities.put(blockposition.immutableCopy(), tileentity);
 
             if (tileentity1 != null && tileentity1 != tileentity) {
-                tileentity1.V_();
+                tileentity1.W_();
             }
 
             // CraftBukkit start
@@ -602,7 +602,7 @@ public class Chunk implements IChunkAccess {
             TileEntity tileentity = (TileEntity) this.tileEntities.remove(blockposition);
 
             if (tileentity != null) {
-                tileentity.V_();
+                tileentity.W_();
             }
         }
 
@@ -957,31 +957,31 @@ public class Chunk implements IChunkAccess {
             ((ProtoChunkTickList<Block>) this.o).a(this.world.getBlockTickList(), (blockposition) -> { // CraftBukkit - decompile error
                 return this.getType(blockposition).getBlock();
             });
-            this.o = TickListEmpty.b();
+            this.o = TickListEmpty.a();
         } else if (this.o instanceof TickListChunk) {
-            this.world.getBlockTickList().a(((TickListChunk) this.o).b());
-            this.o = TickListEmpty.b();
+            this.world.getBlockTickList().a(((TickListChunk) this.o).a());
+            this.o = TickListEmpty.a();
         }
 
         if (this.p instanceof ProtoChunkTickList) {
             ((ProtoChunkTickList<FluidType>) this.p).a(this.world.getFluidTickList(), (blockposition) -> { // CraftBukkit - decompile error
                 return this.getFluid(blockposition).getType();
             });
-            this.p = TickListEmpty.b();
+            this.p = TickListEmpty.a();
         } else if (this.p instanceof TickListChunk) {
-            this.world.getFluidTickList().a(((TickListChunk) this.p).b());
-            this.p = TickListEmpty.b();
+            this.world.getFluidTickList().a(((TickListChunk) this.p).a());
+            this.p = TickListEmpty.a();
         }
 
     }
 
     public void a(WorldServer worldserver) {
-        if (this.o == TickListEmpty.<Block>b()) { // CraftBukkit - decompile error
+        if (this.o == TickListEmpty.<Block>a()) { // CraftBukkit - decompile error
             this.o = new TickListChunk<>(IRegistry.BLOCK::getKey, worldserver.getBlockTickList().a(this.loc, true, false));
             this.setNeedsSaving(true);
         }
 
-        if (this.p == TickListEmpty.<FluidType>b()) { // CraftBukkit - decompile error
+        if (this.p == TickListEmpty.<FluidType>a()) { // CraftBukkit - decompile error
             this.p = new TickListChunk<>(IRegistry.FLUID::getKey, worldserver.getFluidTickList().a(this.loc, true, false));
             this.setNeedsSaving(true);
         }
diff --git a/src/main/java/net/minecraft/server/ChunkCache.java b/src/main/java/net/minecraft/server/ChunkCache.java
index beb50d20..34e74371 100644
--- a/src/main/java/net/minecraft/server/ChunkCache.java
+++ b/src/main/java/net/minecraft/server/ChunkCache.java
@@ -137,7 +137,7 @@ public class ChunkCache implements IWorldReader {
     @Nullable
     @Override
     public TileEntity getTileEntity(BlockPosition blockposition) {
-        IChunkAccess ichunkaccess = this.w(blockposition);
+        IChunkAccess ichunkaccess = this.x(blockposition);
 
         return ichunkaccess.getTileEntity(blockposition);
     }
@@ -147,7 +147,7 @@ public class ChunkCache implements IWorldReader {
         if (World.isOutsideWorld(blockposition)) {
             return Blocks.AIR.getBlockData();
         } else {
-            IChunkAccess ichunkaccess = this.w(blockposition);
+            IChunkAccess ichunkaccess = this.x(blockposition);
 
             return ichunkaccess.getType(blockposition);
         }
@@ -158,7 +158,7 @@ public class ChunkCache implements IWorldReader {
         if (World.isOutsideWorld(blockposition)) {
             return FluidTypes.EMPTY.i();
         } else {
-            IChunkAccess ichunkaccess = this.w(blockposition);
+            IChunkAccess ichunkaccess = this.x(blockposition);
 
             return ichunkaccess.getFluid(blockposition);
         }
@@ -166,7 +166,7 @@ public class ChunkCache implements IWorldReader {
 
     @Override
     public BiomeBase getBiome(BlockPosition blockposition) {
-        IChunkAccess ichunkaccess = this.w(blockposition);
+        IChunkAccess ichunkaccess = this.x(blockposition);
 
         return ichunkaccess.getBiome(blockposition);
     }
diff --git a/src/main/java/net/minecraft/server/ChunkGenerator.java b/src/main/java/net/minecraft/server/ChunkGenerator.java
index 701b214b..4b3a823f 100644
--- a/src/main/java/net/minecraft/server/ChunkGenerator.java
+++ b/src/main/java/net/minecraft/server/ChunkGenerator.java
@@ -88,14 +88,7 @@ public abstract class ChunkGenerator<C extends GeneratorSettingsDefault> {
         for (int k1 = 0; k1 < j1; ++k1) {
             WorldGenStage.Decoration worldgenstage_decoration = aworldgenstage_decoration[k1];
 
-            try {
-                biomebase.a(worldgenstage_decoration, this, regionlimitedworldaccess, i1, seededrandom, blockposition);
-            } catch (Exception exception) {
-                CrashReport crashreport = CrashReport.a(exception, "Biome decoration");
-
-                crashreport.a("Generation").a("CenterX", (Object) i).a("CenterZ", (Object) j).a("Step", (Object) worldgenstage_decoration).a("Seed", (Object) i1).a("Biome", (Object) IRegistry.BIOME.getKey(biomebase));
-                throw new ReportedException(crashreport);
-            }
+            biomebase.a(worldgenstage_decoration, this, regionlimitedworldaccess, i1, seededrandom, blockposition);
         }
 
     }
@@ -148,19 +141,6 @@ public abstract class ChunkGenerator<C extends GeneratorSettingsDefault> {
                 ChunkCoordIntPair chunkcoordintpair = ichunkaccess.getPos();
                 StructureStart structurestart = StructureStart.a;
 
-                // CraftBukkit start
-                if (structuregenerator == WorldGenerator.STRONGHOLD) {
-                    synchronized (structuregenerator) {
-                        if (structuregenerator.a(chunkgenerator, seededrandom, chunkcoordintpair.x, chunkcoordintpair.z)) {
-                            BiomeBase biomebase = this.getWorldChunkManager().getBiome(new BlockPosition(chunkcoordintpair.d() + 9, 0, chunkcoordintpair.e() + 9));
-                            StructureStart structurestart1 = structuregenerator.a().create(structuregenerator, chunkcoordintpair.x, chunkcoordintpair.z, biomebase, StructureBoundingBox.a(), 0, chunkgenerator.getSeed());
-
-                            structurestart1.a(this, definedstructuremanager, chunkcoordintpair.x, chunkcoordintpair.z, biomebase);
-                            structurestart = structurestart1.e() ? structurestart1 : StructureStart.a;
-                        }
-                    }
-                } else
-                // CraftBukkit end
                 if (structuregenerator.a(chunkgenerator, seededrandom, chunkcoordintpair.x, chunkcoordintpair.z)) {
                     BiomeBase biomebase = this.getWorldChunkManager().getBiome(new BlockPosition(chunkcoordintpair.d() + 9, 0, chunkcoordintpair.e() + 9));
                     StructureStart structurestart1 = structuregenerator.a().create(structuregenerator, chunkcoordintpair.x, chunkcoordintpair.z, biomebase, StructureBoundingBox.a(), 0, chunkgenerator.getSeed());
diff --git a/src/main/java/net/minecraft/server/ChunkMapDistance.java b/src/main/java/net/minecraft/server/ChunkMapDistance.java
index 63a68872..965f1409 100644
--- a/src/main/java/net/minecraft/server/ChunkMapDistance.java
+++ b/src/main/java/net/minecraft/server/ChunkMapDistance.java
@@ -32,27 +32,44 @@ public abstract class ChunkMapDistance {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final int b = 33 + ChunkStatus.a(ChunkStatus.FULL) - 2;
     private final Long2ObjectMap<ObjectSet<EntityPlayer>> c = new Long2ObjectOpenHashMap();
-    public final Long2ObjectOpenHashMap<ObjectSortedSet<Ticket<?>>> tickets = new Long2ObjectOpenHashMap(); // CraftBukkit - private -> public
-    private final ChunkMapDistance.a e = new ChunkMapDistance.a();
-    private final ChunkMapDistance.b f = new ChunkMapDistance.b(8);
-    private final ChunkMapDistance.c g = new ChunkMapDistance.c(33);
-    private final java.util.Queue<PlayerChunk> pendingChunkUpdates = new java.util.LinkedList<>(); // PAIL pendingChunkUpdates // Paper - use a queue
-    private final ChunkTaskQueueSorter i;
-    private final Mailbox<ChunkTaskQueueSorter.a<Runnable>> j;
-    private final Mailbox<ChunkTaskQueueSorter.b> k;
-    private final LongSet l = new LongOpenHashSet();
-    private final Executor m;
+    private final Long2ObjectMap<ObjectSet<EntityPlayer>> d = new Long2ObjectOpenHashMap();
+    final Long2ObjectOpenHashMap<ObjectSortedSet<Ticket<?>>> tickets = new Long2ObjectOpenHashMap(); // Paper -> private -> package
+    private final ChunkMapDistance.a f = new ChunkMapDistance.a();
+    private final ChunkMapDistance.c g = new ChunkMapDistance.c();
+    private int entitydistance;
+    private final ChunkMapDistance.b i = new ChunkMapDistance.b(8);
+    private final ChunkMapDistance.d j = new ChunkMapDistance.d(33);
+    private Set<PlayerChunk> k = Sets.newHashSet(); // Paper - -final
+    private final PlayerChunk.c l;
+    private final Mailbox<ChunkTaskQueueSorter.a<Runnable>> m;
+    private final Mailbox<ChunkTaskQueueSorter.b> n;
+    private final LongSet o = new LongOpenHashSet();
+    private final Executor p;
     private long currentTick;
 
     protected ChunkMapDistance(Executor executor, Executor executor1) {
-        executor1.getClass();
-        Mailbox<Runnable> mailbox = Mailbox.a("player ticket throttler", executor1::execute);
-        ChunkTaskQueueSorter chunktaskqueuesorter = new ChunkTaskQueueSorter(ImmutableList.of(mailbox), executor, 4);
-
-        this.i = chunktaskqueuesorter;
-        this.j = chunktaskqueuesorter.a(mailbox, true);
-        this.k = chunktaskqueuesorter.a(mailbox);
-        this.m = executor1;
+        ThreadedMailbox<Runnable> threadedmailbox = ThreadedMailbox.a(executor1, "player ticket throttler");
+        ChunkTaskQueueSorter chunktaskqueuesorter = new ChunkTaskQueueSorter(ImmutableList.of(threadedmailbox), executor, 15);
+
+        this.l = chunktaskqueuesorter;
+        this.m = chunktaskqueuesorter.a(threadedmailbox, true);
+        this.n = chunktaskqueuesorter.a((Mailbox) threadedmailbox);
+        this.p = executor1;
+    }
+
+    protected void setEntityDistance(int i) {
+        int j = this.e();
+
+        this.entitydistance = i;
+        int k = this.e();
+        ObjectIterator objectiterator = this.d.long2ObjectEntrySet().iterator();
+
+        while (objectiterator.hasNext()) {
+            Entry<ObjectSet<EntityPlayer>> entry = (Entry) objectiterator.next();
+
+            this.g.b(entry.getLongKey(), k, k < j);
+        }
+
     }
 
     protected void purgeTickets() {
@@ -62,10 +79,10 @@ public abstract class ChunkMapDistance {
         while (objectiterator.hasNext()) {
             Entry<ObjectSortedSet<Ticket<?>>> entry = (Entry) objectiterator.next();
 
-            if ((entry.getValue()).removeIf((ticket) -> { // Craftbukkit - decompile error
+            if ((entry.getValue()).removeIf((ticket) -> { // Paper - decompile fix
                 return ticket.a(this.currentTick);
             })) {
-                this.e.b(entry.getLongKey(), this.a((ObjectSortedSet) entry.getValue()), false);
+                this.f.b(entry.getLongKey(), this.a((ObjectSortedSet) entry.getValue()), false);
             }
 
             if (((ObjectSortedSet) entry.getValue()).isEmpty()) {
@@ -90,9 +107,10 @@ public abstract class ChunkMapDistance {
     protected abstract PlayerChunk a(long i, int j, @Nullable PlayerChunk playerchunk, int k);
 
     public boolean a(PlayerChunkMap playerchunkmap) {
-        this.f.a();
+        this.i.a();
+        this.j.a();
         this.g.a();
-        int i = Integer.MAX_VALUE - this.e.a(Integer.MAX_VALUE);
+        int i = Integer.MAX_VALUE - this.f.a(Integer.MAX_VALUE);
         boolean flag = i != 0;
 
         if (flag) {
@@ -100,20 +118,23 @@ public abstract class ChunkMapDistance {
         }
 
         // Paper start
-        if (!this.pendingChunkUpdates.isEmpty()) {
-            while(!this.pendingChunkUpdates.isEmpty()) {
-                this.pendingChunkUpdates.remove().a(playerchunkmap);
-            }
-            // Paper end
+        Set<PlayerChunk> currentPending = this.k;
+        this.k = Sets.newHashSet();
+        if (!currentPending.isEmpty()) {
+            currentPending.forEach((playerchunk) -> {
+                // Paper end
+                playerchunk.a(playerchunkmap);
+            });
+            this.k.clear();
             return true;
         } else {
-            if (!this.l.isEmpty()) {
-                LongIterator longiterator = this.l.iterator();
+            if (!this.o.isEmpty()) {
+                LongIterator longiterator = this.o.iterator();
 
                 while (longiterator.hasNext()) {
                     long j = longiterator.nextLong();
 
-                    if (this.e(j).stream().anyMatch((ticket) -> {
+                    if (this.d(j).stream().anyMatch((ticket) -> {
                         return ticket.getTicketType() == TicketType.PLAYER;
                     })) {
                         PlayerChunk playerchunk = playerchunkmap.getUpdatingChunk(j);
@@ -125,23 +146,23 @@ public abstract class ChunkMapDistance {
                         CompletableFuture<Either<Chunk, PlayerChunk.Failure>> completablefuture = playerchunk.b();
 
                         completablefuture.thenAccept((either) -> {
-                            this.m.execute(() -> {
-                                this.k.a(ChunkTaskQueueSorter.a(() -> { // Craftbukkit - decompile error
+                            this.p.execute(() -> {
+                                this.n.a(ChunkTaskQueueSorter.a(() -> { // Paper - decompile fix
                                 }, j, false));
                             });
                         });
                     }
                 }
 
-                this.l.clear();
+                this.o.clear();
             }
 
             return flag;
         }
     }
 
-    private boolean addTicket(long i, Ticket<?> ticket) { // CraftBukkit - void -> boolean
-        ObjectSortedSet<Ticket<?>> objectsortedset = this.e(i);
+    private void a(long i, Ticket<?> ticket) {
+        ObjectSortedSet<Ticket<?>> objectsortedset = this.d(i);
         ObjectBidirectionalIterator<Ticket<?>> objectbidirectionaliterator = objectsortedset.iterator();
         int j;
 
@@ -151,152 +172,120 @@ public abstract class ChunkMapDistance {
             j = PlayerChunkMap.GOLDEN_TICKET + 1;
         }
 
-        boolean ret = false; // CraftBukkit
         if (objectsortedset.add(ticket)) {
-            ret = true; // CraftBukkit
+            ;
         }
 
         if (ticket.b() < j) {
-            this.e.b(i, ticket.b(), true);
+            this.f.b(i, ticket.b(), true);
         }
 
-        return ret; // CraftBukkit
     }
 
-    private boolean removeTicket(long i, Ticket<?> ticket) { // CraftBukkit - void -> boolean
-        ObjectSortedSet<Ticket<?>> objectsortedset = this.e(i);
+    private void b(long i, Ticket<?> ticket) {
+        ObjectSortedSet<Ticket<?>> objectsortedset = this.d(i);
 
-        boolean removed = false; // CraftBukkit
         if (objectsortedset.remove(ticket)) {
-            removed = true; // CraftBukkit
+            ;
         }
 
         if (objectsortedset.isEmpty()) {
             this.tickets.remove(i);
         }
 
-        this.e.b(i, this.a(objectsortedset), false);
-        return removed; // CraftBukkit
+        this.f.b(i, this.a(objectsortedset), false);
     }
 
     public <T> void a(TicketType<T> tickettype, ChunkCoordIntPair chunkcoordintpair, int i, T t0) {
-        // CraftBukkit start
-        this.addTicketAtLevel(tickettype, chunkcoordintpair, i, t0);
-    }
-
-    public <T> boolean addTicketAtLevel(TicketType<T> ticketType, ChunkCoordIntPair chunkcoordintpair, int level, T identifier) {
-        return this.addTicket(chunkcoordintpair.pair(), new Ticket<>(ticketType, level, identifier, this.currentTick));
-        // CraftBukkit end
+        this.a(chunkcoordintpair.pair(), new Ticket<>(tickettype, i, t0, this.currentTick));
     }
 
     public <T> void b(TicketType<T> tickettype, ChunkCoordIntPair chunkcoordintpair, int i, T t0) {
-        // CraftBukkit start
-        this.removeTicketAtLevel(tickettype, chunkcoordintpair, i, t0);
-    }
-
-    public <T> boolean removeTicketAtLevel(TicketType<T> ticketType, ChunkCoordIntPair chunkcoordintpair, int level, T identifier) {
-        Ticket<T> ticket = new Ticket<>(ticketType, level, identifier, this.currentTick);
+        Ticket<T> ticket = new Ticket<>(tickettype, i, t0, this.currentTick);
 
-        return this.removeTicket(chunkcoordintpair.pair(), ticket);
-        // CraftBukkit end
+        this.b(chunkcoordintpair.pair(), ticket);
     }
 
     public <T> void addTicket(TicketType<T> tickettype, ChunkCoordIntPair chunkcoordintpair, int i, T t0) {
-        this.addTicket(chunkcoordintpair.pair(), new Ticket<>(tickettype, 33 - i, t0, this.currentTick));
+        this.a(chunkcoordintpair.pair(), new Ticket<>(tickettype, 33 - i, t0, this.currentTick));
     }
 
     public <T> void removeTicket(TicketType<T> tickettype, ChunkCoordIntPair chunkcoordintpair, int i, T t0) {
         Ticket<T> ticket = new Ticket<>(tickettype, 33 - i, t0, this.currentTick);
 
-        this.removeTicket(chunkcoordintpair.pair(), ticket);
+        this.b(chunkcoordintpair.pair(), ticket);
     }
 
-    private ObjectSortedSet<Ticket<?>> e(long i) {
+    private ObjectSortedSet<Ticket<?>> d(long i) {
         return (ObjectSortedSet) this.tickets.computeIfAbsent(i, (j) -> {
             return new ObjectAVLTreeSet();
         });
     }
 
     protected void a(ChunkCoordIntPair chunkcoordintpair, boolean flag) {
-        Ticket<ChunkCoordIntPair> ticket = new Ticket<>(TicketType.FORCED, 31, chunkcoordintpair, this.currentTick);
+        Ticket<ChunkCoordIntPair> ticket = new Ticket<>(TicketType.FORCED, 32, chunkcoordintpair, this.currentTick);
 
         if (flag) {
-            this.addTicket(chunkcoordintpair.pair(), ticket);
+            this.a(chunkcoordintpair.pair(), ticket);
         } else {
-            this.removeTicket(chunkcoordintpair.pair(), ticket);
+            this.b(chunkcoordintpair.pair(), ticket);
         }
 
     }
 
+    private int e() {
+        return 16 - this.entitydistance;
+    }
+
     public void a(SectionPosition sectionposition, EntityPlayer entityplayer) {
         long i = sectionposition.u().pair();
 
+        entityplayer.a(sectionposition);
+        entityplayer.playerConnection.sendPacket(new PacketPlayOutViewCentre(sectionposition.a(), sectionposition.c()));
+        ((ObjectSet) this.d.computeIfAbsent(sectionposition.v(), (j) -> {
+            return new ObjectOpenHashSet();
+        })).add(entityplayer);
         ((ObjectSet) this.c.computeIfAbsent(i, (j) -> {
             return new ObjectOpenHashSet();
         })).add(entityplayer);
-        this.f.b(i, 0, true);
-        this.g.b(i, 0, true);
+        this.i.b(i, 0, true);
+        this.j.b(i, 0, true);
+        this.g.b(sectionposition.v(), this.e(), true);
     }
 
     public void b(SectionPosition sectionposition, EntityPlayer entityplayer) {
         long i = sectionposition.u().pair();
-        ObjectSet<EntityPlayer> objectset = (ObjectSet) this.c.get(i);
+        ObjectSet<EntityPlayer> objectset = (ObjectSet) this.d.get(sectionposition.v());
 
-        objectset.remove(entityplayer);
-        if (objectset.isEmpty()) {
-            this.c.remove(i);
-            this.f.b(i, Integer.MAX_VALUE, false);
-            this.g.b(i, Integer.MAX_VALUE, false);
-        }
+        if (objectset != null) {
+            objectset.remove(entityplayer);
+            if (objectset.isEmpty()) {
+                this.d.remove(sectionposition.v());
+                this.g.b(sectionposition.v(), Integer.MAX_VALUE, false);
+            }
 
-    }
+            ObjectSet<EntityPlayer> objectset1 = (ObjectSet) this.c.get(i);
 
-    protected String c(long i) {
-        ObjectSortedSet<Ticket<?>> objectsortedset = (ObjectSortedSet) this.tickets.get(i);
-        String s;
+            objectset1.remove(entityplayer);
+            if (objectset1.isEmpty()) {
+                this.c.remove(i);
+                this.i.b(i, Integer.MAX_VALUE, false);
+                this.j.b(i, Integer.MAX_VALUE, false);
+            }
 
-        if (objectsortedset != null && !objectsortedset.isEmpty()) {
-            s = ((Ticket) objectsortedset.first()).toString();
-        } else {
-            s = "no_ticket";
         }
-
-        return s;
     }
 
-    protected void a(int i) {
-        this.g.a(i);
+    protected void b(int i) {
+        this.j.a(i);
     }
 
     public int b() {
-        this.f.a();
-        return this.f.a.size();
+        // MCMT: Not thread-safe... disabling for now
+//        this.i.a();
+        return this.i.a.size();
     }
 
-    public boolean d(long i) {
-        this.f.a();
-        return this.f.a.containsKey(i);
-    }
-
-    public String c() {
-        return this.i.a();
-    }
-
-    // CraftBukkit start
-    public <T> void removeAllTicketsFor(TicketType<T> ticketType, int ticketLevel, T ticketIdentifier) {
-        Ticket<T> target = new Ticket<>(ticketType, ticketLevel, ticketIdentifier, this.currentTick);
-
-        for (java.util.Iterator<ObjectSortedSet<Ticket<?>>> iterator = this.tickets.values().iterator(); iterator.hasNext();) {
-            ObjectSortedSet<Ticket<?>> tickets = iterator.next();
-            tickets.remove(target);
-
-            if (tickets.isEmpty()) {
-                iterator.remove();
-            }
-        }
-    }
-    // CraftBukkit end
-
     class a extends ChunkMap {
 
         public a() {
@@ -337,7 +326,7 @@ public abstract class ChunkMapDistance {
             if (k != j) {
                 playerchunk = ChunkMapDistance.this.a(i, j, playerchunk, k);
                 if (playerchunk != null) {
-                    ChunkMapDistance.this.pendingChunkUpdates.add(playerchunk);
+                    ChunkMapDistance.this.k.add(playerchunk);
                 }
 
             }
@@ -348,13 +337,13 @@ public abstract class ChunkMapDistance {
         }
     }
 
-    class c extends ChunkMapDistance.b {
+    class d extends ChunkMapDistance.b {
 
         private int e = 0;
         private final Long2IntMap f = Long2IntMaps.synchronize(new Long2IntOpenHashMap());
         private final LongSet g = new LongOpenHashSet();
 
-        protected c(int i) {
+        protected d(int i) {
             super(i);
             this.f.defaultReturnValue(i + 2);
         }
@@ -383,24 +372,18 @@ public abstract class ChunkMapDistance {
                 Ticket<?> ticket = new Ticket<>(TicketType.PLAYER, ChunkMapDistance.b, new ChunkCoordIntPair(i), ChunkMapDistance.this.currentTick);
 
                 if (flag1) {
-                    ChunkMapDistance.this.j.a(ChunkTaskQueueSorter.a(() -> { // Craftbukkit - decompile error
-                        ChunkMapDistance.this.m.execute(() -> {
-                            if (this.c(this.c(i))) {
-                                ChunkMapDistance.this.addTicket(i, ticket);
-                                ChunkMapDistance.this.l.add(i);
-                            } else {
-                                ChunkMapDistance.this.k.a(ChunkTaskQueueSorter.a(() -> { // Craftbukkit - decompile error
-                                }, i, false));
-                            }
-
+                    ChunkMapDistance.this.m.a(ChunkTaskQueueSorter.a(() -> { // Paper - decompile fix
+                        ChunkMapDistance.this.p.execute(() -> {
+                            ChunkMapDistance.this.a(i, ticket);
+                            ChunkMapDistance.this.o.add(i);
                         });
                     }, i, () -> {
                         return j;
                     }));
                 } else {
-                    ChunkMapDistance.this.k.a(ChunkTaskQueueSorter.a(() -> { // Craftbukkit - decompile error
-                        ChunkMapDistance.this.m.execute(() -> {
-                            ChunkMapDistance.this.removeTicket(i, ticket);
+                    ChunkMapDistance.this.n.a(ChunkTaskQueueSorter.a(() -> { // Paper - decompile fix
+                        ChunkMapDistance.this.p.execute(() -> {
+                            ChunkMapDistance.this.b(i, ticket);
                         });
                     }, i, true));
                 }
@@ -420,15 +403,10 @@ public abstract class ChunkMapDistance {
                     int k = this.c(i);
 
                     if (j != k) {
-                        ChunkMapDistance.this.i.a(new ChunkCoordIntPair(i), () -> {
+                        ChunkMapDistance.this.l.a(new ChunkCoordIntPair(i), () -> {
                             return this.f.get(i);
                         }, k, (l) -> {
-                            if (l >= this.f.defaultReturnValue()) {
-                                this.f.remove(i);
-                            } else {
-                                this.f.put(i, l);
-                            }
-
+                            this.f.put(i, l);
                         });
                         this.a(i, k, this.c(j), this.c(k));
                     }
@@ -444,6 +422,46 @@ public abstract class ChunkMapDistance {
         }
     }
 
+    class c extends LightEngineGraphSection {
+
+        protected final Long2ByteMap a = new Long2ByteOpenHashMap();
+
+        protected c() {
+            super(18, 16, 256);
+            this.a.defaultReturnValue((byte) 18);
+        }
+
+        @Override
+        protected int c(long i) {
+            return this.a.get(i);
+        }
+
+        @Override
+        protected void a(long i, int j) {
+            if (j > 16) {
+                this.a.remove(i);
+            } else {
+                this.a.put(i, (byte) j);
+            }
+
+        }
+
+        @Override
+        protected int b(long i) {
+            return this.d(i) ? ChunkMapDistance.this.e() : Integer.MAX_VALUE;
+        }
+
+        private boolean d(long i) {
+            ObjectSet<EntityPlayer> objectset = (ObjectSet) ChunkMapDistance.this.d.get(i);
+
+            return objectset != null && !objectset.isEmpty();
+        }
+
+        public void a() {
+            this.b(Integer.MAX_VALUE);
+        }
+    }
+
     class b extends ChunkMap {
 
         protected final Long2ByteMap a = new Long2ByteOpenHashMap();
diff --git a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
index b794a39d..c04d3c69 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderGenerate.java
@@ -19,7 +19,6 @@ public class ChunkProviderGenerate extends ChunkGeneratorAbstract<GeneratorSetti
     private final MobSpawnerPhantom k = new MobSpawnerPhantom();
     private final MobSpawnerPatrol l = new MobSpawnerPatrol();
     private final MobSpawnerCat m = new MobSpawnerCat();
-    private final VillageSiege n = new VillageSiege();
 
     public ChunkProviderGenerate(GeneratorAccess generatoraccess, WorldChunkManager worldchunkmanager, GeneratorSettingsOverworld generatorsettingsoverworld) {
         super(generatoraccess, worldchunkmanager, 4, 8, 256, generatorsettingsoverworld, true);
@@ -158,7 +157,6 @@ public class ChunkProviderGenerate extends ChunkGeneratorAbstract<GeneratorSetti
         this.k.a(worldserver, flag, flag1);
         this.l.a(worldserver, flag, flag1);
         this.m.a(worldserver, flag, flag1);
-        this.n.a(worldserver, flag, flag1);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index d714b8d0..02f389d7 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -1,23 +1,17 @@
 package net.minecraft.server;
 
-import com.google.common.annotations.VisibleForTesting;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Either;
-import it.unimi.dsi.fastutil.objects.Object2IntMap;
+
 import java.io.File;
 import java.io.IOException;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Optional;
+import java.util.*;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
 import java.util.function.Function;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
-import com.destroystokyo.paper.exception.ServerInternalException;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 public class ChunkProviderServer extends IChunkProvider {
 
@@ -28,17 +22,20 @@ public class ChunkProviderServer extends IChunkProvider {
     private final WorldServer world;
     private final Thread serverThread;
     private final LightEngineThreaded lightEngine;
-    public final ChunkProviderServer.a serverThreadQueue; // Paper private -> public
+    private final ChunkProviderServer.a serverThreadQueue;
     public final PlayerChunkMap playerChunkMap;
     private final WorldPersistentData worldPersistentData;
     private long lastTickTime;
     public boolean allowMonsters = true;
     public boolean allowAnimals = true;
-    private final long[] cachePos = new long[4];
-    private final ChunkStatus[] cacheStatus = new ChunkStatus[4];
-    private final IChunkAccess[] cacheChunk = new IChunkAccess[4];
-
-    public ChunkProviderServer(WorldServer worldserver, File file, DataFixer datafixer, DefinedStructureManager definedstructuremanager, Executor executor, ChunkGenerator<?> chunkgenerator, int i, WorldLoadListener worldloadlistener, Supplier<WorldPersistentData> supplier) {
+    private final int cacheSize = 4;
+    private final Map<Long, IChunkAccess> chunkMap = new HashMap<>();
+    private final Map<Long, ChunkStatus> statusMap = new HashMap<>();
+    private final long[] cachePos = new long[cacheSize];
+    private final ChunkStatus[] cacheStatus = new ChunkStatus[cacheSize];
+    private final IChunkAccess[] cacheChunk = new IChunkAccess[cacheSize];
+
+    public ChunkProviderServer(WorldServer worldserver, File file, DataFixer datafixer, DefinedStructureManager definedstructuremanager, Executor executor, ChunkGenerator<?> chunkgenerator, int i, int j, WorldLoadListener worldloadlistener, Supplier<WorldPersistentData> supplier) {
         this.world = worldserver;
         this.serverThreadQueue = new ChunkProviderServer.a(worldserver);
         this.chunkGenerator = chunkgenerator;
@@ -48,7 +45,7 @@ public class ChunkProviderServer extends IChunkProvider {
 
         file2.mkdirs();
         this.worldPersistentData = new WorldPersistentData(file2, datafixer);
-        this.playerChunkMap = new PlayerChunkMap(worldserver, file, datafixer, definedstructuremanager, executor, this.serverThreadQueue, this, this.getChunkGenerator(), worldloadlistener, supplier, i);
+        this.playerChunkMap = new PlayerChunkMap(worldserver, file, datafixer, definedstructuremanager, executor, this.serverThreadQueue, this, this.getChunkGenerator(), worldloadlistener, supplier, i, j);
         this.lightEngine = this.playerChunkMap.a();
         this.chunkMapDistance = this.playerChunkMap.e();
         this.clearCache();
@@ -68,93 +65,36 @@ public class ChunkProviderServer extends IChunkProvider {
         return this.playerChunkMap.c();
     }
 
-    private void a(long i, IChunkAccess ichunkaccess, ChunkStatus chunkstatus) {
-        for (int j = 3; j > 0; --j) {
-            this.cachePos[j] = this.cachePos[j - 1];
-            this.cacheStatus[j] = this.cacheStatus[j - 1];
-            this.cacheChunk[j] = this.cacheChunk[j - 1];
-        }
-
-        this.cachePos[0] = i;
-        this.cacheStatus[0] = chunkstatus;
-        this.cacheChunk[0] = ichunkaccess;
-    }
-
-    // Paper start - "real" get chunk if loaded
-    // Note: Partially copied from the getChunkAt method below
-    @Nullable
-    public Chunk getChunkAtIfCachedImmediately(int x, int z) {
-        long k = ChunkCoordIntPair.pair(x, z);
-
-        // Note: Bypass cache to make this MT-Safe
-
-        PlayerChunk playerChunk = this.getChunk(k);
-        if (playerChunk == null) {
-            return null;
-        }
-
-        return playerChunk.getFullChunkIfCached();
-    }
-
-    @Nullable
-    public Chunk getChunkAtIfLoadedImmediately(int x, int z) {
-        long k = ChunkCoordIntPair.pair(x, z);
-
-        // Note: Bypass cache since we need to check ticket level, and to make this MT-Safe
-
-        PlayerChunk playerChunk = this.getChunk(k);
-        if (playerChunk == null) {
-            return null;
-        }
-
-        return playerChunk.getFullChunk();
-    }
-
-    @Nullable
-    public IChunkAccess getChunkAtImmediately(int x, int z) {
-        long k = ChunkCoordIntPair.pair(x, z);
-
-        // Note: Bypass cache to make this MT-Safe
-
-        PlayerChunk playerChunk = this.getChunk(k);
-        if (playerChunk == null) {
-            return null;
-        }
-
-        return playerChunk.getAvailableChunkNow();
-
-    }
-    // Paper end
-
     @Nullable
     @Override
     public IChunkAccess getChunkAt(int i, int j, ChunkStatus chunkstatus, boolean flag) {
-        if (Thread.currentThread() != this.serverThread) {
-            return (IChunkAccess) CompletableFuture.supplyAsync(() -> {
-                return this.getChunkAt(i, j, chunkstatus, flag);
-            }, this.serverThreadQueue).join();
-        } else {
-            long k = ChunkCoordIntPair.pair(i, j);
+        long k = ChunkCoordIntPair.pair(i, j);
 
-            IChunkAccess ichunkaccess;
+        IChunkAccess ichunkaccess;
 
-            for (int l = 0; l < 4; ++l) {
-                if (k == this.cachePos[l] && chunkstatus == this.cacheStatus[l]) {
-                    ichunkaccess = this.cacheChunk[l];
-                    if (ichunkaccess != null) { // CraftBukkit - the chunk can become accessible in the meantime TODO for non-null chunks it might also make sense to check that the chunk's state hasn't changed in the meantime
-                        return ichunkaccess;
-                    }
-                }
-            }
+        if (this.statusMap.get(k) == chunkstatus) {
+            ichunkaccess = this.chunkMap.get(k);
+            if (ichunkaccess != null) return ichunkaccess;
+        }
 
+//        for (int l = 0; l < cacheSize; ++l) {
+//            if (k == this.cachePos[l] && chunkstatus == this.cacheStatus[l]) {
+//                ichunkaccess = this.cacheChunk[l];
+//                if (ichunkaccess != null) { // CraftBukkit - the chunk can become accessible in the meantime TODO for non-null chunks it might also make sense to check that the chunk's state hasn't changed in the meantime
+//                    return ichunkaccess;
+//                }
+//            }
+//        }
+
+        Supplier<IChunkAccess> chunkSupplier = () -> {
+            world.timings.syncChunkLoadTimer.startTiming(); // Spigot
             CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> completablefuture = this.getChunkFutureMainThread(i, j, chunkstatus, flag);
-
-            if (!completablefuture.isDone()) { // Paper
-                this.world.timings.chunkAwait.startTiming(); // Paper
             this.serverThreadQueue.awaitTasks(completablefuture::isDone);
-                this.world.timings.chunkAwait.stopTiming(); // Paper
-            } // Paper
-            ichunkaccess = (IChunkAccess) ((Either) completablefuture.join()).map((ichunkaccess1) -> {
+            world.timings.syncChunkLoadTimer.stopTiming(); // Spigot
+
+            return (IChunkAccess) ((Either) completablefuture.join()).map((ichunkaccess1) -> {
+                this.statusMap.merge(k, chunkstatus, (oldValue, newValue) -> chunkstatus);
+                this.chunkMap.merge(k, (IChunkAccess)ichunkaccess1, (oldValue, newValue) -> newValue);
                 return ichunkaccess1;
             }, (playerchunk_failure) -> {
                 if (flag) {
@@ -163,50 +103,24 @@ public class ChunkProviderServer extends IChunkProvider {
                     return null;
                 }
             });
-            this.a(k, ichunkaccess, chunkstatus);
-            return ichunkaccess;
-        }
-    }
+        };
 
-    @Nullable
-    @Override
-    public Chunk a(int i, int j) {
         if (Thread.currentThread() != this.serverThread) {
-            return null;
+            ichunkaccess = CompletableFuture.supplyAsync(chunkSupplier, this.serverThreadQueue).join();
         } else {
-            long k = ChunkCoordIntPair.pair(i, j);
-
-            for (int l = 0; l < 4; ++l) {
-                if (k == this.cachePos[l] && this.cacheStatus[l] == ChunkStatus.FULL) {
-                    IChunkAccess ichunkaccess = this.cacheChunk[l];
-
-                    return ichunkaccess instanceof Chunk ? (Chunk) ichunkaccess : null;
-                }
-            }
-
-            PlayerChunk playerchunk = this.getChunk(k);
-
-            if (playerchunk == null) {
-                return null;
-            } else {
-                Either<IChunkAccess, PlayerChunk.Failure> either = (Either) playerchunk.b(ChunkStatus.FULL).getNow(null); // Craftbukkit - decompile error
-
-                if (either == null) {
-                    return null;
-                } else {
-                    IChunkAccess ichunkaccess1 = (IChunkAccess) either.left().orElse(null); // Craftbukkit - decompile error
-
-                    if (ichunkaccess1 != null) {
-                        this.a(k, ichunkaccess1, ChunkStatus.FULL);
-                        if (ichunkaccess1 instanceof Chunk) {
-                            return (Chunk) ichunkaccess1;
-                        }
-                    }
-
-                    return null;
-                }
-            }
+            ichunkaccess = chunkSupplier.get();
         }
+
+//        for (int i1 = cacheSize-1; i1 > 0; --i1) {
+//            this.cachePos[i1] = this.cachePos[i1 - 1];
+//            this.cacheStatus[i1] = this.cacheStatus[i1 - 1];
+//            this.cacheChunk[i1] = this.cacheChunk[i1 - 1];
+//        }
+//
+//        this.cachePos[0] = k;
+//        this.cacheStatus[0] = chunkstatus;
+//        this.cacheChunk[0] = ichunkaccess;
+        return ichunkaccess;
     }
 
     private void clearCache() {
@@ -259,7 +173,7 @@ public class ChunkProviderServer extends IChunkProvider {
     }
 
     @Override
-    public IBlockAccess c(int i, int j) {
+    public IBlockAccess b(int i, int j) {
         long k = ChunkCoordIntPair.pair(i, j);
         PlayerChunk playerchunk = this.getChunk(k);
 
@@ -325,12 +239,6 @@ public class ChunkProviderServer extends IChunkProvider {
         return this.a(i, PlayerChunk::a);
     }
 
-    public boolean b(Entity entity) {
-        long i = ChunkCoordIntPair.pair(MathHelper.floor(entity.locX) >> 4, MathHelper.floor(entity.locZ) >> 4);
-
-        return this.a(i, PlayerChunk::c);
-    }
-
     private boolean a(long i, Function<PlayerChunk, CompletableFuture<Either<Chunk, PlayerChunk.Failure>>> function) {
         PlayerChunk playerchunk = this.getChunk(i);
 
@@ -376,9 +284,7 @@ public class ChunkProviderServer extends IChunkProvider {
         this.tickDistanceManager();
         this.world.timings.doChunkMap.stopTiming(); // Spigot
         this.world.getMethodProfiler().exitEnter("chunks");
-        this.world.timings.chunks.startTiming(); // Paper - timings
         this.tickChunks();
-        this.world.timings.chunks.stopTiming(); // Paper - timings
         this.world.timings.doChunkUnload.startTiming(); // Spigot
         this.world.getMethodProfiler().exitEnter("unload");
         this.playerChunkMap.unloadChunks(booleansupplier);
@@ -387,6 +293,10 @@ public class ChunkProviderServer extends IChunkProvider {
         this.clearCache();
     }
 
+    public void tickPartition(int index, PartitionManager partitionManager) {
+        partitionManager.tickPartition(index, world, playerChunkMap, allowAnimals, allowMonsters);
+    }
+
     private void tickChunks() {
         long i = this.world.getTime();
         long j = i - this.lastTickTime;
@@ -394,98 +304,95 @@ public class ChunkProviderServer extends IChunkProvider {
         this.lastTickTime = i;
         WorldData worlddata = this.world.getWorldData();
         boolean flag = worlddata.getType() == WorldType.DEBUG_ALL_BLOCK_STATES;
-        boolean flag1 = this.world.getGameRules().getBoolean(GameRules.DO_MOB_SPAWNING) && !world.getPlayers().isEmpty(); // CraftBukkit
+        boolean flag1 = this.world.getGameRules().getBoolean("doMobSpawning") && !world.getPlayers().isEmpty(); // CraftBukkit
 
         if (!flag) {
-            this.world.getMethodProfiler().enter("pollingChunks");
-            int k = this.world.getGameRules().getInt(GameRules.RANDOM_TICK_SPEED);
-            BlockPosition blockposition = this.world.getSpawn();
-            boolean flag2 = world.ticksPerAnimalSpawns != 0L && worlddata.getTime() % world.ticksPerAnimalSpawns == 0L; // CraftBukkit // PAIL: TODO monster ticks
-
-            this.world.getMethodProfiler().enter("naturalSpawnCount");
-            this.world.timings.countNaturalMobs.startTiming(); // Paper - timings
-            int l = this.chunkMapDistance.b();
-            EnumCreatureType[] aenumcreaturetype = EnumCreatureType.values();
-            Object2IntMap<EnumCreatureType> object2intmap = this.world.l();
-
-            this.world.timings.countNaturalMobs.stopTiming(); // Paper - timings
-            this.world.getMethodProfiler().exit();
-            this.playerChunkMap.f().forEach((playerchunk) -> {
-                Optional<Chunk> optional = ((Either) playerchunk.b().getNow(PlayerChunk.UNLOADED_CHUNK)).left();
+//            this.world.getMethodProfiler().enter("pollingChunks");
+//            int k = this.world.getGameRules().c("randomTickSpeed");
+//            BlockPosition blockposition = this.world.getSpawn();
+//            boolean flag2 = world.ticksPerAnimalSpawns != 0L && worlddata.getTime() % world.ticksPerAnimalSpawns == 0L; // CraftBukkit // PAIL: TODO monster ticks
+//
+//            this.world.getMethodProfiler().enter("naturalSpawnCount");
+//            int l = this.chunkMapDistance.b();
+//            EnumCreatureType[] aenumcreaturetype = EnumCreatureType.values();
+//            Object2IntMap<EnumCreatureType> object2intmap = this.world.l();
+//
+//            this.world.getMethodProfiler().exit();
+//            ObjectBidirectionalIterator objectbidirectionaliterator = this.playerChunkMap.f();
+//
+//            while (objectbidirectionaliterator.hasNext()) {
+//                Entry<PlayerChunk> entry = (Entry) objectbidirectionaliterator.next();
+//                PlayerChunk playerchunk = (PlayerChunk) entry.getValue();
+//                Optional<Chunk> optional = ((Either) playerchunk.b().getNow(PlayerChunk.UNLOADED_CHUNK)).left();
+//
+//                if (optional.isPresent()) {
+//                    Chunk chunk = (Chunk) optional.get();
+//
+//                    this.world.getMethodProfiler().enter("broadcast");
+//                    playerchunk.a(chunk);
+//                    this.world.getMethodProfiler().exit();
+//                    ChunkCoordIntPair chunkcoordintpair = playerchunk.h();
+//
+//                    if (!this.playerChunkMap.isOutsideOfRange(chunkcoordintpair, false)) { // Spigot
+//                        chunk.b(chunk.q() + j);
+//                        if (flag1 && (this.allowMonsters || this.allowAnimals) && this.world.getWorldBorder().isInBounds(chunk.getPos()) && !this.playerChunkMap.isOutsideOfRange(chunkcoordintpair, true)) { // Spigot
+//                            this.world.getMethodProfiler().enter("spawner");
+//                            this.world.timings.mobSpawn.startTiming(); // Spigot
+//                            EnumCreatureType[] aenumcreaturetype1 = aenumcreaturetype;
+//                            int i1 = aenumcreaturetype.length;
+//
+//                            for (int j1 = 0; j1 < i1; ++j1) {
+//                                EnumCreatureType enumcreaturetype = aenumcreaturetype1[j1];
+//
+//                                // CraftBukkit start - Use per-world spawn limits
+//                                int limit = enumcreaturetype.b();
+//                                switch (enumcreaturetype) {
+//                                    case MONSTER:
+//                                        limit = world.getWorld().getMonsterSpawnLimit();
+//                                        break;
+//                                    case CREATURE:
+//                                        limit = world.getWorld().getAnimalSpawnLimit();
+//                                        break;
+//                                    case WATER_CREATURE:
+//                                        limit = world.getWorld().getWaterAnimalSpawnLimit();
+//                                        break;
+//                                    case AMBIENT:
+//                                        limit = world.getWorld().getAmbientSpawnLimit();
+//                                        break;
+//                                }
+//
+//                                if (limit == 0) {
+//                                    continue;
+//                                }
+//                                // CraftBukkit end
+//
+//                                if (enumcreaturetype != EnumCreatureType.MISC && (!enumcreaturetype.c() || this.allowAnimals) && (enumcreaturetype.c() || this.allowMonsters) && (!enumcreaturetype.d() || flag2)) {
+//                                    int k1 = limit * l / ChunkProviderServer.b; // CraftBukkit - use per-world limits
+//
+//                                    if (object2intmap.getInt(enumcreaturetype) <= k1) {
+//                                        SpawnerCreature.a(enumcreaturetype, (World) this.world, chunk, blockposition);
+//                                    }
+//                                }
+//                            }
+//
+//                            this.world.timings.mobSpawn.stopTiming(); // Spigot
+//                            this.world.getMethodProfiler().exit();
+//                        }
+//
+//                        this.world.timings.chunkTicks.startTiming(); // Spigot
+//                        this.world.a(chunk, k);
+//                        this.world.timings.chunkTicks.stopTiming(); // Spigot
+//                    }
+//                }
+//            }
 
-                if (optional.isPresent()) {
-                    Chunk chunk = (Chunk) optional.get();
-
-                    this.world.getMethodProfiler().enter("broadcast");
-                    this.world.timings.broadcastChunkUpdates.startTiming(); // Paper - timings
-                    playerchunk.a(chunk);
-                    this.world.timings.broadcastChunkUpdates.stopTiming(); // Paper - timings
-                    this.world.getMethodProfiler().exit();
-                    ChunkCoordIntPair chunkcoordintpair = playerchunk.i();
-
-                    if (!this.playerChunkMap.isOutsideOfRange(chunkcoordintpair)) {
-                        chunk.b(chunk.q() + j);
-                        if (flag1 && (this.allowMonsters || this.allowAnimals) && this.world.getWorldBorder().isInBounds(chunk.getPos()) && !this.playerChunkMap.isOutsideOfRange(chunkcoordintpair, true)) { // Spigot
-                            this.world.getMethodProfiler().enter("spawner");
-                            this.world.timings.mobSpawn.startTiming(); // Spigot
-                            EnumCreatureType[] aenumcreaturetype1 = aenumcreaturetype;
-                            int i1 = aenumcreaturetype.length;
-
-                            for (int j1 = 0; j1 < i1; ++j1) {
-                                EnumCreatureType enumcreaturetype = aenumcreaturetype1[j1];
-
-                                // CraftBukkit start - Use per-world spawn limits
-                                int limit = enumcreaturetype.b();
-                                switch (enumcreaturetype) {
-                                    case MONSTER:
-                                        limit = world.getWorld().getMonsterSpawnLimit();
-                                        break;
-                                    case CREATURE:
-                                        limit = world.getWorld().getAnimalSpawnLimit();
-                                        break;
-                                    case WATER_CREATURE:
-                                        limit = world.getWorld().getWaterAnimalSpawnLimit();
-                                        break;
-                                    case AMBIENT:
-                                        limit = world.getWorld().getAmbientSpawnLimit();
-                                        break;
-                                }
-
-                                if (limit == 0) {
-                                    continue;
-                                }
-                                // CraftBukkit end
-
-                                if (enumcreaturetype != EnumCreatureType.MISC && (!enumcreaturetype.c() || this.allowAnimals) && (enumcreaturetype.c() || this.allowMonsters) && (!enumcreaturetype.d() || flag2)) {
-                                    int k1 = limit * l / ChunkProviderServer.b; // CraftBukkit - use per-world limits
-
-                                    // Paper start - only allow spawns upto the limit per chunk and update count afterwards
-                                    int currEntityCount = object2intmap.getInt(enumcreaturetype);
-                                    int difference = k1 - currEntityCount;
-                                    if (difference > 0) {
-                                        object2intmap.put(enumcreaturetype, currEntityCount + SpawnerCreature.spawnMobs(enumcreaturetype, world, chunk, blockposition, difference));
-                                    // Paper end
-                                    }
-                                }
-                            }
-
-                            this.world.timings.mobSpawn.stopTiming(); // Spigot
-                            this.world.getMethodProfiler().exit();
-                        }
-
-                        this.world.timings.chunkTicks.startTiming(); // Spigot // Paper
-                        this.world.a(chunk, k);
-                        this.world.timings.chunkTicks.stopTiming(); // Spigot // Paper
-                    }
-                }
-            });
             this.world.getMethodProfiler().enter("customSpawners");
             if (flag1) {
                 this.chunkGenerator.doMobSpawning(this.world, this.allowMonsters, this.allowAnimals);
             }
 
             this.world.getMethodProfiler().exit();
-            this.world.getMethodProfiler().exit();
+//            this.world.getMethodProfiler().exit();
         }
 
         this.playerChunkMap.g();
@@ -493,12 +400,7 @@ public class ChunkProviderServer extends IChunkProvider {
 
     @Override
     public String getName() {
-        return "ServerChunkCache: " + this.h();
-    }
-
-    @VisibleForTesting
-    public int f() {
-        return this.serverThreadQueue.be();
+        return "ServerChunkCache: " + this.g();
     }
 
     @Override
@@ -506,7 +408,7 @@ public class ChunkProviderServer extends IChunkProvider {
         return this.chunkGenerator;
     }
 
-    public int h() {
+    public int g() {
         return this.playerChunkMap.d();
     }
 
@@ -566,8 +468,8 @@ public class ChunkProviderServer extends IChunkProvider {
         this.playerChunkMap.broadcast(entity, packet);
     }
 
-    public void setViewDistance(int i) {
-        this.playerChunkMap.setViewDistance(i);
+    public void setViewDistance(int i, int j) {
+        this.playerChunkMap.setViewDistance(i, j);
     }
 
     @Override
@@ -580,7 +482,7 @@ public class ChunkProviderServer extends IChunkProvider {
         return this.worldPersistentData;
     }
 
-    public VillagePlace j() {
+    public VillagePlace i() {
         return this.playerChunkMap.h();
     }
 
@@ -612,18 +514,12 @@ public class ChunkProviderServer extends IChunkProvider {
 
         @Override
         protected boolean executeNext() {
-        // CraftBukkit start - process pending Chunk loadCallback() and unloadCallback() after each run task
-        try {
             if (ChunkProviderServer.this.tickDistanceManager()) {
                 return true;
             } else {
                 ChunkProviderServer.this.lightEngine.queueUpdate();
                 return super.executeNext();
             }
-        } finally {
-            playerChunkMap.callbackExecutor.run();
-        }
-        // CraftBukkit end
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index a0280741..2f749fe2 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -74,7 +74,7 @@ public class ChunkRegionLoader {
             byte b0 = nbttagcompound2.getByte("Y");
 
             if (nbttagcompound2.hasKeyOfType("Palette", 9) && nbttagcompound2.hasKeyOfType("BlockStates", 12)) {
-                ChunkSection chunksection = new ChunkSection(b0 << 4, null, worldserver, false); // Paper - Anti-Xray
+                ChunkSection chunksection = new ChunkSection(b0 << 4);
 
                 chunksection.getBlocks().a(nbttagcompound2.getList("Palette", 10), nbttagcompound2.getLongArray("BlockStates"));
                 chunksection.recalcBlockCounts();
@@ -132,7 +132,7 @@ public class ChunkRegionLoader {
                 loadEntities(nbttagcompound1, chunk);
             });
         } else {
-            ProtoChunk protochunk = new ProtoChunk(chunkcoordintpair, chunkconverter, achunksection, protochunkticklist, protochunkticklist1, worldserver); // Paper - Anti-Xray
+            ProtoChunk protochunk = new ProtoChunk(chunkcoordintpair, chunkconverter, achunksection, protochunkticklist, protochunkticklist1);
 
             object = protochunk;
             protochunk.a(abiomebase);
@@ -258,7 +258,6 @@ public class ChunkRegionLoader {
         ChunkSection[] achunksection = ichunkaccess.getSections();
         NBTTagList nbttaglist = new NBTTagList();
         LightEngineThreaded lightenginethreaded = worldserver.getChunkProvider().getLightEngine();
-        boolean flag = ichunkaccess.r();
 
         NBTTagCompound nbttagcompound2;
 
@@ -290,7 +289,7 @@ public class ChunkRegionLoader {
         }
 
         nbttagcompound1.set("Sections", nbttaglist);
-        if (flag) {
+        if (ichunkaccess.r()) {
             nbttagcompound1.setBoolean("isLightOn", true);
         }
 
@@ -376,7 +375,7 @@ public class ChunkRegionLoader {
         TickList<Block> ticklist = ichunkaccess.n();
 
         if (ticklist instanceof ProtoChunkTickList) {
-            nbttagcompound1.set("ToBeTicked", ((ProtoChunkTickList) ticklist).b());
+            nbttagcompound1.set("ToBeTicked", ((ProtoChunkTickList) ticklist).a());
         } else if (ticklist instanceof TickListChunk) {
             nbttagcompound1.set("TileTicks", ((TickListChunk) ticklist).a(worldserver.getTime()));
         } else {
@@ -386,7 +385,7 @@ public class ChunkRegionLoader {
         TickList<FluidType> ticklist1 = ichunkaccess.o();
 
         if (ticklist1 instanceof ProtoChunkTickList) {
-            nbttagcompound1.set("LiquidsToBeTicked", ((ProtoChunkTickList) ticklist1).b());
+            nbttagcompound1.set("LiquidsToBeTicked", ((ProtoChunkTickList) ticklist1).a());
         } else if (ticklist1 instanceof TickListChunk) {
             nbttagcompound1.set("LiquidTicks", ((TickListChunk) ticklist1).a(worldserver.getTime()));
         } else {
@@ -410,17 +409,6 @@ public class ChunkRegionLoader {
         return nbttagcompound;
     }
 
-    // Paper start
-    public static ChunkStatus getStatus(NBTTagCompound compound) {
-        if (compound == null) {
-            return null;
-        }
-
-        // Note: Copied from below
-        return ChunkStatus.getStatus(compound.getCompound("Level").getString("Status"));
-    }
-    // Paper end
-
     public static ChunkStatus.Type a(@Nullable NBTTagCompound nbttagcompound) {
         if (nbttagcompound != null) {
             ChunkStatus chunkstatus = ChunkStatus.a(nbttagcompound.getCompound("Level").getString("Status"));
diff --git a/src/main/java/net/minecraft/server/ChunkSection.java b/src/main/java/net/minecraft/server/ChunkSection.java
index 584b3e63..43f75fc8 100644
--- a/src/main/java/net/minecraft/server/ChunkSection.java
+++ b/src/main/java/net/minecraft/server/ChunkSection.java
@@ -6,31 +6,21 @@ public class ChunkSection {
 
     public static final DataPalette<IBlockData> GLOBAL_PALETTE = new DataPaletteGlobal<>(Block.REGISTRY_ID, Blocks.AIR.getBlockData());
     private final int yPos;
-    short nonEmptyBlockCount; // Paper - private -> package-private
+    private short nonEmptyBlockCount;
     private short tickingBlockCount;
     private short e;
     final DataPaletteBlock<IBlockData> blockIds; // Paper - package
 
     public ChunkSection(int i) {
-        // Paper start - add parameters
-        this(i, (IChunkAccess)null, (IWorldReader)null, true);
-    }
-    public ChunkSection(int i, IChunkAccess chunk, IWorldReader world, boolean initializeBlocks) {
-        this(i, (short) 0, (short) 0, (short) 0, chunk, world, initializeBlocks);
-        // Paper end
+        this(i, (short) 0, (short) 0, (short) 0);
     }
 
     public ChunkSection(int i, short short0, short short1, short short2) {
-        // Paper start - add parameters
-        this(i, short0, short1, short2, (IChunkAccess)null, (IWorldReader)null, true);
-    }
-    public ChunkSection(int i, short short0, short short1, short short2, IChunkAccess chunk, IWorldReader world, boolean initializeBlocks) {
-        // Paper end
         this.yPos = i;
         this.nonEmptyBlockCount = short0;
         this.tickingBlockCount = short1;
         this.e = short2;
-        this.blockIds = new DataPaletteBlock<>(ChunkSection.GLOBAL_PALETTE, Block.REGISTRY_ID, GameProfileSerializer::d, GameProfileSerializer::a, Blocks.AIR.getBlockData(), world instanceof GeneratorAccess ? ((GeneratorAccess) world).getMinecraftWorld().chunkPacketBlockController.getPredefinedBlockData(world, chunk, this, initializeBlocks) : null, initializeBlocks); // Paper - Anti-Xray - Add predefined block data
+        this.blockIds = new DataPaletteBlock<>(ChunkSection.GLOBAL_PALETTE, Block.REGISTRY_ID, GameProfileSerializer::d, GameProfileSerializer::a, Blocks.AIR.getBlockData());
     }
 
     public IBlockData getType(int i, int j, int k) {
@@ -118,24 +108,30 @@ public class ChunkSection {
         this.nonEmptyBlockCount = 0;
         this.tickingBlockCount = 0;
         this.e = 0;
-        this.blockIds.a((iblockdata, i) -> {
-            Fluid fluid = iblockdata.p();
-
-            if (!iblockdata.isAir()) {
-                this.nonEmptyBlockCount = (short) (this.nonEmptyBlockCount + i);
-                if (iblockdata.q()) {
-                    this.tickingBlockCount = (short) (this.tickingBlockCount + i);
-                }
-            }
 
-            if (!fluid.isEmpty()) {
-                this.nonEmptyBlockCount = (short) (this.nonEmptyBlockCount + i);
-                if (fluid.h()) {
-                    this.e = (short) (this.e + i);
+        for (int i = 0; i < 16; ++i) {
+            for (int j = 0; j < 16; ++j) {
+                for (int k = 0; k < 16; ++k) {
+                    IBlockData iblockdata = this.getType(i, j, k);
+                    Fluid fluid = this.b(i, j, k);
+
+                    if (!iblockdata.isAir()) {
+                        ++this.nonEmptyBlockCount;
+                        if (iblockdata.q()) {
+                            ++this.tickingBlockCount;
+                        }
+                    }
+
+                    if (!fluid.isEmpty()) {
+                        ++this.nonEmptyBlockCount;
+                        if (fluid.g()) {
+                            ++this.e;
+                        }
+                    }
                 }
             }
+        }
 
-        });
     }
 
     public DataPaletteBlock<IBlockData> getBlocks() {
diff --git a/src/main/java/net/minecraft/server/ChunkStatus.java b/src/main/java/net/minecraft/server/ChunkStatus.java
deleted file mode 100644
index e324989b..00000000
--- a/src/main/java/net/minecraft/server/ChunkStatus.java
+++ /dev/null
@@ -1,260 +0,0 @@
-package net.minecraft.server;
-
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Lists;
-import com.mojang.datafixers.util.Either;
-import it.unimi.dsi.fastutil.ints.IntArrayList;
-import it.unimi.dsi.fastutil.ints.IntList;
-import java.util.Collections;
-import java.util.EnumSet;
-import java.util.List;
-import java.util.concurrent.CompletableFuture;
-import java.util.function.Function;
-import javax.annotation.Nullable;
-
-public class ChunkStatus {
-
-    private static final EnumSet<HeightMap.Type> n = EnumSet.of(HeightMap.Type.OCEAN_FLOOR_WG, HeightMap.Type.WORLD_SURFACE_WG);
-    private static final EnumSet<HeightMap.Type> o = EnumSet.of(HeightMap.Type.OCEAN_FLOOR, HeightMap.Type.WORLD_SURFACE, HeightMap.Type.MOTION_BLOCKING, HeightMap.Type.MOTION_BLOCKING_NO_LEAVES);
-    private static final ChunkStatus.c p = (chunkstatus, worldserver, definedstructuremanager, lightenginethreaded, function, ichunkaccess) -> {
-        if (ichunkaccess instanceof ProtoChunk && !ichunkaccess.getChunkStatus().b(chunkstatus)) {
-            ((ProtoChunk) ichunkaccess).a(chunkstatus);
-        }
-
-        return CompletableFuture.completedFuture(Either.left(ichunkaccess));
-    };
-    public static final ChunkStatus EMPTY = a("empty", (ChunkStatus) null, -1, ChunkStatus.n, ChunkStatus.Type.PROTOCHUNK, (worldserver, chunkgenerator, list, ichunkaccess) -> {
-    });
-    public static final ChunkStatus STRUCTURE_STARTS = a("structure_starts", ChunkStatus.EMPTY, 0, ChunkStatus.n, ChunkStatus.Type.PROTOCHUNK, (chunkstatus, worldserver, chunkgenerator, definedstructuremanager, lightenginethreaded, function, list, ichunkaccess) -> {
-        if (!ichunkaccess.getChunkStatus().b(chunkstatus)) {
-            if (worldserver.getWorldData().shouldGenerateMapFeatures()) {
-                chunkgenerator.createStructures(ichunkaccess, chunkgenerator, definedstructuremanager);
-            }
-
-            if (ichunkaccess instanceof ProtoChunk) {
-                ((ProtoChunk) ichunkaccess).a(chunkstatus);
-            }
-        }
-
-        return CompletableFuture.completedFuture(Either.left(ichunkaccess));
-    });
-    public static final ChunkStatus STRUCTURE_REFERENCES = a("structure_references", ChunkStatus.STRUCTURE_STARTS, 8, ChunkStatus.n, ChunkStatus.Type.PROTOCHUNK, (worldserver, chunkgenerator, list, ichunkaccess) -> {
-        chunkgenerator.storeStructures(new RegionLimitedWorldAccess(worldserver, list), ichunkaccess);
-    });
-    public static final ChunkStatus BIOMES = a("biomes", ChunkStatus.STRUCTURE_REFERENCES, 0, ChunkStatus.n, ChunkStatus.Type.PROTOCHUNK, (worldserver, chunkgenerator, list, ichunkaccess) -> {
-        chunkgenerator.createBiomes(ichunkaccess);
-    });
-    public static final ChunkStatus NOISE = a("noise", ChunkStatus.BIOMES, 8, ChunkStatus.n, ChunkStatus.Type.PROTOCHUNK, (worldserver, chunkgenerator, list, ichunkaccess) -> {
-        chunkgenerator.buildNoise(new RegionLimitedWorldAccess(worldserver, list), ichunkaccess);
-    });
-    public static final ChunkStatus SURFACE = a("surface", ChunkStatus.NOISE, 0, ChunkStatus.n, ChunkStatus.Type.PROTOCHUNK, (worldserver, chunkgenerator, list, ichunkaccess) -> {
-        chunkgenerator.buildBase(ichunkaccess);
-    });
-    public static final ChunkStatus CARVERS = a("carvers", ChunkStatus.SURFACE, 0, ChunkStatus.n, ChunkStatus.Type.PROTOCHUNK, (worldserver, chunkgenerator, list, ichunkaccess) -> {
-        chunkgenerator.doCarving(ichunkaccess, WorldGenStage.Features.AIR);
-    });
-    public static final ChunkStatus LIQUID_CARVERS = a("liquid_carvers", ChunkStatus.CARVERS, 0, ChunkStatus.o, ChunkStatus.Type.PROTOCHUNK, (worldserver, chunkgenerator, list, ichunkaccess) -> {
-        chunkgenerator.doCarving(ichunkaccess, WorldGenStage.Features.LIQUID);
-    });
-    public static final ChunkStatus FEATURES = a("features", ChunkStatus.LIQUID_CARVERS, 8, ChunkStatus.o, ChunkStatus.Type.PROTOCHUNK, (chunkstatus, worldserver, chunkgenerator, definedstructuremanager, lightenginethreaded, function, list, ichunkaccess) -> {
-        ichunkaccess.a((LightEngine) lightenginethreaded);
-        if (!ichunkaccess.getChunkStatus().b(chunkstatus)) {
-            HeightMap.a(ichunkaccess, EnumSet.of(HeightMap.Type.MOTION_BLOCKING, HeightMap.Type.MOTION_BLOCKING_NO_LEAVES, HeightMap.Type.OCEAN_FLOOR, HeightMap.Type.WORLD_SURFACE));
-            chunkgenerator.addDecorations(new RegionLimitedWorldAccess(worldserver, list));
-            if (ichunkaccess instanceof ProtoChunk) {
-                ((ProtoChunk) ichunkaccess).a(chunkstatus);
-            }
-        }
-
-        return CompletableFuture.completedFuture(Either.left(ichunkaccess));
-    });
-    public static final ChunkStatus LIGHT = a("light", ChunkStatus.FEATURES, 1, ChunkStatus.o, ChunkStatus.Type.PROTOCHUNK, (chunkstatus, worldserver, chunkgenerator, definedstructuremanager, lightenginethreaded, function, list, ichunkaccess) -> {
-        return a(chunkstatus, lightenginethreaded, ichunkaccess);
-    }, (chunkstatus, worldserver, definedstructuremanager, lightenginethreaded, function, ichunkaccess) -> {
-        return a(chunkstatus, lightenginethreaded, ichunkaccess);
-    });
-    public static final ChunkStatus SPAWN = a("spawn", ChunkStatus.LIGHT, 0, ChunkStatus.o, ChunkStatus.Type.PROTOCHUNK, (worldserver, chunkgenerator, list, ichunkaccess) -> {
-        chunkgenerator.addMobs(new RegionLimitedWorldAccess(worldserver, list));
-    });
-    public static final ChunkStatus HEIGHTMAPS = a("heightmaps", ChunkStatus.SPAWN, 0, ChunkStatus.o, ChunkStatus.Type.PROTOCHUNK, (worldserver, chunkgenerator, list, ichunkaccess) -> {
-    });
-    public static final ChunkStatus FULL = a("full", ChunkStatus.HEIGHTMAPS, 0, ChunkStatus.o, ChunkStatus.Type.LEVELCHUNK, (chunkstatus, worldserver, chunkgenerator, definedstructuremanager, lightenginethreaded, function, list, ichunkaccess) -> {
-        return (CompletableFuture) function.apply(ichunkaccess);
-    }, (chunkstatus, worldserver, definedstructuremanager, lightenginethreaded, function, ichunkaccess) -> {
-        return (CompletableFuture) function.apply(ichunkaccess);
-    });
-    private static final List<ChunkStatus> q = ImmutableList.of(ChunkStatus.FULL, ChunkStatus.FEATURES, ChunkStatus.LIQUID_CARVERS, ChunkStatus.STRUCTURE_STARTS, ChunkStatus.STRUCTURE_STARTS, ChunkStatus.STRUCTURE_STARTS, ChunkStatus.STRUCTURE_STARTS, ChunkStatus.STRUCTURE_STARTS, ChunkStatus.STRUCTURE_STARTS, ChunkStatus.STRUCTURE_STARTS, ChunkStatus.STRUCTURE_STARTS);
-    private static final IntList r = (IntList) SystemUtils.a((new IntArrayList(a().size())), (java.util.function.Consumer<IntArrayList>)(IntArrayList intarraylist) -> { // Paper - decompile fix
-        int i = 0;
-
-        for (int j = a().size() - 1; j >= 0; --j) {
-            while (i + 1 < ChunkStatus.q.size() && j <= ((ChunkStatus) ChunkStatus.q.get(i + 1)).c()) {
-                ++i;
-            }
-
-            intarraylist.add(0, i);
-        }
-
-    });
-    private final String s;
-    private final int t;
-    private final ChunkStatus u;
-    private final ChunkStatus.b v;
-    private final ChunkStatus.c w;
-    private final int x;
-    private final ChunkStatus.Type y;
-    private final EnumSet<HeightMap.Type> z;
-
-    private static CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> a(ChunkStatus chunkstatus, LightEngineThreaded lightenginethreaded, IChunkAccess ichunkaccess) {
-        boolean flag = a(chunkstatus, ichunkaccess);
-
-        if (!ichunkaccess.getChunkStatus().b(chunkstatus)) {
-            ((ProtoChunk) ichunkaccess).a(chunkstatus);
-        }
-
-        return lightenginethreaded.a(ichunkaccess, flag).thenApply(Either::left);
-    }
-
-    private static ChunkStatus a(String s, @Nullable ChunkStatus chunkstatus, int i, EnumSet<HeightMap.Type> enumset, ChunkStatus.Type chunkstatus_type, ChunkStatus.d chunkstatus_d) {
-        return a(s, chunkstatus, i, enumset, chunkstatus_type, (ChunkStatus.b) chunkstatus_d);
-    }
-
-    private static ChunkStatus a(String s, @Nullable ChunkStatus chunkstatus, int i, EnumSet<HeightMap.Type> enumset, ChunkStatus.Type chunkstatus_type, ChunkStatus.b chunkstatus_b) {
-        return a(s, chunkstatus, i, enumset, chunkstatus_type, chunkstatus_b, ChunkStatus.p);
-    }
-
-    private static ChunkStatus a(String s, @Nullable ChunkStatus chunkstatus, int i, EnumSet<HeightMap.Type> enumset, ChunkStatus.Type chunkstatus_type, ChunkStatus.b chunkstatus_b, ChunkStatus.c chunkstatus_c) {
-        return (ChunkStatus) IRegistry.a((IRegistry) IRegistry.CHUNK_STATUS, s, (Object) (new ChunkStatus(s, chunkstatus, i, enumset, chunkstatus_type, chunkstatus_b, chunkstatus_c)));
-    }
-
-    public static List<ChunkStatus> a() {
-        List<ChunkStatus> list = Lists.newArrayList();
-
-        ChunkStatus chunkstatus;
-
-        for (chunkstatus = ChunkStatus.FULL; chunkstatus.e() != chunkstatus; chunkstatus = chunkstatus.e()) {
-            list.add(chunkstatus);
-        }
-
-        list.add(chunkstatus);
-        Collections.reverse(list);
-        return list;
-    }
-
-    private static boolean a(ChunkStatus chunkstatus, IChunkAccess ichunkaccess) {
-        return ichunkaccess.getChunkStatus().b(chunkstatus) && ichunkaccess.r();
-    }
-
-    public static ChunkStatus a(int i) {
-        return i >= ChunkStatus.q.size() ? ChunkStatus.EMPTY : (i < 0 ? ChunkStatus.FULL : (ChunkStatus) ChunkStatus.q.get(i));
-    }
-
-    public static int b() {
-        return ChunkStatus.q.size();
-    }
-
-    public static int a(ChunkStatus chunkstatus) {
-        return ChunkStatus.r.getInt(chunkstatus.c());
-    }
-
-    ChunkStatus(String s, @Nullable ChunkStatus chunkstatus, int i, EnumSet<HeightMap.Type> enumset, ChunkStatus.Type chunkstatus_type, ChunkStatus.b chunkstatus_b, ChunkStatus.c chunkstatus_c) {
-        this.s = s;
-        this.u = chunkstatus == null ? this : chunkstatus;
-        this.v = chunkstatus_b;
-        this.w = chunkstatus_c;
-        this.x = i;
-        this.y = chunkstatus_type;
-        this.z = enumset;
-        this.t = chunkstatus == null ? 0 : chunkstatus.c() + 1;
-    }
-
-    public int c() {
-        return this.t;
-    }
-
-    public String d() {
-        return this.s;
-    }
-
-    public ChunkStatus getPreviousStatus() { return this.e(); } // Paper - OBFHELPER
-    public ChunkStatus e() {
-        return this.u;
-    }
-
-    public CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> a(WorldServer worldserver, ChunkGenerator<?> chunkgenerator, DefinedStructureManager definedstructuremanager, LightEngineThreaded lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, List<IChunkAccess> list) {
-        return this.v.doWork(this, worldserver, chunkgenerator, definedstructuremanager, lightenginethreaded, function, list, (IChunkAccess) list.get(list.size() / 2));
-    }
-
-    public CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> a(WorldServer worldserver, DefinedStructureManager definedstructuremanager, LightEngineThreaded lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, IChunkAccess ichunkaccess) {
-        return this.w.doWork(this, worldserver, definedstructuremanager, lightenginethreaded, function, ichunkaccess);
-    }
-
-    public int f() {
-        return this.x;
-    }
-
-    public ChunkStatus.Type getType() {
-        return this.y;
-    }
-
-    // Paper start
-    public static ChunkStatus getStatus(String name) {
-        try {
-            // We need this otherwise we return EMPTY for invalid names
-            MinecraftKey key = new MinecraftKey(name);
-            return IRegistry.CHUNK_STATUS.getOptional(key).orElse(null);
-        } catch (Exception ex) {
-            return null; // invalid name
-        }
-    }
-    // Paper end
-    public static ChunkStatus a(String s) {
-        return (ChunkStatus) IRegistry.CHUNK_STATUS.get(MinecraftKey.a(s));
-    }
-
-    public EnumSet<HeightMap.Type> h() {
-        return this.z;
-    }
-
-    public boolean b(ChunkStatus chunkstatus) {
-        return this.c() >= chunkstatus.c();
-    }
-
-    public String toString() {
-        return IRegistry.CHUNK_STATUS.getKey(this).toString();
-    }
-
-    public static enum Type {
-
-        PROTOCHUNK, LEVELCHUNK;
-
-        private Type() {}
-    }
-
-    interface d extends ChunkStatus.b {
-
-        @Override
-        default CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> doWork(ChunkStatus chunkstatus, WorldServer worldserver, ChunkGenerator<?> chunkgenerator, DefinedStructureManager definedstructuremanager, LightEngineThreaded lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, List<IChunkAccess> list, IChunkAccess ichunkaccess) {
-            if (!ichunkaccess.getChunkStatus().b(chunkstatus)) {
-                this.doWork(worldserver, chunkgenerator, list, ichunkaccess);
-                if (ichunkaccess instanceof ProtoChunk) {
-                    ((ProtoChunk) ichunkaccess).a(chunkstatus);
-                }
-            }
-
-            return CompletableFuture.completedFuture(Either.left(ichunkaccess));
-        }
-
-        void doWork(WorldServer worldserver, ChunkGenerator<?> chunkgenerator, List<IChunkAccess> list, IChunkAccess ichunkaccess);
-    }
-
-    interface c {
-
-        CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> doWork(ChunkStatus chunkstatus, WorldServer worldserver, DefinedStructureManager definedstructuremanager, LightEngineThreaded lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, IChunkAccess ichunkaccess);
-    }
-
-    interface b {
-
-        CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> doWork(ChunkStatus chunkstatus, WorldServer worldserver, ChunkGenerator<?> chunkgenerator, DefinedStructureManager definedstructuremanager, LightEngineThreaded lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, List<IChunkAccess> list, IChunkAccess ichunkaccess);
-    }
-}
diff --git a/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java b/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java
index 23a69ba5..9e568d5d 100644
--- a/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java
+++ b/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java
@@ -104,7 +104,7 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
                 this.successCount = 0;
                 MinecraftServer minecraftserver = this.d().getMinecraftServer();
 
-                if (minecraftserver != null && minecraftserver.F() && minecraftserver.getEnableCommandBlock() && !UtilColor.b(this.command)) {
+                if (minecraftserver != null && minecraftserver.E() && minecraftserver.getEnableCommandBlock() && !UtilColor.b(this.command)) {
                     try {
                         this.lastOutput = null;
                         this.successCount = minecraftserver.getCommandDispatcher().dispatchServerCommand(this.getWrapper(), this.command); // CraftBukkit
@@ -183,7 +183,7 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
 
     @Override
     public boolean shouldSendSuccess() {
-        return this.d().getGameRules().getBoolean(GameRules.SEND_COMMAND_FEEDBACK) && this.trackOutput;
+        return this.d().getGameRules().getBoolean("sendCommandFeedback") && this.trackOutput;
     }
 
     @Override
@@ -193,6 +193,6 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
 
     @Override
     public boolean shouldBroadcastCommands() {
-        return this.d().getGameRules().getBoolean(GameRules.COMMAND_BLOCK_OUTPUT);
+        return this.d().getGameRules().getBoolean("commandBlockOutput");
     }
 }
diff --git a/src/main/java/net/minecraft/server/CommandGamemode.java b/src/main/java/net/minecraft/server/CommandGamemode.java
index fd03d57a..c05f3883 100644
--- a/src/main/java/net/minecraft/server/CommandGamemode.java
+++ b/src/main/java/net/minecraft/server/CommandGamemode.java
@@ -37,7 +37,7 @@ public class CommandGamemode {
         if (commandlistenerwrapper.getEntity() == entityplayer) {
             commandlistenerwrapper.sendMessage(new ChatMessage("commands.gamemode.success.self", new Object[]{chatmessage}), true);
         } else {
-            if (commandlistenerwrapper.getWorld().getGameRules().getBoolean(GameRules.SEND_COMMAND_FEEDBACK)) {
+            if (commandlistenerwrapper.getWorld().getGameRules().getBoolean("sendCommandFeedback")) {
                 entityplayer.sendMessage(new ChatMessage("gameMode.changed", new Object[]{chatmessage}));
             }
 
diff --git a/src/main/java/net/minecraft/server/CommandGamerule.java b/src/main/java/net/minecraft/server/CommandGamerule.java
index 1ae60aae..0a5b3d73 100644
--- a/src/main/java/net/minecraft/server/CommandGamerule.java
+++ b/src/main/java/net/minecraft/server/CommandGamerule.java
@@ -2,40 +2,42 @@ package net.minecraft.server;
 
 import com.mojang.brigadier.builder.LiteralArgumentBuilder;
 import com.mojang.brigadier.context.CommandContext;
+import java.util.Iterator;
+import java.util.Map.Entry;
 
 public class CommandGamerule {
 
     public static void a(com.mojang.brigadier.CommandDispatcher<CommandListenerWrapper> com_mojang_brigadier_commanddispatcher) {
-        final LiteralArgumentBuilder<CommandListenerWrapper> literalargumentbuilder = (LiteralArgumentBuilder) CommandDispatcher.a("gamerule").requires((commandlistenerwrapper) -> {
+        LiteralArgumentBuilder<CommandListenerWrapper> literalargumentbuilder = (LiteralArgumentBuilder) CommandDispatcher.a("gamerule").requires((commandlistenerwrapper) -> {
             return commandlistenerwrapper.hasPermission(2);
         });
+        Iterator iterator = GameRules.getGameRules().entrySet().iterator();
+
+        while (iterator.hasNext()) {
+            Entry<String, GameRules.GameRuleDefinition> entry = (Entry) iterator.next();
+
+            literalargumentbuilder.then(((LiteralArgumentBuilder) CommandDispatcher.a((String) entry.getKey()).executes((commandcontext) -> {
+                return a((CommandListenerWrapper) commandcontext.getSource(), (String) entry.getKey());
+            })).then(((GameRules.GameRuleDefinition) entry.getValue()).b().a("value").executes((commandcontext) -> {
+                return a((CommandListenerWrapper) commandcontext.getSource(), (String) entry.getKey(), commandcontext);
+            })));
+        }
 
-        GameRules.a(new GameRules.GameRuleVisitor() {
-            @Override
-            public <T extends GameRules.GameRuleValue<T>> void a(GameRules.GameRuleKey<T> gamerules_gamerulekey, GameRules.GameRuleDefinition<T> gamerules_gameruledefinition) {
-                literalargumentbuilder.then(((LiteralArgumentBuilder) CommandDispatcher.a(gamerules_gamerulekey.a()).executes((commandcontext) -> {
-                    return CommandGamerule.b((CommandListenerWrapper) commandcontext.getSource(), gamerules_gamerulekey);
-                })).then(gamerules_gameruledefinition.a("value").executes((commandcontext) -> {
-                    return CommandGamerule.b(commandcontext, gamerules_gamerulekey);
-                })));
-            }
-        });
         com_mojang_brigadier_commanddispatcher.register(literalargumentbuilder);
     }
 
-    private static <T extends GameRules.GameRuleValue<T>> int b(CommandContext<CommandListenerWrapper> commandcontext, GameRules.GameRuleKey<T> gamerules_gamerulekey) {
-        CommandListenerWrapper commandlistenerwrapper = (CommandListenerWrapper) commandcontext.getSource();
-        T t0 = commandlistenerwrapper.getWorld().getGameRules().get(gamerules_gamerulekey); // CraftBukkit
+    private static int a(CommandListenerWrapper commandlistenerwrapper, String s, CommandContext<CommandListenerWrapper> commandcontext) {
+        GameRules.GameRuleValue gamerules_gamerulevalue = commandlistenerwrapper.getWorld().getGameRules().get(s); // CraftBukkit
 
-        t0.b(commandcontext, "value");
-        commandlistenerwrapper.sendMessage(new ChatMessage("commands.gamerule.set", new Object[]{gamerules_gamerulekey.a(), t0.toString()}), true);
-        return t0.getIntValue();
+        gamerules_gamerulevalue.getType().a(commandcontext, "value", gamerules_gamerulevalue);
+        commandlistenerwrapper.sendMessage(new ChatMessage("commands.gamerule.set", new Object[]{s, gamerules_gamerulevalue.getValue()}), true);
+        return gamerules_gamerulevalue.getIntValue();
     }
 
-    private static <T extends GameRules.GameRuleValue<T>> int b(CommandListenerWrapper commandlistenerwrapper, GameRules.GameRuleKey<T> gamerules_gamerulekey) {
-        T t0 = commandlistenerwrapper.getWorld().getGameRules().get(gamerules_gamerulekey); // CraftBukkit
+    private static int a(CommandListenerWrapper commandlistenerwrapper, String s) {
+        GameRules.GameRuleValue gamerules_gamerulevalue = commandlistenerwrapper.getWorld().getGameRules().get(s); // CraftBukkit
 
-        commandlistenerwrapper.sendMessage(new ChatMessage("commands.gamerule.query", new Object[]{gamerules_gamerulekey.a(), t0.toString()}), false);
-        return t0.getIntValue();
+        commandlistenerwrapper.sendMessage(new ChatMessage("commands.gamerule.query", new Object[]{s, gamerules_gamerulevalue.getValue()}), false);
+        return gamerules_gamerulevalue.getIntValue();
     }
 }
diff --git a/src/main/java/net/minecraft/server/CommandListenerWrapper.java b/src/main/java/net/minecraft/server/CommandListenerWrapper.java
index 0b23a054..cae45060 100644
--- a/src/main/java/net/minecraft/server/CommandListenerWrapper.java
+++ b/src/main/java/net/minecraft/server/CommandListenerWrapper.java
@@ -193,7 +193,7 @@ public class CommandListenerWrapper implements ICompletionProvider {
     private void sendAdminMessage(IChatBaseComponent ichatbasecomponent) {
         IChatBaseComponent ichatbasecomponent1 = (new ChatMessage("chat.type.admin", new Object[]{this.getScoreboardDisplayName(), ichatbasecomponent})).a(new EnumChatFormat[]{EnumChatFormat.GRAY, EnumChatFormat.ITALIC});
 
-        if (this.i.getGameRules().getBoolean(GameRules.SEND_COMMAND_FEEDBACK)) {
+        if (this.i.getGameRules().getBoolean("sendCommandFeedback")) {
             Iterator iterator = this.i.getPlayerList().getPlayers().iterator();
 
             while (iterator.hasNext()) {
@@ -205,7 +205,7 @@ public class CommandListenerWrapper implements ICompletionProvider {
             }
         }
 
-        if (this.base != this.i && this.i.getGameRules().getBoolean(GameRules.LOG_ADMIN_COMMANDS) && !org.spigotmc.SpigotConfig.silentCommandBlocks) { // Spigot
+        if (this.base != this.i && this.i.getGameRules().getBoolean("logAdminCommands") && !org.spigotmc.SpigotConfig.silentCommandBlocks) { // Spigot
             this.i.sendMessage(ichatbasecomponent1);
         }
 
diff --git a/src/main/java/net/minecraft/server/Container.java b/src/main/java/net/minecraft/server/Container.java
index b38cb8dd..b4fcab4f 100644
--- a/src/main/java/net/minecraft/server/Container.java
+++ b/src/main/java/net/minecraft/server/Container.java
@@ -155,7 +155,7 @@ public abstract class Container {
                 while (iterator1.hasNext()) {
                     ICrafting icrafting1 = (ICrafting) iterator1.next();
 
-                    icrafting1.setContainerData(this, i, containerproperty.get());
+                    icrafting1.setContainerData(this, i, containerproperty.b());
                 }
             }
         }
@@ -524,7 +524,7 @@ public abstract class Container {
     }
 
     public void a(int i, int j) {
-        ((ContainerProperty) this.d.get(i)).set(j);
+        ((ContainerProperty) this.d.get(i)).a(j);
     }
 
     public boolean c(EntityHuman entityhuman) {
diff --git a/src/main/java/net/minecraft/server/ContainerAnvil.java b/src/main/java/net/minecraft/server/ContainerAnvil.java
index 7718c5a3..abdcd52c 100644
--- a/src/main/java/net/minecraft/server/ContainerAnvil.java
+++ b/src/main/java/net/minecraft/server/ContainerAnvil.java
@@ -56,13 +56,13 @@ public class ContainerAnvil extends Container {
 
             @Override
             public boolean isAllowed(EntityHuman entityhuman) {
-                return (entityhuman.abilities.canInstantlyBuild || entityhuman.expLevel >= ContainerAnvil.this.levelCost.get()) && ContainerAnvil.this.levelCost.get() > 0 && this.hasItem();
+                return (entityhuman.abilities.canInstantlyBuild || entityhuman.expLevel >= ContainerAnvil.this.levelCost.b()) && ContainerAnvil.this.levelCost.b() > 0 && this.hasItem();
             }
 
             @Override
             public ItemStack a(EntityHuman entityhuman, ItemStack itemstack) {
                 if (!entityhuman.abilities.canInstantlyBuild) {
-                    entityhuman.levelDown(-ContainerAnvil.this.levelCost.get());
+                    entityhuman.levelDown(-ContainerAnvil.this.levelCost.b());
                 }
 
                 ContainerAnvil.this.repairInventory.setItem(0, ItemStack.a);
@@ -79,7 +79,7 @@ public class ContainerAnvil extends Container {
                     ContainerAnvil.this.repairInventory.setItem(1, ItemStack.a);
                 }
 
-                ContainerAnvil.this.levelCost.set(0);
+                ContainerAnvil.this.levelCost.a(0);
                 containeraccess.a((world, blockposition) -> {
                     IBlockData iblockdata = world.getType(blockposition);
 
@@ -138,14 +138,14 @@ public class ContainerAnvil extends Container {
     public void e() {
         ItemStack itemstack = this.repairInventory.getItem(0);
 
-        this.levelCost.set(1);
+        this.levelCost.a(1);
         int i = 0;
         byte b0 = 0;
         byte b1 = 0;
 
         if (itemstack.isEmpty()) {
             org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareAnvilEvent(getBukkitView(), ItemStack.a); // CraftBukkit
-            this.levelCost.set(0);
+            this.levelCost.a(0);
         } else {
             ItemStack itemstack1 = itemstack.cloneItemStack();
             ItemStack itemstack2 = this.repairInventory.getItem(1);
@@ -163,7 +163,7 @@ public class ContainerAnvil extends Container {
                     k = Math.min(itemstack1.getDamage(), itemstack1.h() / 4);
                     if (k <= 0) {
                         org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareAnvilEvent(getBukkitView(), ItemStack.a); // CraftBukkit
-                        this.levelCost.set(0);
+                        this.levelCost.a(0);
                         return;
                     }
 
@@ -178,7 +178,7 @@ public class ContainerAnvil extends Container {
                 } else {
                     if (!flag && (itemstack1.getItem() != itemstack2.getItem() || !itemstack1.e())) {
                         org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareAnvilEvent(getBukkitView(), ItemStack.a); // CraftBukkit
-                        this.levelCost.set(0);
+                        this.levelCost.a(0);
                         return;
                     }
 
@@ -223,7 +223,7 @@ public class ContainerAnvil extends Container {
                             while (iterator1.hasNext()) {
                                 Enchantment enchantment1 = (Enchantment) iterator1.next();
 
-                                if (enchantment1 != enchantment && !enchantment.isCompatible(enchantment1)) {
+                                if (enchantment1 != enchantment && !enchantment.b(enchantment1)) {
                                     flag3 = false;
                                     ++i;
                                 }
@@ -268,7 +268,7 @@ public class ContainerAnvil extends Container {
 
                     if (flag2 && !flag1) {
                         org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareAnvilEvent(getBukkitView(), ItemStack.a); // CraftBukkit
-                        this.levelCost.set(0);
+                        this.levelCost.a(0);
                         return;
                     }
                 }
@@ -286,16 +286,16 @@ public class ContainerAnvil extends Container {
                 itemstack1.a((IChatBaseComponent) (new ChatComponentText(this.renameText)));
             }
 
-            this.levelCost.set(j + i);
+            this.levelCost.a(j + i);
             if (i <= 0) {
                 itemstack1 = ItemStack.a;
             }
 
-            if (b1 == i && b1 > 0 && this.levelCost.get() >= maximumRepairCost) { // CraftBukkit
-                this.levelCost.set(maximumRepairCost - 1); // CraftBukkit
+            if (b1 == i && b1 > 0 && this.levelCost.b() >= maximumRepairCost) { // CraftBukkit
+                this.levelCost.a(maximumRepairCost - 1); // CraftBukkit
             }
 
-            if (this.levelCost.get() >= maximumRepairCost && !this.player.abilities.canInstantlyBuild) { // CraftBukkit
+            if (this.levelCost.b() >= maximumRepairCost && !this.player.abilities.canInstantlyBuild) { // CraftBukkit
                 itemstack1 = ItemStack.a;
             }
 
diff --git a/src/main/java/net/minecraft/server/ContainerCartography.java b/src/main/java/net/minecraft/server/ContainerCartography.java
index 1806c76e..15b0e0f2 100644
--- a/src/main/java/net/minecraft/server/ContainerCartography.java
+++ b/src/main/java/net/minecraft/server/ContainerCartography.java
@@ -108,7 +108,7 @@ public class ContainerCartography extends Container {
             public ItemStack a(EntityHuman entityhuman, ItemStack itemstack) {
                 itemstack.getItem().b(itemstack, entityhuman.world, entityhuman);
                 containeraccess.a((world, blockposition) -> {
-                    world.playSound((EntityHuman) null, blockposition, SoundEffects.UI_CARTOGRAPHY_TABLE_TAKE_RESULT, SoundCategory.BLOCKS, 1.0F, 1.0F);
+                    world.a((EntityHuman) null, blockposition, SoundEffects.UI_CARTOGRAPHY_TABLE_TAKE_RESULT, SoundCategory.BLOCKS, 1.0F, 1.0F);
                 });
                 return super.a(entityhuman, itemstack);
             }
diff --git a/src/main/java/net/minecraft/server/ContainerEnchantTable.java b/src/main/java/net/minecraft/server/ContainerEnchantTable.java
index 19b4df4a..4ac255dc 100644
--- a/src/main/java/net/minecraft/server/ContainerEnchantTable.java
+++ b/src/main/java/net/minecraft/server/ContainerEnchantTable.java
@@ -91,7 +91,7 @@ public class ContainerEnchantTable extends Container {
         this.a(ContainerProperty.a(this.costs, 0));
         this.a(ContainerProperty.a(this.costs, 1));
         this.a(ContainerProperty.a(this.costs, 2));
-        this.a(this.i).set(playerinventory.player.dM());
+        this.a(this.i).a(playerinventory.player.dM());
         this.a(ContainerProperty.a(this.enchantments, 0));
         this.a(ContainerProperty.a(this.enchantments, 1));
         this.a(ContainerProperty.a(this.enchantments, 2));
@@ -146,7 +146,7 @@ public class ContainerEnchantTable extends Container {
                         }
                     }
 
-                    this.h.setSeed((long) this.i.get());
+                    this.h.setSeed((long) this.i.b());
 
                     for (j = 0; j < 3; ++j) {
                         this.costs[j] = EnchantmentManager.a(this.h, j, i, itemstack);
@@ -291,9 +291,9 @@ public class ContainerEnchantTable extends Container {
                     }
 
                     this.enchantSlots.update();
-                    this.i.set(entityhuman.dM());
+                    this.i.a(entityhuman.dM());
                     this.a(this.enchantSlots);
-                    world.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_ENCHANTMENT_TABLE_USE, SoundCategory.BLOCKS, 1.0F, world.random.nextFloat() * 0.1F + 0.9F);
+                    world.a((EntityHuman) null, blockposition, SoundEffects.BLOCK_ENCHANTMENT_TABLE_USE, SoundCategory.BLOCKS, 1.0F, world.random.nextFloat() * 0.1F + 0.9F);
                 }
 
             });
@@ -304,7 +304,7 @@ public class ContainerEnchantTable extends Container {
     }
 
     private List<WeightedRandomEnchant> a(ItemStack itemstack, int i, int j) {
-        this.h.setSeed((long) (this.i.get() + i));
+        this.h.setSeed((long) (this.i.b() + i));
         List<WeightedRandomEnchant> list = EnchantmentManager.b(this.h, itemstack, j, false);
 
         if (itemstack.getItem() == Items.BOOK && list.size() > 1) {
diff --git a/src/main/java/net/minecraft/server/ContainerLoom.java b/src/main/java/net/minecraft/server/ContainerLoom.java
index 0d69fa60..ce32fe09 100644
--- a/src/main/java/net/minecraft/server/ContainerLoom.java
+++ b/src/main/java/net/minecraft/server/ContainerLoom.java
@@ -102,11 +102,11 @@ public class ContainerLoom extends Container {
                 ContainerLoom.this.f.a(1);
                 ContainerLoom.this.g.a(1);
                 if (!ContainerLoom.this.f.hasItem() || !ContainerLoom.this.g.hasItem()) {
-                    ContainerLoom.this.d.set(0);
+                    ContainerLoom.this.d.a(0);
                 }
 
                 containeraccess.a((world, blockposition) -> {
-                    world.playSound((EntityHuman) null, blockposition, SoundEffects.UI_LOOM_TAKE_RESULT, SoundCategory.BLOCKS, 1.0F, 1.0F);
+                    world.a((EntityHuman) null, blockposition, SoundEffects.UI_LOOM_TAKE_RESULT, SoundCategory.BLOCKS, 1.0F, 1.0F);
                 });
                 return super.a(entityhuman, itemstack);
             }
@@ -137,7 +137,7 @@ public class ContainerLoom extends Container {
     @Override
     public boolean a(EntityHuman entityhuman, int i) {
         if (i > 0 && i <= EnumBannerPatternType.P) {
-            this.d.set(i);
+            this.d.a(i);
             this.j();
             return true;
         } else {
@@ -152,17 +152,17 @@ public class ContainerLoom extends Container {
         ItemStack itemstack2 = this.h.getItem();
         ItemStack itemstack3 = this.i.getItem();
 
-        if (!itemstack3.isEmpty() && (itemstack.isEmpty() || itemstack1.isEmpty() || this.d.get() <= 0 || this.d.get() >= EnumBannerPatternType.O - 5 && itemstack2.isEmpty())) {
+        if (!itemstack3.isEmpty() && (itemstack.isEmpty() || itemstack1.isEmpty() || this.d.b() <= 0 || this.d.b() >= EnumBannerPatternType.O - 5 && itemstack2.isEmpty())) {
             this.i.set(ItemStack.a);
-            this.d.set(0);
+            this.d.a(0);
         } else if (!itemstack2.isEmpty() && itemstack2.getItem() instanceof ItemBannerPattern) {
             NBTTagCompound nbttagcompound = itemstack.a("BlockEntityTag");
             boolean flag = nbttagcompound.hasKeyOfType("Patterns", 9) && !itemstack.isEmpty() && nbttagcompound.getList("Patterns", 10).size() >= 6;
 
             if (flag) {
-                this.d.set(0);
+                this.d.a(0);
             } else {
-                this.d.set(((ItemBannerPattern) itemstack2.getItem()).b().ordinal());
+                this.d.a(((ItemBannerPattern) itemstack2.getItem()).b().ordinal());
             }
         }
 
@@ -234,7 +234,7 @@ public class ContainerLoom extends Container {
     }
 
     private void j() {
-        if (this.d.get() > 0) {
+        if (this.d.b() > 0) {
             ItemStack itemstack = this.f.getItem();
             ItemStack itemstack1 = this.g.getItem();
             ItemStack itemstack2 = ItemStack.a;
@@ -242,7 +242,7 @@ public class ContainerLoom extends Container {
             if (!itemstack.isEmpty() && !itemstack1.isEmpty()) {
                 itemstack2 = itemstack.cloneItemStack();
                 itemstack2.setCount(1);
-                EnumBannerPatternType enumbannerpatterntype = EnumBannerPatternType.values()[this.d.get()];
+                EnumBannerPatternType enumbannerpatterntype = EnumBannerPatternType.values()[this.d.b()];
                 EnumColor enumcolor = ((ItemDye) itemstack1.getItem()).d();
                 NBTTagCompound nbttagcompound = itemstack2.a("BlockEntityTag");
                 NBTTagList nbttaglist;
diff --git a/src/main/java/net/minecraft/server/ContainerMerchant.java b/src/main/java/net/minecraft/server/ContainerMerchant.java
index b6b62ac5..8a9b488e 100644
--- a/src/main/java/net/minecraft/server/ContainerMerchant.java
+++ b/src/main/java/net/minecraft/server/ContainerMerchant.java
@@ -82,7 +82,7 @@ public class ContainerMerchant extends Container {
                 }
 
                 slot.a(itemstack1, itemstack);
-                this.k();
+                this.j();
             } else if (i != 0 && i != 1) {
                 if (i >= 3 && i < 30) {
                     if (!this.a(itemstack1, 30, 39, false)) {
@@ -111,7 +111,7 @@ public class ContainerMerchant extends Container {
         return itemstack;
     }
 
-    private void k() {
+    private void j() {
         if (!this.merchant.getWorld().isClientSide && this.merchant instanceof Entity) { // CraftBukkit - SPIGOT-5035
             Entity entity = (Entity) this.merchant;
 
@@ -145,7 +145,7 @@ public class ContainerMerchant extends Container {
     }
 
     public void g(int i) {
-        if (this.i().size() > i) {
+        if (this.h().size() > i) {
             ItemStack itemstack = this.inventoryMerchant.getItem(0);
 
             if (!itemstack.isEmpty()) {
@@ -167,10 +167,10 @@ public class ContainerMerchant extends Container {
             }
 
             if (this.inventoryMerchant.getItem(0).isEmpty() && this.inventoryMerchant.getItem(1).isEmpty()) {
-                ItemStack itemstack2 = ((MerchantRecipe) this.i().get(i)).getBuyItem1();
+                ItemStack itemstack2 = ((MerchantRecipe) this.h().get(i)).getBuyItem1();
 
                 this.c(0, itemstack2);
-                ItemStack itemstack3 = ((MerchantRecipe) this.i().get(i)).getBuyItem2();
+                ItemStack itemstack3 = ((MerchantRecipe) this.h().get(i)).getBuyItem2();
 
                 this.c(1, itemstack3);
             }
@@ -206,7 +206,7 @@ public class ContainerMerchant extends Container {
         return itemstack.getItem() == itemstack1.getItem() && ItemStack.equals(itemstack, itemstack1);
     }
 
-    public MerchantRecipeList i() {
+    public MerchantRecipeList h() {
         return this.merchant.getOffers();
     }
 }
diff --git a/src/main/java/net/minecraft/server/ContainerStonecutter.java b/src/main/java/net/minecraft/server/ContainerStonecutter.java
index e7fdf727..80e645bc 100644
--- a/src/main/java/net/minecraft/server/ContainerStonecutter.java
+++ b/src/main/java/net/minecraft/server/ContainerStonecutter.java
@@ -22,7 +22,7 @@ public class ContainerStonecutter extends Container {
     final Slot e;
     private Runnable m;
     public final IInventory inventory;
-    private final InventoryCraftResult resultInventory;
+    private final InventoryCraftResult n;
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
     private Player player;
@@ -33,7 +33,7 @@ public class ContainerStonecutter extends Container {
             return bukkitEntity;
         }
 
-        CraftInventoryStonecutter inventory = new CraftInventoryStonecutter(this.inventory, this.resultInventory);
+        CraftInventoryStonecutter inventory = new CraftInventoryStonecutter(this.inventory);
         bukkitEntity = new CraftInventoryView(this.player, inventory, this);
         return bukkitEntity;
     }
@@ -58,11 +58,11 @@ public class ContainerStonecutter extends Container {
                 ContainerStonecutter.this.m.run();
             }
         };
-        this.resultInventory = new InventoryCraftResult();
+        this.n = new InventoryCraftResult();
         this.containerAccess = containeraccess;
         this.world = playerinventory.player.world;
         this.d = this.a(new Slot(this.inventory, 0, 20, 33));
-        this.e = this.a(new Slot(this.resultInventory, 1, 143, 33) {
+        this.e = this.a(new Slot(this.n, 1, 143, 33) {
             @Override
             public boolean isAllowed(ItemStack itemstack) {
                 return false;
@@ -81,7 +81,7 @@ public class ContainerStonecutter extends Container {
                     long j = world.getTime();
 
                     if (ContainerStonecutter.this.l != j) {
-                        world.playSound((EntityHuman) null, blockposition, SoundEffects.UI_STONECUTTER_TAKE_RESULT, SoundCategory.BLOCKS, 1.0F, 1.0F);
+                        world.a((EntityHuman) null, blockposition, SoundEffects.UI_STONECUTTER_TAKE_RESULT, SoundCategory.BLOCKS, 1.0F, 1.0F);
                         ContainerStonecutter.this.l = j;
                     }
 
@@ -115,7 +115,7 @@ public class ContainerStonecutter extends Container {
     @Override
     public boolean a(EntityHuman entityhuman, int i) {
         if (i >= 0 && i < this.j.size()) {
-            this.containerProperty.set(i);
+            this.containerProperty.a(i);
             this.i();
         }
 
@@ -135,7 +135,7 @@ public class ContainerStonecutter extends Container {
 
     private void a(IInventory iinventory, ItemStack itemstack) {
         this.j.clear();
-        this.containerProperty.set(-1);
+        this.containerProperty.a(-1);
         this.e.set(ItemStack.a);
         if (!itemstack.isEmpty()) {
             this.j = this.world.getCraftingManager().b(Recipes.STONECUTTING, iinventory, this.world);
@@ -145,7 +145,7 @@ public class ContainerStonecutter extends Container {
 
     private void i() {
         if (!this.j.isEmpty()) {
-            RecipeStonecutting recipestonecutting = (RecipeStonecutting) this.j.get(this.containerProperty.get());
+            RecipeStonecutting recipestonecutting = (RecipeStonecutting) this.j.get(this.containerProperty.b());
 
             this.e.set(recipestonecutting.a(this.inventory));
         } else {
@@ -217,7 +217,7 @@ public class ContainerStonecutter extends Container {
     @Override
     public void b(EntityHuman entityhuman) {
         super.b(entityhuman);
-        this.resultInventory.splitWithoutUpdate(1);
+        this.n.splitWithoutUpdate(1);
         this.containerAccess.a((world, blockposition) -> {
             this.a(entityhuman, entityhuman.world, this.inventory);
         });
diff --git a/src/main/java/net/minecraft/server/CraftingManager.java b/src/main/java/net/minecraft/server/CraftingManager.java
index 6fb734c6..0086d3fd 100644
--- a/src/main/java/net/minecraft/server/CraftingManager.java
+++ b/src/main/java/net/minecraft/server/CraftingManager.java
@@ -1,72 +1,95 @@
 package net.minecraft.server;
 
-import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
-import com.google.common.collect.ImmutableMap.Builder;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParseException;
 import com.google.gson.JsonSyntaxException;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.Comparator;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
-import java.util.Map.Entry;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
+import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-import it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap; // CraftBukkit
+public class CraftingManager implements IResourcePackListener {
 
-public class CraftingManager extends ResourceDataJson {
-
-    private static final Gson a = (new GsonBuilder()).setPrettyPrinting().disableHtmlEscaping().create();
     private static final Logger LOGGER = LogManager.getLogger();
-    public Map<Recipes<?>, Object2ObjectLinkedOpenHashMap<MinecraftKey, IRecipe<?>>> recipes = ImmutableMap.of(); // CraftBukkit
-    private boolean d;
+    public static final int a = "recipes/".length();
+    public static final int b = ".json".length();
+    public Map<Recipes<?>, it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<MinecraftKey, IRecipe<?>>> recipes = SystemUtils.a(Maps.newHashMap(), CraftingManager::initializeRecipeMap); // CraftBukkit
+    private boolean e;
 
-    public CraftingManager() {
-        super(CraftingManager.a, "recipes");
-    }
+    public CraftingManager() {}
 
-    protected void a(Map<MinecraftKey, JsonObject> map, IResourceManager iresourcemanager, GameProfilerFiller gameprofilerfiller) {
-        this.d = false;
-        Map<Recipes<?>, Object2ObjectLinkedOpenHashMap<MinecraftKey, IRecipe<?>>> map1 = Maps.newHashMap(); // CraftBukkit
-        Iterator iterator = map.entrySet().iterator();
+    @Override
+    public void a(IResourceManager iresourcemanager) {
+        Gson gson = (new GsonBuilder()).setPrettyPrinting().disableHtmlEscaping().create();
+
+        this.e = false;
+        initializeRecipeMap(this.recipes);
+        Iterator iterator = iresourcemanager.a("recipes", (s) -> {
+            return s.endsWith(".json");
+        }).iterator();
 
         while (iterator.hasNext()) {
-            Entry<MinecraftKey, JsonObject> entry = (Entry) iterator.next();
-            MinecraftKey minecraftkey = (MinecraftKey) entry.getKey();
+            MinecraftKey minecraftkey = (MinecraftKey) iterator.next();
+            String s = minecraftkey.getKey();
+            MinecraftKey minecraftkey1 = new MinecraftKey(minecraftkey.b(), s.substring(CraftingManager.a, s.length() - CraftingManager.b));
 
             try {
-                IRecipe<?> irecipe = a(minecraftkey, (JsonObject) entry.getValue());
-
-                // CraftBukkit start - SPIGOT-4638: last recipe gets priority
-                (map1.computeIfAbsent(irecipe.g(), (recipes) -> {
-                    return new Object2ObjectLinkedOpenHashMap<>();
-                })).putAndMoveToFirst(minecraftkey, irecipe);
-                // CraftBukkit end
+                IResource iresource = iresourcemanager.a(minecraftkey);
+                Throwable throwable = null;
+
+                try {
+                    JsonObject jsonobject = (JsonObject) ChatDeserializer.a(gson, IOUtils.toString(iresource.b(), StandardCharsets.UTF_8), JsonObject.class);
+
+                    if (jsonobject == null) {
+                        CraftingManager.LOGGER.error("Couldn't load recipe {} as it's null or empty", minecraftkey1);
+                    } else {
+                        this.addRecipe(a(minecraftkey1, jsonobject));
+                    }
+                } catch (Throwable throwable1) {
+                    throwable = throwable1;
+                    throw throwable1;
+                } finally {
+                    if (iresource != null) {
+                        if (throwable != null) {
+                            try {
+                                iresource.close();
+                            } catch (Throwable throwable2) {
+                                throwable.addSuppressed(throwable2);
+                            }
+                        } else {
+                            iresource.close();
+                        }
+                    }
+
+                }
             } catch (IllegalArgumentException | JsonParseException jsonparseexception) {
-                CraftingManager.LOGGER.error("Parsing error loading recipe {}", minecraftkey, jsonparseexception);
+                CraftingManager.LOGGER.error("Parsing error loading recipe {}", minecraftkey1, jsonparseexception);
+                this.e = true;
+            } catch (IOException ioexception) {
+                CraftingManager.LOGGER.error("Couldn't read custom advancement {} from {}", minecraftkey1, minecraftkey, ioexception);
+                this.e = true;
             }
         }
 
-        this.recipes = (Map) map1.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entry1) -> {
-            return entry1.getValue(); // CraftBukkit // Paper - decompile fix - *shrugs internally*
-        }));
-        CraftingManager.LOGGER.info("Loaded {} recipes", map1.size());
+        CraftingManager.LOGGER.info("Loaded {} recipes", this.recipes.size());
     }
 
-    // CraftBukkit start
     public void addRecipe(IRecipe<?> irecipe) {
         org.spigotmc.AsyncCatcher.catchOp("Recipe Add"); // Spigot
-        Object2ObjectLinkedOpenHashMap<MinecraftKey, IRecipe<?>> map = this.recipes.get(irecipe.g()); // CraftBukkit
+        it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<MinecraftKey, IRecipe<?>> map = this.recipes.get(irecipe.g()); // CraftBukkit
 
         if (map.containsKey(irecipe.getKey())) {
             throw new IllegalStateException("Duplicate recipe ignored with ID " + irecipe.getKey());
@@ -74,7 +97,6 @@ public class CraftingManager extends ResourceDataJson {
             map.putAndMoveToFirst(irecipe.getKey(), irecipe); // CraftBukkit - SPIGOT-4638: last recipe gets priority
         }
     }
-    // CraftBukkit end
 
     public <C extends IInventory, T extends IRecipe<C>> Optional<T> craft(Recipes<T> recipes, C c0, World world) {
         // CraftBukkit start
@@ -95,7 +117,7 @@ public class CraftingManager extends ResourceDataJson {
     }
 
     private <C extends IInventory, T extends IRecipe<C>> Map<MinecraftKey, IRecipe<C>> a(Recipes<T> recipes) {
-        return (Map) this.recipes.getOrDefault(recipes, new Object2ObjectLinkedOpenHashMap<>()); // CraftBukkit
+        return (Map) this.recipes.getOrDefault(recipes, new it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<>()); // CraftBukkit
     }
 
     public <C extends IInventory, T extends IRecipe<C>> NonNullList<ItemStack> c(Recipes<T> recipes, C c0, World world) {
@@ -140,13 +162,15 @@ public class CraftingManager extends ResourceDataJson {
         })).a(minecraftkey, jsonobject);
     }
 
-    // CraftBukkit start
-    public void clearRecipes() {
-        this.recipes = Maps.newHashMap();
+    public static void initializeRecipeMap(Map<Recipes<?>, it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<MinecraftKey, IRecipe<?>>> map) { // CraftBukkit
+        map.clear();
+        Iterator iterator = IRegistry.RECIPE_TYPE.iterator();
 
-        for (Recipes<?> recipeType : IRegistry.RECIPE_TYPE) {
-            this.recipes.put(recipeType, new Object2ObjectLinkedOpenHashMap<>());
+        while (iterator.hasNext()) {
+            Recipes<?> recipes = (Recipes) iterator.next();
+
+            map.put(recipes, new it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<>()); // CraftBukkit
         }
+
     }
-    // CraftBukkit end
 }
diff --git a/src/main/java/net/minecraft/server/CrashReport.java b/src/main/java/net/minecraft/server/CrashReport.java
index d691a6e6..f8adb825 100644
--- a/src/main/java/net/minecraft/server/CrashReport.java
+++ b/src/main/java/net/minecraft/server/CrashReport.java
@@ -39,9 +39,6 @@ public class CrashReport {
         this.d.a("Minecraft Version", () -> {
             return SharedConstants.a().getName();
         });
-        this.d.a("Minecraft Version ID", () -> {
-            return SharedConstants.a().getId();
-        });
         this.d.a("Operating System", () -> {
             return System.getProperty("os.name") + " (" + System.getProperty("os.arch") + ") version " + System.getProperty("os.version");
         });
@@ -62,7 +59,6 @@ public class CrashReport {
 
             return k + " bytes (" + j1 + " MB) / " + j + " bytes (" + i1 + " MB) up to " + i + " bytes (" + l + " MB)";
         });
-        this.d.a("CPUs", (Object) Runtime.getRuntime().availableProcessors());
         this.d.a("JVM Flags", () -> {
             List<String> list = (List) SystemUtils.h().collect(Collectors.toList());
 
diff --git a/src/main/java/net/minecraft/server/CustomFunction.java b/src/main/java/net/minecraft/server/CustomFunction.java
index 49de6e99..a3ef9430 100644
--- a/src/main/java/net/minecraft/server/CustomFunction.java
+++ b/src/main/java/net/minecraft/server/CustomFunction.java
@@ -58,7 +58,7 @@ public class CustomFunction {
                 }
 
                 try {
-                    ParseResults<CommandListenerWrapper> parseresults = customfunctiondata.d().parse(stringreader, customfunctiondata.g()); // CraftBukkit
+                    ParseResults<CommandListenerWrapper> parseresults = customfunctiondata.d().parse(stringreader, customfunctiondata.f()); // CraftBukkit
 
                     if (parseresults.getReader().canRead()) {
                         if (parseresults.getExceptions().size() == 1) {
diff --git a/src/main/java/net/minecraft/server/CustomFunctionData.java b/src/main/java/net/minecraft/server/CustomFunctionData.java
index 721839b4..b42fbf2c 100644
--- a/src/main/java/net/minecraft/server/CustomFunctionData.java
+++ b/src/main/java/net/minecraft/server/CustomFunctionData.java
@@ -46,7 +46,7 @@ public class CustomFunctionData implements IResourcePackListener {
     }
 
     public int b() {
-        return this.server.getGameRules().getInt(GameRules.MAX_COMMAND_CHAIN_LENGTH);
+        return this.server.getGameRules().c("maxCommandChainLength");
     }
 
     public Map<MinecraftKey, CustomFunction> c() {
@@ -73,7 +73,7 @@ public class CustomFunctionData implements IResourcePackListener {
         this.server.getMethodProfiler().exit();
         if (this.m) {
             this.m = false;
-            Collection<CustomFunction> collection = this.h().b(CustomFunctionData.e).a();
+            Collection<CustomFunction> collection = this.g().b(CustomFunctionData.e).a();
 
             gameprofiler = this.server.getMethodProfiler();
             minecraftkey = CustomFunctionData.e;
@@ -151,6 +151,7 @@ public class CustomFunctionData implements IResourcePackListener {
     public void a(IResourceManager iresourcemanager) {
         this.g.clear();
         this.l.clear();
+        this.k.b();
         Collection<MinecraftKey> collection = iresourcemanager.a("functions", (s) -> {
             return s.endsWith(".mcfunction");
         });
@@ -160,13 +161,13 @@ public class CustomFunctionData implements IResourcePackListener {
         while (iterator.hasNext()) {
             MinecraftKey minecraftkey = (MinecraftKey) iterator.next();
             String s = minecraftkey.getKey();
-            MinecraftKey minecraftkey1 = new MinecraftKey(minecraftkey.getNamespace(), s.substring(CustomFunctionData.a, s.length() - CustomFunctionData.b));
+            MinecraftKey minecraftkey1 = new MinecraftKey(minecraftkey.b(), s.substring(CustomFunctionData.a, s.length() - CustomFunctionData.b));
 
             list.add(CompletableFuture.supplyAsync(() -> {
                 return a(iresourcemanager, minecraftkey);
             }, Resource.a).thenApplyAsync((list1) -> {
                 return CustomFunction.a(minecraftkey1, this, list1);
-            }, this.server.aU()).handle((customfunction, throwable) -> {
+            }, this.server.aT()).handle((customfunction, throwable) -> {
                 return this.a(customfunction, throwable, minecraftkey);
             }));
         }
@@ -176,7 +177,7 @@ public class CustomFunctionData implements IResourcePackListener {
             CustomFunctionData.LOGGER.info("Loaded {} custom command functions", this.g.size());
         }
 
-        this.k.a((Map) this.k.a(iresourcemanager, this.server.aU()).join());
+        this.k.a((Map) this.k.a(iresourcemanager, this.server.aT()).join());
         this.l.addAll(this.k.b(CustomFunctionData.d).a());
         this.m = true;
     }
@@ -233,11 +234,7 @@ public class CustomFunctionData implements IResourcePackListener {
         return this.server.getServerCommandListener().a(2).a();
     }
 
-    public CommandListenerWrapper g() {
-        return new CommandListenerWrapper(ICommandListener.DUMMY, Vec3D.a, Vec2F.a, (WorldServer) null, this.server.k(), "", new ChatComponentText(""), this.server, (Entity) null);
-    }
-
-    public Tags<CustomFunction> h() {
+    public Tags<CustomFunction> g() {
         return this.k;
     }
 
diff --git a/src/main/java/net/minecraft/server/DataBits.java b/src/main/java/net/minecraft/server/DataBits.java
index a75b08ee..4194acc8 100644
--- a/src/main/java/net/minecraft/server/DataBits.java
+++ b/src/main/java/net/minecraft/server/DataBits.java
@@ -1,6 +1,5 @@
 package net.minecraft.server;
 
-import java.util.function.IntConsumer;
 import org.apache.commons.lang3.Validate;
 
 public class DataBits {
@@ -95,36 +94,4 @@ public class DataBits {
     public int c() {
         return this.b;
     }
-
-    public void a(IntConsumer intconsumer) {
-        int i = this.a.length;
-
-        if (i != 0) {
-            int j = 0;
-            long k = this.a[0];
-            long l = i > 1 ? this.a[1] : 0L;
-
-            for (int i1 = 0; i1 < this.d; ++i1) {
-                int j1 = i1 * this.b;
-                int k1 = j1 >> 6;
-                int l1 = (i1 + 1) * this.b - 1 >> 6;
-                int i2 = j1 ^ k1 << 6;
-
-                if (k1 != j) {
-                    k = l;
-                    l = k1 + 1 < i ? this.a[k1 + 1] : 0L;
-                    j = k1;
-                }
-
-                if (k1 == l1) {
-                    intconsumer.accept((int) (k >>> i2 & this.c));
-                } else {
-                    int j2 = 64 - i2;
-
-                    intconsumer.accept((int) ((k >>> i2 | l << j2) & this.c));
-                }
-            }
-
-        }
-    }
 }
diff --git a/src/main/java/net/minecraft/server/DataPaletteBlock.java b/src/main/java/net/minecraft/server/DataPaletteBlock.java
index 8fba1e2f..28a6be7a 100644
--- a/src/main/java/net/minecraft/server/DataPaletteBlock.java
+++ b/src/main/java/net/minecraft/server/DataPaletteBlock.java
@@ -1,9 +1,5 @@
 package net.minecraft.server;
 
-import it.unimi.dsi.fastutil.ints.Int2IntMap;
-import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;
-import it.unimi.dsi.fastutil.ints.Int2IntMap.Entry;
-import com.destroystokyo.paper.antixray.ChunkPacketInfo; // Paper - Anti-Xray
 import java.util.Arrays;
 import java.util.Objects;
 import java.util.concurrent.locks.ReentrantLock;
@@ -20,21 +16,17 @@ public class DataPaletteBlock<T> implements DataPaletteExpandable<T> {
     private final Function<NBTTagCompound, T> e;
     private final Function<T, NBTTagCompound> f;
     private final T g;
-    private final T[] predefinedObjects; // Paper - Anti-Xray - Add predefined objects
     protected DataBits a; protected DataBits getDataBits() { return this.a; } // Paper - OBFHELPER
     private DataPalette<T> h; private DataPalette<T> getDataPalette() { return this.h; } // Paper - OBFHELPER
     private int i; private int getBitsPerObject() { return this.i; } // Paper - OBFHELPER
-    private final com.destroystokyo.paper.util.ReentrantLockWithGetOwner j = new com.destroystokyo.paper.util.ReentrantLockWithGetOwner(); private com.destroystokyo.paper.util.ReentrantLockWithGetOwner getLock() { return this.j; } // Paper - change type to ReentrantLockWithGetOwner // Paper - OBFHELPER
+    private final ReentrantLock j = new ReentrantLock();
 
     public void a() {
-        // Paper start - log other thread
-        Thread owningThread;
-        if (this.j.isLocked() && (owningThread = this.getLock().getOwner()) != null && owningThread != Thread.currentThread()) {
-            // Paper end
+        if (this.j.isLocked() && !this.j.isHeldByCurrentThread()) {
             String s = (String) Thread.getAllStackTraces().keySet().stream().filter(Objects::nonNull).map((thread) -> {
                 return thread.getName() + ": \n\tat " + (String) Arrays.stream(thread.getStackTrace()).map(Object::toString).collect(Collectors.joining("\n\tat "));
             }).collect(Collectors.joining("\n"));
-            CrashReport crashreport = new CrashReport("Writing into PalettedContainer from multiple threads (other thread: name: " + owningThread.getName() + ", class: " + owningThread.getClass().toString() + ")", new IllegalStateException()); // Paper - log other thread
+            CrashReport crashreport = new CrashReport("Writing into PalettedContainer from multiple threads", new IllegalStateException());
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Thread dumps");
 
             crashreportsystemdetails.a("Thread dumps", (Object) s);
@@ -49,50 +41,14 @@ public class DataPaletteBlock<T> implements DataPaletteExpandable<T> {
     }
 
     public DataPaletteBlock(DataPalette<T> datapalette, RegistryBlockID<T> registryblockid, Function<NBTTagCompound, T> function, Function<T, NBTTagCompound> function1, T t0) {
-        // Paper start - Anti-Xray - Support default constructor
-        this(datapalette, registryblockid, function, function1, t0, null, true);
-    }
-
-    public DataPaletteBlock(DataPalette<T> datapalette, RegistryBlockID<T> registryblockid, Function<NBTTagCompound, T> function, Function<T, NBTTagCompound> function1, T t0, T[] predefinedObjects, boolean initialize) {
-        // Paper end - Anti-Xray - Add predefined objects
         this.b = datapalette;
         this.d = registryblockid;
         this.e = function;
         this.f = function1;
         this.g = t0;
-        // Paper start - Anti-Xray - Add predefined objects
-        this.predefinedObjects = predefinedObjects;
-
-        if (initialize) {
-            if (predefinedObjects == null) {
-                // Default
-                this.initialize(4);
-            } else {
-                // MathHelper.d() is trailingBits(roundCeilPow2(n)), alternatively; (int)ceil(log2(n)); however it's trash, use numberOfLeadingZeros instead
-                // Count the bits of the maximum array index to initialize a data palette with enough space from the beginning
-                // The length of the array is used because air is also added to the data palette from the beginning
-                // Start with at least 4
-                int maxIndex = predefinedObjects.length >> 4;
-                int bitCount = (32 - Integer.numberOfLeadingZeros(Math.max(16, maxIndex) - 1));
-
-                // Initialize with at least 15 free indixes
-                this.initialize((1 << bitCount) - predefinedObjects.length < 16 ? bitCount + 1 : bitCount);
-                this.addPredefinedObjects();
-            }
-        }
-        // Paper end
+        this.b(4);
     }
 
-    // Paper start - Anti-Xray - Add predefined objects
-    private void addPredefinedObjects() {
-        if (this.predefinedObjects != null && this.getDataPalette() != this.getDataPaletteGlobal()) {
-            for (int i = 0; i < this.predefinedObjects.length; i++) {
-                this.getDataPalette().getOrCreateIdFor(this.predefinedObjects[i]);
-            }
-        }
-    }
-    // Paper end
-
     private static int b(int i, int j, int k) {
         return j << 8 | k << 4 | i;
     }
@@ -126,7 +82,6 @@ public class DataPaletteBlock<T> implements DataPaletteExpandable<T> {
 
         int j;
 
-        this.addPredefinedObjects(); // Paper - Anti-Xray - Add predefined objects
         for (j = 0; j < databits.b(); ++j) {
             T t1 = datapalette.a(databits.a(j));
 
@@ -178,39 +133,22 @@ public class DataPaletteBlock<T> implements DataPaletteExpandable<T> {
 
     public void writeDataPaletteBlock(PacketDataSerializer packetDataSerializer) { this.b(packetDataSerializer); } // Paper - OBFHELPER
     public void b(PacketDataSerializer packetdataserializer) {
-        // Paper start - add parameters
-        this.writeDataPaletteBlock(packetdataserializer, null, 0);
-    }
-    public void writeDataPaletteBlock(PacketDataSerializer packetdataserializer, ChunkPacketInfo<T> chunkPacketInfo, int chunkSectionIndex) {
-        // Paper end
         this.a();
         packetdataserializer.writeByte(this.i);
         this.h.b(packetdataserializer);
-
-        // Paper start - Anti-Xray - Add chunk packet info
-        if (chunkPacketInfo != null) {
-            chunkPacketInfo.setBitsPerObject(chunkSectionIndex, this.getBitsPerObject());
-            chunkPacketInfo.setDataPalette(chunkSectionIndex, this.getDataPalette());
-            chunkPacketInfo.setDataBitsIndex(chunkSectionIndex, packetdataserializer.writerIndex() + PacketDataSerializer.countBytes(this.getDataBits().getDataBits().length));
-            chunkPacketInfo.setPredefinedObjects(chunkSectionIndex, this.predefinedObjects);
-        }
-        // Paper end
-
         packetdataserializer.a(this.a.a());
         this.b();
     }
 
     public void a(NBTTagList nbttaglist, long[] along) {
         this.a();
-        // Paper - Anti-Xray - TODO: Should this.predefinedObjects.length just be added here (faster) or should the contents be compared to calculate the size (less RAM)?
-        int i = Math.max(4, MathHelper.d(nbttaglist.size() + (this.predefinedObjects == null ? 0 : this.predefinedObjects.length))); // Paper - Anti-Xray - Calculate the size with predefined objects
+        int i = Math.max(4, MathHelper.d(nbttaglist.size()));
 
-        if (true || i != this.i) { // Paper - Anti-Xray - Not initialized yet
+        if (i != this.i) {
             this.b(i);
         }
 
         this.h.a(nbttaglist);
-        this.addPredefinedObjects(); // Paper - Anti-Xray - Add predefined objects
         int j = along.length * 64 / 4096;
 
         if (this.h == this.b) {
@@ -268,21 +206,4 @@ public class DataPaletteBlock<T> implements DataPaletteExpandable<T> {
     public boolean a(T t0) {
         return this.h.b(t0);
     }
-
-    public void a(DataPaletteBlock.a<T> datapaletteblock_a) {
-        Int2IntOpenHashMap int2intopenhashmap = new Int2IntOpenHashMap();
-
-        this.a.a((i) -> {
-            int2intopenhashmap.put(i, int2intopenhashmap.get(i) + 1);
-        });
-        int2intopenhashmap.int2IntEntrySet().forEach((entry) -> {
-            datapaletteblock_a.accept(this.h.a(entry.getIntKey()), entry.getIntValue());
-        });
-    }
-
-    @FunctionalInterface
-    public interface a<T> {
-
-        void accept(T t0, int i);
-    }
 }
diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
index e6f39878..bbea8ef7 100644
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -12,6 +12,7 @@ import java.util.Map;
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap; // Paper
 import org.apache.commons.lang3.ObjectUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -20,14 +21,14 @@ public class DataWatcher {
 
     private static final Logger LOGGER = LogManager.getLogger();
     private static final Map<Class<? extends Entity>, Integer> b = Maps.newHashMap();
-    private final Entity entity;
-    private final it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap<DataWatcher.Item<?>> entries = new it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap<>(); // Spigot - use better map // PAIL
-    // private final ReadWriteLock lock = new ReentrantReadWriteLock(); // Spigot - not required
+    private final Entity c;
+    private final Int2ObjectOpenHashMap<DataWatcher.Item<?>> d = new Int2ObjectOpenHashMap<>(); // Paper
+    //private final ReadWriteLock e = new ReentrantReadWriteLock(); // Paper - not required
     private boolean f = true;
     private boolean g;
 
     public DataWatcher(Entity entity) {
-        this.entity = entity;
+        this.c = entity;
     }
 
     public static <T> DataWatcherObject<T> a(Class<? extends Entity> oclass, DataWatcherSerializer<T> datawatcherserializer) {
@@ -70,14 +71,12 @@ public class DataWatcher {
         }
     }
 
-    boolean registrationLocked; // Spigot
     public <T> void register(DataWatcherObject<T> datawatcherobject, T t0) {
-        if (this.registrationLocked) throw new IllegalStateException("Registering datawatcher object after entity initialization"); // Spigot
         int i = datawatcherobject.a();
 
         if (i > 254) {
             throw new IllegalArgumentException("Data value id is too big with " + i + "! (Max is " + 254 + ")");
-        } else if (this.entries.containsKey(i)) {
+        } else if (this.d.containsKey(i)) {
             throw new IllegalArgumentException("Duplicate id value for " + i + "!");
         } else if (DataWatcherRegistry.b(datawatcherobject.b()) < 0) {
             throw new IllegalArgumentException("Unregistered serializer " + datawatcherobject.b() + " for " + i + "!");
@@ -89,35 +88,14 @@ public class DataWatcher {
     private <T> void registerObject(DataWatcherObject<T> datawatcherobject, T t0) {
         DataWatcher.Item<T> datawatcher_item = new DataWatcher.Item<>(datawatcherobject, t0);
 
-        // this.lock.writeLock().lock(); // Spigot - not required
-        this.entries.put(datawatcherobject.a(), datawatcher_item);
+        //this.e.writeLock().lock(); // Paper - not required
+        this.d.put(datawatcherobject.a(), datawatcher_item);
         this.f = false;
-        // this.lock.writeLock().unlock(); // Spigot - not required
+        //this.e.writeLock().unlock(); // Paper - not required
     }
 
     private <T> DataWatcher.Item<T> b(DataWatcherObject<T> datawatcherobject) {
-        // Spigot start
-        /*
-        this.lock.readLock().lock();
-
-        DataWatcher.Item datawatcher_item;
-
-        try {
-            datawatcher_item = (DataWatcher.Item) this.entries.get(datawatcherobject.a());
-        } catch (Throwable throwable) {
-            CrashReport crashreport = CrashReport.a(throwable, "Getting synched entity data");
-            CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Synched entity data");
-
-            crashreportsystemdetails.a("Data ID", (Object) datawatcherobject);
-            throw new ReportedException(crashreport);
-        } finally {
-            this.lock.readLock().unlock();
-        }
-
-        return datawatcher_item;
-        */
-        return (DataWatcher.Item) this.entries.get(datawatcherobject.a());
-        // Spigot end
+        return (DataWatcher.Item<T>)this.d.get(datawatcherobject.a()); // Paper - avoid lock and try catch, get() does not fail
     }
 
     public <T> T get(DataWatcherObject<T> datawatcherobject) {
@@ -129,7 +107,7 @@ public class DataWatcher {
 
         if (ObjectUtils.notEqual(t0, datawatcher_item.b())) {
             datawatcher_item.a(t0);
-            this.entity.a(datawatcherobject);
+            this.c.a(datawatcherobject);
             datawatcher_item.a(true);
             this.g = true;
         }
@@ -164,8 +142,8 @@ public class DataWatcher {
         List<DataWatcher.Item<?>> list = null;
 
         if (this.g) {
-            // this.lock.readLock().lock(); // Spigot - not required
-            Iterator iterator = this.entries.values().iterator();
+            //this.e.readLock().lock(); // Paper - not required
+            Iterator iterator = this.d.values().iterator();
 
             while (iterator.hasNext()) {
                 DataWatcher.Item<?> datawatcher_item = (DataWatcher.Item) iterator.next();
@@ -180,7 +158,7 @@ public class DataWatcher {
                 }
             }
 
-            // this.lock.readLock().unlock(); // Spigot - not required
+            //this.e.readLock().unlock(); // Paper - not required
         }
 
         this.g = false;
@@ -188,8 +166,8 @@ public class DataWatcher {
     }
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
-        // this.lock.readLock().lock(); // Spigot - not required
-        Iterator iterator = this.entries.values().iterator();
+        //this.e.readLock().lock(); // Paper - not required
+        Iterator iterator = this.d.values().iterator();
 
         while (iterator.hasNext()) {
             DataWatcher.Item<?> datawatcher_item = (DataWatcher.Item) iterator.next();
@@ -197,7 +175,7 @@ public class DataWatcher {
             a(packetdataserializer, datawatcher_item);
         }
 
-        // this.lock.readLock().unlock(); // Spigot - not required
+        //this.e.readLock().unlock(); // Paper - not required
         packetdataserializer.writeByte(255);
     }
 
@@ -205,18 +183,18 @@ public class DataWatcher {
     public List<DataWatcher.Item<?>> c() {
         List<DataWatcher.Item<?>> list = null;
 
-        // this.lock.readLock().lock(); // Spigot - not required
+        //this.e.readLock().lock(); // Paper - not required
 
         DataWatcher.Item datawatcher_item;
 
-        for (Iterator iterator = this.entries.values().iterator(); iterator.hasNext(); list.add(datawatcher_item.d())) {
+        for (Iterator iterator = this.d.values().iterator(); iterator.hasNext(); list.add(datawatcher_item.d())) {
             datawatcher_item = (DataWatcher.Item) iterator.next();
             if (list == null) {
                 list = Lists.newArrayList();
             }
         }
 
-        // this.lock.readLock().unlock(); // Spigot - not required
+        //this.e.readLock().unlock(); // Paper - not required
         return list;
     }
 
@@ -267,8 +245,8 @@ public class DataWatcher {
 
     public void e() {
         this.g = false;
-        // this.lock.readLock().lock(); // Spigot - not required
-        Iterator iterator = this.entries.values().iterator();
+        //this.e.readLock().lock(); // Paper - not required
+        Iterator iterator = this.d.values().iterator();
 
         while (iterator.hasNext()) {
             DataWatcher.Item<?> datawatcher_item = (DataWatcher.Item) iterator.next();
@@ -276,7 +254,7 @@ public class DataWatcher {
             datawatcher_item.a(false);
         }
 
-        // this.lock.readLock().unlock(); // Spigot - not required
+        //this.e.readLock().unlock(); // Paper - not required
     }
 
     public static class Item<T> {
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 6da54a64..3d452fe0 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -19,8 +19,6 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
 import java.util.Random;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.ExecutionException;
 import java.util.function.BooleanSupplier;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
@@ -42,15 +40,15 @@ import org.bukkit.event.server.RemoteServerCommandEvent;
 public class DedicatedServer extends MinecraftServer implements IMinecraftServer {
 
     private static final Logger LOGGER = LogManager.getLogger();
-    private static final Pattern i = Pattern.compile("^[a-fA-F0-9]{40}$");
+    private static final Pattern j = Pattern.compile("^[a-fA-F0-9]{40}$");
     private final java.util.Queue<ServerCommand> serverCommandQueue = new java.util.concurrent.ConcurrentLinkedQueue<ServerCommand>(); // Paper - use a proper queue
-    private RemoteStatusListener remoteStatusListener;
+    private RemoteStatusListener l;
     public final RemoteControlCommandListener remoteControlCommandListener;
     private RemoteControlListener remoteControlListener;
     public DedicatedServerSettings propertyManager;
-    private EnumGamemode o;
+    private EnumGamemode p;
     @Nullable
-    private ServerGUI p;
+    private ServerGUI q;
 
     // CraftBukkit start - Signature changed
     public DedicatedServer(joptsimple.OptionSet options, DedicatedServerSettings dedicatedserversettings, DataFixer datafixer, YggdrasilAuthenticationService yggdrasilauthenticationservice, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, UserCache usercache, WorldLoadListenerFactory worldloadlistenerfactory, String s) {
@@ -181,13 +179,13 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         this.setSpawnNPCs(dedicatedserverproperties.spawnNpcs);
         this.setPVP(dedicatedserverproperties.pvp);
         this.setAllowFlight(dedicatedserverproperties.allowFlight);
-        this.setResourcePack(dedicatedserverproperties.resourcePack, this.aW());
+        this.setResourcePack(dedicatedserverproperties.resourcePack, this.aV());
         this.setMotd(dedicatedserverproperties.motd);
         this.setForceGamemode(dedicatedserverproperties.forceGamemode);
         super.setIdleTimeout((Integer) dedicatedserverproperties.playerIdleTimeout.get());
         this.n(dedicatedserverproperties.enforceWhitelist);
-        this.o = dedicatedserverproperties.gamemode;
-        DedicatedServer.LOGGER.info("Default game type: {}", this.o);
+        this.p = dedicatedserverproperties.gamemode;
+        DedicatedServer.LOGGER.info("Default game type: {}", this.p);
         InetAddress inetaddress = null;
 
         if (!this.getServerIp().isEmpty()) {
@@ -285,13 +283,13 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
             DedicatedServer.LOGGER.info("Done ({})! For help, type \"help\"", s2);
             if (dedicatedserverproperties.announcePlayerAchievements != null) {
-                ((GameRules.GameRuleBoolean) this.getGameRules().get(GameRules.ANNOUNCE_ADVANCEMENTS)).a(dedicatedserverproperties.announcePlayerAchievements, (MinecraftServer) this);
+                this.getGameRules().set("announceAdvancements", dedicatedserverproperties.announcePlayerAchievements ? "true" : "false", this);
             }
 
             if (dedicatedserverproperties.enableQuery) {
                 DedicatedServer.LOGGER.info("Starting GS4 status listener");
-                this.remoteStatusListener = new RemoteStatusListener(this);
-                this.remoteStatusListener.a();
+                this.l = new RemoteStatusListener(this);
+                this.l.a();
             }
 
             if (dedicatedserverproperties.enableRcon) {
@@ -326,7 +324,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         }
     }
 
-    public String aW() {
+    public String aV() {
         DedicatedServerProperties dedicatedserverproperties = this.propertyManager.getProperties();
         String s;
 
@@ -342,7 +340,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             s = "";
         }
 
-        if (!s.isEmpty() && !DedicatedServer.i.matcher(s).matches()) {
+        if (!s.isEmpty() && !DedicatedServer.j.matcher(s).matches()) {
             DedicatedServer.LOGGER.warn("Invalid sha1 for ressource-pack-sha1");
         }
 
@@ -356,7 +354,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     @Override
     public void setGamemode(EnumGamemode enumgamemode) {
         super.setGamemode(enumgamemode);
-        this.o = enumgamemode;
+        this.p = enumgamemode;
     }
 
     @Override
@@ -371,7 +369,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
     @Override
     public EnumGamemode getGamemode() {
-        return this.o;
+        return this.p;
     }
 
     @Override
@@ -400,16 +398,16 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
     @Override
     public void exit() {
-        if (this.p != null) {
-            this.p.b();
+        if (this.q != null) {
+            this.q.b();
         }
 
         if (this.remoteControlListener != null) {
             this.remoteControlListener.b();
         }
 
-        if (this.remoteStatusListener != null) {
-            this.remoteStatusListener.b();
+        if (this.l != null) {
+            this.l.b();
         }
 
         System.exit(0); // CraftBukkit
@@ -464,12 +462,12 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     }
 
     @Override
-    public boolean S() {
+    public boolean R() {
         return true;
     }
 
     @Override
-    public boolean X() {
+    public boolean W() {
         return this.getDedicatedServerProperties().useNativeTransport;
     }
 
@@ -479,7 +477,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     }
 
     @Override
-    public boolean af() {
+    public boolean ae() {
         return true;
     }
 
@@ -498,16 +496,16 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         return this.getMotd();
     }
 
-    public void aZ() {
-        if (this.p == null) {
-            this.p = ServerGUI.a(this);
+    public void aY() {
+        if (this.q == null) {
+            this.q = ServerGUI.a(this);
         }
 
     }
 
     @Override
-    public boolean ai() {
-        return this.p != null;
+    public boolean ah() {
+        return this.q != null;
     }
 
     @Override
@@ -550,11 +548,6 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         return this.getDedicatedServerProperties().opPermissionLevel;
     }
 
-    @Override
-    public int k() {
-        return this.getDedicatedServerProperties().functionPermissionLevel;
-    }
-
     @Override
     public void setIdleTimeout(int i) {
         super.setIdleTimeout(i);
@@ -564,7 +557,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     }
 
     @Override
-    public boolean l() {
+    public boolean k() {
         return this.getDedicatedServerProperties().broadcastRconToOps;
     }
 
@@ -574,12 +567,12 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     }
 
     @Override
-    public int aw() {
+    public int av() {
         return this.getDedicatedServerProperties().maxWorldSize;
     }
 
     @Override
-    public int az() {
+    public int ay() {
         return this.getDedicatedServerProperties().networkCompressionThreshold;
     }
 
@@ -591,7 +584,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         for (i = 0; !flag && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the user banlist, retrying in a few seconds");
-                this.bk();
+                this.bh();
             }
 
             flag = NameReferencingFileConverter.a((MinecraftServer) this);
@@ -602,7 +595,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         for (i = 0; !flag1 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the ip banlist, retrying in a few seconds");
-                this.bk();
+                this.bh();
             }
 
             flag1 = NameReferencingFileConverter.b((MinecraftServer) this);
@@ -613,7 +606,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         for (i = 0; !flag2 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the op list, retrying in a few seconds");
-                this.bk();
+                this.bh();
             }
 
             flag2 = NameReferencingFileConverter.c((MinecraftServer) this);
@@ -624,7 +617,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         for (i = 0; !flag3 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the whitelist, retrying in a few seconds");
-                this.bk();
+                this.bh();
             }
 
             flag3 = NameReferencingFileConverter.d(this);
@@ -635,7 +628,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         for (i = 0; !flag4 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the player save files, retrying in a few seconds");
-                this.bk();
+                this.bh();
             }
 
             flag4 = NameReferencingFileConverter.a(this);
@@ -644,7 +637,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         return flag || flag1 || flag2 || flag3 || flag4;
     }
 
-    private void bk() {
+    private void bh() {
         try {
             Thread.sleep(5000L);
         } catch (InterruptedException interruptedexception) {
@@ -686,49 +679,46 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
     @Override
     public String executeRemoteCommand(String s) {
-        Waitable[] waitableArray = new Waitable[1];
-        this.remoteControlCommandListener.clearMessages();
-        this.executeSync(() -> {
-            // CraftBukkit start - fire RemoteServerCommandEvent
-            RemoteServerCommandEvent event = new RemoteServerCommandEvent(remoteConsole, s);
-            server.getPluginManager().callEvent(event);
-            if (event.isCancelled()) {
-                return;
+        // CraftBukkit start - fire RemoteServerCommandEvent
+        Waitable<String> waitable = new Waitable<String>() {
+            @Override
+            protected String evaluate() {
+                remoteControlCommandListener.clearMessages();
+                // Event changes start
+                RemoteServerCommandEvent event = new RemoteServerCommandEvent(remoteConsole, s);
+                server.getPluginManager().callEvent(event);
+                if (event.isCancelled()) {
+                    return "";
+                }
+                // Event change end
+                ServerCommand serverCommand = new ServerCommand(event.getCommand(), remoteControlCommandListener.f());
+                server.dispatchServerCommand(remoteConsole, serverCommand);
+                return remoteControlCommandListener.getMessages();
             }
-            // Paper start
-            if (s.toLowerCase().startsWith("timings") && s.toLowerCase().matches("timings (report|paste|get|merged|seperate)")) {
-                org.bukkit.command.BufferedCommandSender sender = new org.bukkit.command.BufferedCommandSender();
-                Waitable<String> waitable = new Waitable<String>() {
-                    @Override
-                    protected String evaluate() {
-                        return sender.getBuffer();
-                    }
-                };
-                waitableArray[0] = waitable;
-                co.aikar.timings.Timings.generateReport(new co.aikar.timings.TimingsReportListener(sender, waitable));
-            } else {
-            // Paper end
-            ServerCommand serverCommand = new ServerCommand(event.getCommand(), remoteControlCommandListener.getWrapper());
-            server.dispatchServerCommand(remoteConsole, serverCommand);
-            } // Paper
-            // CraftBukkit end
-        });
+        };
         // Paper start
-        if (waitableArray[0] != null) {
-            //noinspection unchecked
-            Waitable<String> waitable = waitableArray[0];
-            try {
-                return waitable.get();
-            } catch (java.util.concurrent.ExecutionException e) {
-                throw new RuntimeException("Exception processing rcon command " + s, e.getCause());
-            } catch (InterruptedException e) {
-                Thread.currentThread().interrupt(); // Maintain interrupted state
-                throw new RuntimeException("Interrupted processing rcon command " + s, e);
-            }
-
+        if (s.toLowerCase().startsWith("timings") && s.toLowerCase().matches("timings (report|paste|get|merged|seperate)")) {
+            org.bukkit.command.BufferedCommandSender sender = new org.bukkit.command.BufferedCommandSender();
+            waitable = new Waitable<String>() {
+                @Override
+                protected String evaluate() {
+                    return sender.getBuffer();
+                }
+            };
+            co.aikar.timings.Timings.generateReport(new co.aikar.timings.TimingsReportListener(sender, waitable));
+        } else {
+            processQueue.add(waitable);
         }
         // Paper end
-        return this.remoteControlCommandListener.getMessages();
+        try {
+            return waitable.get();
+        } catch (java.util.concurrent.ExecutionException e) {
+            throw new RuntimeException("Exception processing rcon command " + s, e.getCause());
+        } catch (InterruptedException e) {
+            Thread.currentThread().interrupt(); // Maintain interrupted state
+            throw new RuntimeException("Interrupted processing rcon command " + s, e);
+        }
+        // CraftBukkit end
     }
 
     public void setHasWhitelist(boolean flag) {
diff --git a/src/main/java/net/minecraft/server/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/DedicatedServerProperties.java
index 0c3ec835..fb092a94 100644
--- a/src/main/java/net/minecraft/server/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/DedicatedServerProperties.java
@@ -43,7 +43,6 @@ public class DedicatedServerProperties extends PropertyManager<DedicatedServerPr
     public final boolean enableCommandBlock;
     public final int spawnProtection;
     public final int opPermissionLevel;
-    public final int functionPermissionLevel;
     public final long maxTickTime;
     public final int viewDistance;
     public final int maxPlayers;
@@ -90,7 +89,6 @@ public class DedicatedServerProperties extends PropertyManager<DedicatedServerPr
         this.enableCommandBlock = this.getBoolean("enable-command-block", false);
         this.spawnProtection = this.getInt("spawn-protection", 16);
         this.opPermissionLevel = this.getInt("op-permission-level", 4);
-        this.functionPermissionLevel = this.getInt("function-permission-level", 2);
         this.maxTickTime = this.getLong("max-tick-time", TimeUnit.MINUTES.toMillis(1L));
         this.viewDistance = this.getInt("view-distance", 10);
         this.maxPlayers = this.getInt("max-players", 20);
diff --git a/src/main/java/net/minecraft/server/DefinedStructure.java b/src/main/java/net/minecraft/server/DefinedStructure.java
index 78dfaeeb..9868677f 100644
--- a/src/main/java/net/minecraft/server/DefinedStructure.java
+++ b/src/main/java/net/minecraft/server/DefinedStructure.java
@@ -59,7 +59,7 @@ public class DefinedStructure {
                         nbttagcompound.remove("y");
                         nbttagcompound.remove("z");
                         list1.add(new DefinedStructure.BlockInfo(blockposition6, iblockdata, nbttagcompound));
-                    } else if (!iblockdata.g(world, blockposition5) && !iblockdata.o(world, blockposition5)) {
+                    } else if (!iblockdata.g(world, blockposition5) && !Block.a(iblockdata.getCollisionShape(world, blockposition5))) {
                         list2.add(new DefinedStructure.BlockInfo(blockposition6, iblockdata, (NBTTagCompound) null));
                     } else {
                         list.add(new DefinedStructure.BlockInfo(blockposition6, iblockdata, (NBTTagCompound) null));
@@ -186,7 +186,7 @@ public class DefinedStructure {
                         if (definedstructure_blockinfo.c != null) {
                             tileentity = generatoraccess.getTileEntity(blockposition1);
                             Clearable.a(tileentity);
-                            generatoraccess.setTypeAndData(blockposition1, Blocks.BARRIER.getBlockData(), 20);
+                            generatoraccess.setTypeAndData(blockposition1, Blocks.BARRIER.getBlockData(), 4);
                         }
 
                         if (generatoraccess.setTypeAndData(blockposition1, iblockdata, i)) {
diff --git a/src/main/java/net/minecraft/server/DefinedStructureManager.java b/src/main/java/net/minecraft/server/DefinedStructureManager.java
index fec41a14..ed9b5c63 100644
--- a/src/main/java/net/minecraft/server/DefinedStructureManager.java
+++ b/src/main/java/net/minecraft/server/DefinedStructureManager.java
@@ -59,7 +59,7 @@ public class DefinedStructureManager implements IResourcePackListener {
 
     @Nullable
     private DefinedStructure e(MinecraftKey minecraftkey) {
-        MinecraftKey minecraftkey1 = new MinecraftKey(minecraftkey.getNamespace(), "structures/" + minecraftkey.getKey() + ".nbt");
+        MinecraftKey minecraftkey1 = new MinecraftKey(minecraftkey.b(), "structures/" + minecraftkey.getKey() + ".nbt");
 
         try {
             IResource iresource = this.d.getResourceManager().a(minecraftkey1);
@@ -207,7 +207,7 @@ public class DefinedStructureManager implements IResourcePackListener {
 
     private java.nio.file.Path a(MinecraftKey minecraftkey, String s) {
         try {
-            java.nio.file.Path java_nio_file_path = this.e.resolve(minecraftkey.getNamespace());
+            java.nio.file.Path java_nio_file_path = this.e.resolve(minecraftkey.b());
             java.nio.file.Path java_nio_file_path1 = java_nio_file_path.resolve("structures");
 
             return FileUtils.b(java_nio_file_path1, minecraftkey.getKey(), s);
diff --git a/src/main/java/net/minecraft/server/DispenseBehaviorBoat.java b/src/main/java/net/minecraft/server/DispenseBehaviorBoat.java
index 174e3f92..c21bc573 100644
--- a/src/main/java/net/minecraft/server/DispenseBehaviorBoat.java
+++ b/src/main/java/net/minecraft/server/DispenseBehaviorBoat.java
@@ -16,7 +16,7 @@ public class DispenseBehaviorBoat extends DispenseBehaviorItem {
 
     @Override
     public ItemStack a(ISourceBlock isourceblock, ItemStack itemstack) {
-        EnumDirection enumdirection = (EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING);
+        EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
         World world = isourceblock.getWorld();
         double d0 = isourceblock.getX() + (double) ((float) enumdirection.getAdjacentX() * 1.125F);
         double d1 = isourceblock.getY() + (double) ((float) enumdirection.getAdjacentY() * 1.125F);
diff --git a/src/main/java/net/minecraft/server/DispenseBehaviorItem.java b/src/main/java/net/minecraft/server/DispenseBehaviorItem.java
index 722c0048..86ad38c4 100644
--- a/src/main/java/net/minecraft/server/DispenseBehaviorItem.java
+++ b/src/main/java/net/minecraft/server/DispenseBehaviorItem.java
@@ -15,12 +15,12 @@ public class DispenseBehaviorItem implements IDispenseBehavior {
         ItemStack itemstack1 = this.a(isourceblock, itemstack);
 
         this.a(isourceblock);
-        this.a(isourceblock, (EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING));
+        this.a(isourceblock, (EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
         return itemstack1;
     }
 
     protected ItemStack a(ISourceBlock isourceblock, ItemStack itemstack) {
-        EnumDirection enumdirection = (EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING);
+        EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
         IPosition iposition = BlockDispenser.a(isourceblock);
         ItemStack itemstack1 = itemstack.cloneAndSubtract(1);
 
diff --git a/src/main/java/net/minecraft/server/DispenseBehaviorProjectile.java b/src/main/java/net/minecraft/server/DispenseBehaviorProjectile.java
index 38f92053..323af07f 100644
--- a/src/main/java/net/minecraft/server/DispenseBehaviorProjectile.java
+++ b/src/main/java/net/minecraft/server/DispenseBehaviorProjectile.java
@@ -13,7 +13,7 @@ public abstract class DispenseBehaviorProjectile extends DispenseBehaviorItem {
     public ItemStack a(ISourceBlock isourceblock, ItemStack itemstack) {
         World world = isourceblock.getWorld();
         IPosition iposition = BlockDispenser.a(isourceblock);
-        EnumDirection enumdirection = (EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING);
+        EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
         IProjectile iprojectile = this.a(world, iposition, itemstack);
 
         // iprojectile.shoot((double) enumdirection.getAdjacentX(), (double) ((float) enumdirection.getAdjacentY() + 0.1F), (double) enumdirection.getAdjacentZ(), this.getPower(), this.a());
diff --git a/src/main/java/net/minecraft/server/DispenseBehaviorShulkerBox.java b/src/main/java/net/minecraft/server/DispenseBehaviorShulkerBox.java
index d8f2e2f8..1f2f6d24 100644
--- a/src/main/java/net/minecraft/server/DispenseBehaviorShulkerBox.java
+++ b/src/main/java/net/minecraft/server/DispenseBehaviorShulkerBox.java
@@ -15,7 +15,7 @@ public class DispenseBehaviorShulkerBox extends DispenseBehaviorMaybe {
         Item item = itemstack.getItem();
 
         if (item instanceof ItemBlock) {
-            EnumDirection enumdirection = (EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING);
+            EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
             BlockPosition blockposition = isourceblock.getBlockPosition().shift(enumdirection);
             EnumDirection enumdirection1 = isourceblock.getWorld().isEmpty(blockposition.down()) ? enumdirection : EnumDirection.UP;
 
@@ -44,6 +44,9 @@ public class DispenseBehaviorShulkerBox extends DispenseBehaviorMaybe {
             // CraftBukkit end
 
             this.dispensed = ((ItemBlock) item).a((BlockActionContext) (new BlockActionContextDirectional(isourceblock.getWorld(), blockposition, enumdirection, itemstack, enumdirection1))) == EnumInteractionResult.SUCCESS;
+            if (this.dispensed) {
+                itemstack.subtract(1);
+            }
         }
 
         return itemstack;
diff --git a/src/main/java/net/minecraft/server/DispenserRegistry.java b/src/main/java/net/minecraft/server/DispenserRegistry.java
index d474197c..08158d97 100644
--- a/src/main/java/net/minecraft/server/DispenserRegistry.java
+++ b/src/main/java/net/minecraft/server/DispenserRegistry.java
@@ -123,7 +123,7 @@ public class DispenserRegistry {
     public static Set<String> b() {
         Set<String> set = new TreeSet();
 
-        a(IRegistry.ENTITY_TYPE, EntityTypes::f, set);
+        a(IRegistry.ENTITY_TYPE, EntityTypes::e, set);
         a(IRegistry.MOB_EFFECT, MobEffectList::c, set);
         a(IRegistry.ITEM, Item::getName, set);
         a(IRegistry.ENCHANTMENT, Enchantment::g, set);
diff --git a/src/main/java/net/minecraft/server/DragonControllerLandedFlame.java b/src/main/java/net/minecraft/server/DragonControllerLandedFlame.java
index 577d1d20..90f6d58d 100644
--- a/src/main/java/net/minecraft/server/DragonControllerLandedFlame.java
+++ b/src/main/java/net/minecraft/server/DragonControllerLandedFlame.java
@@ -64,12 +64,10 @@ public class DragonControllerLandedFlame extends AbstractDragonControllerLanded
             this.d.setRadius(5.0F);
             this.d.setDuration(200);
             this.d.setParticle(Particles.DRAGON_BREATH);
-            this.d.addEffect(new MobEffect(MobEffects.HARM));
-            if (new com.destroystokyo.paper.event.entity.EnderDragonFlameEvent((org.bukkit.entity.EnderDragon) this.a.getBukkitEntity(), (org.bukkit.entity.AreaEffectCloud) this.d.getBukkitEntity()).callEvent()) { // Paper
+            this.d.a(new MobEffect(MobEffects.HARM));
+            if (new com.destroystokyo.paper.event.entity.EnderDragonFlameEvent((org.bukkit.entity.EnderDragon) this.a.getBukkitEntity(), (org.bukkit.entity.AreaEffectCloud) this.d.getBukkitEntity()).callEvent()) // Paper
             this.a.world.addEntity(this.d);
-            } else {
-                this.removeAreaEffect();
-            }
+            else this.removeAreaEffect(); // Paper
         }
 
     }
@@ -80,6 +78,7 @@ public class DragonControllerLandedFlame extends AbstractDragonControllerLanded
         ++this.c;
     }
 
+
     public void removeAreaEffect() { this.e(); } // Paper - OBFHELPER
     @Override
     public void e() {
diff --git a/src/main/java/net/minecraft/server/EnchantmentFrostWalker.java b/src/main/java/net/minecraft/server/EnchantmentFrostWalker.java
index b5de6c74..b5a6e12f 100644
--- a/src/main/java/net/minecraft/server/EnchantmentFrostWalker.java
+++ b/src/main/java/net/minecraft/server/EnchantmentFrostWalker.java
@@ -17,11 +17,6 @@ public class EnchantmentFrostWalker extends Enchantment {
         return i * 10;
     }
 
-    @Override
-    public int b(int i) {
-        return this.a(i) + 15;
-    }
-
     @Override
     public boolean isTreasure() {
         return true;
@@ -42,7 +37,7 @@ public class EnchantmentFrostWalker extends Enchantment {
             while (iterator.hasNext()) {
                 BlockPosition blockposition1 = (BlockPosition) iterator.next();
 
-                if (blockposition1.a((IPosition) entityliving.getPositionVector(), (double) f)) {
+                if (blockposition1.a((IPosition) entityliving.ch(), (double) f)) {
                     blockposition_mutableblockposition.d(blockposition1.getX(), blockposition1.getY() + 1, blockposition1.getZ());
                     IBlockData iblockdata1 = world.getType(blockposition_mutableblockposition);
 
diff --git a/src/main/java/net/minecraft/server/EnchantmentManager.java b/src/main/java/net/minecraft/server/EnchantmentManager.java
index 1d16919e..b6a40e22 100644
--- a/src/main/java/net/minecraft/server/EnchantmentManager.java
+++ b/src/main/java/net/minecraft/server/EnchantmentManager.java
@@ -135,7 +135,7 @@ public class EnchantmentManager {
         };
 
         if (entityliving != null) {
-            a(enchantmentmanager_a, entityliving.bb());
+            a(enchantmentmanager_a, entityliving.ba());
         }
 
         if (entity instanceof EntityHuman) {
@@ -150,7 +150,7 @@ public class EnchantmentManager {
         };
 
         if (entityliving != null) {
-            a(enchantmentmanager_a, entityliving.bb());
+            a(enchantmentmanager_a, entityliving.ba());
         }
 
         if (entityliving instanceof EntityHuman) {
@@ -327,7 +327,16 @@ public class EnchantmentManager {
                 list.add(WeightedRandom.a(random, list1));
 
                 while (random.nextInt(50) <= i) {
-                    a(list1, (WeightedRandomEnchant) SystemUtils.a((List) list));
+                    i = i * 4 / 5 + 1;
+                    list1 = a(i, itemstack, flag);
+                    Iterator iterator = list.iterator();
+
+                    while (iterator.hasNext()) {
+                        WeightedRandomEnchant weightedrandomenchant = (WeightedRandomEnchant) iterator.next();
+
+                        a(list1, weightedrandomenchant);
+                    }
+
                     if (list1.isEmpty()) {
                         break;
                     }
@@ -345,7 +354,7 @@ public class EnchantmentManager {
         Iterator iterator = list.iterator();
 
         while (iterator.hasNext()) {
-            if (!weightedrandomenchant.enchantment.isCompatible(((WeightedRandomEnchant) iterator.next()).enchantment)) {
+            if (!weightedrandomenchant.enchantment.b(((WeightedRandomEnchant) iterator.next()).enchantment)) {
                 iterator.remove();
             }
         }
@@ -363,7 +372,7 @@ public class EnchantmentManager {
             }
 
             enchantment1 = (Enchantment) iterator.next();
-        } while (enchantment1.isCompatible(enchantment));
+        } while (enchantment1.b(enchantment));
 
         return false;
     }
@@ -379,7 +388,7 @@ public class EnchantmentManager {
 
             if ((!enchantment.isTreasure() || flag) && (enchantment.itemTarget.canEnchant(item) || flag1)) {
                 for (int j = enchantment.getMaxLevel(); j > enchantment.getStartLevel() - 1; --j) {
-                    if (i >= enchantment.a(j) && i <= enchantment.b(j)) {
+                    if (i >= enchantment.a(j)) {
                         list.add(new WeightedRandomEnchant(enchantment, j));
                         break;
                     }
diff --git a/src/main/java/net/minecraft/server/EnchantmentThorns.java b/src/main/java/net/minecraft/server/EnchantmentThorns.java
index 62dd5367..ac30e425 100644
--- a/src/main/java/net/minecraft/server/EnchantmentThorns.java
+++ b/src/main/java/net/minecraft/server/EnchantmentThorns.java
@@ -14,11 +14,6 @@ public class EnchantmentThorns extends Enchantment {
         return 10 + 20 * (i - 1);
     }
 
-    @Override
-    public int b(int i) {
-        return super.a(i) + 50;
-    }
-
     @Override
     public int getMaxLevel() {
         return 3;
diff --git a/src/main/java/net/minecraft/server/EnchantmentWeaponDamage.java b/src/main/java/net/minecraft/server/EnchantmentWeaponDamage.java
index 4571cdf0..b4d8dd25 100644
--- a/src/main/java/net/minecraft/server/EnchantmentWeaponDamage.java
+++ b/src/main/java/net/minecraft/server/EnchantmentWeaponDamage.java
@@ -18,11 +18,6 @@ public class EnchantmentWeaponDamage extends Enchantment {
         return EnchantmentWeaponDamage.e[this.a] + (i - 1) * EnchantmentWeaponDamage.f[this.a];
     }
 
-    @Override
-    public int b(int i) {
-        return this.a(i) + EnchantmentWeaponDamage.g[this.a];
-    }
-
     @Override
     public int getMaxLevel() {
         return 5;
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index e8def7f8..fae57a09 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1,6 +1,5 @@
 package net.minecraft.server;
 
-import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
@@ -10,6 +9,7 @@ import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Random;
 import java.util.Set;
@@ -199,7 +199,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public boolean isChunkLoaded() {
-        return world.getChunkIfLoadedImmediately((int) Math.floor(this.locX) >> 4, (int) Math.floor(this.locZ) >> 4) != null; // Paper
+        return world.isChunkLoaded((int) Math.floor(this.locX) >> 4, (int) Math.floor(this.locZ) >> 4);
     }
     // CraftBukkit end
 
@@ -220,7 +220,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         this.aG = new double[]{0.0D, 0.0D, 0.0D};
         this.f = entitytypes;
         this.world = world;
-        this.size = entitytypes.k();
+        this.size = entitytypes.j();
         this.setPosition(0.0D, 0.0D, 0.0D);
         if (world != null) {
             this.dimension = world.worldProvider.getDimensionManager();
@@ -233,14 +233,13 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
 
         this.datawatcher = new DataWatcher(this);
         this.datawatcher.register(Entity.W, (byte) 0);
-        this.datawatcher.register(Entity.AIR_TICKS, this.bp());
+        this.datawatcher.register(Entity.AIR_TICKS, this.bo());
         this.datawatcher.register(Entity.aA, false);
         this.datawatcher.register(Entity.az, Optional.empty());
         this.datawatcher.register(Entity.aB, false);
         this.datawatcher.register(Entity.aC, false);
         this.datawatcher.register(Entity.POSE, EntityPose.STANDING);
         this.initDatawatcher();
-        this.datawatcher.registrationLocked = true; // Spigot
         this.headHeight = this.getHeadHeight(EntityPose.STANDING, this.size);
     }
 
@@ -364,7 +363,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
 
     public void tick() {
         if (!this.world.isClientSide) {
-            this.setFlag(6, this.bm());
+            this.setFlag(6, this.bl());
         }
 
         this.entityBaseTick();
@@ -396,7 +395,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         this.lastPitch = this.pitch;
         this.lastYaw = this.yaw;
         if (this instanceof EntityPlayer) this.doPortalTick(); // CraftBukkit - // Moved up to postTick
-        this.aA();
+        this.az();
         this.m();
         if (this.world.isClientSide) {
             this.extinguish();
@@ -415,7 +414,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
             }
         }
 
-        if (this.aD()) {
+        if (this.aC()) {
             this.burnFromLava();
             this.fallDistance *= 0.5F;
         }
@@ -424,7 +423,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         // Extracted to own function
         /*
         if (this.locY < -64.0D) {
-            this.af();
+            this.ae();
         }
         */
         this.performVoidDamage();
@@ -512,20 +511,12 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
 
     }
 
-    public void g(int i) {
-        this.fireTicks = i;
-    }
-
-    public int ad() {
-        return this.fireTicks;
-    }
-
     public void extinguish() {
         this.fireTicks = 0;
     }
 
-    protected final void doVoidDamage() { this.af(); } // Paper - OBFHELPER
-    protected void af() {
+   protected final void doVoidDamage() { this.ae(); } // Paper - OBFHELPER
+    protected void ae() {
         this.die();
     }
 
@@ -642,7 +633,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
                 this.E = (float) ((double) this.E + (double) MathHelper.sqrt(b(vec3d1)) * 0.6D);
                 this.F = (float) ((double) this.F + (double) MathHelper.sqrt(d0 * d0 + d1 * d1 + d2 * d2) * 0.6D);
                 if (this.F > this.av && !iblockdata.isAir()) {
-                    this.av = this.ag();
+                    this.av = this.af();
                     if (this.isInWater()) {
                         Entity entity = this.isVehicle() && this.getRidingPassenger() != null ? this.getRidingPassenger() : this;
                         float f = entity == this ? 0.35F : 0.4F;
@@ -657,7 +648,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
                     } else {
                         this.a(blockposition, iblockdata);
                     }
-                } else if (this.F > this.aw && this.am() && iblockdata.isAir()) {
+                } else if (this.F > this.aw && this.al() && iblockdata.isAir()) {
                     this.aw = this.e(this.F);
                 }
             }
@@ -673,7 +664,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
                 throw new ReportedException(crashreport);
             }
 
-            boolean flag = this.au();
+            boolean flag = this.at();
 
             if (this.world.b(this.getBoundingBox().shrink(0.001D))) {
                 if (!flag) {
@@ -796,20 +787,28 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         VoxelShapeCollision voxelshapecollision = VoxelShapeCollision.a(this);
         VoxelShape voxelshape = this.world.getWorldBorder().a();
         Stream<VoxelShape> stream = VoxelShapes.c(voxelshape, VoxelShapes.a(axisalignedbb.shrink(1.0E-7D)), OperatorBoolean.AND) ? Stream.empty() : Stream.of(voxelshape);
-        Stream<VoxelShape> stream1 = this.world.a(this, axisalignedbb.a(vec3d), (Set) ImmutableSet.of());
-        StreamAccumulator<VoxelShape> streamaccumulator = new StreamAccumulator<>(Stream.concat(stream1, stream));
-        Vec3D vec3d1 = vec3d.g() == 0.0D ? vec3d : a(this, vec3d, axisalignedbb, this.world, voxelshapecollision, streamaccumulator);
+        AxisAlignedBB axisalignedbb1 = axisalignedbb.a(vec3d).g(1.0E-7D);
+        Stream<AxisAlignedBB> stream1 = this.world.getEntities(this, axisalignedbb1).stream().filter((entity) -> { // CraftBukkit - decompile error
+            return !this.x(entity);
+        }).flatMap((entity) -> {
+            return Stream.of(entity.ap(), this.j(entity));
+        }).filter(Objects::nonNull);
+
+        axisalignedbb1.getClass();
+        Stream<VoxelShape> stream2 = stream1.filter(axisalignedbb1::c).map(VoxelShapes::a);
+        StreamAccumulator<VoxelShape> streamaccumulator = new StreamAccumulator<>(Stream.concat(stream2, stream));
+        Vec3D vec3d1 = vec3d.g() == 0.0D ? vec3d : a(vec3d, axisalignedbb, this.world, voxelshapecollision, streamaccumulator);
         boolean flag = vec3d.x != vec3d1.x;
         boolean flag1 = vec3d.y != vec3d1.y;
         boolean flag2 = vec3d.z != vec3d1.z;
         boolean flag3 = this.onGround || flag1 && vec3d.y < 0.0D;
 
         if (this.K > 0.0F && flag3 && (flag || flag2)) {
-            Vec3D vec3d2 = a(this, new Vec3D(vec3d.x, (double) this.K, vec3d.z), axisalignedbb, this.world, voxelshapecollision, streamaccumulator);
-            Vec3D vec3d3 = a(this, new Vec3D(0.0D, (double) this.K, 0.0D), axisalignedbb.b(vec3d.x, 0.0D, vec3d.z), this.world, voxelshapecollision, streamaccumulator);
+            Vec3D vec3d2 = a(new Vec3D(vec3d.x, (double) this.K, vec3d.z), axisalignedbb, this.world, voxelshapecollision, streamaccumulator);
+            Vec3D vec3d3 = a(new Vec3D(0.0D, (double) this.K, 0.0D), axisalignedbb.b(vec3d.x, 0.0D, vec3d.z), this.world, voxelshapecollision, streamaccumulator);
 
             if (vec3d3.y < (double) this.K) {
-                Vec3D vec3d4 = a(this, new Vec3D(vec3d.x, 0.0D, vec3d.z), axisalignedbb.b(vec3d3), this.world, voxelshapecollision, streamaccumulator).e(vec3d3);
+                Vec3D vec3d4 = a(new Vec3D(vec3d.x, 0.0D, vec3d.z), axisalignedbb.b(vec3d3), this.world, voxelshapecollision, streamaccumulator).e(vec3d3);
 
                 if (b(vec3d4) > b(vec3d2)) {
                     vec3d2 = vec3d4;
@@ -817,7 +816,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
             }
 
             if (b(vec3d2) > b(vec3d1)) {
-                return vec3d2.e(a(this, new Vec3D(0.0D, -vec3d2.y + vec3d.y, 0.0D), axisalignedbb.b(vec3d2), this.world, voxelshapecollision, streamaccumulator));
+                return vec3d2.e(a(new Vec3D(0.0D, -vec3d2.y + vec3d.y, 0.0D), axisalignedbb.b(vec3d2), this.world, voxelshapecollision, streamaccumulator));
             }
         }
 
@@ -828,55 +827,6 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return vec3d.x * vec3d.x + vec3d.z * vec3d.z;
     }
 
-    public static Vec3D a(@Nullable Entity entity, Vec3D vec3d, AxisAlignedBB axisalignedbb, World world, VoxelShapeCollision voxelshapecollision, StreamAccumulator<VoxelShape> streamaccumulator) {
-        boolean flag = vec3d.x == 0.0D;
-        boolean flag1 = vec3d.y == 0.0D;
-        boolean flag2 = vec3d.z == 0.0D;
-
-        if ((!flag || !flag1) && (!flag || !flag2) && (!flag1 || !flag2)) {
-            StreamAccumulator<VoxelShape> streamaccumulator1 = new StreamAccumulator<>(Stream.concat(streamaccumulator.a(), world.b(entity, axisalignedbb.a(vec3d))));
-
-            return a(vec3d, axisalignedbb, streamaccumulator1);
-        } else {
-            return a(vec3d, axisalignedbb, world, voxelshapecollision, streamaccumulator);
-        }
-    }
-
-    public static Vec3D a(Vec3D vec3d, AxisAlignedBB axisalignedbb, StreamAccumulator<VoxelShape> streamaccumulator) {
-        double d0 = vec3d.x;
-        double d1 = vec3d.y;
-        double d2 = vec3d.z;
-
-        if (d1 != 0.0D) {
-            d1 = VoxelShapes.a(EnumDirection.EnumAxis.Y, axisalignedbb, streamaccumulator.a(), d1);
-            if (d1 != 0.0D) {
-                axisalignedbb = axisalignedbb.d(0.0D, d1, 0.0D);
-            }
-        }
-
-        boolean flag = Math.abs(d0) < Math.abs(d2);
-
-        if (flag && d2 != 0.0D) {
-            d2 = VoxelShapes.a(EnumDirection.EnumAxis.Z, axisalignedbb, streamaccumulator.a(), d2);
-            if (d2 != 0.0D) {
-                axisalignedbb = axisalignedbb.d(0.0D, 0.0D, d2);
-            }
-        }
-
-        if (d0 != 0.0D) {
-            d0 = VoxelShapes.a(EnumDirection.EnumAxis.X, axisalignedbb, streamaccumulator.a(), d0);
-            if (!flag && d0 != 0.0D) {
-                axisalignedbb = axisalignedbb.d(d0, 0.0D, 0.0D);
-            }
-        }
-
-        if (!flag && d2 != 0.0D) {
-            d2 = VoxelShapes.a(EnumDirection.EnumAxis.Z, axisalignedbb, streamaccumulator.a(), d2);
-        }
-
-        return new Vec3D(d0, d1, d2);
-    }
-
     public static Vec3D a(Vec3D vec3d, AxisAlignedBB axisalignedbb, IWorldReader iworldreader, VoxelShapeCollision voxelshapecollision, StreamAccumulator<VoxelShape> streamaccumulator) {
         double d0 = vec3d.x;
         double d1 = vec3d.y;
@@ -912,7 +862,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return new Vec3D(d0, d1, d2);
     }
 
-    protected float ag() {
+    protected float af() {
         return (float) ((int) this.F + 1);
     }
 
@@ -1045,13 +995,13 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return 0.0F;
     }
 
-    protected boolean am() {
+    protected boolean al() {
         return false;
     }
 
     public void a(SoundEffect soundeffect, float f, float f1) {
         if (!this.isSilent()) {
-            this.world.playSound((EntityHuman) null, this.locX, this.locY, this.locZ, soundeffect, this.getSoundCategory(), f, f1);
+            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, soundeffect, this.getSoundCategory(), f, f1);
         }
 
     }
@@ -1090,7 +1040,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     @Nullable
-    public AxisAlignedBB aq() {
+    public AxisAlignedBB ap() {
         return null;
     }
 
@@ -1159,39 +1109,39 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return this.isInWater() || this.isInRain();
     }
 
-    public boolean au() {
+    public boolean at() {
         return this.isInWater() || this.isInRain() || this.l();
     }
 
-    public boolean av() {
+    public boolean au() {
         return this.isInWater() || this.l();
     }
 
-    public boolean aw() {
+    public boolean av() {
         return this.R && this.isInWater();
     }
 
     private void m() {
-        this.ay();
-        this.n();
         this.ax();
+        this.n();
+        this.aw();
     }
 
-    public void ax() {
+    public void aw() {
         if (this.isSwimming()) {
             this.setSwimming(this.isSprinting() && this.isInWater() && !this.isPassenger());
         } else {
-            this.setSwimming(this.isSprinting() && this.aw() && !this.isPassenger());
+            this.setSwimming(this.isSprinting() && this.av() && !this.isPassenger());
         }
 
     }
 
-    public boolean ay() {
+    public boolean ax() {
         if (this.getVehicle() instanceof EntityBoat) {
             this.inWater = false;
         } else if (this.b(TagsFluid.WATER)) {
             if (!this.inWater && !this.justCreated) {
-                this.az();
+                this.ay();
             }
 
             this.fallDistance = 0.0F;
@@ -1208,7 +1158,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         this.R = this.a(TagsFluid.WATER, true);
     }
 
-    protected void az() {
+    protected void ay() {
         Entity entity = this.isVehicle() && this.getRidingPassenger() != null ? this.getRidingPassenger() : this;
         float f = entity == this ? 0.2F : 0.9F;
         Vec3D vec3d = entity.getMot();
@@ -1244,14 +1194,14 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
 
     }
 
-    public void aA() {
+    public void az() {
         if (this.isSprinting() && !this.isInWater()) {
-            this.aB();
+            this.aA();
         }
 
     }
 
-    protected void aB() {
+    protected void aA() {
         int i = MathHelper.floor(this.locX);
         int j = MathHelper.floor(this.locY - 0.20000000298023224D);
         int k = MathHelper.floor(this.locZ);
@@ -1287,11 +1237,11 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         }
     }
 
-    public void aC() {
+    public void aB() {
         this.inLava = true;
     }
 
-    public boolean aD() {
+    public boolean aC() {
         return this.inLava;
     }
 
@@ -1315,12 +1265,12 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         }
     }
 
-    public float aF() {
+    public float aE() {
         BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition(this.locX, 0.0D, this.locZ);
 
         if (this.world.isLoaded(blockposition_mutableblockposition)) {
             blockposition_mutableblockposition.p(MathHelper.floor(this.locY + (double) this.getHeadHeight()));
-            return this.world.v(blockposition_mutableblockposition);
+            return this.world.w(blockposition_mutableblockposition);
         } else {
             return 0.0F;
         }
@@ -1400,7 +1350,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public double h(Entity entity) {
-        return this.c(entity.getPositionVector());
+        return this.c(entity.ch());
     }
 
     public double c(Vec3D vec3d) {
@@ -1724,7 +1674,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
                     }
 
                     this.a(nbttagcompound);
-                    if (this.aJ()) {
+                    if (this.aI()) {
                         this.setPosition(this.locX, this.locY, this.locZ);
                     }
 
@@ -1811,7 +1761,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         }
     }
 
-    protected boolean aJ() {
+    protected boolean aI() {
         return true;
     }
 
@@ -2019,15 +1969,15 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
 
     public void k(Entity entity) {
         if (this.w(entity)) {
-            entity.setPosition(this.locX, this.locY + this.aP() + entity.aO(), this.locZ);
+            entity.setPosition(this.locX, this.locY + this.aO() + entity.aN(), this.locZ);
         }
     }
 
-    public double aO() {
+    public double aN() {
         return 0.0D;
     }
 
-    public double aP() {
+    public double aO() {
         return (double) this.size.height * 0.75D;
     }
 
@@ -2169,8 +2119,8 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return this.getPassengers().size() < 1;
     }
 
-    public final float getCollisionBorderSize() { return aS(); } // Paper - OBFHELPER
-    public float aS() {
+    public final float getCollisionBorderSize() { return aR(); } // Paper - OBFHELPER
+    public float aR() {
         return 0.0F;
     }
 
@@ -2178,13 +2128,13 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return this.c(this.pitch, this.yaw);
     }
 
-    public Vec2F aU() {
+    public Vec2F aT() {
         return new Vec2F(this.pitch, this.yaw);
     }
 
     public void c(BlockPosition blockposition) {
         if (this.portalCooldown > 0) {
-            this.portalCooldown = this.aX();
+            this.portalCooldown = this.aW();
         } else {
             if (!this.world.isClientSide && !blockposition.equals(this.al)) {
                 this.al = new BlockPosition(blockposition);
@@ -2209,7 +2159,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
                 if ((true || this.world.getMinecraftServer().getAllowNether()) && !this.isPassenger() && this.aj++ >= i) { // CraftBukkit
                     this.world.getMethodProfiler().enter("portal");
                     this.aj = i;
-                    this.portalCooldown = this.aX();
+                    this.portalCooldown = this.aW();
                     // CraftBukkit start
                     if (this instanceof EntityPlayer) {
                         ((EntityPlayer) this).a(this.world.worldProvider.getDimensionManager().getType() == DimensionManager.NETHER ? DimensionManager.OVERWORLD : DimensionManager.NETHER, PlayerTeleportEvent.TeleportCause.NETHER_PORTAL);
@@ -2235,11 +2185,11 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         }
     }
 
-    public int aX() {
+    public int aW() {
         return 300;
     }
 
-    public Iterable<ItemStack> aZ() {
+    public Iterable<ItemStack> aY() {
         return Entity.c;
     }
 
@@ -2247,8 +2197,8 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return Entity.c;
     }
 
-    public Iterable<ItemStack> bb() {
-        return Iterables.concat(this.aZ(), this.getArmorItems());
+    public Iterable<ItemStack> ba() {
+        return Iterables.concat(this.aY(), this.getArmorItems());
     }
 
     public void setEquipment(EnumItemSlot enumitemslot, ItemStack itemstack) {}
@@ -2267,7 +2217,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return !this.getPassengers().isEmpty();
     }
 
-    public boolean bf() {
+    public boolean be() {
         return true;
     }
 
@@ -2291,7 +2241,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return this.getFlag(4);
     }
 
-    public boolean bk() {
+    public boolean bj() {
         return this.getPose() == EntityPose.SWIMMING;
     }
 
@@ -2306,7 +2256,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         this.setFlag(4, flag);
     }
 
-    public boolean bm() {
+    public boolean bl() {
         return this.glowing || this.world.isClientSide && this.getFlag(6);
     }
 
@@ -2355,8 +2305,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
 
     }
 
-    public int getMaxAirTicks() { return bp(); } // Paper - OBFHELPER
-    public int bp() {
+    public int getMaxAirTicks() { return bo(); } public int bo() {
         return 300;
     }
 
@@ -2460,7 +2409,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
             EnumDirection enumdirection1 = aenumdirection[j];
 
             blockposition_mutableblockposition.g(blockposition).c(enumdirection1);
-            if (!this.world.getType(blockposition_mutableblockposition).o(this.world, blockposition_mutableblockposition)) {
+            if (!Block.a(this.world.getType(blockposition_mutableblockposition).getCollisionShape(this.world, blockposition_mutableblockposition))) {
                 double d4 = vec3d.a(enumdirection1.k());
                 double d5 = enumdirection1.c() == EnumDirection.EnumAxisDirection.POSITIVE ? 1.0D - d4 : d4;
 
@@ -2493,7 +2442,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     private static void c(IChatBaseComponent ichatbasecomponent) {
         ichatbasecomponent.a((chatmodifier) -> {
             chatmodifier.setChatClickable((ChatClickable) null);
-        }).getSiblings().forEach(Entity::c);
+        }).a().forEach(Entity::c);
     }
 
     @Override
@@ -2506,7 +2455,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
             c(ichatbasecomponent1);
             return ichatbasecomponent1;
         } else {
-            return this.f.g();
+            return this.f.f();
         }
     }
 
@@ -2522,7 +2471,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
 
     public void l(float f) {}
 
-    public boolean bs() {
+    public boolean br() {
         return true;
     }
 
@@ -2590,19 +2539,19 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
             BlockPosition blockposition = location; // CraftBukkit
 
         if (blockposition == null) { // CraftBukkit
-            if (dimensionmanager1.getType() == DimensionManager.THE_END && dimensionmanager == DimensionManager.OVERWORLD) { // CraftBukkit
+            if (dimensionmanager1 == DimensionManager.THE_END && dimensionmanager == DimensionManager.OVERWORLD) {
                 blockposition = worldserver1.getHighestBlockYAt(HeightMap.Type.MOTION_BLOCKING_NO_LEAVES, worldserver1.getSpawn());
-            } else if (dimensionmanager.getType() == DimensionManager.THE_END) { // CraftBukkit
+            } else if (dimensionmanager == DimensionManager.THE_END) {
                 blockposition = worldserver1.getDimensionSpawn();
             } else {
                 double d0 = this.locX;
                 double d1 = this.locZ;
                 double d2 = 8.0D;
 
-                if (dimensionmanager1.getType() == DimensionManager.OVERWORLD && dimensionmanager.getType() == DimensionManager.NETHER) { // CraftBukkit
+                if (dimensionmanager1 == DimensionManager.OVERWORLD && dimensionmanager == DimensionManager.NETHER) {
                     d0 /= 8.0D;
                     d1 /= 8.0D;
-                } else if (dimensionmanager1.getType() == DimensionManager.NETHER && dimensionmanager.getType() == DimensionManager.OVERWORLD) { // CraftBukkit
+                } else if (dimensionmanager1 == DimensionManager.NETHER && dimensionmanager == DimensionManager.OVERWORLD) {
                     d0 *= 8.0D;
                     d1 *= 8.0D;
                 }
@@ -2630,22 +2579,19 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         } // CraftBukkit
 
             // CraftBukkit start
-            // SPIGOT-5136 - don't fire event for CraftEntity.teleport
-            if (location == null) {
-                Location enter = this.getBukkitEntity().getLocation();
-                Location exit = new Location(worldserver1.getWorld(), blockposition.getX(), blockposition.getY(), blockposition.getZ());
-
-                EntityPortalEvent event = new EntityPortalEvent(this.getBukkitEntity(), enter, exit);
-                event.getEntity().getServer().getPluginManager().callEvent(event);
-                if (event.isCancelled() || event.getTo() == null || event.getTo().getWorld() == null || !this.isAlive()) {
-                    return null;
-                }
+            Location enter = this.getBukkitEntity().getLocation();
+            Location exit = new Location(worldserver1.getWorld(), blockposition.getX(), blockposition.getY(), blockposition.getZ());
 
-                exit = event.getTo();
-                worldserver1 = ((CraftWorld) exit.getWorld()).getHandle();
-                blockposition = new BlockPosition(exit.getX(), exit.getY(), exit.getZ());
+            EntityPortalEvent event = new EntityPortalEvent(this.getBukkitEntity(), enter, exit);
+            event.getEntity().getServer().getPluginManager().callEvent(event);
+            if (event.isCancelled() || event.getTo() == null || event.getTo().getWorld() == null || !this.isAlive()) {
+                return null;
             }
 
+            exit = event.getTo();
+            worldserver1 = ((CraftWorld) exit.getWorld()).getHandle();
+            blockposition = new BlockPosition(exit.getX(), exit.getY(), exit.getZ());
+
             this.dimension = dimensionmanager;
             this.decouple();
             // CraftBukkit end
@@ -2691,7 +2637,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return true;
     }
 
-    public int bv() {
+    public int bu() {
         return 3;
     }
 
@@ -2746,7 +2692,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return this.ap;
     }
 
-    public boolean bE() {
+    public boolean bD() {
         // Paper start
         return this.pushedByWater();
     }
@@ -2759,7 +2705,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     @Override
     public IChatBaseComponent getScoreboardDisplayName() {
         return ScoreboardTeam.a(this.getScoreboardTeam(), this.getDisplayName()).a((chatmodifier) -> {
-            chatmodifier.setChatHoverable(this.bK()).setInsertion(this.getUniqueIDString());
+            chatmodifier.setChatHoverable(this.bJ()).setInsertion(this.getUniqueIDString());
         });
     }
 
@@ -2843,7 +2789,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return this.getDirection();
     }
 
-    protected ChatHoverable bK() {
+    protected ChatHoverable bJ() {
         NBTTagCompound nbttagcompound = new NBTTagCompound();
         MinecraftKey minecraftkey = EntityTypes.getName(this.getEntityType());
 
@@ -2915,7 +2861,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return new BlockPosition(this);
     }
 
-    public Vec3D bP() {
+    public Vec3D bO() {
         return new Vec3D(this.locX, this.locY, this.locZ);
     }
 
@@ -2932,7 +2878,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return EnumInteractionResult.PASS;
     }
 
-    public boolean bS() {
+    public boolean bR() {
         return false;
     }
 
@@ -2976,11 +2922,11 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         }
     }
 
-    public boolean bT() {
+    public boolean bS() {
         return false;
     }
 
-    public boolean bU() {
+    public boolean bT() {
         boolean flag = this.aF;
 
         this.aF = false;
@@ -3094,7 +3040,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return true;
     }
 
-    public boolean ca() {
+    public boolean bZ() {
         Entity entity = this.getRidingPassenger();
 
         return entity instanceof EntityHuman ? ((EntityHuman) entity).dG() : !this.world.isClientSide;
@@ -3118,20 +3064,20 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public CommandListenerWrapper getCommandListener() {
-        return new CommandListenerWrapper(this, new Vec3D(this.locX, this.locY, this.locZ), this.aU(), this.world instanceof WorldServer ? (WorldServer) this.world : null, this.y(), this.getDisplayName().getString(), this.getScoreboardDisplayName(), this.world.getMinecraftServer(), this);
+        return new CommandListenerWrapper(this, new Vec3D(this.locX, this.locY, this.locZ), this.aT(), this.world instanceof WorldServer ? (WorldServer) this.world : null, this.y(), this.getDisplayName().getString(), this.getScoreboardDisplayName(), this.world.getMinecraftServer(), this);
     }
 
     protected int y() {
         return 0;
     }
 
-    public boolean k(int i) {
+    public boolean j(int i) {
         return this.y() >= i;
     }
 
     @Override
     public boolean shouldSendSuccess() {
-        return this.world.getGameRules().getBoolean(GameRules.SEND_COMMAND_FEEDBACK);
+        return this.world.getGameRules().getBoolean("sendCommandFeedback");
     }
 
     @Override
@@ -3171,7 +3117,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
             return false;
         } else {
             double d0 = 0.0D;
-            boolean flag = this.bE();
+            boolean flag = this.bD();
             boolean flag1 = false;
             Vec3D vec3d = Vec3D.a;
             int k1 = 0;
@@ -3241,7 +3187,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         }
     }
 
-    public double cf() {
+    public double ce() {
         return this.Q;
     }
 
@@ -3256,10 +3202,10 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     public abstract Packet<?> N();
 
     public EntitySize a(EntityPose entitypose) {
-        return this.f.k();
+        return this.f.j();
     }
 
-    public Vec3D getPositionVector() {
+    public Vec3D ch() {
         return new Vec3D(this.locX, this.locY, this.locZ);
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityAnimal.java b/src/main/java/net/minecraft/server/EntityAnimal.java
index 3e627ea0..dbce8a86 100644
--- a/src/main/java/net/minecraft/server/EntityAnimal.java
+++ b/src/main/java/net/minecraft/server/EntityAnimal.java
@@ -1,17 +1,18 @@
 package net.minecraft.server;
 
-import java.util.Random;
 import java.util.UUID;
 import javax.annotation.Nullable;
 
 public abstract class EntityAnimal extends EntityAgeable {
 
+    protected Block bC;
     public int loveTicks;
     public UUID breedCause;
     public ItemStack breedItem; // CraftBukkit - Add breedItem variable
 
     protected EntityAnimal(EntityTypes<? extends EntityAnimal> entitytypes, World world) {
         super(entitytypes, world);
+        this.bC = Blocks.GRASS_BLOCK;
     }
 
     @Override
@@ -59,7 +60,7 @@ public abstract class EntityAnimal extends EntityAgeable {
 
     @Override
     public float a(BlockPosition blockposition, IWorldReader iworldreader) {
-        return iworldreader.getType(blockposition.down()).getBlock() == Blocks.GRASS_BLOCK ? 10.0F : iworldreader.v(blockposition) - 0.5F;
+        return iworldreader.getType(blockposition.down()).getBlock() == this.bC ? 10.0F : iworldreader.w(blockposition) - 0.5F;
     }
 
     @Override
@@ -73,7 +74,7 @@ public abstract class EntityAnimal extends EntityAgeable {
     }
 
     @Override
-    public double aO() {
+    public double aN() {
         return 0.14D;
     }
 
@@ -84,8 +85,14 @@ public abstract class EntityAnimal extends EntityAgeable {
         this.breedCause = nbttagcompound.b("LoveCause") ? nbttagcompound.a("LoveCause") : null;
     }
 
-    public static boolean b(EntityTypes<? extends EntityAnimal> entitytypes, GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition, Random random) {
-        return generatoraccess.getType(blockposition.down()).getBlock() == Blocks.GRASS_BLOCK && generatoraccess.getLightLevel(blockposition, 0) > 8;
+    @Override
+    public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
+        int i = MathHelper.floor(this.locX);
+        int j = MathHelper.floor(this.getBoundingBox().minY);
+        int k = MathHelper.floor(this.locZ);
+        BlockPosition blockposition = new BlockPosition(i, j, k);
+
+        return generatoraccess.getType(blockposition.down()).getBlock() == this.bC && generatoraccess.getLightLevel(blockposition, 0) > 8 && super.a(generatoraccess, enummobspawn);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java b/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
index 8ebf85dc..2eaed1cd 100644
--- a/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
+++ b/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
@@ -101,7 +101,7 @@ public class EntityAreaEffectCloud extends Entity {
 
     }
 
-    public void addEffect(MobEffect mobeffect) {
+    public void a(MobEffect mobeffect) {
         this.effects.add(mobeffect);
         if (!this.hasColor) {
             this.z();
@@ -164,7 +164,7 @@ public class EntityAreaEffectCloud extends Entity {
         boolean flag = this.l();
         float f = this.getRadius();
         // Paper start - fix MC-114618
-        if (f < 0.0F) {
+        if (f < 0.5F) {
             this.die();
             return;
         }
@@ -187,7 +187,7 @@ public class EntityAreaEffectCloud extends Entity {
                         f1 = MathHelper.c(this.random.nextFloat()) * 0.2F;
                         f2 = MathHelper.cos(f4) * f1;
                         f3 = MathHelper.sin(f4) * f1;
-                        if (particleparam.getParticle() == Particles.ENTITY_EFFECT) {
+                        if (particleparam.b() == Particles.ENTITY_EFFECT) {
                             int i1 = this.random.nextBoolean() ? 16777215 : this.getColor();
 
                             i = i1 >> 16 & 255;
@@ -208,7 +208,7 @@ public class EntityAreaEffectCloud extends Entity {
                     f3 = MathHelper.cos(f1) * f2;
                     float f6 = MathHelper.sin(f1) * f2;
 
-                    if (particleparam.getParticle() == Particles.ENTITY_EFFECT) {
+                    if (particleparam.b() == Particles.ENTITY_EFFECT) {
                         i = this.getColor();
                         j = i >> 16 & 255;
                         k = i >> 8 & 255;
@@ -238,10 +238,12 @@ public class EntityAreaEffectCloud extends Entity {
 
             if (this.radiusPerTick != 0.0F) {
                 f += this.radiusPerTick;
-                if (f < 0.5F) {
-                    this.die();
-                    return;
-                }
+                // Paper start - moved up - fix MC-114618
+                //if (f < 0.5F) {
+                //    this.die();
+                //    return;
+                //}
+                // Paper end
 
                 this.setRadius(f);
             }
@@ -402,7 +404,7 @@ public class EntityAreaEffectCloud extends Entity {
                 MobEffect mobeffect = MobEffect.b(nbttaglist.getCompound(i));
 
                 if (mobeffect != null) {
-                    this.addEffect(mobeffect);
+                    this.a(mobeffect);
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/EntityArmorStand.java b/src/main/java/net/minecraft/server/EntityArmorStand.java
index e516db27..235ca47e 100644
--- a/src/main/java/net/minecraft/server/EntityArmorStand.java
+++ b/src/main/java/net/minecraft/server/EntityArmorStand.java
@@ -91,8 +91,8 @@ public class EntityArmorStand extends EntityLiving {
     }
 
     @Override
-    public boolean df() {
-        return super.df() && this.A();
+    public boolean de() {
+        return super.de() && this.A();
     }
 
     @Override
@@ -108,7 +108,7 @@ public class EntityArmorStand extends EntityLiving {
     }
 
     @Override
-    public Iterable<ItemStack> aZ() {
+    public Iterable<ItemStack> aY() {
         return this.handItems;
     }
 
@@ -469,7 +469,7 @@ public class EntityArmorStand extends EntityLiving {
                     return false;
                 } else {
                     boolean flag = damagesource.j() instanceof EntityArrow;
-                    boolean flag1 = flag && ((EntityArrow) damagesource.j()).getPierceLevel() > 0;
+                    boolean flag1 = flag && ((EntityArrow) damagesource.j()).s() > 0;
                     boolean flag2 = "player".equals(damagesource.q());
 
                     if (!flag2 && !flag) {
@@ -556,7 +556,7 @@ public class EntityArmorStand extends EntityLiving {
     }
 
     private void F() {
-        this.world.playSound((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_ARMOR_STAND_BREAK, this.getSoundCategory(), 1.0F, 1.0F);
+        this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_ARMOR_STAND_BREAK, this.getSoundCategory(), 1.0F, 1.0F);
     }
 
     @Override
@@ -572,7 +572,7 @@ public class EntityArmorStand extends EntityLiving {
     }
 
     @Override
-    public double aO() {
+    public double aN() {
         return this.isMarker() ? 0.0D : 0.10000000149011612D;
     }
 
@@ -674,13 +674,6 @@ public class EntityArmorStand extends EntityLiving {
         return this.isSmall();
     }
 
-    // CraftBukkit start
-    @Override
-    protected boolean isDropExperience() {
-        return true; // MC-157395, SPIGOT-5193 even baby (small) armor stands should drop
-    }
-    // CraftBukkit end
-
     @Override
     public void killEntity() {
         org.bukkit.event.entity.EntityDeathEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityDeathEvent(this, drops); // CraftBukkit - call event // Paper - make cancellable
@@ -689,7 +682,7 @@ public class EntityArmorStand extends EntityLiving {
     }
 
     @Override
-    public boolean bS() {
+    public boolean bR() {
         return this.isInvisible();
     }
 
@@ -838,7 +831,7 @@ public class EntityArmorStand extends EntityLiving {
     public EntitySize a(EntityPose entitypose) {
         float f = this.isMarker() ? 0.0F : (this.isBaby() ? 0.5F : 1.0F);
 
-        return this.getEntityType().k().a(f);
+        return this.getEntityType().j().a(f);
     }
 
     // Paper start
diff --git a/src/main/java/net/minecraft/server/EntityArrow.java b/src/main/java/net/minecraft/server/EntityArrow.java
index 25ddaae4..5ee0802e 100644
--- a/src/main/java/net/minecraft/server/EntityArrow.java
+++ b/src/main/java/net/minecraft/server/EntityArrow.java
@@ -85,7 +85,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
         float f7 = MathHelper.cos(f1 * 0.017453292F) * MathHelper.cos(f * 0.017453292F);
 
         this.shoot((double) f5, (double) f6, (double) f7, f3, f4);
-        if (!entity.world.paperConfig.disableRelativeProjectileVelocity) this.setMot(this.getMot().add(entity.getMot().x, entity.onGround ? 0.0D : entity.getMot().y, entity.getMot().z)); // Paper - allow disabling relative velocity
+        this.setMot(this.getMot().add(entity.getMot().x, entity.onGround ? 0.0D : entity.getMot().y, entity.getMot().z));
     }
 
     @Override
@@ -199,7 +199,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
                     this.impulse = true;
                 }
 
-                if (movingobjectpositionentity == null || this.getPierceLevel() <= 0) {
+                if (movingobjectpositionentity == null || this.s() <= 0) {
                     break;
                 }
 
@@ -302,7 +302,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
             this.inGround = true;
             this.shake = 7;
             this.setCritical(false);
-            this.setPierceLevel((byte) 0);
+            this.b((byte) 0);
             this.a(SoundEffects.ENTITY_ARROW_HIT);
             this.o(false);
             this.w();
@@ -327,7 +327,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
         float f = (float) this.getMot().f();
         int i = MathHelper.f(Math.max((double) f * this.damage, 0.0D));
 
-        if (this.getPierceLevel() > 0) {
+        if (this.s() > 0) {
             if (this.az == null) {
                 this.az = new IntOpenHashSet(5);
             }
@@ -336,7 +336,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
                 this.aA = Lists.newArrayListWithCapacity(5);
             }
 
-            if (this.az.size() >= this.getPierceLevel() + 1) {
+            if (this.az.size() >= this.s() + 1) {
                 this.die();
                 return;
             }
@@ -360,8 +360,6 @@ public abstract class EntityArrow extends Entity implements IProjectile {
             }
         }
 
-        int j = entity.ad();
-
         if (this.isBurning() && !(entity instanceof EntityEnderman)) {
             // CraftBukkit start
             EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5);
@@ -376,7 +374,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
             if (entity instanceof EntityLiving) {
                 EntityLiving entityliving = (EntityLiving) entity;
 
-                if (!this.world.isClientSide && this.getPierceLevel() <= 0) {
+                if (!this.world.isClientSide && this.s() <= 0) {
                     entityliving.setArrowCount(entityliving.getArrowCount() + 1);
                 }
 
@@ -414,11 +412,10 @@ public abstract class EntityArrow extends Entity implements IProjectile {
             }
 
             this.a(this.ay, 1.0F, 1.2F / (this.random.nextFloat() * 0.2F + 0.9F));
-            if (this.getPierceLevel() <= 0 && !(entity instanceof EntityEnderman)) {
+            if (this.s() <= 0 && !(entity instanceof EntityEnderman)) {
                 this.die();
             }
         } else {
-            entity.g(j);
             this.setMot(this.getMot().a(-0.1D));
             this.yaw += 180.0F;
             this.lastYaw += 180.0F;
@@ -463,7 +460,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
         nbttagcompound.setByte("pickup", (byte) this.fromPlayer.ordinal());
         nbttagcompound.setDouble("damage", this.damage);
         nbttagcompound.setBoolean("crit", this.isCritical());
-        nbttagcompound.setByte("PierceLevel", this.getPierceLevel());
+        nbttagcompound.setByte("PierceLevel", this.s());
         if (this.shooter != null) {
             nbttagcompound.a("OwnerUUID", this.shooter);
         }
@@ -492,7 +489,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
         }
 
         this.setCritical(nbttagcompound.getBoolean("crit"));
-        this.setPierceLevel(nbttagcompound.getByte("PierceLevel"));
+        this.b(nbttagcompound.getByte("PierceLevel"));
         if (nbttagcompound.b("OwnerUUID")) {
             this.shooter = nbttagcompound.a("OwnerUUID");
         }
@@ -569,7 +566,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
     }
 
     @Override
-    public boolean bs() {
+    public boolean br() {
         return false;
     }
 
@@ -582,7 +579,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
         this.a(1, flag);
     }
 
-    public void setPierceLevel(byte b0) {
+    public void b(byte b0) {
         this.datawatcher.set(EntityArrow.as, b0);
     }
 
@@ -609,7 +606,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
         return (b0 & 4) != 0;
     }
 
-    public byte getPierceLevel() {
+    public byte s() {
         return (Byte) this.datawatcher.get(EntityArrow.as);
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityBat.java b/src/main/java/net/minecraft/server/EntityBat.java
index 72474211..4c283c33 100644
--- a/src/main/java/net/minecraft/server/EntityBat.java
+++ b/src/main/java/net/minecraft/server/EntityBat.java
@@ -2,7 +2,6 @@ package net.minecraft.server;
 
 import java.time.LocalDate;
 import java.time.temporal.ChronoField;
-import java.util.Random;
 import javax.annotation.Nullable;
 import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
 
@@ -29,8 +28,8 @@ public class EntityBat extends EntityAmbient {
     }
 
     @Override
-    protected float cV() {
-        return super.cV() * 0.95F;
+    protected float cU() {
+        return super.cU() * 0.95F;
     }
 
     @Nullable
@@ -126,7 +125,7 @@ public class EntityBat extends EntityAmbient {
                 this.d = null;
             }
 
-            if (this.d == null || this.random.nextInt(30) == 0 || this.d.a((IPosition) this.getPositionVector(), 2.0D)) {
+            if (this.d == null || this.random.nextInt(30) == 0 || this.d.a((IPosition) this.ch(), 2.0D)) {
                 this.d = new BlockPosition(this.locX + (double) this.random.nextInt(7) - (double) this.random.nextInt(7), this.locY + (double) this.random.nextInt(6) - 2.0D, this.locZ + (double) this.random.nextInt(7) - (double) this.random.nextInt(7));
             }
 
@@ -198,24 +197,27 @@ public class EntityBat extends EntityAmbient {
         nbttagcompound.setByte("BatFlags", (Byte) this.datawatcher.get(EntityBat.b));
     }
 
-    public static boolean b(EntityTypes<EntityBat> entitytypes, GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition, Random random) {
+    @Override
+    public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
+        BlockPosition blockposition = new BlockPosition(this.locX, this.getBoundingBox().minY, this.locZ);
+
         if (blockposition.getY() >= generatoraccess.getSeaLevel()) {
             return false;
         } else {
             int i = generatoraccess.getLightLevel(blockposition);
             byte b0 = 4;
 
-            if (dT()) {
+            if (this.dT()) {
                 b0 = 7;
-            } else if (random.nextBoolean()) {
+            } else if (this.random.nextBoolean()) {
                 return false;
             }
 
-            return i > random.nextInt(b0) ? false : a(entitytypes, generatoraccess, enummobspawn, blockposition, random);
+            return i > this.random.nextInt(b0) ? false : super.a(generatoraccess, enummobspawn);
         }
     }
 
-    private static boolean dT() {
+    private boolean dT() {
         LocalDate localdate = LocalDate.now();
         int i = localdate.get(ChronoField.DAY_OF_MONTH);
         int j = localdate.get(ChronoField.MONTH_OF_YEAR);
diff --git a/src/main/java/net/minecraft/server/EntityBoat.java b/src/main/java/net/minecraft/server/EntityBoat.java
index 32b7f780..8aae0bca 100644
--- a/src/main/java/net/minecraft/server/EntityBoat.java
+++ b/src/main/java/net/minecraft/server/EntityBoat.java
@@ -93,7 +93,7 @@ public class EntityBoat extends Entity {
 
     @Nullable
     @Override
-    public AxisAlignedBB aq() {
+    public AxisAlignedBB ap() {
         return this.getBoundingBox();
     }
 
@@ -103,7 +103,7 @@ public class EntityBoat extends Entity {
     }
 
     @Override
-    public double aP() {
+    public double aO() {
         return -0.1D;
     }
 
@@ -144,7 +144,7 @@ public class EntityBoat extends Entity {
                         return true;
                     }
                     // CraftBukkit end
-                    if (!flag && this.world.getGameRules().getBoolean(GameRules.DO_ENTITY_DROPS)) {
+                    if (!flag && this.world.getGameRules().getBoolean("doEntityDrops")) {
                         this.a((IMaterial) this.f());
                     }
 
@@ -259,7 +259,7 @@ public class EntityBoat extends Entity {
         this.lastZ = this.locZ;
         super.tick();
         this.r();
-        if (this.ca()) {
+        if (this.bZ()) {
             if (this.getPassengers().isEmpty() || !(this.getPassengers().get(0) instanceof EntityHuman)) {
                 this.a(false, false);
             }
@@ -303,7 +303,7 @@ public class EntityBoat extends Entity {
                         double d0 = i == 1 ? -vec3d.z : vec3d.z;
                         double d1 = i == 1 ? vec3d.x : -vec3d.x;
 
-                        this.world.playSound((EntityHuman) null, this.locX + d0, this.locY, this.locZ + d1, soundeffect, this.getSoundCategory(), 1.0F, 0.8F + 0.4F * this.random.nextFloat());
+                        this.world.a((EntityHuman) null, this.locX + d0, this.locY, this.locZ + d1, soundeffect, this.getSoundCategory(), 1.0F, 0.8F + 0.4F * this.random.nextFloat());
                     }
                 }
 
@@ -393,7 +393,7 @@ public class EntityBoat extends Entity {
     }
 
     private void r() {
-        if (this.aw > 0 && !this.ca()) {
+        if (this.aw > 0 && !this.bZ()) {
             double d0 = this.locX + (this.ax - this.locX) / (double) this.aw;
             double d1 = this.locY + (this.ay - this.locY) / (double) this.aw;
             double d2 = this.locZ + (this.az - this.locZ) / (double) this.aw;
@@ -731,7 +731,7 @@ public class EntityBoat extends Entity {
     public void k(Entity entity) {
         if (this.w(entity)) {
             float f = 0.0F;
-            float f1 = (float) ((this.dead ? 0.009999999776482582D : this.aP()) + entity.aO());
+            float f1 = (float) ((this.dead ? 0.009999999776482582D : this.aO()) + entity.aN());
 
             if (this.getPassengers().size() > 1) {
                 int i = this.getPassengers().indexOf(entity);
@@ -818,7 +818,7 @@ public class EntityBoat extends Entity {
                     this.world.getServer().getPluginManager().callEvent(destroyEvent);
                     if (!destroyEvent.isCancelled()) {
                         this.die();
-                        if (this.world.getGameRules().getBoolean(GameRules.DO_ENTITY_DROPS)) {
+                        if (this.world.getGameRules().getBoolean("doEntityDrops")) {
                             int i;
 
                             for (i = 0; i < 3; ++i) {
diff --git a/src/main/java/net/minecraft/server/EntityCat.java b/src/main/java/net/minecraft/server/EntityCat.java
index f4660233..71998307 100644
--- a/src/main/java/net/minecraft/server/EntityCat.java
+++ b/src/main/java/net/minecraft/server/EntityCat.java
@@ -11,12 +11,12 @@ import javax.annotation.Nullable;
 
 public class EntityCat extends EntityTameableAnimal {
 
-    private static final RecipeItemStack bD = RecipeItemStack.a(Items.COD, Items.SALMON);
-    private static final DataWatcherObject<Integer> bE = DataWatcher.a(EntityCat.class, DataWatcherRegistry.b);
-    private static final DataWatcherObject<Boolean> bF = DataWatcher.a(EntityCat.class, DataWatcherRegistry.i);
+    private static final RecipeItemStack bE = RecipeItemStack.a(Items.COD, Items.SALMON);
+    private static final DataWatcherObject<Integer> bF = DataWatcher.a(EntityCat.class, DataWatcherRegistry.b);
     private static final DataWatcherObject<Boolean> bG = DataWatcher.a(EntityCat.class, DataWatcherRegistry.i);
-    private static final DataWatcherObject<Integer> bH = DataWatcher.a(EntityCat.class, DataWatcherRegistry.b);
-    public static final Map<Integer, MinecraftKey> bC = (Map) SystemUtils.a(Maps.newHashMap(), (hashmap) -> { // CraftBukkit - decompile error
+    private static final DataWatcherObject<Boolean> bH = DataWatcher.a(EntityCat.class, DataWatcherRegistry.i);
+    private static final DataWatcherObject<Integer> bI = DataWatcher.a(EntityCat.class, DataWatcherRegistry.b);
+    public static final Map<Integer, MinecraftKey> bD = (Map) SystemUtils.a(Maps.newHashMap(), (hashmap) -> { // CraftBukkit - decompile error
         hashmap.put(0, new MinecraftKey("textures/entity/cat/tabby.png"));
         hashmap.put(1, new MinecraftKey("textures/entity/cat/black.png"));
         hashmap.put(2, new MinecraftKey("textures/entity/cat/red.png"));
@@ -29,31 +29,31 @@ public class EntityCat extends EntityTameableAnimal {
         hashmap.put(9, new MinecraftKey("textures/entity/cat/jellie.png"));
         hashmap.put(10, new MinecraftKey("textures/entity/cat/all_black.png"));
     });
-    private EntityCat.a<EntityHuman> bI;
-    private PathfinderGoalTempt bJ;
-    private float bK;
+    private EntityCat.a<EntityHuman> bJ;
+    private PathfinderGoalTempt bK;
     private float bL;
     private float bM;
     private float bN;
     private float bO;
     private float bP;
+    private float bQ;
 
     public EntityCat(EntityTypes<? extends EntityCat> entitytypes, World world) {
         super(entitytypes, world);
     }
 
     public MinecraftKey ee() {
-        return (MinecraftKey) EntityCat.bC.get(this.getCatType());
+        return (MinecraftKey) EntityCat.bD.get(this.getCatType());
     }
 
     @Override
     protected void initPathfinder() {
         this.goalSit = new PathfinderGoalSit(this);
-        this.bJ = new EntityCat.PathfinderGoalTemptChance(this, 0.6D, EntityCat.bD, true);
+        this.bK = new EntityCat.PathfinderGoalTemptChance(this, 0.6D, EntityCat.bE, true);
         this.goalSelector.a(1, new PathfinderGoalFloat(this));
         this.goalSelector.a(1, new EntityCat.b(this));
         this.goalSelector.a(2, this.goalSit);
-        this.goalSelector.a(3, this.bJ);
+        this.goalSelector.a(3, this.bK);
         this.goalSelector.a(5, new PathfinderGoalCatSitOnBed(this, 1.1D, 8));
         this.goalSelector.a(6, new PathfinderGoalFollowOwner(this, 1.0D, 10.0F, 5.0F));
         this.goalSelector.a(7, new PathfinderGoalJumpOnBlock(this, 0.8D));
@@ -67,7 +67,7 @@ public class EntityCat extends EntityTameableAnimal {
     }
 
     public int getCatType() {
-        return (Integer) this.datawatcher.get(EntityCat.bE);
+        return (Integer) this.datawatcher.get(EntityCat.bF);
     }
 
     public void setCatType(int i) {
@@ -75,40 +75,40 @@ public class EntityCat extends EntityTameableAnimal {
             i = this.random.nextInt(10);
         }
 
-        this.datawatcher.set(EntityCat.bE, i);
+        this.datawatcher.set(EntityCat.bF, i);
     }
 
     public void u(boolean flag) {
-        this.datawatcher.set(EntityCat.bF, flag);
+        this.datawatcher.set(EntityCat.bG, flag);
     }
 
     public boolean eg() {
-        return (Boolean) this.datawatcher.get(EntityCat.bF);
+        return (Boolean) this.datawatcher.get(EntityCat.bG);
     }
 
     public void v(boolean flag) {
-        this.datawatcher.set(EntityCat.bG, flag);
+        this.datawatcher.set(EntityCat.bH, flag);
     }
 
     public boolean eh() {
-        return (Boolean) this.datawatcher.get(EntityCat.bG);
+        return (Boolean) this.datawatcher.get(EntityCat.bH);
     }
 
     public EnumColor getCollarColor() {
-        return EnumColor.fromColorIndex((Integer) this.datawatcher.get(EntityCat.bH));
+        return EnumColor.fromColorIndex((Integer) this.datawatcher.get(EntityCat.bI));
     }
 
     public void setCollarColor(EnumColor enumcolor) {
-        this.datawatcher.set(EntityCat.bH, enumcolor.getColorIndex());
+        this.datawatcher.set(EntityCat.bI, enumcolor.getColorIndex());
     }
 
     @Override
     protected void initDatawatcher() {
         super.initDatawatcher();
-        this.datawatcher.register(EntityCat.bE, 1);
-        this.datawatcher.register(EntityCat.bF, false);
+        this.datawatcher.register(EntityCat.bF, 1);
         this.datawatcher.register(EntityCat.bG, false);
-        this.datawatcher.register(EntityCat.bH, EnumColor.RED.getColorIndex());
+        this.datawatcher.register(EntityCat.bH, false);
+        this.datawatcher.register(EntityCat.bI, EnumColor.RED.getColorIndex());
     }
 
     @Override
@@ -162,7 +162,7 @@ public class EntityCat extends EntityTameableAnimal {
     }
 
     public void ej() {
-        this.a(SoundEffects.ENTITY_CAT_HISS, this.getSoundVolume(), this.cV());
+        this.a(SoundEffects.ENTITY_CAT_HISS, this.getSoundVolume(), this.cU());
     }
 
     @Override
@@ -202,7 +202,7 @@ public class EntityCat extends EntityTameableAnimal {
     @Override
     public void tick() {
         super.tick();
-        if (this.bJ != null && this.bJ.h() && !this.isTamed() && this.ticksLived % 100 == 0) {
+        if (this.bK != null && this.bK.h() && !this.isTamed() && this.ticksLived % 100 == 0) {
             this.a(SoundEffects.ENTITY_CAT_BEG_FOR_FOOD, 1.0F, 1.0F);
         }
 
@@ -219,24 +219,24 @@ public class EntityCat extends EntityTameableAnimal {
     }
 
     private void el() {
-        this.bL = this.bK;
-        this.bN = this.bM;
+        this.bM = this.bL;
+        this.bO = this.bN;
         if (this.eg()) {
-            this.bK = Math.min(1.0F, this.bK + 0.15F);
-            this.bM = Math.min(1.0F, this.bM + 0.08F);
+            this.bL = Math.min(1.0F, this.bL + 0.15F);
+            this.bN = Math.min(1.0F, this.bN + 0.08F);
         } else {
-            this.bK = Math.max(0.0F, this.bK - 0.22F);
-            this.bM = Math.max(0.0F, this.bM - 0.13F);
+            this.bL = Math.max(0.0F, this.bL - 0.22F);
+            this.bN = Math.max(0.0F, this.bN - 0.13F);
         }
 
     }
 
     private void em() {
-        this.bP = this.bO;
+        this.bQ = this.bP;
         if (this.eh()) {
-            this.bO = Math.min(1.0F, this.bO + 0.1F);
+            this.bP = Math.min(1.0F, this.bP + 0.1F);
         } else {
-            this.bO = Math.max(0.0F, this.bO - 0.13F);
+            this.bP = Math.max(0.0F, this.bP - 0.13F);
         }
 
     }
@@ -355,7 +355,7 @@ public class EntityCat extends EntityTameableAnimal {
 
     @Override
     public boolean i(ItemStack itemstack) {
-        return EntityCat.bD.test(itemstack);
+        return EntityCat.bE.test(itemstack);
     }
 
     @Override
@@ -370,13 +370,13 @@ public class EntityCat extends EntityTameableAnimal {
 
     @Override
     protected void dW() {
-        if (this.bI == null) {
-            this.bI = new EntityCat.a<>(this, EntityHuman.class, 16.0F, 0.8D, 1.33D);
+        if (this.bJ == null) {
+            this.bJ = new EntityCat.a<>(this, EntityHuman.class, 16.0F, 0.8D, 1.33D);
         }
 
-        this.goalSelector.a((PathfinderGoal) this.bI);
+        this.goalSelector.a((PathfinderGoal) this.bJ);
         if (!this.isTamed()) {
-            this.goalSelector.a(4, this.bI);
+            this.goalSelector.a(4, this.bJ);
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EntityChicken.java b/src/main/java/net/minecraft/server/EntityChicken.java
index f1dfdd4f..a374c305 100644
--- a/src/main/java/net/minecraft/server/EntityChicken.java
+++ b/src/main/java/net/minecraft/server/EntityChicken.java
@@ -2,14 +2,14 @@ package net.minecraft.server;
 
 public class EntityChicken extends EntityAnimal {
 
-    private static final RecipeItemStack bG = RecipeItemStack.a(Items.WHEAT_SEEDS, Items.MELON_SEEDS, Items.PUMPKIN_SEEDS, Items.BEETROOT_SEEDS);
+    private static final RecipeItemStack bH = RecipeItemStack.a(Items.WHEAT_SEEDS, Items.MELON_SEEDS, Items.PUMPKIN_SEEDS, Items.BEETROOT_SEEDS);
     public float bz;
     public float bA;
     public float bB;
-    public float bC;
-    public float bD = 1.0F;
+    public float bD;
+    public float bE = 1.0F;
     public int eggLayTime;
-    public boolean bF;
+    public boolean bG;
 
     public EntityChicken(EntityTypes<? extends EntityChicken> entitytypes, World world) {
         super(entitytypes, world);
@@ -22,7 +22,7 @@ public class EntityChicken extends EntityAnimal {
         this.goalSelector.a(0, new PathfinderGoalFloat(this));
         this.goalSelector.a(1, new PathfinderGoalPanic(this, 1.4D));
         this.goalSelector.a(2, new PathfinderGoalBreed(this, 1.0D));
-        this.goalSelector.a(3, new PathfinderGoalTempt(this, 1.0D, false, EntityChicken.bG));
+        this.goalSelector.a(3, new PathfinderGoalTempt(this, 1.0D, false, EntityChicken.bH));
         this.goalSelector.a(4, new PathfinderGoalFollowParent(this, 1.1D));
         this.goalSelector.a(5, new PathfinderGoalRandomStrollLand(this, 1.0D));
         this.goalSelector.a(6, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 6.0F));
@@ -31,7 +31,7 @@ public class EntityChicken extends EntityAnimal {
 
     @Override
     protected float b(EntityPose entitypose, EntitySize entitysize) {
-        return this.isBaby() ? entitysize.height * 0.85F : entitysize.height * 0.92F;
+        return entitysize.height * 0.95F;
     }
 
     @Override
@@ -49,22 +49,22 @@ public class EntityChicken extends EntityAnimal {
         }
         // CraftBukkit end
         super.movementTick();
-        this.bC = this.bz;
+        this.bD = this.bz;
         this.bB = this.bA;
         this.bA = (float) ((double) this.bA + (double) (this.onGround ? -1 : 4) * 0.3D);
         this.bA = MathHelper.a(this.bA, 0.0F, 1.0F);
-        if (!this.onGround && this.bD < 1.0F) {
-            this.bD = 1.0F;
+        if (!this.onGround && this.bE < 1.0F) {
+            this.bE = 1.0F;
         }
 
-        this.bD = (float) ((double) this.bD * 0.9D);
+        this.bE = (float) ((double) this.bE * 0.9D);
         Vec3D vec3d = this.getMot();
 
         if (!this.onGround && vec3d.y < 0.0D) {
             this.setMot(vec3d.d(1.0D, 0.6D, 1.0D));
         }
 
-        this.bz += this.bD * 2.0F;
+        this.bz += this.bE * 2.0F;
         if (!this.world.isClientSide && this.isAlive() && !this.isBaby() && !this.isChickenJockey() && --this.eggLayTime <= 0) {
             this.a(SoundEffects.ENTITY_CHICKEN_EGG, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
             this.forceDrops = true; // CraftBukkit
@@ -105,7 +105,7 @@ public class EntityChicken extends EntityAnimal {
 
     @Override
     public boolean i(ItemStack itemstack) {
-        return EntityChicken.bG.test(itemstack);
+        return EntityChicken.bH.test(itemstack);
     }
 
     @Override
@@ -116,7 +116,7 @@ public class EntityChicken extends EntityAnimal {
     @Override
     public void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
-        this.bF = nbttagcompound.getBoolean("IsChickenJockey");
+        this.bG = nbttagcompound.getBoolean("IsChickenJockey");
         if (nbttagcompound.hasKey("EggLayTime")) {
             this.eggLayTime = nbttagcompound.getInt("EggLayTime");
         }
@@ -126,7 +126,7 @@ public class EntityChicken extends EntityAnimal {
     @Override
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
-        nbttagcompound.setBoolean("IsChickenJockey", this.bF);
+        nbttagcompound.setBoolean("IsChickenJockey", this.bG);
         nbttagcompound.setInt("EggLayTime", this.eggLayTime);
     }
 
@@ -143,7 +143,7 @@ public class EntityChicken extends EntityAnimal {
         float f2 = 0.1F;
         float f3 = 0.0F;
 
-        entity.setPosition(this.locX + (double) (0.1F * f), this.locY + (double) (this.getHeight() * 0.5F) + entity.aO() + 0.0D, this.locZ - (double) (0.1F * f1));
+        entity.setPosition(this.locX + (double) (0.1F * f), this.locY + (double) (this.getHeight() * 0.5F) + entity.aN() + 0.0D, this.locZ - (double) (0.1F * f1));
         if (entity instanceof EntityLiving) {
             ((EntityLiving) entity).aK = this.aK;
         }
@@ -151,10 +151,10 @@ public class EntityChicken extends EntityAnimal {
     }
 
     public boolean isChickenJockey() {
-        return this.bF;
+        return this.bG;
     }
 
     public void r(boolean flag) {
-        this.bF = flag;
+        this.bG = flag;
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityCreature.java b/src/main/java/net/minecraft/server/EntityCreature.java
index 7dacaa21..8f5f61f6 100644
--- a/src/main/java/net/minecraft/server/EntityCreature.java
+++ b/src/main/java/net/minecraft/server/EntityCreature.java
@@ -22,7 +22,7 @@ public abstract class EntityCreature extends EntityInsentient {
 
     @Override
     public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
-        return this.a(new BlockPosition(this.locX, this.getBoundingBox().minY, this.locZ), (IWorldReader) generatoraccess) >= 0.0F;
+        return super.a(generatoraccess, enummobspawn) && this.a(new BlockPosition(this.locX, this.getBoundingBox().minY, this.locZ), (IWorldReader) generatoraccess) >= 0.0F;
     }
 
     public boolean dT() {
diff --git a/src/main/java/net/minecraft/server/EntityCreeper.java b/src/main/java/net/minecraft/server/EntityCreeper.java
index bcb72763..0c2c3c73 100644
--- a/src/main/java/net/minecraft/server/EntityCreeper.java
+++ b/src/main/java/net/minecraft/server/EntityCreeper.java
@@ -4,7 +4,6 @@ import java.util.Collection;
 import java.util.Iterator;
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.ExplosionPrimeEvent;
 // CraftBukkit end
 
@@ -44,7 +43,7 @@ public class EntityCreeper extends EntityMonster {
     }
 
     @Override
-    public int bv() {
+    public int bu() {
         return this.getGoalTarget() == null ? 3 : 3 + (int) (this.getHealth() - 1.0F);
     }
 
@@ -91,7 +90,7 @@ public class EntityCreeper extends EntityMonster {
         }
 
         if (nbttagcompound.getBoolean("ignited")) {
-            this.ignite();
+            this.dY();
         }
 
     }
@@ -104,7 +103,7 @@ public class EntityCreeper extends EntityMonster {
                 this.a(1);
             }
 
-            int i = this.dV();
+            int i = this.dW();
 
             if (i > 0 && this.fuseTicks == 0) {
                 this.a(SoundEffects.ENTITY_CREEPER_PRIMED, 1.0F, 0.5F);
@@ -117,7 +116,7 @@ public class EntityCreeper extends EntityMonster {
 
             if (this.fuseTicks >= this.maxFuseTicks) {
                 this.fuseTicks = this.maxFuseTicks;
-                this.explode();
+                this.eb();
             }
         }
 
@@ -159,7 +158,7 @@ public class EntityCreeper extends EntityMonster {
         return (Boolean) this.datawatcher.get(EntityCreeper.POWERED);
     }
 
-    public int dV() {
+    public int dW() {
         return (Integer) this.datawatcher.get(EntityCreeper.b);
     }
 
@@ -188,10 +187,10 @@ public class EntityCreeper extends EntityMonster {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         if (itemstack.getItem() == Items.FLINT_AND_STEEL) {
-            this.world.playSound(entityhuman, this.locX, this.locY, this.locZ, SoundEffects.ITEM_FLINTANDSTEEL_USE, this.getSoundCategory(), 1.0F, this.random.nextFloat() * 0.4F + 0.8F);
+            this.world.a(entityhuman, this.locX, this.locY, this.locZ, SoundEffects.ITEM_FLINTANDSTEEL_USE, this.getSoundCategory(), 1.0F, this.random.nextFloat() * 0.4F + 0.8F);
             entityhuman.a(enumhand);
             if (!this.world.isClientSide) {
-                this.ignite();
+                this.dY();
                 itemstack.damage(1, entityhuman, (entityhuman1) -> {
                     entityhuman1.d(enumhand);
                 });
@@ -202,9 +201,10 @@ public class EntityCreeper extends EntityMonster {
         return super.a(entityhuman, enumhand);
     }
 
-    public void explode() {
+    public void explode() { this.eb(); } // Paper - OBFHELPER
+    private void eb() {
         if (!this.world.isClientSide) {
-            Explosion.Effect explosion_effect = this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING) ? Explosion.Effect.DESTROY : Explosion.Effect.NONE;
+            Explosion.Effect explosion_effect = this.world.getGameRules().getBoolean("mobGriefing") ? Explosion.Effect.DESTROY : Explosion.Effect.NONE;
             float f = this.isPowered() ? 2.0F : 1.0F;
 
             // CraftBukkit start
@@ -241,10 +241,10 @@ public class EntityCreeper extends EntityMonster {
             while (iterator.hasNext()) {
                 MobEffect mobeffect = (MobEffect) iterator.next();
 
-                entityareaeffectcloud.addEffect(new MobEffect(mobeffect));
+                entityareaeffectcloud.a(new MobEffect(mobeffect));
             }
 
-            this.world.addEntity(entityareaeffectcloud, CreatureSpawnEvent.SpawnReason.EXPLOSION); // CraftBukkit
+            this.world.addEntity(entityareaeffectcloud);
         }
 
     }
@@ -253,11 +253,7 @@ public class EntityCreeper extends EntityMonster {
         return (Boolean) this.datawatcher.get(EntityCreeper.d);
     }
 
-    public void ignite() {
-        // Paper start
-        setIgnited(true);
-    }
-
+    // Paper start
     public void setIgnited(boolean ignited) {
         if (isIgnited() != ignited) {
             com.destroystokyo.paper.event.entity.CreeperIgniteEvent event = new com.destroystokyo.paper.event.entity.CreeperIgniteEvent((org.bukkit.entity.Creeper) getBukkitEntity(), ignited);
@@ -265,6 +261,10 @@ public class EntityCreeper extends EntityMonster {
                 this.datawatcher.set(EntityCreeper.d, event.isIgnited());
             }
         }
+    }
+
+    public void dY() {
+        setIgnited(true);
         // Paper end
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityDolphin.java b/src/main/java/net/minecraft/server/EntityDolphin.java
index 063fb705..04060bb3 100644
--- a/src/main/java/net/minecraft/server/EntityDolphin.java
+++ b/src/main/java/net/minecraft/server/EntityDolphin.java
@@ -2,7 +2,6 @@ package net.minecraft.server;
 
 import java.util.EnumSet;
 import java.util.List;
-import java.util.Random;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 
@@ -11,7 +10,7 @@ public class EntityDolphin extends EntityWaterAnimal {
     private static final DataWatcherObject<BlockPosition> c = DataWatcher.a(EntityDolphin.class, DataWatcherRegistry.l);
     private static final DataWatcherObject<Boolean> d = DataWatcher.a(EntityDolphin.class, DataWatcherRegistry.i);
     private static final DataWatcherObject<Integer> bz = DataWatcher.a(EntityDolphin.class, DataWatcherRegistry.b);
-    private static final PathfinderTargetCondition bA = (new PathfinderTargetCondition()).a(10.0D).b().a().c();
+    private static final PathfinderTargetCondition bA = (new PathfinderTargetCondition()).a(10.0D).b().a();
     public static final Predicate<EntityItem> b = (entityitem) -> {
         return !entityitem.q() && entityitem.isAlive() && entityitem.isInWater();
     };
@@ -26,13 +25,13 @@ public class EntityDolphin extends EntityWaterAnimal {
     @Nullable
     @Override
     public GroupDataEntity prepare(GeneratorAccess generatoraccess, DifficultyDamageScaler difficultydamagescaler, EnumMobSpawn enummobspawn, @Nullable GroupDataEntity groupdataentity, @Nullable NBTTagCompound nbttagcompound) {
-        this.setAirTicks(this.bp());
+        this.setAirTicks(this.bo());
         this.pitch = 0.0F;
         return super.prepare(generatoraccess, difficultydamagescaler, enummobspawn, groupdataentity, nbttagcompound);
     }
 
     @Override
-    public boolean cm() {
+    public boolean cl() {
         return false;
     }
 
@@ -137,13 +136,13 @@ public class EntityDolphin extends EntityWaterAnimal {
     }
 
     @Override
-    public int bp() {
+    public int bo() {
         return 4800;
     }
 
     @Override
-    protected int m(int i) {
-        return this.bp();
+    protected int l(int i) {
+        return this.bo();
     }
 
     @Override
@@ -197,7 +196,7 @@ public class EntityDolphin extends EntityWaterAnimal {
     public void tick() {
         super.tick();
         if (!this.isNoAI()) {
-            if (this.au()) {
+            if (this.at()) {
                 this.b(2400);
             } else {
                 this.b(this.dW() - 1);
@@ -248,8 +247,9 @@ public class EntityDolphin extends EntityWaterAnimal {
         }
     }
 
-    public static boolean b(EntityTypes<EntityDolphin> entitytypes, GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition, Random random) {
-        return blockposition.getY() > 45 && blockposition.getY() < generatoraccess.getSeaLevel() && (generatoraccess.getBiome(blockposition) != Biomes.OCEAN || generatoraccess.getBiome(blockposition) != Biomes.DEEP_OCEAN) && generatoraccess.getFluid(blockposition).a(TagsFluid.WATER);
+    @Override
+    public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
+        return this.locY > 45.0D && this.locY < (double) generatoraccess.getSeaLevel() && generatoraccess.getBiome(new BlockPosition(this)) != Biomes.OCEAN || generatoraccess.getBiome(new BlockPosition(this)) != Biomes.DEEP_OCEAN && super.a(generatoraccess, enummobspawn);
     }
 
     @Override
@@ -282,13 +282,13 @@ public class EntityDolphin extends EntityWaterAnimal {
     protected boolean dX() {
         BlockPosition blockposition = this.getNavigation().h();
 
-        return blockposition != null ? blockposition.a((IPosition) this.getPositionVector(), 12.0D) : false;
+        return blockposition != null ? blockposition.a((IPosition) this.ch(), 12.0D) : false;
     }
 
     @Override
     public void e(Vec3D vec3d) {
-        if (this.df() && this.isInWater()) {
-            this.a(this.db(), vec3d);
+        if (this.de() && this.isInWater()) {
+            this.a(this.da(), vec3d);
             this.move(EnumMoveType.SELF, this.getMot());
             this.setMot(this.getMot().a(0.9D));
             if (this.getGoalTarget() == null) {
@@ -329,7 +329,7 @@ public class EntityDolphin extends EntityWaterAnimal {
         public boolean b() {
             BlockPosition blockposition = this.a.l();
 
-            return !(new BlockPosition((double) blockposition.getX(), this.a.locY, (double) blockposition.getZ())).a((IPosition) this.a.getPositionVector(), 4.0D) && !this.b && this.a.getAirTicks() >= 100;
+            return !(new BlockPosition((double) blockposition.getX(), this.a.locY, (double) blockposition.getZ())).a((IPosition) this.a.ch(), 4.0D) && !this.b && this.a.getAirTicks() >= 100;
         }
 
         @Override
@@ -361,7 +361,7 @@ public class EntityDolphin extends EntityWaterAnimal {
         public void d() {
             BlockPosition blockposition = this.a.l();
 
-            if ((new BlockPosition((double) blockposition.getX(), this.a.locY, (double) blockposition.getZ())).a((IPosition) this.a.getPositionVector(), 4.0D) || this.b) {
+            if ((new BlockPosition((double) blockposition.getX(), this.a.locY, (double) blockposition.getZ())).a((IPosition) this.a.ch(), 4.0D) || this.b) {
                 this.a.r(false);
             }
 
diff --git a/src/main/java/net/minecraft/server/EntityDragonFireball.java b/src/main/java/net/minecraft/server/EntityDragonFireball.java
index 547698a2..2195b83c 100644
--- a/src/main/java/net/minecraft/server/EntityDragonFireball.java
+++ b/src/main/java/net/minecraft/server/EntityDragonFireball.java
@@ -25,7 +25,7 @@ public class EntityDragonFireball extends EntityFireball {
                 entityareaeffectcloud.setRadius(3.0F);
                 entityareaeffectcloud.setDuration(600);
                 entityareaeffectcloud.setRadiusPerTick((7.0F - entityareaeffectcloud.getRadius()) / (float) entityareaeffectcloud.getDuration());
-                entityareaeffectcloud.addEffect(new MobEffect(MobEffects.HARM, 1, 1));
+                entityareaeffectcloud.a(new MobEffect(MobEffects.HARM, 1, 1));
                 if (!list.isEmpty()) {
                     Iterator iterator = list.iterator();
 
@@ -66,7 +66,7 @@ public class EntityDragonFireball extends EntityFireball {
     }
 
     @Override
-    protected boolean K_() {
+    protected boolean L_() {
         return false;
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityDrowned.java b/src/main/java/net/minecraft/server/EntityDrowned.java
index 6f0094e6..7f34cdbc 100644
--- a/src/main/java/net/minecraft/server/EntityDrowned.java
+++ b/src/main/java/net/minecraft/server/EntityDrowned.java
@@ -45,19 +45,24 @@ public class EntityDrowned extends EntityZombie implements IRangedEntity {
         return groupdataentity;
     }
 
-    public static boolean b(EntityTypes<EntityDrowned> entitytypes, GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition, Random random) {
-        BiomeBase biomebase = generatoraccess.getBiome(blockposition);
-        boolean flag = generatoraccess.getDifficulty() != EnumDifficulty.PEACEFUL && a(generatoraccess, blockposition, random) && (enummobspawn == EnumMobSpawn.SPAWNER || generatoraccess.getFluid(blockposition).a(TagsFluid.WATER));
+    @Override
+    public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
+        BiomeBase biomebase = generatoraccess.getBiome(new BlockPosition(this.locX, this.locY, this.locZ));
+
+        return biomebase != Biomes.RIVER && biomebase != Biomes.FROZEN_RIVER ? this.random.nextInt(40) == 0 && this.ed() && super.a(generatoraccess, enummobspawn) : this.random.nextInt(15) == 0 && super.a(generatoraccess, enummobspawn);
+    }
 
-        return biomebase != Biomes.RIVER && biomebase != Biomes.FROZEN_RIVER ? random.nextInt(40) == 0 && a(generatoraccess, blockposition) && flag : random.nextInt(15) == 0 && flag;
+    @Override
+    protected boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition) {
+        return generatoraccess.getFluid(blockposition).a(TagsFluid.WATER);
     }
 
-    private static boolean a(GeneratorAccess generatoraccess, BlockPosition blockposition) {
-        return blockposition.getY() < generatoraccess.getSeaLevel() - 5;
+    private boolean ed() {
+        return this.getBoundingBox().minY < (double) (this.world.getSeaLevel() - 5);
     }
 
     @Override
-    protected boolean dV() {
+    protected boolean dW() {
         return false;
     }
 
@@ -87,7 +92,7 @@ public class EntityDrowned extends EntityZombie implements IRangedEntity {
     }
 
     @Override
-    protected ItemStack dX() {
+    protected ItemStack dY() {
         return ItemStack.a;
     }
 
@@ -111,7 +116,7 @@ public class EntityDrowned extends EntityZombie implements IRangedEntity {
     }
 
     @Override
-    protected boolean dY() {
+    protected boolean dZ() {
         return false;
     }
 
@@ -125,11 +130,11 @@ public class EntityDrowned extends EntityZombie implements IRangedEntity {
     }
 
     @Override
-    public boolean bE() {
+    public boolean bD() {
         return !this.isSwimming();
     }
 
-    private boolean ee() {
+    private boolean eg() {
         if (this.bz) {
             return true;
         } else {
@@ -141,7 +146,7 @@ public class EntityDrowned extends EntityZombie implements IRangedEntity {
 
     @Override
     public void e(Vec3D vec3d) {
-        if (this.df() && this.isInWater() && this.ee()) {
+        if (this.de() && this.isInWater() && this.eg()) {
             this.a(0.01F, vec3d);
             this.move(EnumMoveType.SELF, this.getMot());
             this.setMot(this.getMot().a(0.9D));
@@ -152,9 +157,9 @@ public class EntityDrowned extends EntityZombie implements IRangedEntity {
     }
 
     @Override
-    public void ax() {
+    public void aw() {
         if (!this.world.isClientSide) {
-            if (this.df() && this.isInWater() && this.ee()) {
+            if (this.de() && this.isInWater() && this.eg()) {
                 this.navigation = this.b;
                 this.setSwimming(true);
             } else {
@@ -165,14 +170,14 @@ public class EntityDrowned extends EntityZombie implements IRangedEntity {
 
     }
 
-    protected boolean dZ() {
+    protected boolean ea() {
         PathEntity pathentity = this.getNavigation().l();
 
         if (pathentity != null) {
-            BlockPosition blockposition = pathentity.k();
+            PathPoint pathpoint = pathentity.j();
 
-            if (blockposition != null) {
-                double d0 = this.e((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ());
+            if (pathpoint != null) {
+                double d0 = this.e((double) pathpoint.a, (double) pathpoint.b, (double) pathpoint.c);
 
                 if (d0 < 4.0D) {
                     return true;
@@ -213,7 +218,7 @@ public class EntityDrowned extends EntityZombie implements IRangedEntity {
         public void a() {
             EntityLiving entityliving = this.i.getGoalTarget();
 
-            if (this.i.ee() && this.i.isInWater()) {
+            if (this.i.eg() && this.i.isInWater()) {
                 if (entityliving != null && entityliving.locY > this.i.locY || this.i.bz) {
                     this.i.setMot(this.i.getMot().add(0.0D, 0.002D, 0.0D));
                 }
@@ -234,7 +239,7 @@ public class EntityDrowned extends EntityZombie implements IRangedEntity {
                 this.i.yaw = this.a(this.i.yaw, f, 90.0F);
                 this.i.aK = this.i.yaw;
                 float f1 = (float) (this.e * this.i.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getValue());
-                float f2 = MathHelper.g(0.125F, this.i.db(), f1);
+                float f2 = MathHelper.g(0.125F, this.i.da(), f1);
 
                 this.i.o(f2);
                 this.i.setMot(this.i.getMot().add((double) f2 * d0 * 0.005D, (double) f2 * d1 * 0.1D, (double) f2 * d2 * 0.005D));
@@ -396,7 +401,7 @@ public class EntityDrowned extends EntityZombie implements IRangedEntity {
 
         @Override
         public void e() {
-            if (this.a.locY < (double) (this.c - 1) && (this.a.getNavigation().n() || this.a.dZ())) {
+            if (this.a.locY < (double) (this.c - 1) && (this.a.getNavigation().n() || this.a.ea())) {
                 Vec3D vec3d = RandomPositionGenerator.a(this.a, 4, 8, new Vec3D(this.a.locX, (double) (this.c - 1), this.a.locZ));
 
                 if (vec3d == null) {
diff --git a/src/main/java/net/minecraft/server/EntityEnderDragon.java b/src/main/java/net/minecraft/server/EntityEnderDragon.java
index c8c74f2b..29fa1d1d 100644
--- a/src/main/java/net/minecraft/server/EntityEnderDragon.java
+++ b/src/main/java/net/minecraft/server/EntityEnderDragon.java
@@ -369,7 +369,7 @@ public class EntityEnderDragon extends EntityInsentient implements IMonster {
                 double d4 = d2 * d2 + d3 * d3;
 
                 entity.f(d2 / d4 * 4.0D, 0.20000000298023224D, d3 / d4 * 4.0D);
-                if (!this.bQ.a().a() && ((EntityLiving) entity).ct() < entity.ticksLived - 2) {
+                if (!this.bQ.a().a() && ((EntityLiving) entity).cs() < entity.ticksLived - 2) {
                     entity.damageEntity(DamageSource.mobAttack(this), 5.0F);
                     this.a((EntityLiving) this, entity);
                 }
@@ -415,7 +415,7 @@ public class EntityEnderDragon extends EntityInsentient implements IMonster {
                     Block block = iblockdata.getBlock();
 
                     if (!iblockdata.isAir() && iblockdata.getMaterial() != Material.FIRE) {
-                        if (this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING) && !TagsBlock.DRAGON_IMMUNE.isTagged(block)) {
+                        if (this.world.getGameRules().getBoolean("mobGriefing") && !TagsBlock.DRAGON_IMMUNE.isTagged(block)) {
                             // CraftBukkit start - Add blocks to list rather than destroying them
                             // flag1 = this.world.a(blockposition, false) || flag1;
                             flag1 = true;
@@ -540,7 +540,7 @@ public class EntityEnderDragon extends EntityInsentient implements IMonster {
     }
 
     @Override
-    protected void co() {
+    protected void cn() {
         if (this.bP != null) {
             this.bP.b(this);
         }
@@ -554,7 +554,7 @@ public class EntityEnderDragon extends EntityInsentient implements IMonster {
             this.world.addParticle(Particles.EXPLOSION_EMITTER, this.locX + (double) f, this.locY + 2.0D + (double) f1, this.locZ + (double) f2, 0.0D, 0.0D, 0.0D);
         }
 
-        boolean flag = this.world.getGameRules().getBoolean(GameRules.DO_MOB_LOOT);
+        boolean flag = this.world.getGameRules().getBoolean("doMobLoot");
         short short0 = 500;
 
         if (this.bP != null && !this.bP.d()) {
@@ -817,7 +817,7 @@ public class EntityEnderDragon extends EntityInsentient implements IMonster {
             list.add(0, pathpoint2);
         }
 
-        return new PathEntity(list, new BlockPosition(pathpoint1.a, pathpoint1.b, pathpoint1.c), true);
+        return new PathEntity(list);
     }
 
     @Override
@@ -887,7 +887,7 @@ public class EntityEnderDragon extends EntityInsentient implements IMonster {
         } else {
             BlockPosition blockposition = this.world.getHighestBlockYAt(HeightMap.Type.MOTION_BLOCKING_NO_LEAVES, WorldGenEndTrophy.a);
 
-            f1 = Math.max(MathHelper.sqrt(blockposition.a(this.getPositionVector(), true)) / 4.0F, 1.0F);
+            f1 = Math.max(MathHelper.sqrt(blockposition.a(this.ch(), true)) / 4.0F, 1.0F);
             float f3 = 6.0F / f1;
             float f4 = this.pitch;
             float f5 = 1.5F;
diff --git a/src/main/java/net/minecraft/server/EntityEnderPearl.java b/src/main/java/net/minecraft/server/EntityEnderPearl.java
index c553a92a..055fa845 100644
--- a/src/main/java/net/minecraft/server/EntityEnderPearl.java
+++ b/src/main/java/net/minecraft/server/EntityEnderPearl.java
@@ -81,7 +81,7 @@ public class EntityEnderPearl extends EntityProjectileThrowable {
                     Bukkit.getPluginManager().callEvent(teleEvent);
 
                     if (!teleEvent.isCancelled() && !entityplayer.playerConnection.isDisconnected()) {
-                        if (this.random.nextFloat() < 0.05F && this.world.getGameRules().getBoolean(GameRules.DO_MOB_SPAWNING)) {
+                        if (this.random.nextFloat() < 0.05F && this.world.getGameRules().getBoolean("doMobSpawning")) {
                             EntityEndermite entityendermite = (EntityEndermite) EntityTypes.ENDERMITE.a(this.world);
 
                             entityendermite.setPlayerSpawned(true);
diff --git a/src/main/java/net/minecraft/server/EntityEnderman.java b/src/main/java/net/minecraft/server/EntityEnderman.java
index a94ed1ae..d4c4dc2f 100644
--- a/src/main/java/net/minecraft/server/EntityEnderman.java
+++ b/src/main/java/net/minecraft/server/EntityEnderman.java
@@ -74,12 +74,12 @@ public class EntityEnderman extends EntityMonster {
         if (entityliving == null) {
             this.bC = 0;
             this.datawatcher.set(EntityEnderman.bz, false);
-            attributeinstance.removeModifier(EntityEnderman.c);
+            attributeinstance.c(EntityEnderman.c);
         } else {
             this.bC = this.ticksLived;
             this.datawatcher.set(EntityEnderman.bz, true);
             if (!attributeinstance.a(EntityEnderman.c)) {
-                attributeinstance.addModifier(EntityEnderman.c);
+                attributeinstance.b(EntityEnderman.c);
             }
         }
         return true;
@@ -105,7 +105,7 @@ public class EntityEnderman extends EntityMonster {
 
     @Override
     public void a(DataWatcherObject<?> datawatcherobject) {
-        if (EntityEnderman.bz.equals(datawatcherobject) && this.dX() && this.world.isClientSide) {
+        if (EntityEnderman.bz.equals(datawatcherobject) && this.dY() && this.world.isClientSide) {
             this.l();
         }
 
@@ -182,24 +182,24 @@ public class EntityEnderman extends EntityMonster {
 
     @Override
     protected void mobTick() {
-        if (this.au()) {
+        if (this.at()) {
             this.damageEntity(DamageSource.DROWN, 1.0F);
         }
 
         if (this.world.J() && this.ticksLived >= this.bC + 600) {
-            float f = this.aF();
+            float f = this.aE();
 
             if (f > 0.5F && this.world.f(new BlockPosition(this)) && this.random.nextFloat() * 30.0F < (f - 0.4F) * 2.0F && this.tryEscape(EndermanEscapeEvent.Reason.RUNAWAY)) { // Paper
                 this.setGoalTarget((EntityLiving) null);
-                this.dV();
+                this.dW();
             }
         }
 
         super.mobTick();
     }
 
-    public final boolean teleportRandomly() { return this.dV(); } // Paper - OBFHELPER
-    protected boolean dV() {
+    public final boolean teleportRandomly() { return this.dW(); } // Paper - OBFHELPER
+    protected boolean dW() {
         double d0 = this.locX + (this.random.nextDouble() - 0.5D) * 64.0D;
         double d1 = this.locY + (double) (this.random.nextInt(64) - 32);
         double d2 = this.locZ + (this.random.nextDouble() - 0.5D) * 64.0D;
@@ -232,7 +232,7 @@ public class EntityEnderman extends EntityMonster {
             boolean flag = this.a(d0, d1, d2, true);
 
             if (flag) {
-                this.world.playSound((EntityHuman) null, this.lastX, this.lastY, this.lastZ, SoundEffects.ENTITY_ENDERMAN_TELEPORT, this.getSoundCategory(), 1.0F, 1.0F);
+                this.world.a((EntityHuman) null, this.lastX, this.lastY, this.lastZ, SoundEffects.ENTITY_ENDERMAN_TELEPORT, this.getSoundCategory(), 1.0F, 1.0F);
                 this.a(SoundEffects.ENTITY_ENDERMAN_TELEPORT, 1.0F, 1.0F);
             }
 
@@ -242,7 +242,7 @@ public class EntityEnderman extends EntityMonster {
 
     @Override
     protected SoundEffect getSoundAmbient() {
-        return this.dX() ? SoundEffects.ENTITY_ENDERMAN_SCREAM : SoundEffects.ENTITY_ENDERMAN_AMBIENT;
+        return this.dY() ? SoundEffects.ENTITY_ENDERMAN_SCREAM : SoundEffects.ENTITY_ENDERMAN_AMBIENT;
     }
 
     @Override
@@ -283,14 +283,14 @@ public class EntityEnderman extends EntityMonster {
             boolean flag = super.damageEntity(damagesource, f);
 
             if (damagesource.ignoresArmor() && this.random.nextInt(10) != 0 && this.tryEscape(damagesource == DamageSource.DROWN ? EndermanEscapeEvent.Reason.DROWN : EndermanEscapeEvent.Reason.CRITICAL_HIT)) { // Paper
-                this.dV();
+                this.dW();
             }
 
             return flag;
         } else {
             if (this.tryEscape(EndermanEscapeEvent.Reason.INDIRECT)) { // Paper start
             for (int i = 0; i < 64; ++i) {
-                if (this.dV()) {
+                if (this.dW()) {
                     return true;
                 }
             }
@@ -300,7 +300,7 @@ public class EntityEnderman extends EntityMonster {
         }
     }
 
-    public boolean dX() {
+    public boolean dY() {
         return (Boolean) this.datawatcher.get(EntityEnderman.bz);
     }
 
@@ -314,7 +314,7 @@ public class EntityEnderman extends EntityMonster {
 
         @Override
         public boolean a() {
-            return this.enderman.getCarried() != null ? false : (!this.enderman.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING) ? false : this.enderman.getRandom().nextInt(20) == 0);
+            return this.enderman.getCarried() != null ? false : (!this.enderman.world.getGameRules().getBoolean("mobGriefing") ? false : this.enderman.getRandom().nextInt(20) == 0);
         }
 
         @Override
@@ -357,7 +357,7 @@ public class EntityEnderman extends EntityMonster {
 
         @Override
         public boolean a() {
-            return this.a.getCarried() == null ? false : (!this.a.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING) ? false : this.a.getRandom().nextInt(2000) == 0);
+            return this.a.getCarried() == null ? false : (!this.a.world.getGameRules().getBoolean("mobGriefing") ? false : this.a.getRandom().nextInt(2000) == 0);
         }
 
         @Override
@@ -386,7 +386,7 @@ public class EntityEnderman extends EntityMonster {
         }
 
         private boolean a(IWorldReader iworldreader, BlockPosition blockposition, IBlockData iblockdata, IBlockData iblockdata1, IBlockData iblockdata2, BlockPosition blockposition1) {
-            return iblockdata1.isAir() && !iblockdata2.isAir() && iblockdata2.o(iworldreader, blockposition1) && iblockdata.canPlace(iworldreader, blockposition);
+            return iblockdata1.isAir() && !iblockdata2.isAir() && Block.a(iblockdata2.getCollisionShape(iworldreader, blockposition1)) && iblockdata.canPlace(iworldreader, blockposition);
         }
     }
 
@@ -479,7 +479,7 @@ public class EntityEnderman extends EntityMonster {
                 if (this.c != null && !this.i.isPassenger()) {
                     if (this.i.f((EntityHuman) this.c)) {
                         if (this.c.h((Entity) this.i) < 16.0D && this.getEnderman().tryEscape(EndermanEscapeEvent.Reason.STARE)) {
-                            this.i.dV();
+                            this.i.dW();
                         }
 
                         this.l = 0;
diff --git a/src/main/java/net/minecraft/server/EntityExperienceOrb.java b/src/main/java/net/minecraft/server/EntityExperienceOrb.java
index 1a98442e..65c99696 100644
--- a/src/main/java/net/minecraft/server/EntityExperienceOrb.java
+++ b/src/main/java/net/minecraft/server/EntityExperienceOrb.java
@@ -178,7 +178,7 @@ public class EntityExperienceOrb extends Entity {
     }
 
     @Override
-    protected void az() {}
+    protected void ay() {}
 
     @Override
     protected void burn(float i) { // CraftBukkit - int -> float
@@ -288,7 +288,7 @@ public class EntityExperienceOrb extends Entity {
     }
 
     @Override
-    public boolean bs() {
+    public boolean br() {
         return false;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityFallingBlock.java b/src/main/java/net/minecraft/server/EntityFallingBlock.java
index 0a6d2b9b..f54887e5 100644
--- a/src/main/java/net/minecraft/server/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/server/EntityFallingBlock.java
@@ -39,7 +39,7 @@ public class EntityFallingBlock extends Entity {
     }
 
     @Override
-    public boolean bs() {
+    public boolean br() {
         return false;
     }
 
@@ -88,16 +88,6 @@ public class EntityFallingBlock extends Entity {
             }
 
             this.move(EnumMoveType.SELF, this.getMot());
-
-            // Paper start - Configurable EntityFallingBlock height nerf
-            if (this.world.paperConfig.fallingBlockHeightNerf != 0 && this.locY > this.world.paperConfig.fallingBlockHeightNerf) {
-                if (this.dropItem && this.world.getGameRules().getBoolean(GameRules.DO_ENTITY_DROPS)) {
-                    this.a(block);
-                }
-
-                this.die();
-            }
-            // Paper end
             if (!this.world.isClientSide) {
                 blockposition = new BlockPosition(this);
                 boolean flag = this.block.getBlock() instanceof BlockConcretePowder;
@@ -115,11 +105,13 @@ public class EntityFallingBlock extends Entity {
 
                 if (!this.onGround && !flag1) {
                     if (!this.world.isClientSide && (this.ticksLived > 100 && (blockposition.getY() < 1 || blockposition.getY() > 256) || this.ticksLived > 600)) {
-                        if (this.dropItem && this.world.getGameRules().getBoolean(GameRules.DO_ENTITY_DROPS)) {
+                        if (this.world.paperConfig.fallingBlockHeightNerf != 0 && this.locY > this.world.paperConfig.fallingBlockHeightNerf) { // Paper - Configurable EntityFallingBlock height nerf
+                        if (this.dropItem && this.world.getGameRules().getBoolean("doEntityDrops")) {
                             this.a((IMaterial) block);
                         }
 
                         this.die();
+                    } // Paper
                     }
                 } else {
                     IBlockData iblockdata = this.world.getType(blockposition);
@@ -128,10 +120,11 @@ public class EntityFallingBlock extends Entity {
                     if (iblockdata.getBlock() != Blocks.MOVING_PISTON) {
                         this.die();
                         if (!this.g) {
-                            boolean flag2 = iblockdata.a((BlockActionContext) (new BlockActionContextDirectional(this.world, blockposition, EnumDirection.DOWN, ItemStack.a, EnumDirection.UP)));
-                            boolean flag3 = this.block.canPlace(this.world, blockposition);
-
-                            if (flag2 && flag3) {
+                            if (!flag1 && (!iblockdata.a((BlockActionContext) (new BlockActionContextDirectional(this.world, blockposition, EnumDirection.DOWN, ItemStack.a, EnumDirection.UP))) || !this.block.canPlace(this.world, blockposition))) {
+                                if (this.dropItem && this.world.getGameRules().getBoolean("doEntityDrops")) {
+                                    this.a((IMaterial) block);
+                                }
+                            } else {
                                 if (this.block.b((IBlockState) BlockProperties.C) && this.world.getFluid(blockposition).getType() == FluidTypes.WATER) {
                                     this.block = (IBlockData) this.block.set(BlockProperties.C, true);
                                 }
@@ -166,11 +159,9 @@ public class EntityFallingBlock extends Entity {
                                             tileentity.update();
                                         }
                                     }
-                                } else if (this.dropItem && this.world.getGameRules().getBoolean(GameRules.DO_ENTITY_DROPS)) {
+                                } else if (this.dropItem && this.world.getGameRules().getBoolean("doEntityDrops")) {
                                     this.a((IMaterial) block);
                                 }
-                            } else if (this.dropItem && this.world.getGameRules().getBoolean(GameRules.DO_ENTITY_DROPS)) {
-                                this.a((IMaterial) block);
                             }
                         } else if (block instanceof BlockFalling) {
                             ((BlockFalling) block).a(this.world, blockposition);
@@ -288,7 +279,7 @@ public class EntityFallingBlock extends Entity {
     }
 
     @Override
-    public boolean bT() {
+    public boolean bS() {
         return true;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityFireball.java b/src/main/java/net/minecraft/server/EntityFireball.java
index 14c43949..fe4e993d 100644
--- a/src/main/java/net/minecraft/server/EntityFireball.java
+++ b/src/main/java/net/minecraft/server/EntityFireball.java
@@ -60,7 +60,7 @@ public abstract class EntityFireball extends Entity {
             this.die();
         } else {
             super.tick();
-            if (this.K_()) {
+            if (this.L_()) {
                 this.setOnFire(1);
             }
 
@@ -110,7 +110,7 @@ public abstract class EntityFireball extends Entity {
         }
     }
 
-    protected boolean K_() {
+    protected boolean L_() {
         return true;
     }
 
@@ -162,7 +162,7 @@ public abstract class EntityFireball extends Entity {
     }
 
     @Override
-    public float aS() {
+    public float aR() {
         return 1.0F;
     }
 
@@ -197,7 +197,7 @@ public abstract class EntityFireball extends Entity {
     }
 
     @Override
-    public float aF() {
+    public float aE() {
         return 1.0F;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityFireworks.java b/src/main/java/net/minecraft/server/EntityFireworks.java
index aaae9b37..b3f39d5a 100644
--- a/src/main/java/net/minecraft/server/EntityFireworks.java
+++ b/src/main/java/net/minecraft/server/EntityFireworks.java
@@ -136,7 +136,7 @@ public class EntityFireworks extends Entity implements IProjectile {
         this.pitch = MathHelper.g(0.2F, this.lastPitch, this.pitch);
         this.yaw = MathHelper.g(0.2F, this.lastYaw, this.yaw);
         if (this.ticksFlown == 0 && !this.isSilent()) {
-            this.world.playSound((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_FIREWORK_ROCKET_LAUNCH, SoundCategory.AMBIENT, 3.0F, 1.0F);
+            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_FIREWORK_ROCKET_LAUNCH, SoundCategory.AMBIENT, 3.0F, 1.0F);
         }
 
         ++this.ticksFlown;
@@ -286,7 +286,7 @@ public class EntityFireworks extends Entity implements IProjectile {
     }
 
     @Override
-    public boolean bs() {
+    public boolean br() {
         return false;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityFish.java b/src/main/java/net/minecraft/server/EntityFish.java
index 90479feb..a28fbdf1 100644
--- a/src/main/java/net/minecraft/server/EntityFish.java
+++ b/src/main/java/net/minecraft/server/EntityFish.java
@@ -1,6 +1,5 @@
 package net.minecraft.server;
 
-import java.util.Random;
 import java.util.function.Predicate;
 
 public abstract class EntityFish extends EntityWaterAnimal {
@@ -28,8 +27,11 @@ public abstract class EntityFish extends EntityWaterAnimal {
         return this.isFromBucket();
     }
 
-    public static boolean b(EntityTypes<? extends EntityFish> entitytypes, GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition, Random random) {
-        return generatoraccess.getType(blockposition).getBlock() == Blocks.WATER && generatoraccess.getType(blockposition.up()).getBlock() == Blocks.WATER;
+    @Override
+    public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
+        BlockPosition blockposition = new BlockPosition(this);
+
+        return generatoraccess.getType(blockposition).getBlock() == Blocks.WATER && generatoraccess.getType(blockposition.up()).getBlock() == Blocks.WATER ? super.a(generatoraccess, enummobspawn) : false;
     }
 
     @Override
@@ -88,7 +90,7 @@ public abstract class EntityFish extends EntityWaterAnimal {
 
     @Override
     public void e(Vec3D vec3d) {
-        if (this.df() && this.isInWater()) {
+        if (this.de() && this.isInWater()) {
             this.a(0.01F, vec3d);
             this.move(EnumMoveType.SELF, this.getMot());
             this.setMot(this.getMot().a(0.9D));
@@ -107,7 +109,7 @@ public abstract class EntityFish extends EntityWaterAnimal {
             this.setMot(this.getMot().add((double) ((this.random.nextFloat() * 2.0F - 1.0F) * 0.05F), 0.4000000059604645D, (double) ((this.random.nextFloat() * 2.0F - 1.0F) * 0.05F)));
             this.onGround = false;
             this.impulse = true;
-            this.a(this.getSoundFlop(), this.getSoundVolume(), this.cV());
+            this.a(this.getSoundFlop(), this.getSoundVolume(), this.cU());
         }
 
         super.movementTick();
@@ -188,8 +190,8 @@ public abstract class EntityFish extends EntityWaterAnimal {
                 this.i.aK = this.i.yaw;
                 float f1 = (float) (this.e * this.i.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getValue());
 
-                this.i.o(MathHelper.g(0.125F, this.i.db(), f1));
-                this.i.setMot(this.i.getMot().add(0.0D, (double) this.i.db() * d1 * 0.1D, 0.0D));
+                this.i.o(MathHelper.g(0.125F, this.i.da(), f1));
+                this.i.setMot(this.i.getMot().add(0.0D, (double) this.i.da() * d1 * 0.1D, 0.0D));
             } else {
                 this.i.o(0.0F);
             }
diff --git a/src/main/java/net/minecraft/server/EntityFox.java b/src/main/java/net/minecraft/server/EntityFox.java
index 1da2f013..b363e9ce 100644
--- a/src/main/java/net/minecraft/server/EntityFox.java
+++ b/src/main/java/net/minecraft/server/EntityFox.java
@@ -18,33 +18,33 @@ public class EntityFox extends EntityAnimal {
     private static final DataWatcherObject<Integer> bz = DataWatcher.a(EntityFox.class, DataWatcherRegistry.b);
     private static final DataWatcherObject<Byte> bA = DataWatcher.a(EntityFox.class, DataWatcherRegistry.a);
     private static final DataWatcherObject<Optional<UUID>> bB = DataWatcher.a(EntityFox.class, DataWatcherRegistry.o);
-    private static final DataWatcherObject<Optional<UUID>> bC = DataWatcher.a(EntityFox.class, DataWatcherRegistry.o);
-    private static final Predicate<EntityItem> bD = (entityitem) -> {
+    private static final DataWatcherObject<Optional<UUID>> bD = DataWatcher.a(EntityFox.class, DataWatcherRegistry.o);
+    private static final Predicate<EntityItem> bE = (entityitem) -> {
         return !entityitem.q() && entityitem.isAlive();
     };
-    private static final Predicate<Entity> bE = (entity) -> {
+    private static final Predicate<Entity> bF = (entity) -> {
         if (!(entity instanceof EntityLiving)) {
             return false;
         } else {
             EntityLiving entityliving = (EntityLiving) entity;
 
-            return entityliving.cu() != null && entityliving.cv() < entityliving.ticksLived + 600;
+            return entityliving.ct() != null && entityliving.cu() < entityliving.ticksLived + 600;
         }
     };
-    private static final Predicate<Entity> bF = (entity) -> {
+    private static final Predicate<Entity> bG = (entity) -> {
         return entity instanceof EntityChicken || entity instanceof EntityRabbit;
     };
-    private static final Predicate<Entity> bG = (entity) -> {
+    private static final Predicate<Entity> bH = (entity) -> {
         return !entity.isSneaking() && IEntitySelector.e.test(entity);
     };
-    private PathfinderGoal bH;
     private PathfinderGoal bI;
     private PathfinderGoal bJ;
-    private float bK;
+    private PathfinderGoal bK;
     private float bL;
     private float bM;
     private float bN;
-    private int bO;
+    private float bO;
+    private int bP;
 
     public EntityFox(EntityTypes<? extends EntityFox> entitytypes, World world) {
         super(entitytypes, world);
@@ -59,28 +59,28 @@ public class EntityFox extends EntityAnimal {
     protected void initDatawatcher() {
         super.initDatawatcher();
         this.datawatcher.register(EntityFox.bB, Optional.empty());
-        this.datawatcher.register(EntityFox.bC, Optional.empty());
+        this.datawatcher.register(EntityFox.bD, Optional.empty());
         this.datawatcher.register(EntityFox.bz, 0);
         this.datawatcher.register(EntityFox.bA, (byte) 0);
     }
 
     @Override
     protected void initPathfinder() {
-        this.bH = new PathfinderGoalNearestAttackableTarget<>(this, EntityAnimal.class, 10, false, false, (entityliving) -> {
+        this.bI = new PathfinderGoalNearestAttackableTarget<>(this, EntityAnimal.class, 10, false, false, (entityliving) -> {
             return entityliving instanceof EntityChicken || entityliving instanceof EntityRabbit;
         });
-        this.bI = new PathfinderGoalNearestAttackableTarget<>(this, EntityTurtle.class, 10, false, false, EntityTurtle.bz);
-        this.bJ = new PathfinderGoalNearestAttackableTarget<>(this, EntityFish.class, 20, false, false, (entityliving) -> {
+        this.bJ = new PathfinderGoalNearestAttackableTarget<>(this, EntityTurtle.class, 10, false, false, EntityTurtle.bz);
+        this.bK = new PathfinderGoalNearestAttackableTarget<>(this, EntityFish.class, 20, false, false, (entityliving) -> {
             return entityliving instanceof EntityFishSchool;
         });
         this.goalSelector.a(0, new EntityFox.g());
         this.goalSelector.a(1, new EntityFox.b());
         this.goalSelector.a(2, new EntityFox.n(2.2D));
         this.goalSelector.a(3, new PathfinderGoalAvoidTarget<>(this, EntityHuman.class, 16.0F, 1.6D, 1.4D, (entityliving) -> {
-            return EntityFox.bG.test(entityliving) && !this.c(entityliving.getUniqueID()) && !this.el();
+            return EntityFox.bH.test(entityliving) && !this.c(entityliving.getUniqueID());
         }));
         this.goalSelector.a(3, new PathfinderGoalAvoidTarget<>(this, EntityWolf.class, 8.0F, 1.6D, 1.4D, (entityliving) -> {
-            return !((EntityWolf) entityliving).isTamed() && !this.el();
+            return !((EntityWolf) entityliving).isTamed();
         }));
         this.goalSelector.a(4, new EntityFox.u());
         this.goalSelector.a(5, new EntityFox.o());
@@ -97,7 +97,7 @@ public class EntityFox extends EntityAnimal {
         this.goalSelector.a(11, new EntityFox.j(this, EntityHuman.class, 24.0F));
         this.goalSelector.a(12, new EntityFox.r());
         this.targetSelector.a(3, new EntityFox.a(EntityLiving.class, false, false, (entityliving) -> {
-            return EntityFox.bE.test(entityliving) && !this.c(entityliving.getUniqueID());
+            return EntityFox.bF.test((EntityLiving) entityliving) && !this.c(((EntityLiving) entityliving).getUniqueID()); // Paper - decompile fix
         }));
     }
 
@@ -108,20 +108,20 @@ public class EntityFox extends EntityAnimal {
 
     @Override
     public void movementTick() {
-        if (!this.world.isClientSide && this.isAlive() && this.df()) {
-            ++this.bO;
+        if (!this.world.isClientSide && this.isAlive() && this.de()) {
+            ++this.bP;
             ItemStack itemstack = this.getEquipment(EnumItemSlot.MAINHAND);
 
             if (this.j(itemstack)) {
-                if (this.bO > 600) {
+                if (this.bP > 600) {
                     ItemStack itemstack1 = itemstack.a(this.world, (EntityLiving) this);
 
                     if (!itemstack1.isEmpty()) {
                         this.setSlot(EnumItemSlot.MAINHAND, itemstack1);
                     }
 
-                    this.bO = 0;
-                } else if (this.bO > 560 && this.random.nextFloat() < 0.1F) {
+                    this.bP = 0;
+                } else if (this.bP > 560 && this.random.nextFloat() < 0.1F) {
                     this.a(this.d(itemstack), 1.0F, 1.0F);
                     this.world.broadcastEntityEffect(this, (byte) 45);
                 }
@@ -231,13 +231,13 @@ public class EntityFox extends EntityAnimal {
 
     private void initializePathFinderGoals() {
         if (this.getFoxType() == EntityFox.Type.RED) {
-            this.targetSelector.a(4, this.bH);
             this.targetSelector.a(4, this.bI);
-            this.targetSelector.a(6, this.bJ);
-        } else {
             this.targetSelector.a(4, this.bJ);
-            this.targetSelector.a(6, this.bH);
+            this.targetSelector.a(6, this.bK);
+        } else {
+            this.targetSelector.a(4, this.bK);
             this.targetSelector.a(6, this.bI);
+            this.targetSelector.a(6, this.bJ);
         }
 
     }
@@ -253,7 +253,7 @@ public class EntityFox extends EntityAnimal {
 
     @Override
     protected float b(EntityPose entitypose, EntitySize entitysize) {
-        return this.isBaby() ? entitysize.height * 0.85F : 0.4F;
+        return this.isBaby() ? entitysize.height * 0.95F : 0.4F;
     }
 
     public EntityFox.Type getFoxType() {
@@ -268,13 +268,13 @@ public class EntityFox extends EntityAnimal {
         List<UUID> list = Lists.newArrayList();
 
         list.add(((Optional<UUID>) this.datawatcher.get(EntityFox.bB)).orElse(null)); // CraftBukkit - decompile error
-        list.add(((Optional<UUID>) this.datawatcher.get(EntityFox.bC)).orElse(null)); // CraftBukkit - decompile error
+        list.add(((Optional<UUID>) this.datawatcher.get(EntityFox.bD)).orElse(null)); // CraftBukkit - decompile error
         return list;
     }
 
     private void b(@Nullable UUID uuid) {
         if (((Optional) this.datawatcher.get(EntityFox.bB)).isPresent()) {
-            this.datawatcher.set(EntityFox.bC, Optional.ofNullable(uuid));
+            this.datawatcher.set(EntityFox.bD, Optional.ofNullable(uuid));
         } else {
             this.datawatcher.set(EntityFox.bB, Optional.ofNullable(uuid));
         }
@@ -320,7 +320,7 @@ public class EntityFox extends EntityAnimal {
     }
 
     public boolean isSitting() {
-        return this.s(1);
+        return this.r(1);
     }
 
     public void setSitting(boolean flag) {
@@ -328,7 +328,7 @@ public class EntityFox extends EntityAnimal {
     }
 
     public boolean dX() {
-        return this.s(64);
+        return this.r(64);
     }
 
     private void v(boolean flag) {
@@ -336,7 +336,7 @@ public class EntityFox extends EntityAnimal {
     }
 
     private boolean el() {
-        return this.s(128);
+        return this.r(128);
     }
 
     private void w(boolean flag) {
@@ -345,7 +345,7 @@ public class EntityFox extends EntityAnimal {
 
     @Override
     public boolean isSleeping() {
-        return this.s(32);
+        return this.r(32);
     }
 
     public void setSleeping(boolean flag) {
@@ -361,7 +361,7 @@ public class EntityFox extends EntityAnimal {
 
     }
 
-    private boolean s(int i) {
+    private boolean r(int i) {
         return ((Byte) this.datawatcher.get(EntityFox.bA) & i) != 0;
     }
 
@@ -377,7 +377,7 @@ public class EntityFox extends EntityAnimal {
         Item item = itemstack.getItem();
         ItemStack itemstack1 = this.getEquipment(EnumItemSlot.MAINHAND);
 
-        return itemstack1.isEmpty() || this.bO > 0 && item.isFood() && !itemstack1.getItem().isFood();
+        return itemstack1.isEmpty() || this.bP > 0 && item.isFood() && !itemstack1.getItem().isFood();
     }
 
     private void k(ItemStack itemstack) {
@@ -413,7 +413,7 @@ public class EntityFox extends EntityAnimal {
             this.dropChanceHand[EnumItemSlot.MAINHAND.b()] = 2.0F;
             this.receive(entityitem, itemstack.getCount());
             entityitem.die();
-            this.bO = 0;
+            this.bP = 0;
         }
 
     }
@@ -421,7 +421,7 @@ public class EntityFox extends EntityAnimal {
     @Override
     public void tick() {
         super.tick();
-        if (this.df()) {
+        if (this.de()) {
             boolean flag = this.isInWater();
 
             if (flag || this.getGoalTarget() != null || this.world.U()) {
@@ -440,21 +440,21 @@ public class EntityFox extends EntityAnimal {
             }
         }
 
-        this.bL = this.bK;
+        this.bM = this.bL;
         if (this.eg()) {
-            this.bK += (1.0F - this.bK) * 0.4F;
+            this.bL += (1.0F - this.bL) * 0.4F;
         } else {
-            this.bK += (0.0F - this.bK) * 0.4F;
+            this.bL += (0.0F - this.bL) * 0.4F;
         }
 
-        this.bN = this.bM;
+        this.bO = this.bN;
         if (this.isCrouching()) {
-            this.bM += 0.2F;
-            if (this.bM > 3.0F) {
-                this.bM = 3.0F;
+            this.bN += 0.2F;
+            if (this.bN > 3.0F) {
+                this.bN = 3.0F;
             }
         } else {
-            this.bM = 0.0F;
+            this.bN = 0.0F;
         }
 
     }
@@ -470,7 +470,7 @@ public class EntityFox extends EntityAnimal {
     }
 
     public boolean dY() {
-        return this.s(16);
+        return this.r(16);
     }
 
     public void s(boolean flag) {
@@ -478,7 +478,7 @@ public class EntityFox extends EntityAnimal {
     }
 
     public boolean ee() {
-        return this.bM == 3.0F;
+        return this.bN == 3.0F;
     }
 
     public void setCrouching(boolean flag) {
@@ -486,7 +486,7 @@ public class EntityFox extends EntityAnimal {
     }
 
     public boolean isCrouching() {
-        return this.s(4);
+        return this.r(4);
     }
 
     public void u(boolean flag) {
@@ -494,7 +494,7 @@ public class EntityFox extends EntityAnimal {
     }
 
     public boolean eg() {
-        return this.s(8);
+        return this.r(8);
     }
 
     @Override
@@ -527,7 +527,7 @@ public class EntityFox extends EntityAnimal {
             if (!iblockdata.isAir() && !this.isSilent()) {
                 SoundEffectType soundeffecttype = iblockdata.r();
 
-                this.world.playSound((EntityHuman) null, this.locX, this.locY, this.locZ, soundeffecttype.d(), this.getSoundCategory(), soundeffecttype.a() * 0.5F, soundeffecttype.b() * 0.75F);
+                this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, soundeffecttype.d(), this.getSoundCategory(), soundeffecttype.a() * 0.5F, soundeffecttype.b() * 0.75F);
             }
 
         }
@@ -555,7 +555,7 @@ public class EntityFox extends EntityAnimal {
         SoundEffect soundeffect = this.getSoundAmbient();
 
         if (soundeffect == SoundEffects.ENTITY_FOX_SCREECH) {
-            this.a(soundeffect, 2.0F, this.cV());
+            this.a(soundeffect, 2.0F, this.cU());
         } else {
             super.B();
         }
@@ -719,7 +719,7 @@ public class EntityFox extends EntityAnimal {
                         boolean flag = EntityFox.a((EntityFox) EntityFox.this, entityliving);
 
                         if (!flag) {
-                            EntityFox.this.getNavigation().a((Entity) entityliving, 0);
+                            EntityFox.this.getNavigation().a((Entity) entityliving);
                             EntityFox.this.setCrouching(false);
                             EntityFox.this.u(false);
                         }
@@ -767,8 +767,8 @@ public class EntityFox extends EntityAnimal {
         @Override
         public void d() {
             EntityFox.this.setCrouching(false);
-            EntityFox.this.bM = 0.0F;
             EntityFox.this.bN = 0.0F;
+            EntityFox.this.bO = 0.0F;
             EntityFox.this.u(false);
             EntityFox.this.s(false);
         }
@@ -819,7 +819,7 @@ public class EntityFox extends EntityAnimal {
 
         @Override
         public boolean a() {
-            return EntityFox.this.isInWater() && EntityFox.this.cf() > 0.25D || EntityFox.this.aD();
+            return EntityFox.this.isInWater() && EntityFox.this.ce() > 0.25D || EntityFox.this.aC();
         }
     }
 
@@ -947,7 +947,7 @@ public class EntityFox extends EntityAnimal {
         }
 
         protected void m() {
-            if (EntityFox.this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) {
+            if (EntityFox.this.world.getGameRules().getBoolean("mobGriefing")) {
                 IBlockData iblockdata = EntityFox.this.world.getType(this.e);
 
                 if (iblockdata.getBlock() == Blocks.SWEET_BERRY_BUSH) {
@@ -1183,9 +1183,9 @@ public class EntityFox extends EntityAnimal {
 
                             this.k = entityliving;
                             this.j = entityliving.getLastDamager();
-                            int i = entityliving.ct();
+                            int i = entityliving.cs();
 
-                            return i != this.l && this.a(this.j, this.d);
+                            return i != this.l && this.a(this.j, PathfinderTargetCondition.a);
                         }
                     }
                 }
@@ -1199,7 +1199,7 @@ public class EntityFox extends EntityAnimal {
             EntityFox.this.setGoalTarget(this.j, org.bukkit.event.entity.EntityTargetEvent.TargetReason.TARGET_ATTACKED_OWNER, true); // CraftBukkit
             this.c = this.j;
             if (this.k != null) {
-                this.l = this.k.ct();
+                this.l = this.k.cs();
             }
 
             EntityFox.this.a(SoundEffects.ENTITY_FOX_AGGRO, 1.0F, 1.0F);
@@ -1256,7 +1256,7 @@ public class EntityFox extends EntityAnimal {
                 entityfox.setPositionRotation(this.animal.locX, this.animal.locY, this.animal.locZ, 0.0F, 0.0F);
                 this.b.addEntity(entityfox);
                 this.b.broadcastEntityEffect(this.animal, (byte) 18);
-                if (this.b.getGameRules().getBoolean(GameRules.DO_MOB_LOOT)) {
+                if (this.b.getGameRules().getBoolean("doMobLoot")) {
                     this.b.addEntity(new EntityExperienceOrb(this.b, this.animal.locX, this.animal.locY, this.animal.locZ, this.animal.getRandom().nextInt(7) + 1));
                 }
 
@@ -1307,7 +1307,7 @@ public class EntityFox extends EntityAnimal {
             } else {
                 EntityLiving entityliving = EntityFox.this.getGoalTarget();
 
-                return entityliving != null && entityliving.isAlive() && EntityFox.bF.test(entityliving) && EntityFox.this.h((Entity) entityliving) > 36.0D && !EntityFox.this.isCrouching() && !EntityFox.this.eg() && !EntityFox.this.jumping;
+                return entityliving != null && entityliving.isAlive() && EntityFox.bG.test(entityliving) && EntityFox.this.h((Entity) entityliving) > 36.0D && !EntityFox.this.isCrouching() && !EntityFox.this.eg() && !EntityFox.this.jumping;
             }
         }
 
@@ -1380,7 +1380,7 @@ public class EntityFox extends EntityAnimal {
                 } else if (EntityFox.this.getRandom().nextInt(10) != 0) {
                     return false;
                 } else {
-                    List<EntityItem> list = EntityFox.this.world.a(EntityItem.class, EntityFox.this.getBoundingBox().grow(8.0D, 8.0D, 8.0D), EntityFox.bD);
+                    List<EntityItem> list = EntityFox.this.world.a(EntityItem.class, EntityFox.this.getBoundingBox().grow(8.0D, 8.0D, 8.0D), EntityFox.bE);
 
                     return !list.isEmpty() && EntityFox.this.getEquipment(EnumItemSlot.MAINHAND).isEmpty();
                 }
@@ -1391,7 +1391,7 @@ public class EntityFox extends EntityAnimal {
 
         @Override
         public void e() {
-            List<EntityItem> list = EntityFox.this.world.a(EntityItem.class, EntityFox.this.getBoundingBox().grow(8.0D, 8.0D, 8.0D), EntityFox.bD);
+            List<EntityItem> list = EntityFox.this.world.a(EntityItem.class, EntityFox.this.getBoundingBox().grow(8.0D, 8.0D, 8.0D), EntityFox.bE);
             ItemStack itemstack = EntityFox.this.getEquipment(EnumItemSlot.MAINHAND);
 
             if (itemstack.isEmpty() && !list.isEmpty()) {
@@ -1402,7 +1402,7 @@ public class EntityFox extends EntityAnimal {
 
         @Override
         public void c() {
-            List<EntityItem> list = EntityFox.this.world.a(EntityItem.class, EntityFox.this.getBoundingBox().grow(8.0D, 8.0D, 8.0D), EntityFox.bD);
+            List<EntityItem> list = EntityFox.this.world.a(EntityItem.class, EntityFox.this.getBoundingBox().grow(8.0D, 8.0D, 8.0D), EntityFox.bE);
 
             if (!list.isEmpty()) {
                 EntityFox.this.getNavigation().a((Entity) list.get(0), 1.2000000476837158D);
diff --git a/src/main/java/net/minecraft/server/EntityGhast.java b/src/main/java/net/minecraft/server/EntityGhast.java
index f25c828d..55b96c4d 100644
--- a/src/main/java/net/minecraft/server/EntityGhast.java
+++ b/src/main/java/net/minecraft/server/EntityGhast.java
@@ -91,8 +91,9 @@ public class EntityGhast extends EntityFlying implements IMonster {
         return 10.0F;
     }
 
-    public static boolean b(EntityTypes<EntityGhast> entitytypes, GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition, Random random) {
-        return generatoraccess.getDifficulty() != EnumDifficulty.PEACEFUL && random.nextInt(20) == 0 && a(entitytypes, generatoraccess, enummobspawn, blockposition, random);
+    @Override
+    public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
+        return this.random.nextInt(20) == 0 && super.a(generatoraccess, enummobspawn) && generatoraccess.getDifficulty() != EnumDifficulty.PEACEFUL;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/EntityGuardianElder.java b/src/main/java/net/minecraft/server/EntityGuardianElder.java
index 7248d46c..a85a7bf5 100644
--- a/src/main/java/net/minecraft/server/EntityGuardianElder.java
+++ b/src/main/java/net/minecraft/server/EntityGuardianElder.java
@@ -5,7 +5,7 @@ import java.util.List;
 
 public class EntityGuardianElder extends EntityGuardian {
 
-    public static final float b = EntityTypes.ELDER_GUARDIAN.i() / EntityTypes.GUARDIAN.i();
+    public static final float b = EntityTypes.ELDER_GUARDIAN.h() / EntityTypes.GUARDIAN.h();
 
     public EntityGuardianElder(EntityTypes<? extends EntityGuardianElder> entitytypes, World world) {
         super(entitytypes, world);
@@ -31,17 +31,17 @@ public class EntityGuardianElder extends EntityGuardian {
 
     @Override
     protected SoundEffect getSoundAmbient() {
-        return this.av() ? SoundEffects.ENTITY_ELDER_GUARDIAN_AMBIENT : SoundEffects.ENTITY_ELDER_GUARDIAN_AMBIENT_LAND;
+        return this.au() ? SoundEffects.ENTITY_ELDER_GUARDIAN_AMBIENT : SoundEffects.ENTITY_ELDER_GUARDIAN_AMBIENT_LAND;
     }
 
     @Override
     protected SoundEffect getSoundHurt(DamageSource damagesource) {
-        return this.av() ? SoundEffects.ENTITY_ELDER_GUARDIAN_HURT : SoundEffects.ENTITY_ELDER_GUARDIAN_HURT_LAND;
+        return this.au() ? SoundEffects.ENTITY_ELDER_GUARDIAN_HURT : SoundEffects.ENTITY_ELDER_GUARDIAN_HURT_LAND;
     }
 
     @Override
     protected SoundEffect getSoundDeath() {
-        return this.av() ? SoundEffects.ENTITY_ELDER_GUARDIAN_DEATH : SoundEffects.ENTITY_ELDER_GUARDIAN_DEATH_LAND;
+        return this.au() ? SoundEffects.ENTITY_ELDER_GUARDIAN_DEATH : SoundEffects.ENTITY_ELDER_GUARDIAN_DEATH_LAND;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/EntityHanging.java b/src/main/java/net/minecraft/server/EntityHanging.java
index 3b282a18..f3215faf 100644
--- a/src/main/java/net/minecraft/server/EntityHanging.java
+++ b/src/main/java/net/minecraft/server/EntityHanging.java
@@ -17,11 +17,11 @@ public abstract class EntityHanging extends Entity {
     };
     private int e;
     public BlockPosition blockPosition;
-    protected EnumDirection direction;
+    @Nullable
+    public EnumDirection direction;
 
     protected EntityHanging(EntityTypes<? extends EntityHanging> entitytypes, World world) {
         super(entitytypes, world);
-        this.direction = EnumDirection.SOUTH;
     }
 
     protected EntityHanging(EntityTypes<? extends EntityHanging> entitytypes, World world, BlockPosition blockposition) {
@@ -41,6 +41,43 @@ public abstract class EntityHanging extends Entity {
         this.updateBoundingBox();
     }
 
+    // CraftBukkit start - break out BB calc into own method
+    public static AxisAlignedBB calculateBoundingBox(Entity entity, BlockPosition blockPosition, EnumDirection direction, int width, int height) {
+        double d0 = (double) blockPosition.getX() + 0.5D;
+        double d1 = (double) blockPosition.getY() + 0.5D;
+        double d2 = (double) blockPosition.getZ() + 0.5D;
+        double d3 = 0.46875D;
+        double d4 = a(width);
+        double d5 = a(height);
+
+        d0 -= (double) direction.getAdjacentX() * 0.46875D;
+        d2 -= (double) direction.getAdjacentZ() * 0.46875D;
+        d1 += d5;
+        EnumDirection enumdirection = direction.f();
+
+        d0 += d4 * (double) enumdirection.getAdjacentX();
+        d2 += d4 * (double) enumdirection.getAdjacentZ();
+        if (entity != null) {
+            entity.locX = d0;
+            entity.locY = d1;
+            entity.locZ = d2;
+        }
+        double d6 = (double) width;
+        double d7 = (double) height;
+        double d8 = (double) width;
+
+        if (direction.k() == EnumDirection.EnumAxis.Z) {
+            d8 = 1.0D;
+        } else {
+            d6 = 1.0D;
+        }
+
+        d6 /= 32.0D;
+        d7 /= 32.0D;
+        d8 /= 32.0D;
+        return new AxisAlignedBB(d0 - d6, d1 - d7, d2 - d8, d0 + d6, d1 + d7, d2 + d8);
+    }
+
     protected void updateBoundingBox() {
         if (this.direction != null) {
             // CraftBukkit start code moved in to calculateBoundingBox
@@ -49,46 +86,6 @@ public abstract class EntityHanging extends Entity {
         }
     }
 
-    // CraftBukkit start - break out BB calc into own method
-    public static AxisAlignedBB calculateBoundingBox(@Nullable Entity entity, BlockPosition blockPosition, EnumDirection direction, int width, int height) {
-        {
-            double d0 = (double) blockPosition.getX() + 0.5D;
-            double d1 = (double) blockPosition.getY() + 0.5D;
-            double d2 = (double) blockPosition.getZ() + 0.5D;
-            double d3 = 0.46875D;
-            double d4 = a(width);
-            double d5 = a(height);
-
-            d0 -= (double) direction.getAdjacentX() * 0.46875D;
-            d2 -= (double) direction.getAdjacentZ() * 0.46875D;
-            d1 += d5;
-            EnumDirection enumdirection = direction.f();
-
-            d0 += d4 * (double) enumdirection.getAdjacentX();
-            d2 += d4 * (double) enumdirection.getAdjacentZ();
-            if (entity != null) {
-                entity.locX = d0;
-                entity.locY = d1;
-                entity.locZ = d2;
-            }
-            double d6 = (double) width;
-            double d7 = (double) height;
-            double d8 = (double) width;
-
-            if (direction.k() == EnumDirection.EnumAxis.Z) {
-                d8 = 1.0D;
-            } else {
-                d6 = 1.0D;
-            }
-
-            d6 /= 32.0D;
-            d7 /= 32.0D;
-            d8 /= 32.0D;
-            return new AxisAlignedBB(d0 - d6, d1 - d7, d2 - d8, d0 + d6, d1 + d7, d2 + d8);
-        }
-    }
-    // CraftBukkit end
-
     private static double a(int i) { // CraftBukkit - static
         return i % 32 == 0 ? 0.5D : 0.0D;
     }
@@ -242,7 +239,7 @@ public abstract class EntityHanging extends Entity {
     @Override
     public void a(NBTTagCompound nbttagcompound) {
         this.blockPosition = new BlockPosition(nbttagcompound.getInt("TileX"), nbttagcompound.getInt("TileY"), nbttagcompound.getInt("TileZ"));
-        this.direction = EnumDirection.fromType2(nbttagcompound.getByte("Facing"));
+        this.setDirection(EnumDirection.fromType2(nbttagcompound.getByte("Facing")));
     }
 
     public abstract int getHangingWidth();
@@ -263,7 +260,7 @@ public abstract class EntityHanging extends Entity {
     }
 
     @Override
-    protected boolean aJ() {
+    protected boolean aI() {
         return false;
     }
 
@@ -280,7 +277,7 @@ public abstract class EntityHanging extends Entity {
 
     @Override
     public float a(EnumBlockRotation enumblockrotation) {
-        if (this.direction.k() != EnumDirection.EnumAxis.Y) {
+        if (this.direction != null && this.direction.k() != EnumDirection.EnumAxis.Y) {
             switch (enumblockrotation) {
                 case CLOCKWISE_180:
                     this.direction = this.direction.opposite();
diff --git a/src/main/java/net/minecraft/server/EntityHorseAbstract.java b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
index 8aa60e95..8ce2fca8 100644
--- a/src/main/java/net/minecraft/server/EntityHorseAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
@@ -9,31 +9,31 @@ import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason; // CraftBuk
 
 public abstract class EntityHorseAbstract extends EntityAnimal implements IInventoryListener, IJumpable {
 
-    private static final Predicate<EntityLiving> bI = (entityliving) -> {
+    private static final Predicate<EntityLiving> bJ = (entityliving) -> {
         return entityliving instanceof EntityHorseAbstract && ((EntityHorseAbstract) entityliving).hasReproduced();
     };
-    private static final PathfinderTargetCondition bJ = (new PathfinderTargetCondition()).a(16.0D).a().b().c().a(EntityHorseAbstract.bI);
+    private static final PathfinderTargetCondition bK = (new PathfinderTargetCondition()).a(16.0D).a().b().c().a(EntityHorseAbstract.bJ);
     public static final IAttribute attributeJumpStrength = (new AttributeRanged((IAttribute) null, "horse.jumpStrength", 0.7D, 0.0D, 2.0D)).a("Jump Strength").a(true);
-    private static final DataWatcherObject<Byte> bK = DataWatcher.a(EntityHorseAbstract.class, DataWatcherRegistry.a);
-    private static final DataWatcherObject<Optional<UUID>> bL = DataWatcher.a(EntityHorseAbstract.class, DataWatcherRegistry.o);
-    private int bM;
+    private static final DataWatcherObject<Byte> bL = DataWatcher.a(EntityHorseAbstract.class, DataWatcherRegistry.a);
+    private static final DataWatcherObject<Optional<UUID>> bM = DataWatcher.a(EntityHorseAbstract.class, DataWatcherRegistry.o);
     private int bN;
     private int bO;
+    private int bP;
     public int bA;
     public int bB;
-    protected boolean bC;
+    protected boolean bD;
     public InventorySubcontainer inventoryChest;
-    protected int bE;
+    protected int bF;
     protected float jumpPower;
     private boolean canSlide;
-    private float bQ;
     private float bR;
     private float bS;
     private float bT;
     private float bU;
     private float bV;
-    protected boolean bG = true;
-    protected int bH;
+    private float bW;
+    protected boolean bH = true;
+    protected int bI;
     public int maxDomestication = 100; // CraftBukkit - store max domestication value
 
     protected EntityHorseAbstract(EntityTypes<? extends EntityHorseAbstract> entitytypes, World world) {
@@ -61,40 +61,40 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     @Override
     protected void initDatawatcher() {
         super.initDatawatcher();
-        this.datawatcher.register(EntityHorseAbstract.bK, (byte) 0);
-        this.datawatcher.register(EntityHorseAbstract.bL, Optional.empty());
+        this.datawatcher.register(EntityHorseAbstract.bL, (byte) 0);
+        this.datawatcher.register(EntityHorseAbstract.bM, Optional.empty());
     }
 
-    protected boolean s(int i) {
-        return ((Byte) this.datawatcher.get(EntityHorseAbstract.bK) & i) != 0;
+    protected boolean r(int i) {
+        return ((Byte) this.datawatcher.get(EntityHorseAbstract.bL) & i) != 0;
     }
 
     protected void d(int i, boolean flag) {
-        byte b0 = (Byte) this.datawatcher.get(EntityHorseAbstract.bK);
+        byte b0 = (Byte) this.datawatcher.get(EntityHorseAbstract.bL);
 
         if (flag) {
-            this.datawatcher.set(EntityHorseAbstract.bK, (byte) (b0 | i));
+            this.datawatcher.set(EntityHorseAbstract.bL, (byte) (b0 | i));
         } else {
-            this.datawatcher.set(EntityHorseAbstract.bK, (byte) (b0 & ~i));
+            this.datawatcher.set(EntityHorseAbstract.bL, (byte) (b0 & ~i));
         }
 
     }
 
     public boolean isTamed() {
-        return this.s(2);
+        return this.r(2);
     }
 
     @Nullable
     public UUID getOwnerUUID() {
-        return (UUID) ((Optional) this.datawatcher.get(EntityHorseAbstract.bL)).orElse((Object) null);
+        return (UUID) ((Optional) this.datawatcher.get(EntityHorseAbstract.bM)).orElse((Object) null);
     }
 
     public void setOwnerUUID(@Nullable UUID uuid) {
-        this.datawatcher.set(EntityHorseAbstract.bL, Optional.ofNullable(uuid));
+        this.datawatcher.set(EntityHorseAbstract.bM, Optional.ofNullable(uuid));
     }
 
     public boolean eh() {
-        return this.bC;
+        return this.bD;
     }
 
     public void setTamed(boolean flag) {
@@ -102,7 +102,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     }
 
     public void t(boolean flag) {
-        this.bC = flag;
+        this.bD = flag;
     }
 
     @Override
@@ -119,15 +119,15 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     }
 
     public boolean ei() {
-        return this.s(16);
+        return this.r(16);
     }
 
     public boolean ej() {
-        return this.s(32);
+        return this.r(32);
     }
 
     public boolean hasReproduced() {
-        return this.s(8);
+        return this.r(8);
     }
 
     public void u(boolean flag) {
@@ -139,14 +139,14 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     }
 
     public int getTemper() {
-        return this.bE;
+        return this.bF;
     }
 
     public void setTemper(int i) {
-        this.bE = i;
+        this.bF = i;
     }
 
-    public int u(int i) {
+    public int t(int i) {
         int j = MathHelper.clamp(this.getTemper() + i, 0, this.getMaxDomestication());
 
         this.setTemper(j);
@@ -168,7 +168,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     private void dV() {
         this.dZ();
         if (!this.isSilent()) {
-            this.world.playSound((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_HORSE_EAT, this.getSoundCategory(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_HORSE_EAT, this.getSoundCategory(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
         }
 
     }
@@ -198,7 +198,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
             if (!iblockdata.isAir() && !this.isSilent()) {
                 SoundEffectType soundeffecttype = iblockdata.r();
 
-                this.world.playSound((EntityHuman) null, this.locX, this.locY, this.locZ, soundeffecttype.d(), this.getSoundCategory(), soundeffecttype.a() * 0.5F, soundeffecttype.b() * 0.75F);
+                this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, soundeffecttype.d(), this.getSoundCategory(), soundeffecttype.a() * 0.5F, soundeffecttype.b() * 0.75F);
             }
 
         }
@@ -213,7 +213,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
 
         this.inventoryChest = new InventorySubcontainer(this.getChestSlots(), (org.bukkit.entity.AbstractHorse) this.getBukkitEntity()); // CraftBukkit
         if (inventorysubcontainer != null) {
-            inventorysubcontainer.b((IInventoryListener) this);
+            inventorysubcontainer.b(this);
             int i = Math.min(inventorysubcontainer.getSize(), this.inventoryChest.getSize());
 
             for (int j = 0; j < i; ++j) {
@@ -281,7 +281,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     }
 
     public boolean eq() {
-        return this.s(4);
+        return this.r(4);
     }
 
     @Nullable
@@ -300,11 +300,11 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
                 soundeffecttype = iblockdata1.r();
             }
 
-            if (this.isVehicle() && this.bG) {
-                ++this.bH;
-                if (this.bH > 5 && this.bH % 3 == 0) {
+            if (this.isVehicle() && this.bH) {
+                ++this.bI;
+                if (this.bI > 5 && this.bI % 3 == 0) {
                     this.a(soundeffecttype);
-                } else if (this.bH <= 5) {
+                } else if (this.bI <= 5) {
                     this.a(SoundEffects.ENTITY_HORSE_STEP_WOOD, soundeffecttype.a() * 0.15F, soundeffecttype.b());
                 }
             } else if (soundeffecttype == SoundEffectType.a) {
@@ -411,7 +411,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
         if (b0 > 0 && (flag || !this.isTamed()) && this.getTemper() < this.getMaxDomestication()) {
             flag = true;
             if (!this.world.isClientSide) {
-                this.u(b0);
+                this.t(b0);
             }
         }
 
@@ -448,8 +448,8 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     }
 
     @Override
-    protected void cF() {
-        super.cF();
+    protected void cE() {
+        super.cE();
         if (this.inventoryChest != null) {
             for (int i = 0; i < this.inventoryChest.getSize(); ++i) {
                 ItemStack itemstack = this.inventoryChest.getItem(i);
@@ -479,8 +479,8 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
                     this.w(true);
                 }
 
-                if (this.ei() && ++this.bM > 50) {
-                    this.bM = 0;
+                if (this.ei() && ++this.bN > 50) {
+                    this.bN = 0;
                     this.w(false);
                 }
             }
@@ -491,10 +491,10 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
 
     protected void es() {
         if (this.hasReproduced() && this.isBaby() && !this.ei()) {
-            EntityLiving entityliving = this.world.a(EntityHorseAbstract.class, EntityHorseAbstract.bJ, this, this.locX, this.locY, this.locZ, this.getBoundingBox().g(16.0D));
+            EntityLiving entityliving = this.world.a(EntityHorseAbstract.class, EntityHorseAbstract.bK, this, this.locX, this.locY, this.locZ, this.getBoundingBox().b(16.0D, 16.0D, 16.0D));
 
             if (entityliving != null && this.h((Entity) entityliving) > 4.0D) {
-                this.navigation.a((Entity) entityliving, 0);
+                this.navigation.a((Entity) entityliving);
             }
         }
 
@@ -507,13 +507,13 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     @Override
     public void tick() {
         super.tick();
-        if (this.bN > 0 && ++this.bN > 30) {
-            this.bN = 0;
+        if (this.bO > 0 && ++this.bO > 30) {
+            this.bO = 0;
             this.d(64, false);
         }
 
-        if ((this.ca() || this.df()) && this.bO > 0 && ++this.bO > 20) {
-            this.bO = 0;
+        if ((this.bZ() || this.de()) && this.bP > 0 && ++this.bP > 20) {
+            this.bP = 0;
             this.setStanding(false);
         }
 
@@ -528,45 +528,45 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
             }
         }
 
-        this.bR = this.bQ;
+        this.bS = this.bR;
         if (this.ei()) {
-            this.bQ += (1.0F - this.bQ) * 0.4F + 0.05F;
-            if (this.bQ > 1.0F) {
-                this.bQ = 1.0F;
+            this.bR += (1.0F - this.bR) * 0.4F + 0.05F;
+            if (this.bR > 1.0F) {
+                this.bR = 1.0F;
             }
         } else {
-            this.bQ += (0.0F - this.bQ) * 0.4F - 0.05F;
-            if (this.bQ < 0.0F) {
-                this.bQ = 0.0F;
+            this.bR += (0.0F - this.bR) * 0.4F - 0.05F;
+            if (this.bR < 0.0F) {
+                this.bR = 0.0F;
             }
         }
 
-        this.bT = this.bS;
+        this.bU = this.bT;
         if (this.ej()) {
-            this.bQ = 0.0F;
-            this.bR = this.bQ;
-            this.bS += (1.0F - this.bS) * 0.4F + 0.05F;
-            if (this.bS > 1.0F) {
-                this.bS = 1.0F;
+            this.bR = 0.0F;
+            this.bS = this.bR;
+            this.bT += (1.0F - this.bT) * 0.4F + 0.05F;
+            if (this.bT > 1.0F) {
+                this.bT = 1.0F;
             }
         } else {
             this.canSlide = false;
-            this.bS += (0.8F * this.bS * this.bS * this.bS - this.bS) * 0.6F - 0.05F;
-            if (this.bS < 0.0F) {
-                this.bS = 0.0F;
+            this.bT += (0.8F * this.bT * this.bT * this.bT - this.bT) * 0.6F - 0.05F;
+            if (this.bT < 0.0F) {
+                this.bT = 0.0F;
             }
         }
 
-        this.bV = this.bU;
-        if (this.s(64)) {
-            this.bU += (1.0F - this.bU) * 0.7F + 0.05F;
-            if (this.bU > 1.0F) {
-                this.bU = 1.0F;
+        this.bW = this.bV;
+        if (this.r(64)) {
+            this.bV += (1.0F - this.bV) * 0.7F + 0.05F;
+            if (this.bV > 1.0F) {
+                this.bV = 1.0F;
             }
         } else {
-            this.bU += (0.0F - this.bU) * 0.7F - 0.05F;
-            if (this.bU < 0.0F) {
-                this.bU = 0.0F;
+            this.bV += (0.0F - this.bV) * 0.7F - 0.05F;
+            if (this.bV < 0.0F) {
+                this.bV = 0.0F;
             }
         }
 
@@ -574,7 +574,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
 
     private void dZ() {
         if (!this.world.isClientSide) {
-            this.bN = 1;
+            this.bO = 1;
             this.d(64, true);
         }
 
@@ -593,8 +593,8 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     }
 
     private void eB() {
-        if (this.ca() || this.df()) {
-            this.bO = 1;
+        if (this.bZ() || this.de()) {
+            this.bP = 1;
             this.setStanding(true);
         }
 
@@ -605,7 +605,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
         SoundEffect soundeffect = this.getSoundAngry();
 
         if (soundeffect != null) {
-            this.a(soundeffect, this.getSoundVolume(), this.cV());
+            this.a(soundeffect, this.getSoundVolume(), this.cU());
         }
 
     }
@@ -638,7 +638,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
 
                 if (f1 <= 0.0F) {
                     f1 *= 0.25F;
-                    this.bH = 0;
+                    this.bI = 0;
                 }
 
                 if (this.onGround && this.jumpPower == 0.0F && this.ej() && !this.canSlide) {
@@ -673,8 +673,8 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
                     this.jumpPower = 0.0F;
                 }
 
-                this.aO = this.db() * 0.1F;
-                if (this.ca()) {
+                this.aO = this.da() * 0.1F;
+                if (this.bZ()) {
                     this.o((float) this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getValue());
                     super.e(new Vec3D((double) f, vec3d.y, (double) f1));
                 } else if (entityliving instanceof EntityHuman) {
@@ -755,7 +755,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
         AttributeInstance attributeinstance = this.getAttributeMap().a("Speed");
 
         if (attributeinstance != null) {
-            this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue(attributeinstance.getBaseValue() * 0.25D);
+            this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue(attributeinstance.b() * 0.25D);
         }
 
         if (nbttagcompound.hasKeyOfType("SaddleItem", 10)) {
@@ -785,13 +785,13 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     }
 
     protected void a(EntityAgeable entityageable, EntityHorseAbstract entityhorseabstract) {
-        double d0 = this.getAttributeInstance(GenericAttributes.MAX_HEALTH).getBaseValue() + entityageable.getAttributeInstance(GenericAttributes.MAX_HEALTH).getBaseValue() + (double) this.ex();
+        double d0 = this.getAttributeInstance(GenericAttributes.MAX_HEALTH).b() + entityageable.getAttributeInstance(GenericAttributes.MAX_HEALTH).b() + (double) this.ex();
 
         entityhorseabstract.getAttributeInstance(GenericAttributes.MAX_HEALTH).setValue(d0 / 3.0D);
-        double d1 = this.getAttributeInstance(EntityHorseAbstract.attributeJumpStrength).getBaseValue() + entityageable.getAttributeInstance(EntityHorseAbstract.attributeJumpStrength).getBaseValue() + this.ey();
+        double d1 = this.getAttributeInstance(EntityHorseAbstract.attributeJumpStrength).b() + entityageable.getAttributeInstance(EntityHorseAbstract.attributeJumpStrength).b() + this.ey();
 
         entityhorseabstract.getAttributeInstance(EntityHorseAbstract.attributeJumpStrength).setValue(d1 / 3.0D);
-        double d2 = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getBaseValue() + entityageable.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getBaseValue() + this.ez();
+        double d2 = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).b() + entityageable.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).b() + this.ez();
 
         entityhorseabstract.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue(d2 / 3.0D);
     }
@@ -836,13 +836,13 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
             this.aK = entityinsentient.aK;
         }
 
-        if (this.bT > 0.0F) {
+        if (this.bU > 0.0F) {
             float f = MathHelper.sin(this.aK * 0.017453292F);
             float f1 = MathHelper.cos(this.aK * 0.017453292F);
-            float f2 = 0.7F * this.bT;
-            float f3 = 0.15F * this.bT;
+            float f2 = 0.7F * this.bU;
+            float f3 = 0.15F * this.bU;
 
-            entity.setPosition(this.locX + (double) (f2 * f), this.locY + this.aP() + entity.aO() + (double) f3, this.locZ - (double) (f2 * f1));
+            entity.setPosition(this.locX + (double) (f2 * f), this.locY + this.aO() + entity.aN() + (double) f3, this.locZ - (double) (f2 * f1));
             if (entity instanceof EntityLiving) {
                 ((EntityLiving) entity).aK = this.aK;
             }
diff --git a/src/main/java/net/minecraft/server/EntityHorseSkeleton.java b/src/main/java/net/minecraft/server/EntityHorseSkeleton.java
index 0aa77914..b9672645 100644
--- a/src/main/java/net/minecraft/server/EntityHorseSkeleton.java
+++ b/src/main/java/net/minecraft/server/EntityHorseSkeleton.java
@@ -4,9 +4,9 @@ import javax.annotation.Nullable;
 
 public class EntityHorseSkeleton extends EntityHorseAbstract {
 
-    private final PathfinderGoalHorseTrap bI = new PathfinderGoalHorseTrap(this);
-    private boolean bJ;
-    private int bK;public int getTrapTime() { return this.bK; } // Paper - OBFHELPER
+    private final PathfinderGoalHorseTrap bJ = new PathfinderGoalHorseTrap(this);
+    private boolean bK;
+    private int bL; public int getTrapTime() { return this.bL; } // Paper - OBFHELPER
 
     public EntityHorseSkeleton(EntityTypes<? extends EntityHorseSkeleton> entitytypes, World world) {
         super(entitytypes, world);
@@ -48,12 +48,12 @@ public class EntityHorseSkeleton extends EntityHorseAbstract {
                 return SoundEffects.ENTITY_SKELETON_HORSE_STEP_WATER;
             }
 
-            ++this.bH;
-            if (this.bH > 5 && this.bH % 3 == 0) {
+            ++this.bI;
+            if (this.bI > 5 && this.bI % 3 == 0) {
                 return SoundEffects.ENTITY_SKELETON_HORSE_GALLOP_WATER;
             }
 
-            if (this.bH <= 5) {
+            if (this.bI <= 5) {
                 return SoundEffects.ENTITY_SKELETON_HORSE_STEP_WATER;
             }
         }
@@ -87,14 +87,14 @@ public class EntityHorseSkeleton extends EntityHorseAbstract {
     }
 
     @Override
-    public double aP() {
-        return super.aP() - 0.1875D;
+    public double aO() {
+        return super.aO() - 0.1875D;
     }
 
     @Override
     public void movementTick() {
         super.movementTick();
-        if (this.dV() && this.bK++ >= 18000) {
+        if (this.dV() && this.bL++ >= 18000) {
             this.die();
         }
 
@@ -104,39 +104,39 @@ public class EntityHorseSkeleton extends EntityHorseAbstract {
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
         nbttagcompound.setBoolean("SkeletonTrap", this.dV());
-        nbttagcompound.setInt("SkeletonTrapTime", this.bK);
+        nbttagcompound.setInt("SkeletonTrapTime", this.bL);
     }
 
     @Override
     public void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
         this.r(nbttagcompound.getBoolean("SkeletonTrap"));
-        this.bK = nbttagcompound.getInt("SkeletonTrapTime");
+        this.bL = nbttagcompound.getInt("SkeletonTrapTime");
     }
 
     @Override
-    public boolean bf() {
+    public boolean be() {
         return true;
     }
 
     @Override
-    protected float da() {
+    protected float cZ() {
         return 0.96F;
     }
 
     public boolean isTrap() { return this.dV(); } // Paper - OBFHELPER
     public boolean dV() {
-        return this.bJ;
+        return this.bK;
     }
 
     public void setTrap(boolean trap) { this.r(trap); } // Paper - OBFHELPER
     public void r(boolean flag) {
-        if (flag != this.bJ) {
-            this.bJ = flag;
+        if (flag != this.bK) {
+            this.bK = flag;
             if (flag) {
-                this.goalSelector.a(1, this.bI);
+                this.goalSelector.a(1, this.bJ);
             } else {
-                this.goalSelector.a((PathfinderGoal) this.bI);
+                this.goalSelector.a((PathfinderGoal) this.bJ);
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index 5d3e48ba..f709e7d8 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -39,7 +39,6 @@ public abstract class EntityHuman extends EntityLiving {
     protected static final DataWatcherObject<Byte> bu = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.a);
     protected static final DataWatcherObject<NBTTagCompound> bv = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.p);
     protected static final DataWatcherObject<NBTTagCompound> bw = DataWatcher.a(EntityHuman.class, DataWatcherRegistry.p);
-    private long e;
     public final PlayerInventory inventory = new PlayerInventory(this);
     protected InventoryEnderChest enderChest = new InventoryEnderChest(this); // CraftBukkit - add "this" to constructor
     public final ContainerPlayer defaultContainer;
@@ -57,18 +56,18 @@ public abstract class EntityHuman extends EntityLiving {
     public double bL;
     public int sleepTicks;
     protected boolean bM;
-    private BlockPosition g;
-    private boolean bU;
+    private BlockPosition f;
+    private boolean g;
     public final PlayerAbilities abilities = new PlayerAbilities();
     public int expLevel;
     public int expTotal;
     public float exp;
     protected int bR;
     protected final float bS = 0.02F;
-    private int bV;
-    private GameProfile bW; public final void setProfile(final GameProfile profile) { this.bW = profile; } // Paper - OBFHELPER
-    private ItemStack bY;
-    private final ItemCooldown bZ;
+    private int bU;
+    private GameProfile bV; public final void setProfile(final GameProfile profile) { this.bV = profile; } // Paper - OBFHELPER
+    private ItemStack bX;
+    private final ItemCooldown bY;
     @Nullable
     public EntityFishingHook hookedFish;
     // Paper start
@@ -88,10 +87,10 @@ public abstract class EntityHuman extends EntityLiving {
 
     public EntityHuman(World world, GameProfile gameprofile) {
         super(EntityTypes.PLAYER, world);
-        this.bY = ItemStack.a;
-        this.bZ = this.g();
+        this.bX = ItemStack.a;
+        this.bY = this.g();
         this.a(a(gameprofile));
-        this.bW = gameprofile;
+        this.bV = gameprofile;
         this.defaultContainer = new ContainerPlayer(this.inventory, !world.isClientSide, this);
         this.activeContainer = this.defaultContainer;
         BlockPosition blockposition = world.getSpawn();
@@ -100,20 +99,6 @@ public abstract class EntityHuman extends EntityLiving {
         this.aX = 180.0F;
     }
 
-    public boolean a(World world, BlockPosition blockposition, EnumGamemode enumgamemode) {
-        if (!enumgamemode.d()) {
-            return false;
-        } else if (enumgamemode == EnumGamemode.SPECTATOR) {
-            return true;
-        } else if (this.dQ()) {
-            return false;
-        } else {
-            ItemStack itemstack = this.getItemInMainHand();
-
-            return itemstack.isEmpty() || !itemstack.a(world.t(), new ShapeDetectorBlock(world, blockposition, false));
-        }
-    }
-
     @Override
     protected void initAttributes() {
         super.initAttributes();
@@ -200,16 +185,16 @@ public abstract class EntityHuman extends EntityLiving {
         ++this.aD;
         ItemStack itemstack = this.getItemInMainHand();
 
-        if (!ItemStack.matches(this.bY, itemstack)) {
-            if (!ItemStack.d(this.bY, itemstack)) {
+        if (!ItemStack.matches(this.bX, itemstack)) {
+            if (!ItemStack.d(this.bX, itemstack)) {
                 this.dZ();
             }
 
-            this.bY = itemstack.isEmpty() ? ItemStack.a : itemstack.cloneItemStack();
+            this.bX = itemstack.isEmpty() ? ItemStack.a : itemstack.cloneItemStack();
         }
 
         this.l();
-        this.bZ.a();
+        this.bY.a();
         this.dB();
     }
 
@@ -330,13 +315,13 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     @Override
-    public int aX() {
+    public int aW() {
         return 10;
     }
 
     @Override
     public void a(SoundEffect soundeffect, float f, float f1) {
-        this.world.playSound(this, this.locX, this.locY, this.locZ, soundeffect, this.getSoundCategory(), f, f1);
+        this.world.a(this, this.locX, this.locY, this.locZ, soundeffect, this.getSoundCategory(), f, f1);
     }
 
     public void a(SoundEffect soundeffect, SoundCategory soundcategory, float f, float f1) {}
@@ -390,7 +375,7 @@ public abstract class EntityHuman extends EntityLiving {
     @Override
     protected void doTick() {
         super.doTick();
-        this.cO();
+        this.cN();
         this.aM = this.yaw;
     }
 
@@ -400,7 +385,7 @@ public abstract class EntityHuman extends EntityLiving {
             --this.bC;
         }
 
-        if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL && this.world.getGameRules().getBoolean(GameRules.NATURAL_REGENERATION)) {
+        if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL && this.world.getGameRules().getBoolean("naturalRegeneration")) {
             if (this.getHealth() < this.getMaxHealth() && this.ticksLived % 20 == 0) {
                 // CraftBukkit - added regain reason of "REGEN" for filtering purposes.
                 this.heal(1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.REGEN);
@@ -457,7 +442,7 @@ public abstract class EntityHuman extends EntityLiving {
 
         this.j(this.getShoulderEntityLeft());
         this.j(this.getShoulderEntityRight());
-        if (!this.world.isClientSide && (this.fallDistance > 0.5F || this.isInWater() || this.isPassenger()) || this.abilities.isFlying || this.isSleeping()) {
+        if (!this.world.isClientSide && (this.fallDistance > 0.5F || this.isInWater() || this.isPassenger()) || this.abilities.isFlying) {
             if (!this.world.paperConfig.parrotsHangOnBetter) this.releaseShoulderEntities(); // Paper - Hang on!
         }
 
@@ -516,9 +501,9 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     @Override
-    protected void cF() {
-        super.cF();
-        if (!this.world.getGameRules().getBoolean(GameRules.KEEP_INVENTORY)) {
+    protected void cE() {
+        super.cE();
+        if (!this.world.getGameRules().getBoolean("keepInventory")) {
             this.removeCursedItems();
             this.inventory.dropContents();
         }
@@ -678,7 +663,7 @@ public abstract class EntityHuman extends EntityLiving {
     @Override
     public void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
-        this.a(a(this.bW));
+        this.a(a(this.bV));
         NBTTagList nbttaglist = nbttagcompound.getList("Inventory", 10);
 
         this.inventory.b(nbttaglist);
@@ -702,8 +687,8 @@ public abstract class EntityHuman extends EntityLiving {
         // CraftBukkit end
 
         if (nbttagcompound.hasKeyOfType("SpawnX", 99) && nbttagcompound.hasKeyOfType("SpawnY", 99) && nbttagcompound.hasKeyOfType("SpawnZ", 99)) {
-            this.g = new BlockPosition(nbttagcompound.getInt("SpawnX"), nbttagcompound.getInt("SpawnY"), nbttagcompound.getInt("SpawnZ"));
-            this.bU = nbttagcompound.getBoolean("SpawnForced");
+            this.f = new BlockPosition(nbttagcompound.getInt("SpawnX"), nbttagcompound.getInt("SpawnY"), nbttagcompound.getInt("SpawnZ"));
+            this.g = nbttagcompound.getBoolean("SpawnForced");
         }
 
         this.foodData.a(nbttagcompound);
@@ -734,11 +719,11 @@ public abstract class EntityHuman extends EntityLiving {
         nbttagcompound.setInt("XpTotal", this.expTotal);
         nbttagcompound.setInt("XpSeed", this.bR);
         nbttagcompound.setInt("Score", this.getScore());
-        if (this.g != null) {
-            nbttagcompound.setInt("SpawnX", this.g.getX());
-            nbttagcompound.setInt("SpawnY", this.g.getY());
-            nbttagcompound.setInt("SpawnZ", this.g.getZ());
-            nbttagcompound.setBoolean("SpawnForced", this.bU);
+        if (this.f != null) {
+            nbttagcompound.setInt("SpawnX", this.f.getX());
+            nbttagcompound.setInt("SpawnY", this.f.getY());
+            nbttagcompound.setInt("SpawnZ", this.f.getZ());
+            nbttagcompound.setBoolean("SpawnForced", this.g);
         }
 
         this.foodData.b(nbttagcompound);
@@ -906,9 +891,9 @@ public abstract class EntityHuman extends EntityLiving {
         return OptionalInt.empty();
     }
 
-    public void openTrade(int i, MerchantRecipeList merchantrecipelist, int j, int k, boolean flag, boolean flag1) {}
+    public void openTrade(int i, MerchantRecipeList merchantrecipelist, int j, int k, boolean flag) {}
 
-    public void openBook(ItemStack itemstack, EnumHand enumhand) {}
+    public void a(ItemStack itemstack, EnumHand enumhand) {}
 
     public EnumInteractionResult a(Entity entity, EnumHand enumhand) {
         if (this.isSpectator()) {
@@ -948,7 +933,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     @Override
-    public double aO() {
+    public double aN() {
         return -0.35D;
     }
 
@@ -975,7 +960,7 @@ public abstract class EntityHuman extends EntityLiving {
     // Paper end
 
     public void attack(Entity entity) {
-        if (entity.bs()) {
+        if (entity.br()) {
             if (!entity.t(this)) {
                 float f = (float) this.getAttributeInstance(GenericAttributes.ATTACK_DAMAGE).getValue();
                 float f1;
@@ -1015,7 +1000,7 @@ public abstract class EntityHuman extends EntityLiving {
                     boolean flag3 = false;
                     double d0 = (double) (this.E - this.D);
 
-                    if (flag && !flag2 && !flag1 && this.onGround && d0 < (double) this.db()) {
+                    if (flag && !flag2 && !flag1 && this.onGround && d0 < (double) this.da()) {
                         ItemStack itemstack = this.b(EnumHand.MAIN_HAND);
 
                         if (itemstack.getItem() instanceof ItemSword) {
@@ -1152,7 +1137,7 @@ public abstract class EntityHuman extends EntityLiving {
                                 org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
 
                                 if (!combustEvent.isCancelled()) {
-                                    entity.setOnFire(combustEvent.getDuration(), false);
+                                    entity.setOnFire(combustEvent.getDuration());
                                 }
                                 // CraftBukkit end
                             }
@@ -1195,7 +1180,7 @@ public abstract class EntityHuman extends EntityLiving {
         }
 
         if (this.random.nextFloat() < f) {
-            this.getCooldownTracker().setCooldown(Items.SHIELD, 100);
+            this.getCooldownTracker().a(Items.SHIELD, 100);
             this.dp();
             this.world.broadcastEntityEffect(this, (byte) 30);
         }
@@ -1231,7 +1216,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public GameProfile getProfile() {
-        return this.bW;
+        return this.bV;
     }
 
     // CraftBukkit start - moved bed result checks from below into separate method
@@ -1311,6 +1296,7 @@ public abstract class EntityHuman extends EntityLiving {
     @Override
     public void e(BlockPosition blockposition) {
         this.a(StatisticList.CUSTOM.b(StatisticList.TIME_SINCE_REST));
+        this.releaseShoulderEntities();
         super.e(blockposition);
     }
 
@@ -1377,8 +1363,8 @@ public abstract class EntityHuman extends EntityLiving {
             if (!flag) {
                 return Optional.empty();
             } else {
-                boolean flag1 = block.S_();
-                boolean flag2 = iworldreader.getType(blockposition.up()).getBlock().S_();
+                boolean flag1 = block.T_();
+                boolean flag2 = iworldreader.getType(blockposition.up()).getBlock().T_();
 
                 return flag1 && flag2 ? Optional.of(new Vec3D((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.1D, (double) blockposition.getZ() + 0.5D)) : Optional.empty();
             }
@@ -1398,21 +1384,21 @@ public abstract class EntityHuman extends EntityLiving {
     public void a(IChatBaseComponent ichatbasecomponent, boolean flag) {}
 
     public BlockPosition getBed() {
-        return this.g;
+        return this.f;
     }
 
     public boolean isRespawnForced() {
-        return this.bU;
+        return this.g;
     }
 
     public void setRespawnPosition(BlockPosition blockposition, boolean flag) {
         if (blockposition != null) {
-            this.g = blockposition;
-            this.bU = flag;
+            this.f = blockposition;
+            this.g = flag;
             this.spawnWorld = this.world.worldData.getName(); // CraftBukkit
         } else {
-            this.g = null;
-            this.bU = false;
+            this.f = null;
+            this.g = false;
             this.spawnWorld = ""; // CraftBukkit
         }
 
@@ -1498,11 +1484,11 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     @Override
-    public void ax() {
+    public void aw() {
         if (this.abilities.isFlying) {
             this.setSwimming(false);
         } else {
-            super.ax();
+            super.aw();
         }
 
     }
@@ -1512,7 +1498,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     @Override
-    public float db() {
+    public float da() {
         return (float) this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getValue();
     }
 
@@ -1600,9 +1586,9 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     @Override
-    protected void az() {
+    protected void ay() {
         if (!this.isSpectator()) {
-            super.az();
+            super.ay();
         }
 
     }
@@ -1673,11 +1659,11 @@ public abstract class EntityHuman extends EntityLiving {
             this.expTotal = 0;
         }
 
-        if (i > 0 && this.expLevel % 5 == 0 && (float) this.bV < (float) this.ticksLived - 100.0F) {
+        if (i > 0 && this.expLevel % 5 == 0 && (float) this.bU < (float) this.ticksLived - 100.0F) {
             float f = this.expLevel > 30 ? 1.0F : (float) this.expLevel / 30.0F;
 
-            this.world.playSound((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_PLAYER_LEVELUP, this.getSoundCategory(), f * 0.75F, 1.0F);
-            this.bV = this.ticksLived;
+            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_PLAYER_LEVELUP, this.getSoundCategory(), f * 0.75F, 1.0F);
+            this.bU = this.ticksLived;
         }
 
     }
@@ -1724,7 +1710,7 @@ public abstract class EntityHuman extends EntityLiving {
 
     @Override
     protected int getExpValue(EntityHuman entityhuman) {
-        if (!this.world.getGameRules().getBoolean(GameRules.KEEP_INVENTORY) && !this.isSpectator()) {
+        if (!this.world.getGameRules().getBoolean("keepInventory") && !this.isSpectator()) {
             int i = this.expLevel * 7;
 
             return i > 100 ? 100 : i;
@@ -1749,7 +1735,7 @@ public abstract class EntityHuman extends EntityLiving {
 
     @Override
     public IChatBaseComponent getDisplayName() {
-        return new ChatComponentText(this.bW.getName());
+        return new ChatComponentText(this.bV.getName());
     }
 
     public InventoryEnderChest getEnderChest() {
@@ -1782,7 +1768,7 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     @Override
-    public Iterable<ItemStack> aZ() {
+    public Iterable<ItemStack> aY() {
         return Lists.newArrayList(new ItemStack[]{this.getItemInMainHand(), this.getItemInOffHand()});
     }
 
@@ -1795,11 +1781,9 @@ public abstract class EntityHuman extends EntityLiving {
         if (!this.isPassenger() && this.onGround && !this.isInWater()) {
             if (this.getShoulderEntityLeft().isEmpty()) {
                 this.setShoulderEntityLeft(nbttagcompound);
-                this.e = this.world.getTime();
                 return true;
             } else if (this.getShoulderEntityRight().isEmpty()) {
                 this.setShoulderEntityRight(nbttagcompound);
-                this.e = this.world.getTime();
                 return true;
             } else {
                 return false;
@@ -1810,17 +1794,14 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     protected void releaseShoulderEntities() {
-        if (this.e + 20L < this.world.getTime()) {
-            // CraftBukkit start
-            if (this.spawnEntityFromShoulder(this.getShoulderEntityLeft())) {
-                this.setShoulderEntityLeft(new NBTTagCompound());
-            }
-            if (this.spawnEntityFromShoulder(this.getShoulderEntityRight())) {
-                this.setShoulderEntityRight(new NBTTagCompound());
-            }
-            // CraftBukkit end
+        // CraftBukkit start
+        if (this.spawnEntityFromShoulder(this.getShoulderEntityLeft())) {
+            this.setShoulderEntityLeft(new NBTTagCompound());
         }
-
+        if (this.spawnEntityFromShoulder(this.getShoulderEntityRight())) {
+            this.setShoulderEntityRight(new NBTTagCompound());
+        }
+        // CraftBukkit end
     }
 
     // Paper start
@@ -1839,8 +1820,9 @@ public abstract class EntityHuman extends EntityLiving {
         }
         return entity;
     }
+
     // Paper - maintain old signature
-    private boolean spawnEntityFromShoulder(NBTTagCompound nbttagcompound) { // CraftBukkit void->boolean
+    private boolean spawnEntityFromShoulder(@Nullable NBTTagCompound nbttagcompound) { // CraftBukkit void->boolean
         return spawnEntityFromShoulder0(nbttagcompound) != null;
     }
 
@@ -1873,7 +1855,7 @@ public abstract class EntityHuman extends EntityLiving {
     public abstract boolean isCreative();
 
     @Override
-    public boolean bE() {
+    public boolean bD() {
         return !this.abilities.isFlying;
     }
 
@@ -1889,14 +1871,14 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public IChatBaseComponent dU() {
-        return (new ChatComponentText("")).addSibling(this.getDisplayName()).a(" (").a(this.bW.getId().toString()).a(")");
+        return (new ChatComponentText("")).addSibling(this.getDisplayName()).a(" (").a(this.bV.getId().toString()).a(")");
     }
 
     private IChatBaseComponent c(IChatBaseComponent ichatbasecomponent) {
         String s = this.getProfile().getName();
 
         return ichatbasecomponent.a((chatmodifier) -> {
-            chatmodifier.setChatClickable(new ChatClickable(ChatClickable.EnumClickAction.SUGGEST_COMMAND, "/tell " + s + " ")).setChatHoverable(this.bK()).setInsertion(s);
+            chatmodifier.setChatClickable(new ChatClickable(ChatClickable.EnumClickAction.SUGGEST_COMMAND, "/tell " + s + " ")).setChatHoverable(this.bJ()).setInsertion(s);
         });
     }
 
@@ -2024,7 +2006,7 @@ public abstract class EntityHuman extends EntityLiving {
         this.datawatcher.set(EntityHuman.bw, nbttagcompound);
     }
 
-    public float getCooldownPeriod() { return this.dY(); } // Paper - OBFHELPER
+    public float getCooldownPeriod() { return dY(); } // Paper - OBFHELPER
     public float dY() {
         return (float) (1.0D / this.getAttributeInstance(GenericAttributes.ATTACK_SPEED).getValue() * 20.0D);
     }
@@ -2034,13 +2016,13 @@ public abstract class EntityHuman extends EntityLiving {
         return MathHelper.a(((float) this.aD + f) / this.dY(), 0.0F, 1.0F);
     }
 
-    public void resetCooldown() { this.dZ(); } // Paper - OBFHELPER
+    public void resetCooldown() { dZ(); } // Paper - OBFHELPER
     public void dZ() {
         this.aD = 0;
     }
 
     public ItemCooldown getCooldownTracker() {
-        return this.bZ;
+        return this.bY;
     }
 
     public float eb() {
@@ -2104,7 +2086,7 @@ public abstract class EntityHuman extends EntityLiving {
     public ItemStack a(World world, ItemStack itemstack) {
         this.getFoodData().a(itemstack.getItem(), itemstack);
         this.b(StatisticList.ITEM_USED.b(itemstack.getItem()));
-        world.playSound((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_PLAYER_BURP, SoundCategory.PLAYERS, 0.5F, world.random.nextFloat() * 0.1F + 0.9F);
+        world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_PLAYER_BURP, SoundCategory.PLAYERS, 0.5F, world.random.nextFloat() * 0.1F + 0.9F);
         if (this instanceof EntityPlayer) {
             CriterionTriggers.z.a((EntityPlayer) this, itemstack);
         }
diff --git a/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java b/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java
index cc37b5ff..76641682 100644
--- a/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java
+++ b/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java
@@ -96,7 +96,7 @@ public class EntityIllagerIllusioner extends EntityIllagerWizard implements IRan
     }
 
     @Override
-    public SoundEffect dV() {
+    public SoundEffect dW() {
         return SoundEffects.ENTITY_ILLUSIONER_AMBIENT;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index d00e99cd..48ce1548 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -5,7 +5,6 @@ import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import java.util.Random;
 import java.util.UUID;
 import javax.annotation.Nullable;
 
@@ -202,7 +201,7 @@ public abstract class EntityInsentient extends EntityLiving {
         SoundEffect soundeffect = this.getSoundAmbient();
 
         if (soundeffect != null) {
-            this.a(soundeffect, this.getSoundVolume(), this.cV());
+            this.a(soundeffect, this.getSoundVolume(), this.cU());
         }
 
     }
@@ -473,12 +472,12 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     @Override
-    public final MinecraftKey cG() {
+    public final MinecraftKey cF() {
         return this.lootTableKey == null ? this.getDefaultLootTable() : this.lootTableKey;
     }
 
     protected MinecraftKey getDefaultLootTable() {
-        return super.cG();
+        return super.cF();
     }
 
     public void r(float f) {
@@ -503,7 +502,7 @@ public abstract class EntityInsentient extends EntityLiving {
     public void movementTick() {
         super.movementTick();
         this.world.getMethodProfiler().enter("looting");
-        if (!this.world.isClientSide && this.canPickupLoot() && this.isAlive() && !this.killed && this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) {
+        if (!this.world.isClientSide && this.canPickupLoot() && this.isAlive() && !this.killed && this.world.getGameRules().getBoolean("mobGriefing")) {
             List<EntityItem> list = this.world.a(EntityItem.class, this.getBoundingBox().grow(1.0D, 0.0D, 1.0D));
             Iterator iterator = list.iterator();
 
@@ -607,7 +606,7 @@ public abstract class EntityInsentient extends EntityLiving {
         return true;
     }
 
-    public boolean I() {
+    protected boolean I() {
         return false;
     }
 
@@ -732,14 +731,14 @@ public abstract class EntityInsentient extends EntityLiving {
         return f + f3;
     }
 
-    public static boolean a(EntityTypes<? extends EntityInsentient> entitytypes, GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition, Random random) {
-        BlockPosition blockposition1 = blockposition.down();
-
-        return enummobspawn == EnumMobSpawn.SPAWNER || generatoraccess.getType(blockposition1).a((IBlockAccess) generatoraccess, blockposition1, entitytypes);
+    public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
+        return this.a(generatoraccess, enummobspawn, new BlockPosition(this));
     }
 
-    public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
-        return true;
+    protected boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition) {
+        BlockPosition blockposition1 = blockposition.down();
+
+        return enummobspawn == EnumMobSpawn.SPAWNER || generatoraccess.getType(blockposition1).a((IBlockAccess) generatoraccess, blockposition1, this.getEntityType());
     }
 
     public boolean a(IWorldReader iworldreader) {
@@ -755,7 +754,7 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     @Override
-    public int bv() {
+    public int bu() {
         if (this.getGoalTarget() == null) {
             return 3;
         } else {
@@ -771,7 +770,7 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     @Override
-    public Iterable<ItemStack> aZ() {
+    public Iterable<ItemStack> aY() {
         return this.bA;
     }
 
@@ -977,7 +976,7 @@ public abstract class EntityInsentient extends EntityLiving {
 
     @Nullable
     public GroupDataEntity prepare(GeneratorAccess generatoraccess, DifficultyDamageScaler difficultydamagescaler, EnumMobSpawn enummobspawn, @Nullable GroupDataEntity groupdataentity, @Nullable NBTTagCompound nbttagcompound) {
-        this.getAttributeInstance(GenericAttributes.FOLLOW_RANGE).addModifier(new AttributeModifier("Random spawn bonus", this.random.nextGaussian() * 0.05D, AttributeModifier.Operation.MULTIPLY_BASE));
+        this.getAttributeInstance(GenericAttributes.FOLLOW_RANGE).b(new AttributeModifier("Random spawn bonus", this.random.nextGaussian() * 0.05D, AttributeModifier.Operation.MULTIPLY_BASE));
         if (this.random.nextFloat() < 0.05F) {
             this.p(true);
         } else {
@@ -1220,8 +1219,8 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     @Override
-    public boolean ca() {
-        return this.dD() && super.ca();
+    public boolean bZ() {
+        return this.dD() && super.bZ();
     }
 
     public static boolean b(EnumItemSlot enumitemslot, ItemStack itemstack) {
@@ -1231,8 +1230,8 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     @Override
-    public boolean df() {
-        return super.df() && !this.isNoAI();
+    public boolean de() {
+        return super.de() && !this.isNoAI();
     }
 
     public void setNoAI(boolean flag) {
@@ -1317,7 +1316,7 @@ public abstract class EntityInsentient extends EntityLiving {
                     float f2 = 0.25F + (float) EnchantmentManager.getDigSpeedEnchantmentLevel(this) * 0.05F;
 
                     if (this.random.nextFloat() < f2) {
-                        entityhuman.getCooldownTracker().setCooldown(Items.SHIELD, 100);
+                        entityhuman.getCooldownTracker().a(Items.SHIELD, 100);
                         this.world.broadcastEntityEffect(entityhuman, (byte) 30);
                     }
                 }
@@ -1329,10 +1328,10 @@ public abstract class EntityInsentient extends EntityLiving {
         return flag;
     }
 
-    public boolean isInDaylight() { return this.dS(); } // Paper - OBFHELPER
+    public boolean isInDaylight() { return dS(); } // Paper - OBFHELPER
     protected boolean dS() {
         if (this.world.J() && !this.world.isClientSide) {
-            float f = this.aF();
+            float f = this.aE();
             BlockPosition blockposition = this.getVehicle() instanceof EntityBoat ? (new BlockPosition(this.locX, (double) Math.round(this.locY), this.locZ)).up() : new BlockPosition(this.locX, (double) Math.round(this.locY), this.locZ);
 
             if (f > 0.5F && this.random.nextFloat() * 30.0F < (f - 0.4F) * 2.0F && this.world.f(blockposition)) {
diff --git a/src/main/java/net/minecraft/server/EntityIronGolem.java b/src/main/java/net/minecraft/server/EntityIronGolem.java
index 8e463111..bb06d12f 100644
--- a/src/main/java/net/minecraft/server/EntityIronGolem.java
+++ b/src/main/java/net/minecraft/server/EntityIronGolem.java
@@ -45,7 +45,7 @@ public class EntityIronGolem extends EntityGolem {
     }
 
     @Override
-    protected int l(int i) {
+    protected int k(int i) {
         return i;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index 20916989..dce47989 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -118,7 +118,7 @@ public class EntityItem extends Entity {
             }
             // Craftbukkit end */
 
-            this.impulse |= this.ay();
+            this.impulse |= this.ax();
             if (!this.world.isClientSide) {
                 double d0 = this.getMot().d(vec3d).g();
 
@@ -402,7 +402,7 @@ public class EntityItem extends Entity {
     }
 
     @Override
-    public boolean bs() {
+    public boolean br() {
         return false;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityItemFrame.java b/src/main/java/net/minecraft/server/EntityItemFrame.java
index b078435c..aac28bfa 100644
--- a/src/main/java/net/minecraft/server/EntityItemFrame.java
+++ b/src/main/java/net/minecraft/server/EntityItemFrame.java
@@ -52,29 +52,15 @@ public class EntityItemFrame extends EntityHanging {
     @Override
     protected void updateBoundingBox() {
         if (this.direction != null) {
-            // CraftBukkit start code moved in to calculateBoundingBox
-            this.a(calculateBoundingBox(this, this.blockPosition, this.direction, this.getHangingWidth(), this.getHangingHeight()));
-            // CraftBukkit end
-        }
-    }
-
-    // CraftBukkit start - break out BB calc into own method
-    public static AxisAlignedBB calculateBoundingBox(@Nullable Entity entity, BlockPosition blockPosition, EnumDirection direction, int width, int height) {
-        {
             double d0 = 0.46875D;
 
-            double locX = (double) blockPosition.getX() + 0.5D - (double) direction.getAdjacentX() * 0.46875D;
-            double locY = (double) blockPosition.getY() + 0.5D - (double) direction.getAdjacentY() * 0.46875D;
-            double locZ = (double) blockPosition.getZ() + 0.5D - (double) direction.getAdjacentZ() * 0.46875D;
-            if (entity != null) {
-                entity.locX = locX;
-                entity.locY = locY;
-                entity.locZ = locZ;
-            }
-            double d1 = (double) width;
-            double d2 = (double) height;
-            double d3 = (double) width;
-            EnumDirection.EnumAxis enumdirection_enumaxis = direction.k();
+            this.locX = (double) this.blockPosition.getX() + 0.5D - (double) this.direction.getAdjacentX() * 0.46875D;
+            this.locY = (double) this.blockPosition.getY() + 0.5D - (double) this.direction.getAdjacentY() * 0.46875D;
+            this.locZ = (double) this.blockPosition.getZ() + 0.5D - (double) this.direction.getAdjacentZ() * 0.46875D;
+            double d1 = (double) this.getHangingWidth();
+            double d2 = (double) this.getHangingHeight();
+            double d3 = (double) this.getHangingWidth();
+            EnumDirection.EnumAxis enumdirection_enumaxis = this.direction.k();
 
             switch (enumdirection_enumaxis) {
                 case X:
@@ -90,10 +76,9 @@ public class EntityItemFrame extends EntityHanging {
             d1 /= 32.0D;
             d2 /= 32.0D;
             d3 /= 32.0D;
-            return new AxisAlignedBB(locX - d1, locY - d2, locZ - d3, locX + d1, locY + d2, locZ + d3);
+            this.a(new AxisAlignedBB(this.locX - d1, this.locY - d2, this.locZ - d3, this.locX + d1, this.locY + d2, this.locZ + d3));
         }
     }
-    // CraftBukkit end
 
     @Override
     public boolean survives() {
@@ -107,7 +92,7 @@ public class EntityItemFrame extends EntityHanging {
     }
 
     @Override
-    public float aS() {
+    public float aR() {
         return 0.0F;
     }
 
@@ -159,8 +144,8 @@ public class EntityItemFrame extends EntityHanging {
         this.a(SoundEffects.ENTITY_ITEM_FRAME_PLACE, 1.0F, 1.0F);
     }
 
-    private void b(@Nullable Entity entity, boolean flag) {
-        if (!this.world.getGameRules().getBoolean(GameRules.DO_ENTITY_DROPS)) {
+    public void b(@Nullable Entity entity, boolean flag) {
+        if (!this.world.getGameRules().getBoolean("doEntityDrops")) {
             if (entity == null) {
                 this.c(this.getItem());
             }
diff --git a/src/main/java/net/minecraft/server/EntityLargeFireball.java b/src/main/java/net/minecraft/server/EntityLargeFireball.java
index d90860eb..131c7fd3 100644
--- a/src/main/java/net/minecraft/server/EntityLargeFireball.java
+++ b/src/main/java/net/minecraft/server/EntityLargeFireball.java
@@ -8,12 +8,12 @@ public class EntityLargeFireball extends EntityFireballFireball {
 
     public EntityLargeFireball(EntityTypes<? extends EntityLargeFireball> entitytypes, World world) {
         super(entitytypes, world);
-        isIncendiary = this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING); // CraftBukkit
+        isIncendiary = this.world.getGameRules().getBoolean("mobGriefing"); // CraftBukkit
     }
 
     public EntityLargeFireball(World world, EntityLiving entityliving, double d0, double d1, double d2) {
         super(EntityTypes.FIREBALL, entityliving, d0, d1, d2, world);
-        isIncendiary = this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING); // CraftBukkit
+        isIncendiary = this.world.getGameRules().getBoolean("mobGriefing"); // CraftBukkit
     }
 
     @Override
@@ -26,7 +26,7 @@ public class EntityLargeFireball extends EntityFireballFireball {
                 this.a(this.shooter, entity);
             }
 
-            boolean flag = this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING);
+            boolean flag = this.world.getGameRules().getBoolean("mobGriefing");
 
             // CraftBukkit start - fire ExplosionPrimeEvent
             ExplosionPrimeEvent event = new ExplosionPrimeEvent((org.bukkit.entity.Explosive) this.getBukkitEntity());
diff --git a/src/main/java/net/minecraft/server/EntityLightning.java b/src/main/java/net/minecraft/server/EntityLightning.java
index 27bf271b..fbcda86b 100644
--- a/src/main/java/net/minecraft/server/EntityLightning.java
+++ b/src/main/java/net/minecraft/server/EntityLightning.java
@@ -57,7 +57,7 @@ public class EntityLightning extends Entity {
         super.tick();
         if (!isSilent && this.lifeTicks == 2) { // Spigot
             // CraftBukkit start - Use relative location for far away sounds
-            // this.world.playSound((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_LIGHTNING_BOLT_THUNDER, SoundCategory.WEATHER, 10000.0F, 0.8F + this.random.nextFloat() * 0.2F);
+            // this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_LIGHTNING_BOLT_THUNDER, SoundCategory.WEATHER, 10000.0F, 0.8F + this.random.nextFloat() * 0.2F);
             float pitch = 0.8F + this.random.nextFloat() * 0.2F;
             int viewDistance = ((WorldServer) this.world).getServer().getViewDistance() * 16;
             for (EntityPlayer player : (List<EntityPlayer>) (List) this.world.getPlayers()) {
@@ -85,7 +85,7 @@ public class EntityLightning extends Entity {
                 }
             }
             // CraftBukkit end
-            //this.world.playSound((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_LIGHTNING_BOLT_IMPACT, SoundCategory.WEATHER, 2.0F, 0.5F + this.random.nextFloat() * 0.2F); // Paper - Limit lightning strike effect distance (the packet is now sent from inside the loop)
+            //this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_LIGHTNING_BOLT_IMPACT, SoundCategory.WEATHER, 2.0f, 0.5F + this.random.nextFloat() * 0.2F);  // Paper - Limit lightning strike effect distance (the packet is now sent from inside the loop)
         }
 
         --this.lifeTicks;
@@ -123,7 +123,7 @@ public class EntityLightning extends Entity {
     }
 
     private void a(int i) {
-        if (!this.e && !this.world.isClientSide && this.world.getGameRules().getBoolean(GameRules.DO_FIRE_TICK)) {
+        if (!this.e && !this.world.isClientSide && this.world.getGameRules().getBoolean("doFireTick")) {
             IBlockData iblockdata = Blocks.FIRE.getBlockData();
             BlockPosition blockposition = new BlockPosition(this);
 
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 31ab0717..09a58fb2 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -202,7 +202,7 @@ public abstract class EntityLiving extends Entity {
     @Override
     protected void a(double d0, boolean flag, IBlockData iblockdata, BlockPosition blockposition) {
         if (!this.isInWater()) {
-            this.ay();
+            this.ax();
         }
 
         if (!this.world.isClientSide && this.fallDistance > 3.0F && flag) {
@@ -225,8 +225,8 @@ public abstract class EntityLiving extends Entity {
         super.a(d0, flag, iblockdata, blockposition);
     }
 
-    public boolean canBreatheUnderwater() { return this.cm(); } // Paper - OBFHELPER
-    public boolean cm() {
+    public boolean canBreatheUnderwater() { return this.cl(); } // Paper - OBFHELPER
+    public boolean cl() {
         return this.getMonsterType() == EnumMonsterType.UNDEAD;
     }
 
@@ -265,8 +265,8 @@ public abstract class EntityLiving extends Entity {
 
         if (this.isAlive()) {
             if (this.a(TagsFluid.WATER) && this.world.getType(new BlockPosition(this.locX, this.locY + (double) this.getHeadHeight(), this.locZ)).getBlock() != Blocks.BUBBLE_COLUMN) {
-                if (!this.canBreatheUnderwater() && !MobEffectUtil.c(this) && !flag1) {  // Paper - use OBFHELPER so it can be overridden
-                    this.setAirTicks(this.l(this.getAirTicks()));
+                if (!this.canBreatheUnderwater() && !MobEffectUtil.c(this) && !flag1) { // Paper - use OBFHELPER so it can be overridden
+                    this.setAirTicks(this.k(this.getAirTicks()));
                     if (this.getAirTicks() == -20) {
                         this.setAirTicks(0);
                         Vec3D vec3d = this.getMot();
@@ -283,11 +283,11 @@ public abstract class EntityLiving extends Entity {
                     }
                 }
 
-                if (!this.world.isClientSide && this.isPassenger() && this.getVehicle() != null && !this.getVehicle().bf()) {
+                if (!this.world.isClientSide && this.isPassenger() && this.getVehicle() != null && !this.getVehicle().be()) {
                     this.stopRiding();
                 }
-            } else if (this.getAirTicks() < this.bp()) {
-                this.setAirTicks(this.m(this.getAirTicks()));
+            } else if (this.getAirTicks() < this.bo()) {
+                this.setAirTicks(this.l(this.getAirTicks()));
             }
 
             if (!this.world.isClientSide) {
@@ -300,7 +300,7 @@ public abstract class EntityLiving extends Entity {
             }
         }
 
-        if (this.isAlive() && this.au()) {
+        if (this.isAlive() && this.at()) {
             this.extinguish();
         }
 
@@ -313,7 +313,7 @@ public abstract class EntityLiving extends Entity {
         }
 
         if (this.getHealth() <= 0.0F) {
-            this.co();
+            this.cn();
         }
 
         if (this.lastDamageByPlayerTime > 0) {
@@ -347,7 +347,7 @@ public abstract class EntityLiving extends Entity {
     public int getExpReward() {
         int exp = this.getExpValue(this.killer);
 
-        if (!this.world.isClientSide && (this.lastDamageByPlayerTime > 0 || this.alwaysGivesExp()) && this.isDropExperience() && this.world.getGameRules().getBoolean(GameRules.DO_MOB_LOOT)) {
+        if (!this.world.isClientSide && (this.lastDamageByPlayerTime > 0 || this.alwaysGivesExp()) && this.isDropExperience() && this.world.getGameRules().getBoolean("doMobLoot")) {
             return exp;
         } else {
             return 0;
@@ -368,16 +368,16 @@ public abstract class EntityLiving extends Entity {
         return false;
     }
 
-    public float cn() {
+    public float cm() {
         return this.isBaby() ? 0.5F : 1.0F;
     }
 
     @Override
-    public boolean bf() {
+    public boolean be() {
         return false;
     }
 
-    protected void co() {
+    protected void cn() {
         ++this.deathTicks;
         if (this.deathTicks >= 20 && !this.dead) { // CraftBukkit - (this.deathTicks == 20) -> (this.deathTicks >= 20 && !this.dead)
             int i;
@@ -411,14 +411,14 @@ public abstract class EntityLiving extends Entity {
         return !this.isBaby();
     }
 
-    protected int l(int i) {
+    protected int k(int i) {
         int j = EnchantmentManager.getOxygenEnchantmentLevel(this);
 
         return j > 0 && this.random.nextInt(j + 1) > 0 ? i : i - 1;
     }
 
-    protected int m(int i) {
-        return Math.min(i + 4, this.bp());
+    protected int l(int i) {
+        return Math.min(i + 4, this.bo());
     }
 
     protected int getExpValue(EntityHuman entityhuman) {
@@ -438,7 +438,7 @@ public abstract class EntityLiving extends Entity {
         return this.lastDamager;
     }
 
-    public int ct() {
+    public int cs() {
         return this.hurtTimestamp;
     }
 
@@ -448,11 +448,11 @@ public abstract class EntityLiving extends Entity {
     }
 
     @Nullable
-    public EntityLiving cu() {
+    public EntityLiving ct() {
         return this.bB;
     }
 
-    public int cv() {
+    public int cu() {
         return this.bC;
     }
 
@@ -466,11 +466,11 @@ public abstract class EntityLiving extends Entity {
         this.bC = this.ticksLived;
     }
 
-    public int cw() {
+    public int cv() {
         return this.ticksFarFromPlayer;
     }
 
-    public void n(int i) {
+    public void m(int i) {
         this.ticksFarFromPlayer = i;
     }
 
@@ -718,7 +718,7 @@ public abstract class EntityLiving extends Entity {
 
     protected void C() {
         if (this.effects.isEmpty()) {
-            this.cy();
+            this.cx();
             this.setInvisible(false);
         } else {
             Collection<MobEffect> collection = this.effects.values();
@@ -738,7 +738,7 @@ public abstract class EntityLiving extends Entity {
         }
 
         if (this.isInvisible()) {
-            float f = this.cT();
+            float f = this.cS();
 
             if (f < 0.1F) {
                 f = 0.1F;
@@ -784,7 +784,7 @@ public abstract class EntityLiving extends Entity {
         return false;
     }
 
-    protected void cy() {
+    protected void cx() {
         this.datawatcher.set(EntityLiving.f, false);
         this.datawatcher.set(EntityLiving.e, 0);
     }
@@ -823,7 +823,7 @@ public abstract class EntityLiving extends Entity {
         return this.effects.values();
     }
 
-    public Map<MobEffectList, MobEffect> cB() {
+    public Map<MobEffectList, MobEffect> cA() {
         return this.effects;
     }
 
@@ -842,7 +842,7 @@ public abstract class EntityLiving extends Entity {
     }
 
     public boolean addEffect(MobEffect mobeffect, EntityPotionEffectEvent.Cause cause) {
-        org.spigotmc.AsyncCatcher.catchOp("effect add"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp( "effect add"); // Spigot
         if (isTickingEffects) {
             effectsToProcess.add(new ProcessableEffect(mobeffect, cause));
             return true;
@@ -894,7 +894,7 @@ public abstract class EntityLiving extends Entity {
         return true;
     }
 
-    public boolean cC() {
+    public boolean cB() {
         return this.getMonsterType() == EnumMonsterType.UNDEAD;
     }
 
@@ -1190,7 +1190,7 @@ public abstract class EntityLiving extends Entity {
                     //SoundEffect soundeffect = this.getSoundDeath();
 
                     //if (flag1 && soundeffect != null) {
-                    //    this.a(soundeffect, this.getSoundVolume(), this.cV());
+                    //    this.a(soundeffect, this.getSoundVolume(), this.cU());
                     //}
                     this.silentDeath = !flag1; // mark entity as dying silently
                     // Paper end
@@ -1283,7 +1283,7 @@ public abstract class EntityLiving extends Entity {
     }
 
     @Nullable
-    public DamageSource cE() {
+    public DamageSource cD() {
         if (this.world.getTime() - this.bI > 40L) {
             this.bH = null;
         }
@@ -1295,7 +1295,7 @@ public abstract class EntityLiving extends Entity {
         SoundEffect soundeffect = this.getSoundHurt(damagesource);
 
         if (soundeffect != null) {
-            this.a(soundeffect, this.getSoundVolume(), this.cV());
+            this.a(soundeffect, this.getSoundVolume(), this.cU());
         }
 
     }
@@ -1307,7 +1307,7 @@ public abstract class EntityLiving extends Entity {
         if (entity instanceof EntityArrow) {
             EntityArrow entityarrow = (EntityArrow) entity;
 
-            if (entityarrow.getPierceLevel() > 0) {
+            if (entityarrow.s() > 0) {
                 flag = true;
             }
         }
@@ -1334,20 +1334,19 @@ public abstract class EntityLiving extends Entity {
             Entity entity = damagesource.getEntity();
             EntityLiving entityliving = this.getKillingEntity();
 
-            /* // Paper - move down to make death event cancellable
-            if (this.aY >= 0 && entityliving != null) {
-                entityliving.a(this, this.aY, damagesource);
-            }
-
-            if (entity != null) {
-                entity.b(this);
-            }
-
-            if (this.isSleeping()) {
-                this.dy();
-            }
-            */ // Paper
-
+            // Paper start - move down to make death event cancellable
+            //if (this.aY >= 0 && entityliving != null) {
+            //    entityliving.a(this, this.aY, damagesource);
+            //}
+            //
+            //if (entity != null) {
+            //    entity.b(this);
+            //}
+            //
+            //if (this.isSleeping()) {
+            //    this.dy();
+            //}
+            //
             this.killed = true;
             //this.getCombatTracker().g();
             if (!this.world.isClientSide) {
@@ -1372,7 +1371,7 @@ public abstract class EntityLiving extends Entity {
                 boolean flag = false;
 
                 if (entityliving instanceof EntityWither) {
-                    if (this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) {
+                    if (this.world.getGameRules().getBoolean("mobGriefing")) {
                         BlockPosition blockposition = new BlockPosition(this.locX, this.locY, this.locZ);
                         IBlockData iblockdata = Blocks.WITHER_ROSE.getBlockData();
 
@@ -1395,7 +1394,7 @@ public abstract class EntityLiving extends Entity {
         }
     }
 
-    protected org.bukkit.event.entity.EntityDeathEvent processDeath(DamageSource damagesource) { return d(damagesource); } // Paper - OBFHELPER
+    protected org.bukkit.event.entity.EntityDeathEvent processDeath(DamageSource damagesource) { return d(damagesource); }
     protected org.bukkit.event.entity.EntityDeathEvent d(DamageSource damagesource) { // Paper
         Entity entity = damagesource.getEntity();
         int i;
@@ -1407,9 +1406,8 @@ public abstract class EntityLiving extends Entity {
         }
 
         boolean flag = this.lastDamageByPlayerTime > 0;
-
         org.bukkit.event.entity.EntityDeathEvent deathEvent = null; // Paper
-        if (this.isDropExperience() && this.world.getGameRules().getBoolean(GameRules.DO_MOB_LOOT)) {
+        if (this.isDropExperience() && this.world.getGameRules().getBoolean("doMobLoot")) {
             this.a(damagesource, flag);
             this.dropDeathLoot(damagesource, i, flag);
             // CraftBukkit start - Call death event
@@ -1420,20 +1418,20 @@ public abstract class EntityLiving extends Entity {
             // CraftBukkit end
         }
 
-        if (!deathEvent.isCancelled()) this.cF();; // Paper
+        if (!deathEvent.isCancelled()) this.cE(); // Paper
         return deathEvent; // Paper
     }
 
-    protected void cF() {}
+    protected void cE() {}
 
     protected void dropDeathLoot(DamageSource damagesource, int i, boolean flag) {}
 
-    public MinecraftKey cG() {
-        return this.getEntityType().h();
+    public MinecraftKey cF() {
+        return this.getEntityType().g();
     }
 
     protected void a(DamageSource damagesource, boolean flag) {
-        MinecraftKey minecraftkey = this.cG();
+        MinecraftKey minecraftkey = this.cF();
         LootTable loottable = this.world.getMinecraftServer().getLootTableRegistry().getLootTable(minecraftkey);
         LootTableInfo.Builder loottableinfo_builder = this.a(flag, damagesource);
 
@@ -1497,14 +1495,14 @@ public abstract class EntityLiving extends Entity {
         if (this.isSpectator()) {
             return false;
         } else {
-            IBlockData iblockdata = this.cI();
+            IBlockData iblockdata = this.cH();
             Block block = iblockdata.getBlock();
 
             return block != Blocks.LADDER && block != Blocks.VINE && block != Blocks.SCAFFOLDING ? block instanceof BlockTrapdoor && this.b(new BlockPosition(this), iblockdata) : true;
         }
     }
 
-    public IBlockData cI() {
+    public IBlockData cH() {
         return this.world.getType(new BlockPosition(this));
     }
 
@@ -1815,11 +1813,11 @@ public abstract class EntityLiving extends Entity {
     }
 
     @Override
-    protected void af() {
+    protected void ae() {
         this.damageEntity(DamageSource.OUT_OF_WORLD, 4.0F);
     }
 
-    protected void cO() {
+    protected void cN() {
         int i = this.l();
 
         if (this.at) {
@@ -1894,7 +1892,7 @@ public abstract class EntityLiving extends Entity {
 
     public abstract void setSlot(EnumItemSlot enumitemslot, ItemStack itemstack);
 
-    public float cT() {
+    public float cS() {
         Iterable<ItemStack> iterable = this.getArmorItems();
         int i = 0;
         int j = 0;
@@ -1916,11 +1914,11 @@ public abstract class EntityLiving extends Entity {
         AttributeInstance attributeinstance = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED);
 
         if (attributeinstance.a(EntityLiving.b) != null) {
-            attributeinstance.removeModifier(EntityLiving.c);
+            attributeinstance.c(EntityLiving.c);
         }
 
         if (flag) {
-            attributeinstance.addModifier(EntityLiving.c);
+            attributeinstance.b(EntityLiving.c);
         }
 
     }
@@ -1930,8 +1928,8 @@ public abstract class EntityLiving extends Entity {
         return 1.0F;
     }
 
-    public float getSoundPitch() { return cV();} // Paper - OBFHELPER
-    protected float cV() {
+    public float getSoundPitch() { return cU();} // Paper - OBFHELPER
+    protected float cU() {
         return this.isBaby() ? (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.5F : (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F;
     }
 
@@ -2030,7 +2028,7 @@ public abstract class EntityLiving extends Entity {
         }
     }
 
-    protected float cX() {
+    protected float cW() {
         return 0.42F;
     }
 
@@ -2038,9 +2036,9 @@ public abstract class EntityLiving extends Entity {
         float f;
 
         if (this.hasEffect(MobEffects.JUMP)) {
-            f = this.cX() + 0.1F * (float) (this.getEffect(MobEffects.JUMP).getAmplifier() + 1);
+            f = this.cW() + 0.1F * (float) (this.getEffect(MobEffects.JUMP).getAmplifier() + 1);
         } else {
-            f = this.cX();
+            f = this.cW();
         }
 
         Vec3D vec3d = this.getMot();
@@ -2059,7 +2057,7 @@ public abstract class EntityLiving extends Entity {
         this.setMot(this.getMot().add(0.0D, 0.03999999910593033D, 0.0D));
     }
 
-    protected float da() {
+    protected float cZ() {
         return 0.8F;
     }
 
@@ -2067,7 +2065,7 @@ public abstract class EntityLiving extends Entity {
         double d0;
         float f;
 
-        if (this.df() || this.ca()) {
+        if (this.de() || this.bZ()) {
             d0 = 0.08D;
             boolean flag = this.getMot().y <= 0.0D;
 
@@ -2082,7 +2080,7 @@ public abstract class EntityLiving extends Entity {
 
             if (this.isInWater() && (!(this instanceof EntityHuman) || !((EntityHuman) this).abilities.isFlying)) {
                 d1 = this.locY;
-                f1 = this.isSprinting() ? 0.9F : this.da();
+                f1 = this.isSprinting() ? 0.9F : this.cZ();
                 f = 0.02F;
                 float f2 = (float) EnchantmentManager.e(this);
 
@@ -2096,7 +2094,7 @@ public abstract class EntityLiving extends Entity {
 
                 if (f2 > 0.0F) {
                     f1 += (0.54600006F - f1) * f2 / 3.0F;
-                    f += (this.db() - f) * f2 / 3.0F;
+                    f += (this.da() - f) * f2 / 3.0F;
                 }
 
                 if (this.hasEffect(MobEffects.DOLPHINS_GRACE)) {
@@ -2129,7 +2127,7 @@ public abstract class EntityLiving extends Entity {
                 if (this.positionChanged && this.d(vec3d2.x, vec3d2.y + 0.6000000238418579D - this.locY + d1, vec3d2.z)) {
                     this.setMot(vec3d2.x, 0.30000001192092896D, vec3d2.z);
                 }
-            } else if (this.aD() && (!(this instanceof EntityHuman) || !((EntityHuman) this).abilities.isFlying)) {
+            } else if (this.aC() && (!(this instanceof EntityHuman) || !((EntityHuman) this).abilities.isFlying)) {
                 d1 = this.locY;
                 this.a(0.02F, vec3d);
                 this.move(EnumMoveType.SELF, this.getMot());
@@ -2249,7 +2247,7 @@ public abstract class EntityLiving extends Entity {
             double d1 = MathHelper.a(vec3d.z, -0.15000000596046448D, 0.15000000596046448D);
             double d2 = Math.max(vec3d.y, -0.15000000596046448D);
 
-            if (d2 < 0.0D && this.cI().getBlock() != Blocks.SCAFFOLDING && this.isSneaking() && this instanceof EntityHuman) {
+            if (d2 < 0.0D && this.cH().getBlock() != Blocks.SCAFFOLDING && this.isSneaking() && this instanceof EntityHuman) {
                 d2 = 0.0D;
             }
 
@@ -2260,10 +2258,10 @@ public abstract class EntityLiving extends Entity {
     }
 
     private float r(float f) {
-        return this.onGround ? this.db() * (0.21600002F / (f * f * f)) : this.aO;
+        return this.onGround ? this.da() * (0.21600002F / (f * f * f)) : this.aO;
     }
 
-    public float db() {
+    public float da() {
         return this.bD;
     }
 
@@ -2279,8 +2277,8 @@ public abstract class EntityLiving extends Entity {
     @Override
     public void tick() {
         super.tick();
+        this.dk();
         this.o();
-        this.p();
         if (!this.world.isClientSide) {
             int i = this.getArrowCount();
 
@@ -2309,7 +2307,7 @@ public abstract class EntityLiving extends Entity {
                 }
             }
 
-            if (this.isSleeping() && !this.r()) {
+            if (this.isSleeping() && !this.p()) {
                 this.dy();
             }
         }
@@ -2479,7 +2477,7 @@ public abstract class EntityLiving extends Entity {
             --this.jumpTicks;
         }
 
-        if (this.bf > 0 && !this.ca()) {
+        if (this.bf > 0 && !this.bZ()) {
             double d0 = this.locX + (this.bg - this.locX) / (double) this.bf;
             double d1 = this.locY + (this.bh - this.locY) / (double) this.bf;
             double d2 = this.locZ + (this.bi - this.locZ) / (double) this.bf;
@@ -2490,7 +2488,7 @@ public abstract class EntityLiving extends Entity {
             --this.bf;
             this.setPosition(d0, d1, d2);
             this.setYawPitch(this.yaw, this.pitch);
-        } else if (!this.df()) {
+        } else if (!this.de()) {
             this.setMot(this.getMot().a(0.98D));
         }
 
@@ -2523,7 +2521,7 @@ public abstract class EntityLiving extends Entity {
             this.bb = 0.0F;
             this.bd = 0.0F;
             this.be = 0.0F;
-        } else if (this.df()) {
+        } else if (this.de()) {
             this.world.getMethodProfiler().enter("newAi");
             this.doTick();
             this.world.getMethodProfiler().exit();
@@ -2534,7 +2532,7 @@ public abstract class EntityLiving extends Entity {
         if (this.jumping) {
             if (this.Q > 0.0D && (!this.onGround || this.Q > 0.4D)) {
                 this.c(TagsFluid.WATER);
-            } else if (this.aD()) {
+            } else if (this.aC()) {
                 this.c(TagsFluid.LAVA);
             } else if ((this.onGround || this.Q > 0.0D && this.Q <= 0.4D) && this.jumpTicks == 0) {
                 this.jump();
@@ -2597,7 +2595,7 @@ public abstract class EntityLiving extends Entity {
         List<Entity> list = this.world.getEntities(this, this.getBoundingBox(), IEntitySelector.a(this));
 
         if (!list.isEmpty()) {
-            int i = this.world.getGameRules().getInt(GameRules.MAX_ENTITY_CRAMMING);
+            int i = this.world.getGameRules().c("maxEntityCramming");
             int j;
 
             if (i > 0 && list.size() > i - 1 && this.random.nextInt(4) == 0) {
@@ -2657,7 +2655,7 @@ public abstract class EntityLiving extends Entity {
 
     protected void f(EntityLiving entityliving) {}
 
-    public void q(int i) {
+    public void p(int i) {
         this.bq = i;
         if (!this.world.isClientSide) {
             this.c(4, true);
@@ -2713,7 +2711,7 @@ public abstract class EntityLiving extends Entity {
         return f == 1.0F ? this.aM : MathHelper.g(f, this.aN, this.aM);
     }
 
-    public boolean df() {
+    public boolean de() {
         return !this.world.isClientSide;
     }
 
@@ -2763,7 +2761,7 @@ public abstract class EntityLiving extends Entity {
 
     public void exitCombat() {}
 
-    protected void dh() {
+    protected void dg() {
         this.updateEffects = true;
     }
 
@@ -2777,9 +2775,9 @@ public abstract class EntityLiving extends Entity {
         return ((Byte) this.datawatcher.get(EntityLiving.ar) & 2) > 0 ? EnumHand.OFF_HAND : EnumHand.MAIN_HAND;
     }
 
-    private void o() {
+    protected void dk() {
         if (this.isHandRaised()) {
-            if (ItemStack.d(this.b(this.getRaisedHand()), this.activeItem)) {
+            if (this.b(this.getRaisedHand()) == this.activeItem) {
                 this.activeItem.b(this.world, this, this.dm());
                 if (this.dm() <= 25 && this.dm() % 4 == 0) {
                     this.b(this.activeItem, 5);
@@ -2795,9 +2793,9 @@ public abstract class EntityLiving extends Entity {
 
     }
 
-    private void p() {
+    private void o() {
         this.bK = this.bJ;
-        if (this.bk()) {
+        if (this.bj()) {
             this.bJ = Math.min(1.0F, this.bJ + 0.09F);
         } else {
             this.bJ = Math.max(0.0F, this.bJ - 0.09F);
@@ -2937,12 +2935,12 @@ public abstract class EntityLiving extends Entity {
         return this.activeItem;
     }
 
-    public int getItemUseRemainingTime() { return this.dm(); } // Paper - OBFHELPER
+    public int getItemUseRemainingTime() { return dm(); } // Paper - OBFHELPER
     public int dm() {
         return this.bo;
     }
 
-    public int getHandRaisedTime() { return this.dn(); } // Paper - OBFHELPER
+    public int getHandRaisedTime() { return dn(); } // Paper - OBFHELPER
     public int dn() {
         return this.isHandRaised() ? this.activeItem.k() - this.dm() : 0;
     }
@@ -2951,7 +2949,7 @@ public abstract class EntityLiving extends Entity {
         if (!this.activeItem.isEmpty()) {
             this.activeItem.a(this.world, this, this.dm());
             if (this.activeItem.m()) {
-                this.o();
+                this.dk();
             }
         }
 
@@ -2982,8 +2980,8 @@ public abstract class EntityLiving extends Entity {
     }
 
     @Override
-    public boolean bk() {
-        return super.bk() || !this.isGliding() && this.getPose() == EntityPose.FALL_FLYING;
+    public boolean bj() {
+        return super.bj() || !this.isGliding() && this.getPose() == EntityPose.FALL_FLYING;
     }
 
     public boolean a(double d0, double d1, double d2, boolean flag) {
@@ -3064,7 +3062,7 @@ public abstract class EntityLiving extends Entity {
 
     @Override
     public EntitySize a(EntityPose entitypose) {
-        return entitypose == EntityPose.SLEEPING ? EntityLiving.as : super.a(entitypose).a(this.cn());
+        return entitypose == EntityPose.SLEEPING ? EntityLiving.as : super.a(entitypose).a(this.cm());
     }
 
     public Optional<BlockPosition> getBedPosition() {
@@ -3105,7 +3103,7 @@ public abstract class EntityLiving extends Entity {
         this.setPosition((double) blockposition.getX() + 0.5D, (double) ((float) blockposition.getY() + 0.6875F), (double) blockposition.getZ() + 0.5D);
     }
 
-    private boolean r() {
+    private boolean p() {
         return (Boolean) this.getBedPosition().map((blockposition) -> {
             return this.world.getType(blockposition).getBlock() instanceof BlockBed;
         }).orElse(false);
@@ -3155,7 +3153,7 @@ public abstract class EntityLiving extends Entity {
 
     public ItemStack a(World world, ItemStack itemstack) {
         if (itemstack.E()) {
-            world.playSound((EntityHuman) null, this.locX, this.locY, this.locZ, this.d(itemstack), SoundCategory.NEUTRAL, 1.0F, 1.0F + (world.random.nextFloat() - world.random.nextFloat()) * 0.4F);
+            world.a((EntityHuman) null, this.locX, this.locY, this.locZ, this.d(itemstack), SoundCategory.NEUTRAL, 1.0F, 1.0F + (world.random.nextFloat() - world.random.nextFloat()) * 0.4F);
             this.a(itemstack, world, this);
             itemstack.subtract(1);
         }
diff --git a/src/main/java/net/minecraft/server/EntityLlamaSpit.java b/src/main/java/net/minecraft/server/EntityLlamaSpit.java
index 6c4ebd64..f9909e20 100644
--- a/src/main/java/net/minecraft/server/EntityLlamaSpit.java
+++ b/src/main/java/net/minecraft/server/EntityLlamaSpit.java
@@ -65,7 +65,7 @@ public class EntityLlamaSpit extends Entity implements IProjectile {
 
         if (!this.world.a(this.getBoundingBox(), Material.AIR)) {
             this.die();
-        } else if (this.av()) {
+        } else if (this.au()) {
             this.die();
         } else {
             this.setMot(vec3d.a(0.9900000095367432D));
diff --git a/src/main/java/net/minecraft/server/EntityLlamaTrader.java b/src/main/java/net/minecraft/server/EntityLlamaTrader.java
index b60a167f..b22221e3 100644
--- a/src/main/java/net/minecraft/server/EntityLlamaTrader.java
+++ b/src/main/java/net/minecraft/server/EntityLlamaTrader.java
@@ -5,7 +5,7 @@ import javax.annotation.Nullable;
 
 public class EntityLlamaTrader extends EntityLlama {
 
-    private int bI = 47999;
+    private int bJ;
 
     public EntityLlamaTrader(EntityTypes<? extends EntityLlamaTrader> entitytypes, World world) {
         super(entitytypes, world);
@@ -19,14 +19,14 @@ public class EntityLlamaTrader extends EntityLlama {
     @Override
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
-        nbttagcompound.setInt("DespawnDelay", this.bI);
+        nbttagcompound.setInt("DespawnDelay", this.bJ);
     }
 
     @Override
     public void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
         if (nbttagcompound.hasKeyOfType("DespawnDelay", 99)) {
-            this.bI = nbttagcompound.getInt("DespawnDelay");
+            this.bJ = nbttagcompound.getInt("DespawnDelay");
         }
 
     }
@@ -58,8 +58,8 @@ public class EntityLlamaTrader extends EntityLlama {
 
     private void eK() {
         if (this.eL()) {
-            this.bI = this.eM() ? ((EntityVillagerTrader) this.getLeashHolder()).ef() - 1 : this.bI - 1;
-            if (this.bI <= 0) {
+            this.bJ = this.eM() ? ((EntityVillagerTrader) this.getLeashHolder()).eg() - 1 : this.bJ - 1;
+            if (this.bJ <= 0) {
                 this.unleash(true, false);
                 this.die();
             }
@@ -88,6 +88,7 @@ public class EntityLlamaTrader extends EntityLlama {
             this.setAgeRaw(0);
         }
 
+        this.bJ = 47999;
         return groupdataentity1;
     }
 
@@ -116,7 +117,7 @@ public class EntityLlamaTrader extends EntityLlama {
                     EntityVillagerTrader entityvillagertrader = (EntityVillagerTrader) entity;
 
                     this.c = entityvillagertrader.getLastDamager();
-                    int i = entityvillagertrader.ct();
+                    int i = entityvillagertrader.cs();
 
                     return i != this.d && this.a(this.c, PathfinderTargetCondition.a);
                 }
@@ -129,7 +130,7 @@ public class EntityLlamaTrader extends EntityLlama {
             Entity entity = this.b.getLeashHolder();
 
             if (entity instanceof EntityVillagerTrader) {
-                this.d = ((EntityVillagerTrader) entity).ct();
+                this.d = ((EntityVillagerTrader) entity).cs();
             }
 
             super.c();
diff --git a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
index 6df2930e..3a3ed039 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
@@ -86,7 +86,7 @@ public abstract class EntityMinecartAbstract extends Entity {
     }
 
     @Override
-    public double aP() {
+    public double aO() {
         return 0.0D;
     }
 
@@ -142,7 +142,7 @@ public abstract class EntityMinecartAbstract extends Entity {
 
     public void a(DamageSource damagesource) {
         this.die();
-        if (this.world.getGameRules().getBoolean(GameRules.DO_ENTITY_DROPS)) {
+        if (this.world.getGameRules().getBoolean("doEntityDrops")) {
             ItemStack itemstack = new ItemStack(Items.MINECART);
 
             if (this.hasCustomName()) {
@@ -186,7 +186,7 @@ public abstract class EntityMinecartAbstract extends Entity {
         // Extracted to own function
         /*
         if (this.locY < -64.0D) {
-            this.af();
+            this.ae();
         }
         */
         this.performVoidDamage();
@@ -320,7 +320,7 @@ public abstract class EntityMinecartAbstract extends Entity {
                 }
             }
 
-            this.ay();
+            this.ax();
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityMinecartCommandBlock.java b/src/main/java/net/minecraft/server/EntityMinecartCommandBlock.java
index 9ef7eade..0b92d571 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartCommandBlock.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartCommandBlock.java
@@ -81,7 +81,7 @@ public class EntityMinecartCommandBlock extends EntityMinecartAbstract {
     }
 
     @Override
-    public boolean bT() {
+    public boolean bS() {
         return true;
     }
 
@@ -102,7 +102,7 @@ public class EntityMinecartCommandBlock extends EntityMinecartAbstract {
 
         @Override
         public CommandListenerWrapper getWrapper() {
-            return new CommandListenerWrapper(this, new Vec3D(EntityMinecartCommandBlock.this.locX, EntityMinecartCommandBlock.this.locY, EntityMinecartCommandBlock.this.locZ), EntityMinecartCommandBlock.this.aU(), this.d(), 2, this.getName().getString(), EntityMinecartCommandBlock.this.getScoreboardDisplayName(), this.d().getMinecraftServer(), EntityMinecartCommandBlock.this);
+            return new CommandListenerWrapper(this, new Vec3D(EntityMinecartCommandBlock.this.locX, EntityMinecartCommandBlock.this.locY, EntityMinecartCommandBlock.this.locZ), EntityMinecartCommandBlock.this.aT(), this.d(), 2, this.getName().getString(), EntityMinecartCommandBlock.this.getScoreboardDisplayName(), this.d().getMinecraftServer(), EntityMinecartCommandBlock.this);
         }
 
         // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/EntityMinecartContainer.java b/src/main/java/net/minecraft/server/EntityMinecartContainer.java
index 8e6e7ed6..b84a70ed 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartContainer.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartContainer.java
@@ -75,7 +75,7 @@ public abstract class EntityMinecartContainer extends EntityMinecartAbstract imp
     @Override
     public void a(DamageSource damagesource) {
         super.a(damagesource);
-        if (this.world.getGameRules().getBoolean(GameRules.DO_ENTITY_DROPS)) {
+        if (this.world.getGameRules().getBoolean("doEntityDrops")) {
             InventoryUtils.dropEntity(this.world, this, this);
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityMonster.java b/src/main/java/net/minecraft/server/EntityMonster.java
index e0609e7e..76142d5d 100644
--- a/src/main/java/net/minecraft/server/EntityMonster.java
+++ b/src/main/java/net/minecraft/server/EntityMonster.java
@@ -1,6 +1,5 @@
 package net.minecraft.server;
 
-import java.util.Random;
 import java.util.function.Predicate;
 
 public abstract class EntityMonster extends EntityCreature implements IMonster {
@@ -18,13 +17,13 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
 
     @Override
     public void movementTick() {
-        this.cO();
-        this.eb();
+        this.cN();
+        this.ec();
         super.movementTick();
     }
 
-    protected void eb() {
-        float f = this.aF();
+    protected void ec() {
+        float f = this.aE();
 
         if (f > 0.5F) {
             this.ticksFarFromPlayer += 2;
@@ -73,25 +72,24 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
 
     @Override
     public float a(BlockPosition blockposition, IWorldReader iworldreader) {
-        return 0.5F - iworldreader.v(blockposition);
+        return 0.5F - iworldreader.w(blockposition);
     }
 
-    public static boolean a(GeneratorAccess generatoraccess, BlockPosition blockposition, Random random) {
-        if (generatoraccess.getBrightness(EnumSkyBlock.SKY, blockposition) > random.nextInt(32)) {
+    protected boolean I_() {
+        BlockPosition blockposition = new BlockPosition(this.locX, this.getBoundingBox().minY, this.locZ);
+
+        if (this.world.getBrightness(EnumSkyBlock.SKY, blockposition) > this.random.nextInt(32)) {
             return false;
         } else {
-            int i = generatoraccess.getMinecraftWorld().U() ? generatoraccess.d(blockposition, 10) : generatoraccess.getLightLevel(blockposition);
+            int i = this.world.U() ? this.world.d(blockposition, 10) : this.world.getLightLevel(blockposition);
 
-            return i <= random.nextInt(8);
+            return i <= this.random.nextInt(8);
         }
     }
 
-    public static boolean c(EntityTypes<? extends EntityMonster> entitytypes, GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition, Random random) {
-        return generatoraccess.getDifficulty() != EnumDifficulty.PEACEFUL && a(generatoraccess, blockposition, random) && a(entitytypes, generatoraccess, enummobspawn, blockposition, random);
-    }
-
-    public static boolean d(EntityTypes<? extends EntityMonster> entitytypes, GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition, Random random) {
-        return generatoraccess.getDifficulty() != EnumDifficulty.PEACEFUL && a(entitytypes, generatoraccess, enummobspawn, blockposition, random);
+    @Override
+    public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
+        return generatoraccess.getDifficulty() != EnumDifficulty.PEACEFUL && this.I_() && super.a(generatoraccess, enummobspawn);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/EntityMushroomCow.java b/src/main/java/net/minecraft/server/EntityMushroomCow.java
index 1363069f..de787d86 100644
--- a/src/main/java/net/minecraft/server/EntityMushroomCow.java
+++ b/src/main/java/net/minecraft/server/EntityMushroomCow.java
@@ -1,6 +1,5 @@
 package net.minecraft.server;
 
-import java.util.Random;
 import java.util.UUID;
 import org.apache.commons.lang3.tuple.Pair;
 // CraftBukkit start
@@ -14,28 +13,20 @@ public class EntityMushroomCow extends EntityCow {
     private static final DataWatcherObject<String> bz = DataWatcher.a(EntityMushroomCow.class, DataWatcherRegistry.d);
     private MobEffectList bA;
     private int bB;
-    private UUID bC;
+    private UUID bD;
 
     public EntityMushroomCow(EntityTypes<? extends EntityMushroomCow> entitytypes, World world) {
         super(entitytypes, world);
-    }
-
-    @Override
-    public float a(BlockPosition blockposition, IWorldReader iworldreader) {
-        return iworldreader.getType(blockposition.down()).getBlock() == Blocks.MYCELIUM ? 10.0F : iworldreader.v(blockposition) - 0.5F;
-    }
-
-    public static boolean c(EntityTypes<EntityMushroomCow> entitytypes, GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition, Random random) {
-        return generatoraccess.getType(blockposition.down()).getBlock() == Blocks.MYCELIUM && generatoraccess.getLightLevel(blockposition, 0) > 8;
+        this.bC = Blocks.MYCELIUM;
     }
 
     @Override
     public void onLightningStrike(EntityLightning entitylightning) {
         UUID uuid = entitylightning.getUniqueID();
 
-        if (!uuid.equals(this.bC)) {
+        if (!uuid.equals(this.bD)) {
             this.setVariant(this.getVariant() == EntityMushroomCow.Type.RED ? EntityMushroomCow.Type.BROWN : EntityMushroomCow.Type.RED);
-            this.bC = uuid;
+            this.bD = uuid;
             this.a(SoundEffects.ENTITY_MOOSHROOM_CONVERT, 2.0F, 1.0F);
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityOcelot.java b/src/main/java/net/minecraft/server/EntityOcelot.java
index edc5f696..1713bead 100644
--- a/src/main/java/net/minecraft/server/EntityOcelot.java
+++ b/src/main/java/net/minecraft/server/EntityOcelot.java
@@ -1,6 +1,5 @@
 package net.minecraft.server;
 
-import java.util.Random;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 
@@ -9,7 +8,7 @@ public class EntityOcelot extends EntityAnimal {
     private static final RecipeItemStack bz = RecipeItemStack.a(Items.COD, Items.SALMON);
     private static final DataWatcherObject<Boolean> bA = DataWatcher.a(EntityOcelot.class, DataWatcherRegistry.i);
     private EntityOcelot.a<EntityHuman> bB;
-    private EntityOcelot.b bC;
+    private EntityOcelot.b bD;
     public boolean spawnBonus = true; // Spigot
 
     public EntityOcelot(EntityTypes<? extends EntityOcelot> entitytypes, World world) {
@@ -46,9 +45,9 @@ public class EntityOcelot extends EntityAnimal {
 
     @Override
     protected void initPathfinder() {
-        this.bC = new EntityOcelot.b(this, 0.6D, EntityOcelot.bz, true);
+        this.bD = new EntityOcelot.b(this, 0.6D, EntityOcelot.bz, true);
         this.goalSelector.a(1, new PathfinderGoalFloat(this));
-        this.goalSelector.a(3, this.bC);
+        this.goalSelector.a(3, this.bD);
         this.goalSelector.a(7, new PathfinderGoalLeapAtTarget(this, 0.3F));
         this.goalSelector.a(8, new PathfinderGoalOcelotAttack(this));
         this.goalSelector.a(9, new PathfinderGoalBreed(this, 0.8D));
@@ -130,7 +129,7 @@ public class EntityOcelot extends EntityAnimal {
     public boolean a(EntityHuman entityhuman, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
-        if ((this.bC == null || this.bC.h()) && !this.isTrusting() && this.i(itemstack) && entityhuman.h((Entity) this) < 9.0D) {
+        if ((this.bD == null || this.bD.h()) && !this.isTrusting() && this.i(itemstack) && entityhuman.h((Entity) this) < 9.0D) {
             this.a(entityhuman, itemstack);
             if (!this.world.isClientSide) {
                 // CraftBukkit - added event call and isCancelled check
@@ -189,8 +188,9 @@ public class EntityOcelot extends EntityAnimal {
         return EntityOcelot.bz.test(itemstack);
     }
 
-    public static boolean c(EntityTypes<EntityOcelot> entitytypes, GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition, Random random) {
-        return random.nextInt(3) != 0;
+    @Override
+    public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
+        return this.random.nextInt(3) != 0;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/EntityPainting.java b/src/main/java/net/minecraft/server/EntityPainting.java
index fe2beede..4a21da5b 100644
--- a/src/main/java/net/minecraft/server/EntityPainting.java
+++ b/src/main/java/net/minecraft/server/EntityPainting.java
@@ -69,17 +69,17 @@ public class EntityPainting extends EntityHanging {
 
     @Override
     public int getHangingWidth() {
-        return this.art == null ? 1 : this.art.getWidth();
+        return this.art.getWidth();
     }
 
     @Override
     public int getHangingHeight() {
-        return this.art == null ? 1 : this.art.getHeight();
+        return this.art.getHeight();
     }
 
     @Override
     public void a(@Nullable Entity entity) {
-        if (this.world.getGameRules().getBoolean(GameRules.DO_ENTITY_DROPS)) {
+        if (this.world.getGameRules().getBoolean("doEntityDrops")) {
             this.a(SoundEffects.ENTITY_PAINTING_BREAK, 1.0F, 1.0F);
             if (entity instanceof EntityHuman) {
                 EntityHuman entityhuman = (EntityHuman) entity;
diff --git a/src/main/java/net/minecraft/server/EntityPanda.java b/src/main/java/net/minecraft/server/EntityPanda.java
index 479ef6b9..b46ca388 100644
--- a/src/main/java/net/minecraft/server/EntityPanda.java
+++ b/src/main/java/net/minecraft/server/EntityPanda.java
@@ -15,20 +15,20 @@ public class EntityPanda extends EntityAnimal {
 
     private static final DataWatcherObject<Integer> bA = DataWatcher.a(EntityPanda.class, DataWatcherRegistry.b);
     private static final DataWatcherObject<Integer> bB = DataWatcher.a(EntityPanda.class, DataWatcherRegistry.b);
-    private static final DataWatcherObject<Integer> bC = DataWatcher.a(EntityPanda.class, DataWatcherRegistry.b);
-    private static final DataWatcherObject<Byte> bD = DataWatcher.a(EntityPanda.class, DataWatcherRegistry.a);
+    private static final DataWatcherObject<Integer> bD = DataWatcher.a(EntityPanda.class, DataWatcherRegistry.b);
     private static final DataWatcherObject<Byte> bE = DataWatcher.a(EntityPanda.class, DataWatcherRegistry.a);
     private static final DataWatcherObject<Byte> bF = DataWatcher.a(EntityPanda.class, DataWatcherRegistry.a);
-    private boolean bG;
+    private static final DataWatcherObject<Byte> bG = DataWatcher.a(EntityPanda.class, DataWatcherRegistry.a);
     private boolean bH;
+    private boolean bI;
     public int bz;
-    private Vec3D bI;
-    private float bJ;
+    private Vec3D bJ;
     private float bK;
     private float bL;
     private float bM;
     private float bN;
     private float bO;
+    private float bP;
     private static final Predicate<EntityItem> PICKUP_PREDICATE = (entityitem) -> {
         Item item = entityitem.getItemStack().getItem();
 
@@ -55,16 +55,16 @@ public class EntityPanda extends EntityAnimal {
         return (Integer) this.datawatcher.get(EntityPanda.bA);
     }
 
-    public void s(int i) {
+    public void r(int i) {
         this.datawatcher.set(EntityPanda.bA, i);
     }
 
     public boolean dW() {
-        return this.v(2);
+        return this.u(2);
     }
 
     public boolean dX() {
-        return this.v(8);
+        return this.u(8);
     }
 
     public void r(boolean flag) {
@@ -72,7 +72,7 @@ public class EntityPanda extends EntityAnimal {
     }
 
     public boolean dY() {
-        return this.v(16);
+        return this.u(16);
     }
 
     public void s(boolean flag) {
@@ -80,25 +80,25 @@ public class EntityPanda extends EntityAnimal {
     }
 
     public boolean dZ() {
-        return (Integer) this.datawatcher.get(EntityPanda.bC) > 0;
+        return (Integer) this.datawatcher.get(EntityPanda.bD) > 0;
     }
 
     public void t(boolean flag) {
-        this.datawatcher.set(EntityPanda.bC, flag ? 1 : 0);
+        this.datawatcher.set(EntityPanda.bD, flag ? 1 : 0);
     }
 
     private int es() {
-        return (Integer) this.datawatcher.get(EntityPanda.bC);
+        return (Integer) this.datawatcher.get(EntityPanda.bD);
     }
 
-    private void u(int i) {
-        this.datawatcher.set(EntityPanda.bC, i);
+    private void t(int i) {
+        this.datawatcher.set(EntityPanda.bD, i);
     }
 
     public void u(boolean flag) {
         this.d(2, flag);
         if (!flag) {
-            this.t(0);
+            this.s(0);
         }
 
     }
@@ -107,12 +107,12 @@ public class EntityPanda extends EntityAnimal {
         return (Integer) this.datawatcher.get(EntityPanda.bB);
     }
 
-    public void t(int i) {
+    public void s(int i) {
         this.datawatcher.set(EntityPanda.bB, i);
     }
 
     public EntityPanda.Gene getMainGene() {
-        return EntityPanda.Gene.a((Byte) this.datawatcher.get(EntityPanda.bD));
+        return EntityPanda.Gene.a((Byte) this.datawatcher.get(EntityPanda.bE));
     }
 
     public void setMainGene(EntityPanda.Gene entitypanda_gene) {
@@ -120,11 +120,11 @@ public class EntityPanda extends EntityAnimal {
             entitypanda_gene = EntityPanda.Gene.a(this.random);
         }
 
-        this.datawatcher.set(EntityPanda.bD, (byte) entitypanda_gene.a());
+        this.datawatcher.set(EntityPanda.bE, (byte) entitypanda_gene.a());
     }
 
     public EntityPanda.Gene getHiddenGene() {
-        return EntityPanda.Gene.a((Byte) this.datawatcher.get(EntityPanda.bE));
+        return EntityPanda.Gene.a((Byte) this.datawatcher.get(EntityPanda.bF));
     }
 
     public void setHiddenGene(EntityPanda.Gene entitypanda_gene) {
@@ -132,11 +132,11 @@ public class EntityPanda extends EntityAnimal {
             entitypanda_gene = EntityPanda.Gene.a(this.random);
         }
 
-        this.datawatcher.set(EntityPanda.bE, (byte) entitypanda_gene.a());
+        this.datawatcher.set(EntityPanda.bF, (byte) entitypanda_gene.a());
     }
 
     public boolean eh() {
-        return this.v(4);
+        return this.u(4);
     }
 
     public void v(boolean flag) {
@@ -148,23 +148,23 @@ public class EntityPanda extends EntityAnimal {
         super.initDatawatcher();
         this.datawatcher.register(EntityPanda.bA, 0);
         this.datawatcher.register(EntityPanda.bB, 0);
-        this.datawatcher.register(EntityPanda.bD, (byte) 0);
         this.datawatcher.register(EntityPanda.bE, (byte) 0);
         this.datawatcher.register(EntityPanda.bF, (byte) 0);
-        this.datawatcher.register(EntityPanda.bC, 0);
+        this.datawatcher.register(EntityPanda.bG, (byte) 0);
+        this.datawatcher.register(EntityPanda.bD, 0);
     }
 
-    private boolean v(int i) {
-        return ((Byte) this.datawatcher.get(EntityPanda.bF) & i) != 0;
+    private boolean u(int i) {
+        return ((Byte) this.datawatcher.get(EntityPanda.bG) & i) != 0;
     }
 
     private void d(int i, boolean flag) {
-        byte b0 = (Byte) this.datawatcher.get(EntityPanda.bF);
+        byte b0 = (Byte) this.datawatcher.get(EntityPanda.bG);
 
         if (flag) {
-            this.datawatcher.set(EntityPanda.bF, (byte) (b0 | i));
+            this.datawatcher.set(EntityPanda.bG, (byte) (b0 | i));
         } else {
-            this.datawatcher.set(EntityPanda.bF, (byte) (b0 & ~i));
+            this.datawatcher.set(EntityPanda.bG, (byte) (b0 & ~i));
         }
 
     }
@@ -257,7 +257,7 @@ public class EntityPanda extends EntityAnimal {
     public boolean C(Entity entity) {
         this.a(SoundEffects.ENTITY_PANDA_BITE, 1.0F, 1.0F);
         if (!this.dR()) {
-            this.bH = true;
+            this.bI = true;
         }
 
         return super.C(entity);
@@ -276,8 +276,8 @@ public class EntityPanda extends EntityAnimal {
         }
 
         if (this.getGoalTarget() == null) {
-            this.bG = false;
             this.bH = false;
+            this.bI = false;
         }
 
         if (this.dV() > 0) {
@@ -289,11 +289,11 @@ public class EntityPanda extends EntityAnimal {
                 this.a(SoundEffects.ENTITY_PANDA_CANT_BREED, 1.0F, 1.0F);
             }
 
-            this.s(this.dV() - 1);
+            this.r(this.dV() - 1);
         }
 
         if (this.dW()) {
-            this.t(this.ee() + 1);
+            this.s(this.ee() + 1);
             if (this.ee() > 20) {
                 this.u(false);
                 this.ez();
@@ -344,7 +344,7 @@ public class EntityPanda extends EntityAnimal {
                 return;
             }
 
-            this.u(this.es() + 1);
+            this.t(this.es() + 1);
         }
 
     }
@@ -370,31 +370,31 @@ public class EntityPanda extends EntityAnimal {
     }
 
     private void ev() {
-        this.bK = this.bJ;
+        this.bL = this.bK;
         if (this.dX()) {
-            this.bJ = Math.min(1.0F, this.bJ + 0.15F);
+            this.bK = Math.min(1.0F, this.bK + 0.15F);
         } else {
-            this.bJ = Math.max(0.0F, this.bJ - 0.19F);
+            this.bK = Math.max(0.0F, this.bK - 0.19F);
         }
 
     }
 
     private void ew() {
-        this.bM = this.bL;
+        this.bN = this.bM;
         if (this.dY()) {
-            this.bL = Math.min(1.0F, this.bL + 0.15F);
+            this.bM = Math.min(1.0F, this.bM + 0.15F);
         } else {
-            this.bL = Math.max(0.0F, this.bL - 0.19F);
+            this.bM = Math.max(0.0F, this.bM - 0.19F);
         }
 
     }
 
     private void ex() {
-        this.bO = this.bN;
+        this.bP = this.bO;
         if (this.eh()) {
-            this.bN = Math.min(1.0F, this.bN + 0.15F);
+            this.bO = Math.min(1.0F, this.bO + 0.15F);
         } else {
-            this.bN = Math.max(0.0F, this.bN - 0.19F);
+            this.bO = Math.max(0.0F, this.bO - 0.19F);
         }
 
     }
@@ -411,10 +411,10 @@ public class EntityPanda extends EntityAnimal {
                     float f = this.yaw * 0.017453292F;
                     float f1 = this.isBaby() ? 0.1F : 0.2F;
 
-                    this.bI = new Vec3D(vec3d.x + (double) (-MathHelper.sin(f) * f1), 0.0D, vec3d.z + (double) (MathHelper.cos(f) * f1));
-                    this.setMot(this.bI.add(0.0D, 0.27D, 0.0D));
+                    this.bJ = new Vec3D(vec3d.x + (double) (-MathHelper.sin(f) * f1), 0.0D, vec3d.z + (double) (MathHelper.cos(f) * f1));
+                    this.setMot(this.bJ.add(0.0D, 0.27D, 0.0D));
                 } else if ((float) this.bz != 7.0F && (float) this.bz != 15.0F && (float) this.bz != 23.0F) {
-                    this.setMot(this.bI.x, vec3d.y, this.bI.z);
+                    this.setMot(this.bJ.x, vec3d.y, this.bJ.z);
                 } else {
                     this.setMot(0.0D, this.onGround ? 0.27D : vec3d.y, 0.0D);
                 }
@@ -439,7 +439,7 @@ public class EntityPanda extends EntityAnimal {
             }
         }
 
-        if (!this.world.e() && this.random.nextInt(700) == 0 && this.world.getGameRules().getBoolean(GameRules.DO_MOB_LOOT)) {
+        if (!this.world.e() && this.random.nextInt(700) == 0 && this.world.getGameRules().getBoolean("doMobLoot")) {
             this.a((IMaterial) Items.SLIME_BALL);
         }
 
@@ -547,7 +547,7 @@ public class EntityPanda extends EntityAnimal {
             return true;
         } else if (this.i(itemstack)) {
             if (this.getGoalTarget() != null) {
-                this.bG = true;
+                this.bH = true;
             }
 
             if (this.isBaby()) {
@@ -664,7 +664,7 @@ public class EntityPanda extends EntityAnimal {
 
         @Override
         public boolean b() {
-            if (!this.a.bG && !this.a.bH) {
+            if (!this.a.bH && !this.a.bI) {
                 return super.b();
             } else {
                 this.a.setGoalTarget((EntityLiving) null);
@@ -807,9 +807,9 @@ public class EntityPanda extends EntityAnimal {
             if (super.a() && this.e.dV() == 0) {
                 if (!this.h()) {
                     if (this.f <= this.e.ticksLived) {
-                        this.e.s(32);
+                        this.e.r(32);
                         this.f = this.e.ticksLived + 600;
-                        if (this.e.df()) {
+                        if (this.e.de()) {
                             EntityHuman entityhuman = this.b.a(d, (EntityLiving) this.e); // CraftBukkit - decompile error
 
                             this.e.setGoalTarget(entityhuman, EntityTargetEvent.TargetReason.CLOSEST_PLAYER, true); // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/EntityParrot.java b/src/main/java/net/minecraft/server/EntityParrot.java
index a7cdb5e7..6173a86e 100644
--- a/src/main/java/net/minecraft/server/EntityParrot.java
+++ b/src/main/java/net/minecraft/server/EntityParrot.java
@@ -13,15 +13,15 @@ import javax.annotation.Nullable;
 
 public class EntityParrot extends EntityPerchable implements EntityBird {
 
-    private static final DataWatcherObject<Integer> bH = DataWatcher.a(EntityParrot.class, DataWatcherRegistry.b);
-    private static final Predicate<EntityInsentient> bI = new Predicate<EntityInsentient>() {
+    private static final DataWatcherObject<Integer> bI = DataWatcher.a(EntityParrot.class, DataWatcherRegistry.b);
+    private static final Predicate<EntityInsentient> bJ = new Predicate<EntityInsentient>() {
         public boolean test(@Nullable EntityInsentient entityinsentient) {
-            return entityinsentient != null && EntityParrot.bL.containsKey(entityinsentient.getEntityType());
+            return entityinsentient != null && EntityParrot.bM.containsKey(entityinsentient.getEntityType());
         }
     };
-    private static final Item bJ = Items.COOKIE;
-    private static final Set<Item> bK = Sets.newHashSet(new Item[]{Items.WHEAT_SEEDS, Items.MELON_SEEDS, Items.PUMPKIN_SEEDS, Items.BEETROOT_SEEDS});
-    private static final Map<EntityTypes<?>, SoundEffect> bL = (Map) SystemUtils.a(Maps.newHashMap(), (hashmap) -> { // CraftBukkit - decompile error
+    private static final Item bK = Items.COOKIE;
+    private static final Set<Item> bL = Sets.newHashSet(new Item[]{Items.WHEAT_SEEDS, Items.MELON_SEEDS, Items.PUMPKIN_SEEDS, Items.BEETROOT_SEEDS});
+    private static final Map<EntityTypes<?>, SoundEffect> bM = (Map) SystemUtils.a(Maps.newHashMap(), (hashmap) -> { // CraftBukkit - decompile error
         hashmap.put(EntityTypes.BLAZE, SoundEffects.ENTITY_PARROT_IMITATE_BLAZE);
         hashmap.put(EntityTypes.CAVE_SPIDER, SoundEffects.ENTITY_PARROT_IMITATE_SPIDER);
         hashmap.put(EntityTypes.CREEPER, SoundEffects.ENTITY_PARROT_IMITATE_CREEPER);
@@ -57,13 +57,13 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
         hashmap.put(EntityTypes.ZOMBIE, SoundEffects.ENTITY_PARROT_IMITATE_ZOMBIE);
         hashmap.put(EntityTypes.ZOMBIE_VILLAGER, SoundEffects.ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER);
     });
-    public float bC;
     public float bD;
     public float bE;
     public float bF;
-    public float bG = 1.0F;
-    private boolean bM;
-    private BlockPosition bN;
+    public float bG;
+    public float bH = 1.0F;
+    private boolean bN;
+    private BlockPosition bO;
 
     public EntityParrot(EntityTypes<? extends EntityParrot> entitytypes, World world) {
         super(entitytypes, world);
@@ -117,9 +117,9 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
     @Override
     public void movementTick() {
         b(this.world, (Entity) this);
-        if (this.bN == null || !this.bN.a((IPosition) this.getPositionVector(), 3.46D) || this.world.getType(this.bN).getBlock() != Blocks.JUKEBOX) {
-            this.bM = false;
-            this.bN = null;
+        if (this.bO == null || !this.bO.a((IPosition) this.ch(), 3.46D) || this.world.getType(this.bO).getBlock() != Blocks.JUKEBOX) {
+            this.bN = false;
+            this.bO = null;
         }
 
         super.movementTick();
@@ -127,27 +127,27 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
     }
 
     private void ei() {
-        this.bF = this.bC;
-        this.bE = this.bD;
-        this.bD = (float) ((double) this.bD + (double) (!this.onGround && !this.isPassenger() ? 4 : -1) * 0.3D);
-        this.bD = MathHelper.a(this.bD, 0.0F, 1.0F);
-        if (!this.onGround && this.bG < 1.0F) {
-            this.bG = 1.0F;
+        this.bG = this.bD;
+        this.bF = this.bE;
+        this.bE = (float) ((double) this.bE + (double) (this.onGround ? -1 : 4) * 0.3D);
+        this.bE = MathHelper.a(this.bE, 0.0F, 1.0F);
+        if (!this.onGround && this.bH < 1.0F) {
+            this.bH = 1.0F;
         }
 
-        this.bG = (float) ((double) this.bG * 0.9D);
+        this.bH = (float) ((double) this.bH * 0.9D);
         Vec3D vec3d = this.getMot();
 
         if (!this.onGround && vec3d.y < 0.0D) {
             this.setMot(vec3d.d(1.0D, 0.6D, 1.0D));
         }
 
-        this.bC += this.bG * 2.0F;
+        this.bD += this.bH * 2.0F;
     }
 
     private static boolean b(World world, Entity entity) {
         if (entity.isAlive() && !entity.isSilent() && world.random.nextInt(50) == 0) {
-            List<EntityInsentient> list = world.a(EntityInsentient.class, entity.getBoundingBox().g(20.0D), EntityParrot.bI);
+            List<EntityInsentient> list = world.a(EntityInsentient.class, entity.getBoundingBox().g(20.0D), EntityParrot.bJ);
 
             if (!list.isEmpty()) {
                 EntityInsentient entityinsentient = (EntityInsentient) list.get(world.random.nextInt(list.size()));
@@ -155,7 +155,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
                 if (!entityinsentient.isSilent()) {
                     SoundEffect soundeffect = b(entityinsentient.getEntityType());
 
-                    world.playSound((EntityHuman) null, entity.locX, entity.locY, entity.locZ, soundeffect, entity.getSoundCategory(), 0.7F, b(world.random));
+                    world.a((EntityHuman) null, entity.locX, entity.locY, entity.locZ, soundeffect, entity.getSoundCategory(), 0.7F, b(world.random));
                     return true;
                 }
             }
@@ -170,13 +170,13 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
     public boolean a(EntityHuman entityhuman, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
-        if (!this.isTamed() && EntityParrot.bK.contains(itemstack.getItem())) {
+        if (!this.isTamed() && EntityParrot.bL.contains(itemstack.getItem())) {
             if (!entityhuman.abilities.canInstantlyBuild) {
                 itemstack.subtract(1);
             }
 
             if (!this.isSilent()) {
-                this.world.playSound((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_PARROT_EAT, this.getSoundCategory(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+                this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_PARROT_EAT, this.getSoundCategory(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
             }
 
             if (!this.world.isClientSide) {
@@ -191,7 +191,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
             }
 
             return true;
-        } else if (itemstack.getItem() == EntityParrot.bJ) {
+        } else if (itemstack.getItem() == EntityParrot.bK) {
             if (!entityhuman.abilities.canInstantlyBuild) {
                 itemstack.subtract(1);
             }
@@ -216,10 +216,15 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
         return false;
     }
 
-    public static boolean c(EntityTypes<EntityParrot> entitytypes, GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition, Random random) {
+    @Override
+    public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
+        int i = MathHelper.floor(this.locX);
+        int j = MathHelper.floor(this.getBoundingBox().minY);
+        int k = MathHelper.floor(this.locZ);
+        BlockPosition blockposition = new BlockPosition(i, j, k);
         Block block = generatoraccess.getType(blockposition.down()).getBlock();
 
-        return (block.a(TagsBlock.LEAVES) || block == Blocks.GRASS_BLOCK || block instanceof BlockLogAbstract || block == Blocks.AIR) && generatoraccess.getLightLevel(blockposition, 0) > 8;
+        return block.a(TagsBlock.LEAVES) || block == Blocks.GRASS_BLOCK || block instanceof BlockLogAbstract || block == Blocks.AIR && super.a(generatoraccess, enummobspawn);
     }
 
     @Override
@@ -241,7 +246,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
 
     public static void a(World world, Entity entity) {
         if (!entity.isSilent() && !b(world, entity) && world.random.nextInt(200) == 0) {
-            world.playSound((EntityHuman) null, entity.locX, entity.locY, entity.locZ, a(world.random), entity.getSoundCategory(), 1.0F, b(world.random));
+            world.a((EntityHuman) null, entity.locX, entity.locY, entity.locZ, a(world.random), entity.getSoundCategory(), 1.0F, b(world.random));
         }
 
     }
@@ -259,7 +264,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
 
     private static SoundEffect a(Random random) {
         if (random.nextInt(1000) == 0) {
-            List<EntityTypes<?>> list = Lists.newArrayList(EntityParrot.bL.keySet());
+            List<EntityTypes<?>> list = Lists.newArrayList(EntityParrot.bM.keySet());
 
             return b((EntityTypes) list.get(random.nextInt(list.size())));
         } else {
@@ -268,7 +273,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
     }
 
     public static SoundEffect b(EntityTypes<?> entitytypes) {
-        return (SoundEffect) EntityParrot.bL.getOrDefault(entitytypes, SoundEffects.ENTITY_PARROT_AMBIENT);
+        return (SoundEffect) EntityParrot.bM.getOrDefault(entitytypes, SoundEffects.ENTITY_PARROT_AMBIENT);
     }
 
     @Override
@@ -289,16 +294,16 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
     @Override
     protected float e(float f) {
         this.a(SoundEffects.ENTITY_PARROT_FLY, 0.15F, 1.0F);
-        return f + this.bD / 2.0F;
+        return f + this.bE / 2.0F;
     }
 
     @Override
-    protected boolean am() {
+    protected boolean al() {
         return true;
     }
 
     @Override
-    protected float cV() {
+    protected float cU() {
         return b(this.random);
     }
 
@@ -338,17 +343,17 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
     }
 
     public int getVariant() {
-        return MathHelper.clamp((Integer) this.datawatcher.get(EntityParrot.bH), 0, 4);
+        return MathHelper.clamp((Integer) this.datawatcher.get(EntityParrot.bI), 0, 4);
     }
 
     public void setVariant(int i) {
-        this.datawatcher.set(EntityParrot.bH, i);
+        this.datawatcher.set(EntityParrot.bI, i);
     }
 
     @Override
     protected void initDatawatcher() {
         super.initDatawatcher();
-        this.datawatcher.register(EntityParrot.bH, 0);
+        this.datawatcher.register(EntityParrot.bI, 0);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/EntityPig.java b/src/main/java/net/minecraft/server/EntityPig.java
index 1943a23d..61607556 100644
--- a/src/main/java/net/minecraft/server/EntityPig.java
+++ b/src/main/java/net/minecraft/server/EntityPig.java
@@ -12,9 +12,9 @@ public class EntityPig extends EntityAnimal {
     private static final DataWatcherObject<Boolean> bz = DataWatcher.a(EntityPig.class, DataWatcherRegistry.i);
     private static final DataWatcherObject<Integer> bA = DataWatcher.a(EntityPig.class, DataWatcherRegistry.b);
     private static final RecipeItemStack bB = RecipeItemStack.a(Items.CARROT, Items.POTATO, Items.BEETROOT);
-    private boolean bC;
-    private int bD;
+    private boolean bD;
     private int bE;
+    private int bF;
 
     public EntityPig(EntityTypes<? extends EntityPig> entitytypes, World world) {
         super(entitytypes, world);
@@ -62,9 +62,9 @@ public class EntityPig extends EntityAnimal {
     @Override
     public void a(DataWatcherObject<?> datawatcherobject) {
         if (EntityPig.bA.equals(datawatcherobject) && this.world.isClientSide) {
-            this.bC = true;
-            this.bD = 0;
-            this.bE = (Integer) this.datawatcher.get(EntityPig.bA);
+            this.bD = true;
+            this.bE = 0;
+            this.bF = (Integer) this.datawatcher.get(EntityPig.bA);
         }
 
         super.a(datawatcherobject);
@@ -135,8 +135,8 @@ public class EntityPig extends EntityAnimal {
     }
 
     @Override
-    protected void cF() {
-        super.cF();
+    protected void cE() {
+        super.cE();
         if (this.hasSaddle()) {
             this.a((IMaterial) Items.SADDLE);
         }
@@ -197,16 +197,16 @@ public class EntityPig extends EntityAnimal {
                 this.aK = this.yaw;
                 this.aM = this.yaw;
                 this.K = 1.0F;
-                this.aO = this.db() * 0.1F;
-                if (this.bC && this.bD++ > this.bE) {
-                    this.bC = false;
+                this.aO = this.da() * 0.1F;
+                if (this.bD && this.bE++ > this.bF) {
+                    this.bD = false;
                 }
 
-                if (this.ca()) {
+                if (this.bZ()) {
                     float f = (float) this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getValue() * 0.225F;
 
-                    if (this.bC) {
-                        f += f * 1.15F * MathHelper.sin((float) this.bD / (float) this.bE * 3.1415927F);
+                    if (this.bD) {
+                        f += f * 1.15F * MathHelper.sin((float) this.bE / (float) this.bF * 3.1415927F);
                     }
 
                     this.o(f);
@@ -235,13 +235,13 @@ public class EntityPig extends EntityAnimal {
     }
 
     public boolean dW() {
-        if (this.bC) {
+        if (this.bD) {
             return false;
         } else {
-            this.bC = true;
-            this.bD = 0;
-            this.bE = this.getRandom().nextInt(841) + 140;
-            this.getDataWatcher().set(EntityPig.bA, this.bE);
+            this.bD = true;
+            this.bE = 0;
+            this.bF = this.getRandom().nextInt(841) + 140;
+            this.getDataWatcher().set(EntityPig.bA, this.bF);
             return true;
         }
     }
diff --git a/src/main/java/net/minecraft/server/EntityPigZombie.java b/src/main/java/net/minecraft/server/EntityPigZombie.java
index 4f260f81..dc08a7c5 100644
--- a/src/main/java/net/minecraft/server/EntityPigZombie.java
+++ b/src/main/java/net/minecraft/server/EntityPigZombie.java
@@ -1,6 +1,5 @@
 package net.minecraft.server;
 
-import java.util.Random;
 import java.util.UUID;
 import javax.annotation.Nullable;
 
@@ -43,51 +42,41 @@ public class EntityPigZombie extends EntityZombie {
     }
 
     @Override
-    protected boolean dY() {
+    protected boolean dZ() {
         return false;
     }
 
     @Override
     protected void mobTick() {
         AttributeInstance attributeinstance = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED);
-        EntityLiving entityliving = this.getLastDamager();
 
-        if (this.ef()) {
+        if (this.ed()) {
             if (!this.isBaby() && !attributeinstance.a(EntityPigZombie.c)) {
-                attributeinstance.addModifier(EntityPigZombie.c);
+                attributeinstance.b(EntityPigZombie.c);
             }
 
             --this.angerLevel;
-            EntityLiving entityliving1 = entityliving != null ? entityliving : this.getGoalTarget();
-
-            if (!this.ef() && entityliving1 != null) {
-                if (!this.hasLineOfSight(entityliving1)) {
-                    this.setLastDamager((EntityLiving) null);
-                    this.setGoalTarget((EntityLiving) null);
-                } else {
-                    this.angerLevel = this.ee();
-                }
-            }
         } else if (attributeinstance.a(EntityPigZombie.c)) {
-            attributeinstance.removeModifier(EntityPigZombie.c);
+            attributeinstance.c(EntityPigZombie.c);
         }
 
         if (this.soundDelay > 0 && --this.soundDelay == 0) {
             this.a(SoundEffects.ENTITY_ZOMBIE_PIGMAN_ANGRY, this.getSoundVolume() * 2.0F, ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) * 1.8F);
         }
 
-        if (this.ef() && this.hurtBy != null && entityliving == null) {
+        if (this.angerLevel > 0 && this.hurtBy != null && this.getLastDamager() == null) {
             EntityHuman entityhuman = this.world.b(this.hurtBy);
 
             this.setLastDamager(entityhuman);
             this.killer = entityhuman;
-            this.lastDamageByPlayerTime = this.ct();
+            this.lastDamageByPlayerTime = this.cs();
         }
 
         super.mobTick();
     }
 
-    public static boolean b(EntityTypes<EntityPigZombie> entitytypes, GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition, Random random) {
+    @Override
+    public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
         return generatoraccess.getDifficulty() != EnumDifficulty.PEACEFUL;
     }
 
@@ -121,7 +110,7 @@ public class EntityPigZombie extends EntityZombie {
             this.setLastDamager(entityhuman);
             if (entityhuman != null) {
                 this.killer = entityhuman;
-                this.lastDamageByPlayerTime = this.ct();
+                this.lastDamageByPlayerTime = this.cs();
             }
         }
 
@@ -137,7 +126,7 @@ public class EntityPigZombie extends EntityZombie {
             // CraftBukkit start
             boolean result = super.damageEntity(damagesource, f);
 
-            if (result && entity instanceof EntityHuman && !((EntityHuman) entity).isCreative() && this.hasLineOfSight(entity)) {
+            if (result && entity instanceof EntityHuman && !((EntityHuman) entity).isCreative()) {
                 this.a(entity);
             }
 
@@ -146,12 +135,12 @@ public class EntityPigZombie extends EntityZombie {
         }
     }
 
-    private boolean a(Entity entity) {
+    private void a(Entity entity) {
         // CraftBukkit start
-        org.bukkit.event.entity.PigZombieAngerEvent event = new org.bukkit.event.entity.PigZombieAngerEvent((org.bukkit.entity.PigZombie) this.getBukkitEntity(), (entity == null) ? null : entity.getBukkitEntity(), this.ee());
+        org.bukkit.event.entity.PigZombieAngerEvent event = new org.bukkit.event.entity.PigZombieAngerEvent((org.bukkit.entity.PigZombie) this.getBukkitEntity(), (entity == null) ? null : entity.getBukkitEntity(), 400 + this.random.nextInt(400));
         this.world.getServer().getPluginManager().callEvent(event);
         if (event.isCancelled()) {
-            return false;
+            return;
         }
         this.angerLevel = event.getNewAnger();
         // CraftBukkit end
@@ -160,14 +149,9 @@ public class EntityPigZombie extends EntityZombie {
             this.setLastDamager((EntityLiving) entity);
         }
 
-        return true;
-    }
-
-    private int ee() {
-        return 400 + this.random.nextInt(400);
     }
 
-    private boolean ef() {
+    public boolean ed() {
         return this.angerLevel > 0;
     }
 
@@ -197,13 +181,13 @@ public class EntityPigZombie extends EntityZombie {
     }
 
     @Override
-    protected ItemStack dX() {
+    protected ItemStack dY() {
         return ItemStack.a;
     }
 
     @Override
     public boolean e(EntityHuman entityhuman) {
-        return this.ef();
+        return this.ed();
     }
 
     static class PathfinderGoalAnger extends PathfinderGoalNearestAttackableTarget<EntityHuman> {
@@ -214,7 +198,7 @@ public class EntityPigZombie extends EntityZombie {
 
         @Override
         public boolean a() {
-            return ((EntityPigZombie) this.e).ef() && super.a();
+            return ((EntityPigZombie) this.e).ed() && super.a();
         }
     }
 
@@ -227,8 +211,9 @@ public class EntityPigZombie extends EntityZombie {
 
         @Override
         protected void a(EntityInsentient entityinsentient, EntityLiving entityliving) {
-            if (entityinsentient instanceof EntityPigZombie && this.e.hasLineOfSight(entityliving) && ((EntityPigZombie) entityinsentient).a((Entity) entityliving)) {
-                entityinsentient.setGoalTarget(entityliving, org.bukkit.event.entity.EntityTargetEvent.TargetReason.TARGET_ATTACKED_NEARBY_ENTITY, true); // CraftBukkit
+            super.a(entityinsentient, entityliving);
+            if (entityinsentient instanceof EntityPigZombie) {
+                ((EntityPigZombie) entityinsentient).a((Entity) entityliving);
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/EntityPillager.java b/src/main/java/net/minecraft/server/EntityPillager.java
index 79a33065..845f7ac3 100644
--- a/src/main/java/net/minecraft/server/EntityPillager.java
+++ b/src/main/java/net/minecraft/server/EntityPillager.java
@@ -84,7 +84,17 @@ public class EntityPillager extends EntityIllagerAbstract implements ICrossbow,
     public float a(BlockPosition blockposition, IWorldReader iworldreader) {
         Block block = iworldreader.getType(blockposition.down()).getBlock();
 
-        return block != Blocks.GRASS_BLOCK && block != Blocks.SAND ? 0.5F - iworldreader.v(blockposition) : 10.0F;
+        return block != Blocks.GRASS_BLOCK && block != Blocks.SAND ? 0.5F - iworldreader.w(blockposition) : 10.0F;
+    }
+
+    @Override
+    protected boolean I_() {
+        return true;
+    }
+
+    @Override
+    public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
+        return generatoraccess.getBrightness(EnumSkyBlock.BLOCK, new BlockPosition(this.locX, this.locY, this.locZ)) > 8 ? false : super.a(generatoraccess, enummobspawn);
     }
 
     @Override
@@ -205,7 +215,7 @@ public class EntityPillager extends EntityIllagerAbstract implements ICrossbow,
     }
 
     private boolean b(Item item) {
-        return this.ek() && item == Items.WHITE_BANNER;
+        return this.el() && item == Items.WHITE_BANNER;
     }
 
     @Override
@@ -226,8 +236,8 @@ public class EntityPillager extends EntityIllagerAbstract implements ICrossbow,
 
     @Override
     public void a(int i, boolean flag) {
-        Raid raid = this.ej();
-        boolean flag1 = this.random.nextFloat() <= raid.w();
+        Raid raid = this.ek();
+        boolean flag1 = this.random.nextFloat() <= raid.v();
 
         if (flag1) {
             ItemStack itemstack = new ItemStack(Items.CROSSBOW);
@@ -252,7 +262,7 @@ public class EntityPillager extends EntityIllagerAbstract implements ICrossbow,
     }
 
     @Override
-    public SoundEffect dV() {
+    public SoundEffect dW() {
         return SoundEffects.ENTITY_PILLAGER_CELEBRATE;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 18695d9b..691a2d09 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -130,7 +130,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             }
 
             int k = (i * 2 + 1) * (i * 2 + 1);
-            int l = this.t(k);
+            int l = this.s(k);
             int i1 = (new Random()).nextInt(k);
 
             for (int j1 = 0; j1 < k; ++j1) {
@@ -164,17 +164,15 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
                 i = 1;
             }
 
-            long k = (long) (i * 2 + 1);
-            long l = k * k;
-            int i1 = l > 2147483647L ? Integer.MAX_VALUE : (int) l;
-            int j1 = this.t(i1);
-            int k1 = (new Random()).nextInt(i1);
+            int k = (i * 2 + 1) * (i * 2 + 1);
+            int l = this.s(k);
+            int i1 = (new Random()).nextInt(k);
 
-            for (int l1 = 0; l1 < i1; ++l1) {
-                int i2 = (k1 + j1 * l1) % i1;
-                int j2 = i2 % (i * 2 + 1);
-                int k2 = i2 / (i * 2 + 1);
-                BlockPosition blockposition1 = worldserver.getWorldProvider().a(blockposition.getX() + j2 - i, blockposition.getZ() + k2 - i, false);
+            for (int j1 = 0; j1 < k; ++j1) {
+                int k1 = (i1 + l * j1) % k;
+                int l1 = k1 % (i * 2 + 1);
+                int i2 = k1 / (i * 2 + 1);
+                BlockPosition blockposition1 = worldserver.getWorldProvider().a(blockposition.getX() + l1 - i, blockposition.getZ() + i2 - i, false);
 
                 if (blockposition1 != null) {
                     this.setPositionRotation(blockposition1, 0.0F, 0.0F);
@@ -193,7 +191,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
     }
 
-    private int t(int i) {
+    private int s(int i) {
         return i <= 16 ? i - 1 : 17;
     }
 
@@ -423,7 +421,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             for (int i = 0; i < this.inventory.getSize(); ++i) {
                 ItemStack itemstack = this.inventory.getItem(i);
 
-                if (itemstack.getItem().O_()) {
+                if (itemstack.getItem().P_()) {
                     Packet<?> packet = ((ItemWorldMapBase) itemstack.getItem()).a(itemstack, this.world, (EntityHuman) this);
 
                     if (packet != null) {
@@ -552,13 +550,13 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
     @Override
     public void die(DamageSource damagesource) {
-        boolean flag = this.world.getGameRules().getBoolean(GameRules.SHOW_DEATH_MESSAGES);
+        boolean flag = this.world.getGameRules().getBoolean("showDeathMessages");
         // CraftBukkit start - fire PlayerDeathEvent
         if (this.dead) {
             return;
         }
         java.util.List<org.bukkit.inventory.ItemStack> loot = new java.util.ArrayList<org.bukkit.inventory.ItemStack>(this.inventory.getSize());
-        boolean keepInventory = this.world.getGameRules().getBoolean(GameRules.KEEP_INVENTORY) || this.isSpectator();
+        boolean keepInventory = this.world.getGameRules().getBoolean("keepInventory") || this.isSpectator();
 
         if (!keepInventory) {
             for (ItemStack item : this.inventory.getContents()) {
@@ -567,12 +565,6 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
                 }
             }
         }
-        // SPIGOT-5071: manually add player loot tables (SPIGOT-5195 - ignores keepInventory rule)
-        this.a(damagesource, this.lastDamageByPlayerTime > 0);
-        for (org.bukkit.inventory.ItemStack item : this.drops) {
-            loot.add(item);
-        }
-        this.drops.clear(); // SPIGOT-5188: make sure to clear
 
         IChatBaseComponent defaultMessage = this.getCombatTracker().getDeathMessage();
 
@@ -655,7 +647,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             if (!this.world.isClientSide && entityliving instanceof EntityWither) {
                 boolean flag1 = false;
 
-                if (this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) {
+                if (this.world.getGameRules().getBoolean("mobGriefing")) {
                     BlockPosition blockposition = new BlockPosition(this.locX, this.locY, this.locZ);
                     IBlockData iblockdata = Blocks.WITHER_ROSE.getBlockData();
 
@@ -724,7 +716,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         if (this.isInvulnerable(damagesource)) {
             return false;
         } else {
-            boolean flag = this.server.S() && this.canPvP() && "fall".equals(damagesource.translationIndex);
+            boolean flag = this.server.R() && this.canPvP() && "fall".equals(damagesource.translationIndex);
 
             if (!flag && this.invulnerableTicks > 0 && damagesource != DamageSource.OUT_OF_WORLD) {
                 return false;
@@ -784,7 +776,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         // this.worldChangeInvuln = true; // CraftBukkit - Moved down and into PlayerList#changeDimension
         DimensionManager dimensionmanager1 = this.dimension;
 
-        if (dimensionmanager1.getType() == DimensionManager.THE_END && dimensionmanager.getType() == DimensionManager.OVERWORLD) { // CraftBukkit - getType()
+        if (dimensionmanager1 == DimensionManager.THE_END && dimensionmanager == DimensionManager.OVERWORLD) {
             this.worldChangeInvuln = true; // CraftBukkit - Moved down from above
             this.decouple();
             this.getWorldServer().removePlayer(this);
@@ -804,6 +796,10 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             WorldData worlddata = this.world.getWorldData();
 
             // CraftBukkit start
+            if (worldserver1 == null) {
+                return null;
+            }
+
             /*
             this.playerConnection.sendPacket(new PacketPlayOutRespawn(dimensionmanager, worlddata.getType(), this.playerInteractManager.getGameMode()));
             this.playerConnection.sendPacket(new PacketPlayOutServerDifficulty(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
@@ -823,7 +819,6 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             float f2 = f1;
 
             worldserver.getMethodProfiler().enter("moving");
-            if (worldserver1 == null) { } else // CraftBukkit - empty to fall through to null to event
             if (dimensionmanager1 == DimensionManager.OVERWORLD && dimensionmanager == DimensionManager.NETHER) {
                 this.cu = new Vec3D(this.locX, this.locY, this.locZ);
                 d0 /= 8.0D;
@@ -843,7 +838,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
             // CraftBukkit start
             Location enter = this.getBukkitEntity().getLocation();
-            Location exit = (worldserver1 == null) ? null : new Location(worldserver1.getWorld(), d0, d1, d2, f1, f);
+            Location exit = new Location(worldserver1.getWorld(), d0, d1, d2, f1, f);
             PlayerPortalEvent event = new PlayerPortalEvent(this.getBukkitEntity(), enter, exit, cause);
             Bukkit.getServer().getPluginManager().callEvent(event);
             if (event.isCancelled() || event.getTo() == null) {
@@ -1163,8 +1158,8 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     }
 
     @Override
-    public void openTrade(int i, MerchantRecipeList merchantrecipelist, int j, int k, boolean flag, boolean flag1) {
-        this.playerConnection.sendPacket(new PacketPlayOutOpenWindowMerchant(i, merchantrecipelist, j, k, flag, flag1));
+    public void openTrade(int i, MerchantRecipeList merchantrecipelist, int j, int k, boolean flag) {
+        this.playerConnection.sendPacket(new PacketPlayOutOpenWindowMerchant(i, merchantrecipelist, j, k, flag));
     }
 
     @Override
@@ -1191,7 +1186,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     }
 
     @Override
-    public void openBook(ItemStack itemstack, EnumHand enumhand) {
+    public void a(ItemStack itemstack, EnumHand enumhand) {
         Item item = itemstack.getItem();
 
         if (item == Items.WRITTEN_BOOK) {
@@ -1399,7 +1394,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             this.al = entityplayer.al;
             this.am = entityplayer.am;
             this.an = entityplayer.an;
-        } else if (this.world.getGameRules().getBoolean(GameRules.KEEP_INVENTORY) || entityplayer.isSpectator()) {
+        } else if (this.world.getGameRules().getBoolean("keepInventory") || entityplayer.isSpectator()) {
             this.inventory.a(entityplayer.inventory);
             this.expLevel = entityplayer.expLevel;
             this.expTotal = entityplayer.expTotal;
@@ -1511,7 +1506,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         }
 
         this.updateAbilities();
-        this.dh();
+        this.dg();
     }
 
     @Override
@@ -1617,7 +1612,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     @Override
     protected void C() {
         if (this.isSpectator()) {
-            this.cy();
+            this.cx();
             this.setInvisible(true);
         } else {
             super.C();
@@ -1908,7 +1903,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
     public void reset() {
         float exp = 0;
-        boolean keepInventory = this.world.getGameRules().getBoolean(GameRules.KEEP_INVENTORY);
+        boolean keepInventory = this.world.getGameRules().getBoolean("keepInventory");
 
         if (this.keepLevel || keepInventory) {
             exp = this.exp;
diff --git a/src/main/java/net/minecraft/server/EntityPotion.java b/src/main/java/net/minecraft/server/EntityPotion.java
index 99833655..47fc8b03 100644
--- a/src/main/java/net/minecraft/server/EntityPotion.java
+++ b/src/main/java/net/minecraft/server/EntityPotion.java
@@ -112,7 +112,7 @@ public class EntityPotion extends EntityProjectile {
                 double d0 = this.h(entityliving);
 
                 if (d0 < 16.0D && a(entityliving)) {
-                    entityliving.damageEntity(DamageSource.c(entityliving, this.getShooter()), 1.0F);
+                    entityliving.damageEntity(DamageSource.DROWN, 1.0F);
                 }
             }
         }
@@ -202,7 +202,7 @@ public class EntityPotion extends EntityProjectile {
         while (iterator.hasNext()) {
             MobEffect mobeffect = (MobEffect) iterator.next();
 
-            entityareaeffectcloud.addEffect(new MobEffect(mobeffect));
+            entityareaeffectcloud.a(new MobEffect(mobeffect));
         }
 
         NBTTagCompound nbttagcompound = itemstack.getTag();
diff --git a/src/main/java/net/minecraft/server/EntityProjectile.java b/src/main/java/net/minecraft/server/EntityProjectile.java
index bd4ca73f..18d28a15 100644
--- a/src/main/java/net/minecraft/server/EntityProjectile.java
+++ b/src/main/java/net/minecraft/server/EntityProjectile.java
@@ -43,7 +43,7 @@ public abstract class EntityProjectile extends Entity implements IProjectile {
         this.shoot((double) f5, (double) f6, (double) f7, f3, f4);
         Vec3D vec3d = entity.getMot();
 
-        if (!entity.world.paperConfig.disableRelativeProjectileVelocity) this.setMot(this.getMot().add(vec3d.x, entity.onGround ? 0.0D : vec3d.y, vec3d.z)); // Paper - allow disabling relative velocity
+        this.setMot(this.getMot().add(vec3d.x, entity.onGround ? 0.0D : vec3d.y, vec3d.z));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/EntityPufferFish.java b/src/main/java/net/minecraft/server/EntityPufferFish.java
index f5d384ad..153d3412 100644
--- a/src/main/java/net/minecraft/server/EntityPufferFish.java
+++ b/src/main/java/net/minecraft/server/EntityPufferFish.java
@@ -65,23 +65,23 @@ public class EntityPufferFish extends EntityFish {
 
     @Override
     public void tick() {
-        if (!this.world.isClientSide && this.isAlive() && this.df()) {
+        if (!this.world.isClientSide && this.isAlive() && this.de()) {
             if (this.c > 0) {
                 if (this.getPuffState() == 0) {
-                    this.a(SoundEffects.ENTITY_PUFFER_FISH_BLOW_UP, this.getSoundVolume(), this.cV());
+                    this.a(SoundEffects.ENTITY_PUFFER_FISH_BLOW_UP, this.getSoundVolume(), this.cU());
                     this.setPuffState(1);
                 } else if (this.c > 40 && this.getPuffState() == 1) {
-                    this.a(SoundEffects.ENTITY_PUFFER_FISH_BLOW_UP, this.getSoundVolume(), this.cV());
+                    this.a(SoundEffects.ENTITY_PUFFER_FISH_BLOW_UP, this.getSoundVolume(), this.cU());
                     this.setPuffState(2);
                 }
 
                 ++this.c;
             } else if (this.getPuffState() != 0) {
                 if (this.d > 60 && this.getPuffState() == 2) {
-                    this.a(SoundEffects.ENTITY_PUFFER_FISH_BLOW_OUT, this.getSoundVolume(), this.cV());
+                    this.a(SoundEffects.ENTITY_PUFFER_FISH_BLOW_OUT, this.getSoundVolume(), this.cU());
                     this.setPuffState(1);
                 } else if (this.d > 100 && this.getPuffState() == 1) {
-                    this.a(SoundEffects.ENTITY_PUFFER_FISH_BLOW_OUT, this.getSoundVolume(), this.cV());
+                    this.a(SoundEffects.ENTITY_PUFFER_FISH_BLOW_OUT, this.getSoundVolume(), this.cU());
                     this.setPuffState(0);
                 }
 
@@ -153,10 +153,10 @@ public class EntityPufferFish extends EntityFish {
 
     @Override
     public EntitySize a(EntityPose entitypose) {
-        return super.a(entitypose).a(r(this.getPuffState()));
+        return super.a(entitypose).a(q(this.getPuffState()));
     }
 
-    private static float r(int i) {
+    private static float q(int i) {
         switch (i) {
             case 0:
                 return 0.5F;
diff --git a/src/main/java/net/minecraft/server/EntityRabbit.java b/src/main/java/net/minecraft/server/EntityRabbit.java
index 10fca497..f6fa8715 100644
--- a/src/main/java/net/minecraft/server/EntityRabbit.java
+++ b/src/main/java/net/minecraft/server/EntityRabbit.java
@@ -1,6 +1,5 @@
 package net.minecraft.server;
 
-import java.util.Random;
 import javax.annotation.Nullable;
 
 public class EntityRabbit extends EntityAnimal {
@@ -8,10 +7,10 @@ public class EntityRabbit extends EntityAnimal {
     private static final DataWatcherObject<Integer> bz = DataWatcher.a(EntityRabbit.class, DataWatcherRegistry.b);
     private static final MinecraftKey bA = new MinecraftKey("killer_bunny");
     private int bB;
-    private int bC;
-    private boolean bD;
-    private int bE;
+    private int bD;
+    private boolean bE;
     private int bF;
+    private int bG;
 
     public EntityRabbit(EntityTypes<? extends EntityRabbit> entitytypes, World world) {
         super(entitytypes, world);
@@ -41,7 +40,7 @@ public class EntityRabbit extends EntityAnimal {
     }
 
     @Override
-    protected float cX() {
+    protected float cW() {
         if (!this.positionChanged && (!this.moveController.b() || this.moveController.e() <= this.locY + 0.5D)) {
             PathEntity pathentity = this.navigation.l();
 
@@ -94,7 +93,7 @@ public class EntityRabbit extends EntityAnimal {
 
     public void dV() {
         this.setJumping(true);
-        this.bC = 10;
+        this.bD = 10;
         this.bB = 0;
     }
 
@@ -106,38 +105,38 @@ public class EntityRabbit extends EntityAnimal {
 
     @Override
     public void mobTick() {
-        if (this.bE > 0) {
-            --this.bE;
+        if (this.bF > 0) {
+            --this.bF;
         }
 
-        if (this.bF > 0) {
-            this.bF -= this.random.nextInt(3);
-            if (this.bF < 0) {
-                this.bF = 0;
+        if (this.bG > 0) {
+            this.bG -= this.random.nextInt(3);
+            if (this.bG < 0) {
+                this.bG = 0;
             }
         }
 
         if (this.onGround) {
-            if (!this.bD) {
+            if (!this.bE) {
                 this.setJumping(false);
                 this.ef();
             }
 
-            if (this.getRabbitType() == 99 && this.bE == 0) {
+            if (this.getRabbitType() == 99 && this.bF == 0) {
                 EntityLiving entityliving = this.getGoalTarget();
 
                 if (entityliving != null && this.h((Entity) entityliving) < 16.0D) {
                     this.b(entityliving.locX, entityliving.locZ);
                     this.moveController.a(entityliving.locX, entityliving.locY, entityliving.locZ, this.moveController.c());
                     this.dV();
-                    this.bD = true;
+                    this.bE = true;
                 }
             }
 
             EntityRabbit.ControllerJumpRabbit entityrabbit_controllerjumprabbit = (EntityRabbit.ControllerJumpRabbit) this.bt;
 
             if (!entityrabbit_controllerjumprabbit.c()) {
-                if (this.moveController.b() && this.bE == 0) {
+                if (this.moveController.b() && this.bF == 0) {
                     PathEntity pathentity = this.navigation.l();
                     Vec3D vec3d = new Vec3D(this.moveController.d(), this.moveController.e(), this.moveController.f());
 
@@ -153,11 +152,11 @@ public class EntityRabbit extends EntityAnimal {
             }
         }
 
-        this.bD = this.onGround;
+        this.bE = this.onGround;
     }
 
     @Override
-    public void aA() {}
+    public void az() {}
 
     private void b(double d0, double d1) {
         this.yaw = (float) (MathHelper.d(d1 - this.locZ, d0 - this.locX) * 57.2957763671875D) - 90.0F;
@@ -173,9 +172,9 @@ public class EntityRabbit extends EntityAnimal {
 
     private void ee() {
         if (this.moveController.c() < 2.2D) {
-            this.bE = 10;
+            this.bF = 10;
         } else {
-            this.bE = 1;
+            this.bF = 1;
         }
 
     }
@@ -188,11 +187,11 @@ public class EntityRabbit extends EntityAnimal {
     @Override
     public void movementTick() {
         super.movementTick();
-        if (this.bB != this.bC) {
+        if (this.bB != this.bD) {
             ++this.bB;
-        } else if (this.bC != 0) {
+        } else if (this.bD != 0) {
             this.bB = 0;
-            this.bC = 0;
+            this.bD = 0;
             this.setJumping(false);
         }
 
@@ -209,14 +208,14 @@ public class EntityRabbit extends EntityAnimal {
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
         nbttagcompound.setInt("RabbitType", this.getRabbitType());
-        nbttagcompound.setInt("MoreCarrotTicks", this.bF);
+        nbttagcompound.setInt("MoreCarrotTicks", this.bG);
     }
 
     @Override
     public void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
         this.setRabbitType(nbttagcompound.getInt("RabbitType"));
-        this.bF = nbttagcompound.getInt("MoreCarrotTicks");
+        this.bG = nbttagcompound.getInt("MoreCarrotTicks");
     }
 
     protected SoundEffect getSoundJump() {
@@ -332,14 +331,19 @@ public class EntityRabbit extends EntityAnimal {
         return biomebase.b() == BiomeBase.Precipitation.SNOW ? (i < 80 ? 1 : 3) : (biomebase.o() == BiomeBase.Geography.DESERT ? 4 : (i < 50 ? 0 : (i < 90 ? 5 : 2)));
     }
 
-    public static boolean c(EntityTypes<EntityRabbit> entitytypes, GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition, Random random) {
+    @Override
+    public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
+        int i = MathHelper.floor(this.locX);
+        int j = MathHelper.floor(this.getBoundingBox().minY);
+        int k = MathHelper.floor(this.locZ);
+        BlockPosition blockposition = new BlockPosition(i, j, k);
         Block block = generatoraccess.getType(blockposition.down()).getBlock();
 
-        return (block == Blocks.GRASS_BLOCK || block == Blocks.SNOW || block == Blocks.SAND) && generatoraccess.getLightLevel(blockposition, 0) > 8;
+        return block != Blocks.GRASS && block != Blocks.SNOW && block != Blocks.SAND ? super.a(generatoraccess, enummobspawn) : true;
     }
 
     private boolean eg() {
-        return this.bF == 0;
+        return this.bG == 0;
     }
 
     static class PathfinderGoalKillerRabbitMeleeAttack extends PathfinderGoalMeleeAttack {
@@ -384,7 +388,7 @@ public class EntityRabbit extends EntityAnimal {
         @Override
         public boolean a() {
             if (this.c <= 0) {
-                if (!this.entity.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) {
+                if (!this.entity.world.getGameRules().getBoolean("mobGriefing")) {
                     return false;
                 }
 
@@ -436,7 +440,7 @@ public class EntityRabbit extends EntityAnimal {
                         world.triggerEffect(2001, blockposition, Block.getCombinedId(iblockdata));
                     }
 
-                    this.entity.bF = 40;
+                    this.entity.bG = 40;
                 }
 
                 this.i = false;
diff --git a/src/main/java/net/minecraft/server/EntityRaider.java b/src/main/java/net/minecraft/server/EntityRaider.java
index 6ffb3572..0c9927d0 100644
--- a/src/main/java/net/minecraft/server/EntityRaider.java
+++ b/src/main/java/net/minecraft/server/EntityRaider.java
@@ -13,7 +13,7 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
 
     protected static final DataWatcherObject<Boolean> c = DataWatcher.a(EntityRaider.class, DataWatcherRegistry.i);
     private static final Predicate<EntityItem> b = (entityitem) -> {
-        return !entityitem.q() && entityitem.isAlive() && ItemStack.matches(entityitem.getItemStack(), Raid.s());
+        return !entityitem.q() && entityitem.isAlive() && ItemStack.matches(entityitem.getItemStack(), Raid.a);
     };
     @Nullable
     protected Raid d;
@@ -42,7 +42,7 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
 
     public abstract void a(int i, boolean flag);
 
-    public boolean ei() {
+    public boolean ej() {
         return this.bA;
     }
 
@@ -53,9 +53,9 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
     @Override
     public void movementTick() {
         if (this.world instanceof WorldServer && this.isAlive()) {
-            Raid raid = this.ej();
+            Raid raid = this.ek();
 
-            if (this.ei()) {
+            if (this.ej()) {
                 if (raid == null) {
                     if (this.world.getTime() % 20L == 0L) {
                         Raid raid1 = ((WorldServer) this.world).c_(new BlockPosition(this));
@@ -78,7 +78,7 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
     }
 
     @Override
-    protected void eb() {
+    protected void ec() {
         this.ticksFarFromPlayer += 2;
     }
 
@@ -86,21 +86,20 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
     public void die(DamageSource damagesource) {
         if (this.world instanceof WorldServer) {
             Entity entity = damagesource.getEntity();
-            Raid raid = this.ej();
 
-            if (raid != null) {
+            if (this.ek() != null) {
                 if (this.isPatrolLeader()) {
-                    raid.c(this.el());
+                    this.ek().c(this.em());
                 }
 
                 if (entity != null && entity.getEntityType() == EntityTypes.PLAYER) {
-                    raid.a(entity);
+                    this.ek().a(entity);
                 }
 
-                raid.a(this, false);
+                this.ek().a(this, false);
             }
 
-            if (this.isPatrolLeader() && raid == null && ((WorldServer) this.world).c_(new BlockPosition(this)) == null) {
+            if (this.isPatrolLeader() && this.ek() == null && ((WorldServer) this.world).c_(new BlockPosition(this)) == null) {
                 ItemStack itemstack = this.getEquipment(EnumItemSlot.HEAD);
                 EntityHuman entityhuman = null;
 
@@ -115,7 +114,7 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
                     }
                 }
 
-                if (!itemstack.isEmpty() && ItemStack.matches(itemstack, Raid.s()) && entityhuman != null) {
+                if (!itemstack.isEmpty() && ItemStack.matches(itemstack, Raid.a) && entityhuman != null) {
                     MobEffect mobeffect = entityhuman.getEffect(MobEffects.BAD_OMEN);
                     byte b0 = 1;
                     int i;
@@ -130,9 +129,7 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
                     i = MathHelper.clamp(i, 0, 5);
                     MobEffect mobeffect1 = new MobEffect(MobEffects.BAD_OMEN, 120000, i, false, false, true);
 
-                    if (!this.world.getGameRules().getBoolean(GameRules.x)) {
-                        entityhuman.addEffect(mobeffect1);
-                    }
+                    entityhuman.addEffect(mobeffect1);
                 }
             }
         }
@@ -141,8 +138,8 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
     }
 
     @Override
-    public boolean ec() {
-        return !this.ek();
+    public boolean ed() {
+        return !this.el();
     }
 
     public void a(@Nullable Raid raid) {
@@ -150,19 +147,19 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
     }
 
     @Nullable
-    public Raid ej() {
+    public Raid ek() {
         return this.d;
     }
 
-    public boolean ek() {
-        return this.ej() != null && this.ej().v();
+    public boolean el() {
+        return this.ek() != null && this.ek().u();
     }
 
     public void a(int i) {
         this.bz = i;
     }
 
-    public int el() {
+    public int em() {
         return this.bz;
     }
 
@@ -176,7 +173,7 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
         nbttagcompound.setInt("Wave", this.bz);
         nbttagcompound.setBoolean("CanJoinRaid", this.bA);
         if (this.d != null) {
-            nbttagcompound.setInt("RaidId", this.d.u());
+            nbttagcompound.setInt("RaidId", this.d.t());
         }
 
     }
@@ -204,9 +201,9 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
     @Override
     protected void a(EntityItem entityitem) {
         ItemStack itemstack = entityitem.getItemStack();
-        boolean flag = this.ek() && this.ej().b(this.el()) != null;
+        boolean flag = this.el() && this.ek().b(this.em()) != null;
 
-        if (this.ek() && !flag && ItemStack.matches(itemstack, Raid.s())) {
+        if (this.el() && !flag && ItemStack.matches(itemstack, Raid.a)) {
             EnumItemSlot enumitemslot = EnumItemSlot.HEAD;
             ItemStack itemstack1 = this.getEquipment(enumitemslot);
             double d0 = (double) this.d(enumitemslot);
@@ -218,7 +215,7 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
             this.setSlot(enumitemslot, itemstack);
             this.receive(entityitem, itemstack.getCount());
             entityitem.die();
-            this.ej().a(this.el(), this);
+            this.ek().a(this.em(), this);
             this.setPatrolLeader(true);
         } else {
             super.a(entityitem);
@@ -228,15 +225,15 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
 
     @Override
     public boolean isTypeNotPersistent(double d0) {
-        return this.ej() == null ? super.isTypeNotPersistent(d0) : false;
+        return this.ek() == null ? super.isTypeNotPersistent(d0) : false;
     }
 
     @Override
     public boolean I() {
-        return this.ej() != null;
+        return this.ek() != null;
     }
 
-    public int en() {
+    public int eo() {
         return this.bB;
     }
 
@@ -246,8 +243,8 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
 
     @Override
     public boolean damageEntity(DamageSource damagesource, float f) {
-        if (this.ek()) {
-            this.ej().p();
+        if (this.el()) {
+            this.ek().p();
         }
 
         return super.damageEntity(damagesource, f);
@@ -260,7 +257,7 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
         return super.prepare(generatoraccess, difficultydamagescaler, enummobspawn, groupdataentity, nbttagcompound);
     }
 
-    public abstract SoundEffect dV();
+    public abstract SoundEffect dW();
 
     static class d extends PathfinderGoal {
 
@@ -285,7 +282,7 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
         }
 
         private boolean g() {
-            return this.a.ek() && !this.a.ej().a();
+            return this.a.el() && !this.a.ek().a();
         }
 
         private boolean h() {
@@ -305,12 +302,12 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
 
         @Override
         public boolean b() {
-            return this.a.getNavigation().n() ? false : this.a.getGoalTarget() == null && !this.c.a((IPosition) this.a.getPositionVector(), (double) (this.a.getWidth() + (float) this.e)) && !this.f;
+            return this.a.getNavigation().n() ? false : this.a.getGoalTarget() == null && !this.c.a((IPosition) this.a.ch(), (double) (this.a.getWidth() + (float) this.e)) && !this.f;
         }
 
         @Override
         public void d() {
-            if (this.c.a((IPosition) this.a.getPositionVector(), (double) this.e)) {
+            if (this.c.a((IPosition) this.a.ch(), (double) this.e)) {
                 this.d.add(this.c);
             }
 
@@ -319,7 +316,7 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
         @Override
         public void c() {
             super.c();
-            this.a.n(0);
+            this.a.m(0);
             this.a.getNavigation().a((double) this.c.getX(), (double) this.c.getY(), (double) this.c.getZ(), this.b);
             this.f = false;
         }
@@ -386,7 +383,7 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
         public boolean a() {
             EntityLiving entityliving = this.c.getLastDamager();
 
-            return this.c.ej() == null && this.c.isPatrolling() && this.c.getGoalTarget() != null && !this.c.dR() && (entityliving == null || entityliving.getEntityType() != EntityTypes.PLAYER);
+            return this.c.ek() == null && this.c.isPatrolling() && this.c.getGoalTarget() != null && !this.c.dR() && (entityliving == null || entityliving.getEntityType() != EntityTypes.PLAYER);
         }
 
         @Override
@@ -455,7 +452,7 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
 
         @Override
         public boolean a() {
-            Raid raid = this.b.ej();
+            Raid raid = this.b.ek();
 
             return this.b.isAlive() && this.b.getGoalTarget() == null && raid != null && raid.f();
         }
@@ -475,7 +472,7 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
         @Override
         public void e() {
             if (!this.b.isSilent() && this.b.random.nextInt(100) == 0) {
-                EntityRaider.this.a(EntityRaider.this.dV(), EntityRaider.this.getSoundVolume(), EntityRaider.this.cV());
+                EntityRaider.this.a(EntityRaider.this.dW(), EntityRaider.this.getSoundVolume(), EntityRaider.this.cU());
             }
 
             if (!this.b.isPassenger() && this.b.random.nextInt(50) == 0) {
@@ -497,10 +494,10 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
 
         @Override
         public boolean a() {
-            Raid raid = this.b.ej();
+            Raid raid = this.b.ek();
 
-            if (this.b.ek() && !this.b.ej().a() && this.b.dX() && !ItemStack.matches(this.b.getEquipment(EnumItemSlot.HEAD), Raid.s())) {
-                EntityRaider entityraider = raid.b(this.b.el());
+            if (this.b.el() && !this.b.ek().a() && this.b.dY() && !ItemStack.matches(this.b.getEquipment(EnumItemSlot.HEAD), Raid.a)) {
+                EntityRaider entityraider = raid.b(this.b.em());
 
                 if (entityraider == null || !entityraider.isAlive()) {
                     List<EntityItem> list = this.b.world.a(EntityItem.class, this.b.getBoundingBox().grow(16.0D, 8.0D, 16.0D), EntityRaider.b);
@@ -518,7 +515,7 @@ public abstract class EntityRaider extends EntityMonsterPatrolling {
 
         @Override
         public void e() {
-            if (this.b.getNavigation().h().a((IPosition) this.b.getPositionVector(), 1.414D)) {
+            if (this.b.getNavigation().h().a((IPosition) this.b.ch(), 1.414D)) {
                 List<EntityItem> list = this.b.world.a(EntityItem.class, this.b.getBoundingBox().grow(4.0D, 4.0D, 4.0D), EntityRaider.b);
 
                 if (!list.isEmpty()) {
diff --git a/src/main/java/net/minecraft/server/EntityRavager.java b/src/main/java/net/minecraft/server/EntityRavager.java
index 971ea097..9c22323c 100644
--- a/src/main/java/net/minecraft/server/EntityRavager.java
+++ b/src/main/java/net/minecraft/server/EntityRavager.java
@@ -73,7 +73,7 @@ public class EntityRavager extends EntityRaider {
     }
 
     @Override
-    public SoundEffect dV() {
+    public SoundEffect dW() {
         return SoundEffects.ENTITY_RAVAGER_CELEBRATE;
     }
 
@@ -88,7 +88,7 @@ public class EntityRavager extends EntityRaider {
     }
 
     @Override
-    public double aP() {
+    public double aO() {
         return 2.1D;
     }
 
@@ -111,12 +111,12 @@ public class EntityRavager extends EntityRaider {
                 this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue(0.0D);
             } else {
                 double d0 = this.getGoalTarget() != null ? 0.35D : 0.3D;
-                double d1 = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getBaseValue();
+                double d1 = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).b();
 
                 this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue(MathHelper.d(0.1D, d1, d0));
             }
 
-            if (this.positionChanged && this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) {
+            if (this.positionChanged && this.world.getGameRules().getBoolean("mobGriefing")) {
                 boolean flag = false;
                 AxisAlignedBB axisalignedbb = this.getBoundingBox().g(0.2D);
                 Iterator iterator = BlockPosition.b(MathHelper.floor(axisalignedbb.minX), MathHelper.floor(axisalignedbb.minY), MathHelper.floor(axisalignedbb.minZ), MathHelper.floor(axisalignedbb.maxX), MathHelper.floor(axisalignedbb.maxY), MathHelper.floor(axisalignedbb.maxZ)).iterator();
@@ -139,7 +139,7 @@ public class EntityRavager extends EntityRaider {
             if (this.bB > 0) {
                 --this.bB;
                 if (this.bB == 10) {
-                    this.eh();
+                    this.ei();
                 }
             }
 
@@ -149,7 +149,7 @@ public class EntityRavager extends EntityRaider {
 
             if (this.bA > 0) {
                 --this.bA;
-                this.eg();
+                this.eh();
                 if (this.bA == 0) {
                     this.a(SoundEffects.ENTITY_RAVAGER_ROAR, 1.0F, 1.0F);
                     this.bB = 20;
@@ -159,7 +159,7 @@ public class EntityRavager extends EntityRaider {
         }
     }
 
-    private void eg() {
+    private void eh() {
         if (this.random.nextInt(6) == 0) {
             double d0 = this.locX - (double) this.getWidth() * Math.sin((double) (this.aK * 0.017453292F)) + (this.random.nextDouble() * 0.6D - 0.3D);
             double d1 = this.locY + (double) this.getHeight() - 0.3D;
@@ -197,7 +197,7 @@ public class EntityRavager extends EntityRaider {
 
     }
 
-    private void eh() {
+    private void ei() {
         if (this.isAlive()) {
             List<Entity> list = this.world.a(EntityLiving.class, this.getBoundingBox().g(4.0D), EntityRavager.b);
 
@@ -226,7 +226,7 @@ public class EntityRavager extends EntityRaider {
     private void a(Entity entity) {
         double d0 = entity.locX - this.locX;
         double d1 = entity.locZ - this.locZ;
-        double d2 = Math.max(d0 * d0 + d1 * d1, 0.001D);
+        double d2 = d0 * d0 + d1 * d1;
 
         entity.f(d0 / d2 * 4.0D, 0.2D, d1 / d2 * 4.0D);
     }
@@ -269,7 +269,7 @@ public class EntityRavager extends EntityRaider {
     public void a(int i, boolean flag) {}
 
     @Override
-    public boolean dX() {
+    public boolean dY() {
         return false;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntitySheep.java b/src/main/java/net/minecraft/server/EntitySheep.java
index ec13d4f3..df1bfc94 100644
--- a/src/main/java/net/minecraft/server/EntitySheep.java
+++ b/src/main/java/net/minecraft/server/EntitySheep.java
@@ -39,8 +39,8 @@ public class EntitySheep extends EntityAnimal {
     private static final Map<EnumColor, float[]> bB = Maps.newEnumMap((Map) Arrays.stream(EnumColor.values()).collect(Collectors.toMap((enumcolor) -> {
         return enumcolor;
     }, EntitySheep::c)));
-    private int bC;
-    private PathfinderGoalEatTile bD;
+    private int bD;
+    private PathfinderGoalEatTile bE;
 
     private static float[] c(EnumColor enumcolor) {
         if (enumcolor == EnumColor.WHITE) {
@@ -59,13 +59,13 @@ public class EntitySheep extends EntityAnimal {
 
     @Override
     protected void initPathfinder() {
-        this.bD = new PathfinderGoalEatTile(this);
+        this.bE = new PathfinderGoalEatTile(this);
         this.goalSelector.a(0, new PathfinderGoalFloat(this));
         this.goalSelector.a(1, new PathfinderGoalPanic(this, 1.25D));
         this.goalSelector.a(2, new PathfinderGoalBreed(this, 1.0D));
         this.goalSelector.a(3, new PathfinderGoalTempt(this, 1.1D, RecipeItemStack.a(Items.WHEAT), false));
         this.goalSelector.a(4, new PathfinderGoalFollowParent(this, 1.1D));
-        this.goalSelector.a(5, this.bD);
+        this.goalSelector.a(5, this.bE);
         this.goalSelector.a(6, new PathfinderGoalRandomStrollLand(this, 1.0D));
         this.goalSelector.a(7, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 6.0F));
         this.goalSelector.a(8, new PathfinderGoalRandomLookaround(this));
@@ -73,14 +73,14 @@ public class EntitySheep extends EntityAnimal {
 
     @Override
     protected void mobTick() {
-        this.bC = this.bD.g();
+        this.bD = this.bE.g();
         super.mobTick();
     }
 
     @Override
     public void movementTick() {
         if (this.world.isClientSide) {
-            this.bC = Math.max(0, this.bC - 1);
+            this.bD = Math.max(0, this.bD - 1);
         }
 
         super.movementTick();
@@ -102,7 +102,7 @@ public class EntitySheep extends EntityAnimal {
     @Override
     public MinecraftKey getDefaultLootTable() {
         if (this.isSheared()) {
-            return this.getEntityType().h();
+            return this.getEntityType().g();
         } else {
             switch (this.getColor()) {
                 case WHITE:
diff --git a/src/main/java/net/minecraft/server/EntityShulker.java b/src/main/java/net/minecraft/server/EntityShulker.java
index aec2e245..1df311d8 100644
--- a/src/main/java/net/minecraft/server/EntityShulker.java
+++ b/src/main/java/net/minecraft/server/EntityShulker.java
@@ -407,7 +407,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
 
     @Nullable
     @Override
-    public AxisAlignedBB aq() {
+    public AxisAlignedBB ap() {
         return this.isAlive() ? this.getBoundingBox() : null;
     }
 
@@ -430,9 +430,9 @@ public class EntityShulker extends EntityGolem implements IMonster {
 
     public void a(int i) {
         if (!this.world.isClientSide) {
-            this.getAttributeInstance(GenericAttributes.ARMOR).removeModifier(EntityShulker.bB);
+            this.getAttributeInstance(GenericAttributes.ARMOR).c(EntityShulker.bB);
             if (i == 0) {
-                this.getAttributeInstance(GenericAttributes.ARMOR).addModifier(EntityShulker.bB);
+                this.getAttributeInstance(GenericAttributes.ARMOR).b(EntityShulker.bB);
                 this.a(SoundEffects.ENTITY_SHULKER_CLOSE, 1.0F, 1.0F);
             } else {
                 this.a(SoundEffects.ENTITY_SHULKER_OPEN, 1.0F, 1.0F);
@@ -461,7 +461,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
     public void collide(Entity entity) {}
 
     @Override
-    public float aS() {
+    public float aR() {
         return 0.0F;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityShulkerBullet.java b/src/main/java/net/minecraft/server/EntityShulkerBullet.java
index 5fe06d80..7bb8fb0d 100644
--- a/src/main/java/net/minecraft/server/EntityShulkerBullet.java
+++ b/src/main/java/net/minecraft/server/EntityShulkerBullet.java
@@ -150,7 +150,7 @@ public class EntityShulkerBullet extends Entity {
         double d3 = (double) blockposition.getZ() + 0.5D;
         EnumDirection enumdirection = null;
 
-        if (!blockposition.a((IPosition) this.getPositionVector(), 2.0D)) {
+        if (!blockposition.a((IPosition) this.ch(), 2.0D)) {
             BlockPosition blockposition1 = new BlockPosition(this);
             List<EnumDirection> list = Lists.newArrayList();
 
@@ -310,7 +310,7 @@ public class EntityShulkerBullet extends Entity {
     }
 
     @Override
-    public float aF() {
+    public float aE() {
         return 1.0F;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntitySilverfish.java b/src/main/java/net/minecraft/server/EntitySilverfish.java
index eb3c56fe..d823c6b6 100644
--- a/src/main/java/net/minecraft/server/EntitySilverfish.java
+++ b/src/main/java/net/minecraft/server/EntitySilverfish.java
@@ -5,7 +5,8 @@ import java.util.Random;
 
 public class EntitySilverfish extends EntityMonster {
 
-    private EntitySilverfish.PathfinderGoalSilverfishWakeOthers b;
+    private static final PathfinderTargetCondition b = (new PathfinderTargetCondition()).a(5.0D).e();
+    private EntitySilverfish.PathfinderGoalSilverfishWakeOthers c;
 
     public EntitySilverfish(EntityTypes<? extends EntitySilverfish> entitytypes, World world) {
         super(entitytypes, world);
@@ -13,9 +14,9 @@ public class EntitySilverfish extends EntityMonster {
 
     @Override
     protected void initPathfinder() {
-        this.b = new EntitySilverfish.PathfinderGoalSilverfishWakeOthers(this);
+        this.c = new EntitySilverfish.PathfinderGoalSilverfishWakeOthers(this);
         this.goalSelector.a(1, new PathfinderGoalFloat(this));
-        this.goalSelector.a(3, this.b);
+        this.goalSelector.a(3, this.c);
         this.goalSelector.a(4, new PathfinderGoalMeleeAttack(this, 1.0D, false));
         this.goalSelector.a(5, new EntitySilverfish.PathfinderGoalSilverfishHideInBlock(this));
         this.targetSelector.a(1, (new PathfinderGoalHurtByTarget(this, new Class[0])).a(new Class[0])); // CraftBukkit - decompile error
@@ -23,7 +24,7 @@ public class EntitySilverfish extends EntityMonster {
     }
 
     @Override
-    public double aO() {
+    public double aN() {
         return 0.1D;
     }
 
@@ -70,8 +71,8 @@ public class EntitySilverfish extends EntityMonster {
         if (this.isInvulnerable(damagesource)) {
             return false;
         } else {
-            if ((damagesource instanceof EntityDamageSource || damagesource == DamageSource.MAGIC) && this.b != null) {
-                this.b.g();
+            if ((damagesource instanceof EntityDamageSource || damagesource == DamageSource.MAGIC) && this.c != null) {
+                this.c.g();
             }
 
             return super.damageEntity(damagesource, f);
@@ -95,9 +96,15 @@ public class EntitySilverfish extends EntityMonster {
         return BlockMonsterEggs.j(iworldreader.getType(blockposition.down())) ? 10.0F : super.a(blockposition, iworldreader);
     }
 
-    public static boolean b(EntityTypes<EntitySilverfish> entitytypes, GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition, Random random) {
-        if (d(entitytypes, generatoraccess, enummobspawn, blockposition, random)) {
-            EntityHuman entityhuman = generatoraccess.a((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D, 5.0D, true);
+    @Override
+    protected boolean I_() {
+        return true;
+    }
+
+    @Override
+    public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
+        if (super.a(generatoraccess, enummobspawn)) {
+            EntityHuman entityhuman = this.world.a(EntitySilverfish.b, (EntityLiving) this);
 
             return !(entityhuman != null && !entityhuman.affectsSpawning) && entityhuman == null; // Paper - Affects Spawning API
         } else {
@@ -129,7 +136,7 @@ public class EntitySilverfish extends EntityMonster {
             } else {
                 Random random = this.a.getRandom();
 
-                if (this.a.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING) && random.nextInt(10) == 0) {
+                if (this.a.world.getGameRules().getBoolean("mobGriefing") && random.nextInt(10) == 0) {
                     this.h = EnumDirection.a(random);
                     BlockPosition blockposition = (new BlockPosition(this.a.locX, this.a.locY + 0.5D, this.a.locZ)).shift(this.h);
                     IBlockData iblockdata = this.a.world.getType(blockposition);
@@ -216,7 +223,7 @@ public class EntitySilverfish extends EntityMonster {
                                     continue;
                                 }
                                 // CraftBukkit end
-                                if (world.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) {
+                                if (world.getGameRules().getBoolean("mobGriefing")) {
                                     world.b(blockposition1, true);
                                 } else {
                                     world.setTypeAndData(blockposition1, ((BlockMonsterEggs) block).d().getBlockData(), 3);
diff --git a/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java b/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java
index 8f1b5a55..85157e80 100644
--- a/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java
+++ b/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java
@@ -196,7 +196,7 @@ public abstract class EntitySkeletonAbstract extends EntityMonster implements IR
     }
 
     @Override
-    public double aO() {
+    public double aN() {
         return -0.6D;
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntitySlime.java b/src/main/java/net/minecraft/server/EntitySlime.java
index 253ff959..e28c0673 100644
--- a/src/main/java/net/minecraft/server/EntitySlime.java
+++ b/src/main/java/net/minecraft/server/EntitySlime.java
@@ -1,7 +1,6 @@
 package net.minecraft.server;
 
 import java.util.EnumSet;
-import java.util.Random;
 import javax.annotation.Nullable;
 // Paper start
 import com.destroystokyo.paper.event.entity.SlimeChangeDirectionEvent;
@@ -151,7 +150,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
             this.yaw = this.aM;
             this.aK = this.aM;
             if (this.isInWater() && this.random.nextInt(20) == 0) {
-                this.az();
+                this.ay();
             }
         }
 
@@ -250,7 +249,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
     }
 
     protected boolean dV() {
-        return !this.ea() && this.df();
+        return !this.ea() && this.de();
     }
 
     protected int dW() {
@@ -273,25 +272,28 @@ public class EntitySlime extends EntityInsentient implements IMonster {
 
     @Override
     protected MinecraftKey getDefaultLootTable() {
-        return this.getSize() == 1 ? this.getEntityType().h() : LootTables.a;
+        return this.getSize() == 1 ? this.getEntityType().g() : LootTables.a;
     }
 
-    public static boolean c(EntityTypes<EntitySlime> entitytypes, GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition, Random random) {
-        if (generatoraccess.getWorldData().getType() == WorldType.FLAT && random.nextInt(4) != 1) {
+    @Override
+    public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
+        BlockPosition blockposition = new BlockPosition(this.locX, 0.0D, this.locZ);
+
+        if (generatoraccess.getWorldData().getType() == WorldType.FLAT && this.random.nextInt(4) != 1) {
             return false;
         } else {
             if (generatoraccess.getDifficulty() != EnumDifficulty.PEACEFUL) {
                 BiomeBase biomebase = generatoraccess.getBiome(blockposition);
 
-                if (biomebase == Biomes.SWAMP && blockposition.getY() > 50 && blockposition.getY() < 70 && random.nextFloat() < 0.5F && random.nextFloat() < generatoraccess.aa() && generatoraccess.getLightLevel(blockposition) <= random.nextInt(8)) {
-                    return a(entitytypes, generatoraccess, enummobspawn, blockposition, random);
+                if (biomebase == Biomes.SWAMP && this.locY > 50.0D && this.locY < 70.0D && this.random.nextFloat() < 0.5F && this.random.nextFloat() < generatoraccess.aa() && generatoraccess.getLightLevel(new BlockPosition(this)) <= this.random.nextInt(8)) {
+                    return super.a(generatoraccess, enummobspawn);
                 }
 
                 ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(blockposition);
-                boolean flag = generatoraccess.getMinecraftWorld().paperConfig.allChunksAreSlimeChunks || SeededRandom.a(chunkcoordintpair.x, chunkcoordintpair.z, generatoraccess.getSeed(), generatoraccess.getMinecraftWorld().spigotConfig.slimeSeed).nextInt(10) == 0; // Spigot // Paper
+                boolean flag = world.paperConfig.allChunksAreSlimeChunks ||  SeededRandom.a(chunkcoordintpair.x, chunkcoordintpair.z, generatoraccess.getSeed(), world.spigotConfig.slimeSeed).nextInt(10) == 0; // Spigot // Paper
 
-                if (random.nextInt(10) == 0 && flag && blockposition.getY() < 40) {
-                    return a(entitytypes, generatoraccess, enummobspawn, blockposition, random);
+                if (this.random.nextInt(10) == 0 && flag && this.locY < 40.0D) {
+                    return super.a(generatoraccess, enummobspawn);
                 }
             }
 
@@ -377,7 +379,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
 
         @Override
         public boolean a() {
-            return (this.a.isInWater() || this.a.aD()) && this.a.getControllerMove() instanceof EntitySlime.ControllerMoveSlime && this.a.canWander && new SlimeSwimEvent((Slime) this.a.getBukkitEntity()).callEvent(); // Paper
+            return (this.a.isInWater() || this.a.aC()) && this.a.getControllerMove() instanceof EntitySlime.ControllerMoveSlime && this.a.canWander && new SlimeSwimEvent((Slime) this.a.getBukkitEntity()).callEvent(); // Paper
         }
 
         @Override
@@ -403,7 +405,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
 
         @Override
         public boolean a() {
-            return this.a.canWander && this.a.getGoalTarget() == null && (this.a.onGround || this.a.isInWater() || this.a.aD() || this.a.hasEffect(MobEffects.LEVITATION)) && this.a.getControllerMove() instanceof EntitySlime.ControllerMoveSlime;
+            return this.a.canWander && this.a.getGoalTarget() == null && (this.a.onGround || this.a.isInWater() || this.a.aC() || this.a.hasEffect(MobEffects.LEVITATION)) && this.a.getControllerMove() instanceof EntitySlime.ControllerMoveSlime; // Paper
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/server/EntitySmallFireball.java b/src/main/java/net/minecraft/server/EntitySmallFireball.java
index c0071eb1..9800e032 100644
--- a/src/main/java/net/minecraft/server/EntitySmallFireball.java
+++ b/src/main/java/net/minecraft/server/EntitySmallFireball.java
@@ -12,7 +12,7 @@ public class EntitySmallFireball extends EntityFireballFireball {
         super(EntityTypes.SMALL_FIREBALL, entityliving, d0, d1, d2, world);
         // CraftBukkit start
         if (this.shooter != null && this.shooter instanceof EntityInsentient) {
-            isIncendiary = this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING);
+            isIncendiary = this.world.getGameRules().getBoolean("mobGriefing");
         }
         // CraftBukkit end
     }
@@ -28,8 +28,6 @@ public class EntitySmallFireball extends EntityFireballFireball {
                 Entity entity = ((MovingObjectPositionEntity) movingobjectposition).getEntity();
 
                 if (!entity.isFireProof()) {
-                    int i = entity.ad();
-
                     // CraftBukkit start - Entity damage by entity event + combust event
                     if (isIncendiary) {
                         EntityCombustByEntityEvent event = new EntityCombustByEntityEvent((org.bukkit.entity.Projectile) this.getBukkitEntity(), entity.getBukkitEntity(), 5);
@@ -44,8 +42,6 @@ public class EntitySmallFireball extends EntityFireballFireball {
 
                     if (flag) {
                         this.a(this.shooter, entity);
-                    } else {
-                        entity.g(i);
                     }
                 }
             } else if (isIncendiary) { // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/EntitySnowman.java b/src/main/java/net/minecraft/server/EntitySnowman.java
index fe1381cc..8677f081 100644
--- a/src/main/java/net/minecraft/server/EntitySnowman.java
+++ b/src/main/java/net/minecraft/server/EntitySnowman.java
@@ -61,7 +61,7 @@ public class EntitySnowman extends EntityGolem implements IRangedEntity {
             int j = MathHelper.floor(this.locY);
             int k = MathHelper.floor(this.locZ);
 
-            if (this.au()) {
+            if (this.at()) {
                 this.damageEntity(DamageSource.DROWN, 1.0F);
             }
 
@@ -69,7 +69,7 @@ public class EntitySnowman extends EntityGolem implements IRangedEntity {
                 this.damageEntity(CraftEventFactory.MELTING, 1.0F); // CraftBukkit - DamageSource.BURN -> CraftEventFactory.MELTING
             }
 
-            if (!this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) {
+            if (!this.world.getGameRules().getBoolean("mobGriefing")) {
                 return;
             }
 
diff --git a/src/main/java/net/minecraft/server/EntitySpider.java b/src/main/java/net/minecraft/server/EntitySpider.java
index 3929c86f..b560a896 100644
--- a/src/main/java/net/minecraft/server/EntitySpider.java
+++ b/src/main/java/net/minecraft/server/EntitySpider.java
@@ -25,7 +25,7 @@ public class EntitySpider extends EntityMonster {
     }
 
     @Override
-    public double aP() {
+    public double aO() {
         return (double) (this.getHeight() * 0.5F);
     }
 
@@ -160,7 +160,7 @@ public class EntitySpider extends EntityMonster {
 
         @Override
         public boolean a() {
-            float f = this.e.aF();
+            float f = this.e.aE();
 
             return f >= 0.5F ? false : super.a();
         }
@@ -179,7 +179,7 @@ public class EntitySpider extends EntityMonster {
 
         @Override
         public boolean b() {
-            float f = this.a.aF();
+            float f = this.a.aE();
 
             if (f >= 0.5F && this.a.getRandom().nextInt(100) == 0) {
                 this.a.setGoalTarget((EntityLiving) null);
diff --git a/src/main/java/net/minecraft/server/EntitySquid.java b/src/main/java/net/minecraft/server/EntitySquid.java
index a4d2ff64..77c0ed42 100644
--- a/src/main/java/net/minecraft/server/EntitySquid.java
+++ b/src/main/java/net/minecraft/server/EntitySquid.java
@@ -1,7 +1,5 @@
 package net.minecraft.server;
 
-import java.util.Random;
-
 public class EntitySquid extends EntityWaterAnimal {
 
     public float b;
@@ -88,7 +86,7 @@ public class EntitySquid extends EntityWaterAnimal {
             }
         }
 
-        if (this.av()) {
+        if (this.au()) {
             if (this.bA < 3.1415927F) {
                 float f = this.bA / 3.1415927F;
 
@@ -153,7 +151,7 @@ public class EntitySquid extends EntityWaterAnimal {
     }
 
     private void dV() {
-        this.a(SoundEffects.ENTITY_SQUID_SQUIRT, this.getSoundVolume(), this.cV());
+        this.a(SoundEffects.ENTITY_SQUID_SQUIRT, this.getSoundVolume(), this.cU());
         Vec3D vec3d = this.f(new Vec3D(0.0D, -1.0D, 0.0D)).add(this.locX, this.locY, this.locZ);
 
         for (int i = 0; i < 30; ++i) {
@@ -170,9 +168,10 @@ public class EntitySquid extends EntityWaterAnimal {
         this.move(EnumMoveType.SELF, this.getMot());
     }
 
-    public static boolean b(EntityTypes<EntitySquid> entitytypes, GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition, Random random) {
-        final double maxHeight = generatoraccess.getMinecraftWorld().paperConfig.squidMaxSpawnHeight > 0 ? generatoraccess.getMinecraftWorld().paperConfig.squidMaxSpawnHeight : generatoraccess.getSeaLevel(); // Paper
-        return blockposition.getY() > generatoraccess.getMinecraftWorld().spigotConfig.squidSpawnRangeMin && blockposition.getY() < maxHeight; // Spigot // Paper
+    @Override
+    public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
+        final double maxHeight = world.paperConfig.squidMaxSpawnHeight > 0 ? world.paperConfig.squidMaxSpawnHeight : world.getSeaLevel();
+        return this.locY > this.world.spigotConfig.squidSpawnRangeMin && this.locY < maxHeight; // Spigot // Paper
     }
 
     public void a(float f, float f1, float f2) {
@@ -259,7 +258,7 @@ public class EntitySquid extends EntityWaterAnimal {
 
         @Override
         public void e() {
-            int i = this.b.cw();
+            int i = this.b.cv();
 
             if (i > 100) {
                 this.b.a(0.0F, 0.0F, 0.0F);
diff --git a/src/main/java/net/minecraft/server/EntityTNTPrimed.java b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
index dc0d944e..baeb8514 100644
--- a/src/main/java/net/minecraft/server/EntityTNTPrimed.java
+++ b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
@@ -77,7 +77,7 @@ public class EntityTNTPrimed extends Entity {
             this.die();
             // CraftBukkit end
         } else {
-            this.ay();
+            this.ax();
             this.world.addParticle(Particles.SMOKE, this.locX, this.locY + 0.5D, this.locZ, 0.0D, 0.0D, 0.0D);
         }
         // Paper start - Optional prevent TNT from moving in water
diff --git a/src/main/java/net/minecraft/server/EntityTippedArrow.java b/src/main/java/net/minecraft/server/EntityTippedArrow.java
index ddf420ea..581d08c1 100644
--- a/src/main/java/net/minecraft/server/EntityTippedArrow.java
+++ b/src/main/java/net/minecraft/server/EntityTippedArrow.java
@@ -71,7 +71,7 @@ public class EntityTippedArrow extends EntityArrow {
         this.datawatcher.set(EntityTippedArrow.COLOR, PotionUtil.a((Collection) PotionUtil.a(this.potionRegistry, (Collection) this.effects)));
     }
 
-    public void addEffect(MobEffect mobeffect) {
+    public void a(MobEffect mobeffect) {
         this.effects.add(mobeffect);
         this.getDataWatcher().set(EntityTippedArrow.COLOR, PotionUtil.a((Collection) PotionUtil.a(this.potionRegistry, (Collection) this.effects)));
     }
@@ -88,10 +88,10 @@ public class EntityTippedArrow extends EntityArrow {
         if (this.world.isClientSide) {
             if (this.inGround) {
                 if (this.d % 5 == 0) {
-                    this.b(1);
+                    this.b((int) 1);
                 }
             } else {
-                this.b(2);
+                this.b((int) 2);
             }
         } else if (this.inGround && this.d != 0 && !this.effects.isEmpty() && this.d >= 600) {
             this.world.broadcastEntityEffect(this, (byte) 0);
@@ -183,7 +183,7 @@ public class EntityTippedArrow extends EntityArrow {
         while (iterator.hasNext()) {
             MobEffect mobeffect = (MobEffect) iterator.next();
 
-            this.addEffect(mobeffect);
+            this.a(mobeffect);
         }
 
         if (nbttagcompound.hasKeyOfType("Color", 99)) {
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 460c687d..17b6ab57 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -265,7 +265,7 @@ public class EntityTrackerEntry {
     public void a(Consumer<Packet<?>> consumer, EntityPlayer entityplayer) { // CraftBukkit - add player
         if (this.tracker.dead) {
             // CraftBukkit start - Remove useless error spam, just return
-            // EntityTrackerEntry.LOGGER.warn("Fetching packet for removed entity " + this.tracker);
+            // EntityTrackerEntry.LOGGER.warn("Fetching addPacket for removed entity")
             return;
             // CraftBukkit end
         }
diff --git a/src/main/java/net/minecraft/server/EntityTurtle.java b/src/main/java/net/minecraft/server/EntityTurtle.java
index 0bd80e56..e4eecf56 100644
--- a/src/main/java/net/minecraft/server/EntityTurtle.java
+++ b/src/main/java/net/minecraft/server/EntityTurtle.java
@@ -11,11 +11,11 @@ public class EntityTurtle extends EntityAnimal {
 
     private static final DataWatcherObject<BlockPosition> bA = DataWatcher.a(EntityTurtle.class, DataWatcherRegistry.l);
     private static final DataWatcherObject<Boolean> bB = DataWatcher.a(EntityTurtle.class, DataWatcherRegistry.i);
-    private static final DataWatcherObject<Boolean> bC = DataWatcher.a(EntityTurtle.class, DataWatcherRegistry.i);
-    private static final DataWatcherObject<BlockPosition> bD = DataWatcher.a(EntityTurtle.class, DataWatcherRegistry.l);
-    private static final DataWatcherObject<Boolean> bE = DataWatcher.a(EntityTurtle.class, DataWatcherRegistry.i);
+    private static final DataWatcherObject<Boolean> bD = DataWatcher.a(EntityTurtle.class, DataWatcherRegistry.i);
+    private static final DataWatcherObject<BlockPosition> bE = DataWatcher.a(EntityTurtle.class, DataWatcherRegistry.l);
     private static final DataWatcherObject<Boolean> bF = DataWatcher.a(EntityTurtle.class, DataWatcherRegistry.i);
-    private int bG;
+    private static final DataWatcherObject<Boolean> bG = DataWatcher.a(EntityTurtle.class, DataWatcherRegistry.i);
+    private int bH;
     public static final Predicate<EntityLiving> bz = (entityliving) -> {
         return entityliving.isBaby() && !entityliving.isInWater();
     };
@@ -23,68 +23,69 @@ public class EntityTurtle extends EntityAnimal {
     public EntityTurtle(EntityTypes<? extends EntityTurtle> entitytypes, World world) {
         super(entitytypes, world);
         this.moveController = new EntityTurtle.e(this);
+        this.bC = Blocks.SAND;
         this.K = 1.0F;
     }
 
-    public final void setHome(BlockPosition pos) { g(pos); } // Paper - OBFHELPER
+    public void setHome(BlockPosition pos) { g(pos); } // Paper - OBFHELPER
     public void g(BlockPosition blockposition) {
         this.datawatcher.set(EntityTurtle.bA, blockposition);
     }
 
-    public final BlockPosition getHome() { return this.dX(); } // Paper - OBFHELPER
+    public BlockPosition getHome() { return dX(); } // Paper - OBFHELPER
     private BlockPosition dX() {
         return (BlockPosition) this.datawatcher.get(EntityTurtle.bA);
     }
 
-    public final void setTravelPos(BlockPosition pos) { this.h(pos); } // Paper - OBFHELPER
+    public void setTravelPos(BlockPosition pos) { h(pos); } // Paper - OBFHELPER
     private void h(BlockPosition blockposition) {
-        this.datawatcher.set(EntityTurtle.bD, blockposition);
+        this.datawatcher.set(EntityTurtle.bE, blockposition);
     }
 
-    public final BlockPosition getTravelPos() { return this.dY(); } // Paper - OBFHELPER
+    public BlockPosition getTravelPos() { return dY(); } // Paper - OBFHELPER
     private BlockPosition dY() {
-        return (BlockPosition) this.datawatcher.get(EntityTurtle.bD);
+        return (BlockPosition) this.datawatcher.get(EntityTurtle.bE);
     }
 
-    public final boolean hasEgg() { return this.dV(); } // Paper - OBFHELPER
+    public boolean hasEgg() { return dV(); } // Paper - OBFHELPER
     public boolean dV() {
         return (Boolean) this.datawatcher.get(EntityTurtle.bB);
     }
 
-    public final void setHasEgg(boolean hasEgg) { this.r(hasEgg); } // Paper - OBFHELPER
+    public void setHasEgg(boolean hasEgg) { r(hasEgg); } // Paper - OBFHELPER
     private void r(boolean flag) {
         this.datawatcher.set(EntityTurtle.bB, flag);
     }
 
-    public final boolean isDigging() { return this.dW(); } // Paper - OBFHELPER
+    public boolean isDigging() { return dW(); } // Paper - OBFHELPER
     public boolean dW() {
-        return (Boolean) this.datawatcher.get(EntityTurtle.bC);
+        return (Boolean) this.datawatcher.get(EntityTurtle.bD);
     }
 
-    public final void setDigging(boolean digging) { this.s(digging); } // Paper - OBFHELPER
+    public void setDigging(boolean digging) { s(digging); } // Paper - OBFHELPER
     private void s(boolean flag) {
-        this.bG = flag ? 1 : 0;
-        this.datawatcher.set(EntityTurtle.bC, flag);
+        this.bH = flag ? 1 : 0;
+        this.datawatcher.set(EntityTurtle.bD, flag);
     }
 
-    public final boolean isGoingHome() { return this.dZ(); } // Paper - OBFHELPER
+    public boolean isGoingHome() { return dZ(); } // Paper - OBFHELPER
     private boolean dZ() {
-        return (Boolean) this.datawatcher.get(EntityTurtle.bE);
+        return (Boolean) this.datawatcher.get(EntityTurtle.bF);
     }
 
-    public final void setGoingHome(boolean goingHome) { this.t(goingHome); } // Paper - OBFHELPER
+    public void setGoingHome(boolean goingHome) { t(goingHome); } // Paper - OBFHELPER
     private void t(boolean flag) {
-        this.datawatcher.set(EntityTurtle.bE, flag);
+        this.datawatcher.set(EntityTurtle.bF, flag);
     }
 
-    public final boolean isTravelling() { return this.ee(); } // Paper - OBFHELPER
+    public boolean isTravelling() { return ee(); } // Paper - OBFHELPER
     private boolean ee() {
-        return (Boolean) this.datawatcher.get(EntityTurtle.bF);
+        return (Boolean) this.datawatcher.get(EntityTurtle.bG);
     }
 
-    public final void setTravelling(boolean travelling) { this.u(travelling); } // Paper - OBFHELPER
+    public void setTravelling(boolean travelling) { u(travelling); } // Paper - OBFHELPER
     private void u(boolean flag) {
-        this.datawatcher.set(EntityTurtle.bF, flag);
+        this.datawatcher.set(EntityTurtle.bG, flag);
     }
 
     @Override
@@ -92,10 +93,10 @@ public class EntityTurtle extends EntityAnimal {
         super.initDatawatcher();
         this.datawatcher.register(EntityTurtle.bA, BlockPosition.ZERO);
         this.datawatcher.register(EntityTurtle.bB, false);
-        this.datawatcher.register(EntityTurtle.bD, BlockPosition.ZERO);
-        this.datawatcher.register(EntityTurtle.bE, false);
+        this.datawatcher.register(EntityTurtle.bE, BlockPosition.ZERO);
         this.datawatcher.register(EntityTurtle.bF, false);
-        this.datawatcher.register(EntityTurtle.bC, false);
+        this.datawatcher.register(EntityTurtle.bG, false);
+        this.datawatcher.register(EntityTurtle.bD, false);
     }
 
     @Override
@@ -134,8 +135,11 @@ public class EntityTurtle extends EntityAnimal {
         return super.prepare(generatoraccess, difficultydamagescaler, enummobspawn, groupdataentity, nbttagcompound);
     }
 
-    public static boolean c(EntityTypes<EntityTurtle> entitytypes, GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition, Random random) {
-        return blockposition.getY() < generatoraccess.getSeaLevel() + 4 && generatoraccess.getType(blockposition.down()).getBlock() == Blocks.SAND && generatoraccess.getLightLevel(blockposition, 0) > 8;
+    @Override
+    public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
+        BlockPosition blockposition = new BlockPosition(this.locX, this.getBoundingBox().minY, this.locZ);
+
+        return blockposition.getY() < generatoraccess.getSeaLevel() + 4 && super.a(generatoraccess, enummobspawn);
     }
 
     @Override
@@ -159,12 +163,12 @@ public class EntityTurtle extends EntityAnimal {
     }
 
     @Override
-    public boolean bE() {
+    public boolean bD() {
         return false;
     }
 
     @Override
-    public boolean cm() {
+    public boolean cl() {
         return true;
     }
 
@@ -219,12 +223,12 @@ public class EntityTurtle extends EntityAnimal {
     }
 
     @Override
-    protected float ag() {
+    protected float af() {
         return this.F + 0.15F;
     }
 
     @Override
-    public float cn() {
+    public float cm() {
         return this.isBaby() ? 0.3F : 1.0F;
     }
 
@@ -246,13 +250,13 @@ public class EntityTurtle extends EntityAnimal {
 
     @Override
     public float a(BlockPosition blockposition, IWorldReader iworldreader) {
-        return !this.dZ() && iworldreader.getFluid(blockposition).a(TagsFluid.WATER) ? 10.0F : (iworldreader.getType(blockposition.down()).getBlock() == Blocks.SAND ? 10.0F : iworldreader.v(blockposition) - 0.5F);
+        return !this.dZ() && iworldreader.getFluid(blockposition).a(TagsFluid.WATER) ? 10.0F : super.a(blockposition, iworldreader);
     }
 
     @Override
     public void movementTick() {
         super.movementTick();
-        if (this.isAlive() && this.dW() && this.bG >= 1 && this.bG % 5 == 0) {
+        if (this.isAlive() && this.dW() && this.bH >= 1 && this.bH % 5 == 0) {
             BlockPosition blockposition = new BlockPosition(this);
 
             if (this.world.getType(blockposition.down()).getBlock() == Blocks.SAND) {
@@ -265,7 +269,7 @@ public class EntityTurtle extends EntityAnimal {
     @Override
     protected void l() {
         super.l();
-        if (!this.isBaby() && this.world.getGameRules().getBoolean(GameRules.DO_MOB_LOOT)) {
+        if (!this.isBaby() && this.world.getGameRules().getBoolean("doMobLoot")) {
             this.forceDrops = true; // CraftBukkit
             this.a((IMaterial) Items.SCUTE, 1);
             this.forceDrops = false; // CraftBukkit
@@ -275,11 +279,11 @@ public class EntityTurtle extends EntityAnimal {
 
     @Override
     public void e(Vec3D vec3d) {
-        if (this.df() && this.isInWater()) {
+        if (this.de() && this.isInWater()) {
             this.a(0.1F, vec3d);
             this.move(EnumMoveType.SELF, this.getMot());
             this.setMot(this.getMot().a(0.9D));
-            if (this.getGoalTarget() == null && (!this.dZ() || !this.dX().a((IPosition) this.getPositionVector(), 20.0D))) {
+            if (this.getGoalTarget() == null && (!this.dZ() || !this.dX().a((IPosition) this.ch(), 20.0D))) {
                 this.setMot(this.getMot().add(0.0D, -0.005D, 0.0D));
             }
         } else {
@@ -342,15 +346,15 @@ public class EntityTurtle extends EntityAnimal {
         private void g() {
             if (this.i.isInWater()) {
                 this.i.setMot(this.i.getMot().add(0.0D, 0.005D, 0.0D));
-                if (!this.i.dX().a((IPosition) this.i.getPositionVector(), 16.0D)) {
-                    this.i.o(Math.max(this.i.db() / 2.0F, 0.08F));
+                if (!this.i.dX().a((IPosition) this.i.ch(), 16.0D)) {
+                    this.i.o(Math.max(this.i.da() / 2.0F, 0.08F));
                 }
 
                 if (this.i.isBaby()) {
-                    this.i.o(Math.max(this.i.db() / 3.0F, 0.06F));
+                    this.i.o(Math.max(this.i.da() / 3.0F, 0.06F));
                 }
             } else if (this.i.onGround) {
-                this.i.o(Math.max(this.i.db() / 2.0F, 0.06F));
+                this.i.o(Math.max(this.i.da() / 2.0F, 0.06F));
             }
 
         }
@@ -371,8 +375,8 @@ public class EntityTurtle extends EntityAnimal {
                 this.i.aK = this.i.yaw;
                 float f1 = (float) (this.e * this.i.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getValue());
 
-                this.i.o(MathHelper.g(0.125F, this.i.db(), f1));
-                this.i.setMot(this.i.getMot().add(0.0D, (double) this.i.db() * d1 * 0.1D, 0.0D));
+                this.i.o(MathHelper.g(0.125F, this.i.da(), f1));
+                this.i.setMot(this.i.getMot().add(0.0D, (double) this.i.da() * d1 * 0.1D, 0.0D));
             } else {
                 this.i.o(0.0F);
             }
@@ -438,12 +442,12 @@ public class EntityTurtle extends EntityAnimal {
 
         @Override
         public boolean a() {
-            return this.g.dV() && this.g.dX().a((IPosition) this.g.getPositionVector(), 9.0D) ? super.a() : false;
+            return this.g.dV() && this.g.dX().a((IPosition) this.g.ch(), 9.0D) ? super.a() : false;
         }
 
         @Override
         public boolean b() {
-            return super.b() && this.g.dV() && this.g.dX().a((IPosition) this.g.getPositionVector(), 9.0D);
+            return super.b() && this.g.dV() && this.g.dX().a((IPosition) this.g.ch(), 9.0D);
         }
 
         @Override
@@ -452,9 +456,9 @@ public class EntityTurtle extends EntityAnimal {
             BlockPosition blockposition = new BlockPosition(this.g);
 
             if (!this.g.isInWater() && this.k()) {
-                if (this.g.bG < 1) {
+                if (this.g.bH < 1) {
                     this.g.setDigging(new com.destroystokyo.paper.event.entity.TurtleStartDiggingEvent((org.bukkit.entity.Turtle) this.g.getBukkitEntity(), MCUtil.toLocation(this.g.world, this.e)).callEvent()); // Paper
-                } else if (this.g.bG > 200) {
+                } else if (this.g.bH > 200) {
                     World world = this.g.world;
 
                     // CraftBukkit start
@@ -462,8 +466,9 @@ public class EntityTurtle extends EntityAnimal {
                     int eggCount = this.g.random.nextInt(4) + 1;
                     com.destroystokyo.paper.event.entity.TurtleLayEggEvent layEggEvent = new com.destroystokyo.paper.event.entity.TurtleLayEggEvent((org.bukkit.entity.Turtle) this.g.getBukkitEntity(), MCUtil.toLocation(this.g.world, this.e.up()), eggCount);
                     if (layEggEvent.callEvent() && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(this.g, this.e.up(), Blocks.TURTLE_EGG.getBlockData().set(BlockTurtleEgg.b, layEggEvent.getEggCount())).isCancelled()) {
-                    world.playSound((EntityHuman) null, blockposition, SoundEffects.ENTITY_TURTLE_LAY_EGG, SoundCategory.BLOCKS, 0.3F, 0.9F + world.random.nextFloat() * 0.2F);
+                    world.a((EntityHuman) null, blockposition, SoundEffects.ENTITY_TURTLE_LAY_EGG, SoundCategory.BLOCKS, 0.3F, 0.9F + world.random.nextFloat() * 0.2F);
                     world.setTypeAndData(this.e.up(), (IBlockData) Blocks.TURTLE_EGG.getBlockData().set(BlockTurtleEgg.b, layEggEvent.getEggCount()), 3);
+                    // Paper end
                     }
                     // CraftBukkit end
                     this.g.r(false);
@@ -472,7 +477,7 @@ public class EntityTurtle extends EntityAnimal {
                 }
 
                 if (this.g.dW()) {
-                    this.g.bG++;
+                    this.g.bH++;
                 }
             }
 
@@ -522,8 +527,8 @@ public class EntityTurtle extends EntityAnimal {
             this.partner.resetLove();
             Random random = this.animal.getRandom();
 
-            if (this.b.getGameRules().getBoolean(GameRules.DO_MOB_LOOT)) {
-                this.b.addEntity(new EntityExperienceOrb(this.b, this.animal.locX, this.animal.locY, this.animal.locZ, random.nextInt(7) + 1, org.bukkit.entity.ExperienceOrb.SpawnReason.BREED, entityplayer)); // Paper;
+            if (this.b.getGameRules().getBoolean("doMobLoot")) {
+                this.b.addEntity(new EntityExperienceOrb(this.b, this.animal.locX, this.animal.locY, this.animal.locZ, random.nextInt(7) + 1, org.bukkit.entity.ExperienceOrb.SpawnReason.BREED, entityplayer)); // Paper
             }
 
         }
@@ -598,7 +603,7 @@ public class EntityTurtle extends EntityAnimal {
 
         @Override
         public boolean a() {
-            return this.a.isBaby() ? false : (this.a.dW() ? true : (this.a.getRandom().nextInt(700) != 0 ? false : !this.a.dY().a((IPosition) this.a.getPositionVector(), 64.0D))) && new com.destroystokyo.paper.event.entity.TurtleGoHomeEvent((org.bukkit.entity.Turtle) this.a.getBukkitEntity()).callEvent(); // Paper
+            return this.a.isBaby() ? false : (this.a.dV() ? true : (this.a.getRandom().nextInt(700) != 0 ? false : !this.a.dX().a((IPosition) this.a.ch(), 64.0D))) && new com.destroystokyo.paper.event.entity.TurtleGoHomeEvent((org.bukkit.entity.Turtle) this.a.getBukkitEntity()).callEvent(); // Paper;
         }
 
         @Override
@@ -615,13 +620,13 @@ public class EntityTurtle extends EntityAnimal {
 
         @Override
         public boolean b() {
-            return !this.a.dX().a((IPosition) this.a.getPositionVector(), 7.0D) && !this.c && this.d <= 600;
+            return !this.a.dX().a((IPosition) this.a.ch(), 7.0D) && !this.c && this.d <= 600;
         }
 
         @Override
         public void e() {
             BlockPosition blockposition = this.a.dX();
-            boolean flag = blockposition.a((IPosition) this.a.getPositionVector(), 16.0D);
+            boolean flag = blockposition.a((IPosition) this.a.ch(), 16.0D);
 
             if (flag) {
                 ++this.d;
diff --git a/src/main/java/net/minecraft/server/EntityTypes.java b/src/main/java/net/minecraft/server/EntityTypes.java
index a7fc34f8..77d4bbce 100644
--- a/src/main/java/net/minecraft/server/EntityTypes.java
+++ b/src/main/java/net/minecraft/server/EntityTypes.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import com.mojang.datafixers.DataFixUtils;
+import com.mojang.datafixers.types.Type;
 import java.util.Collections;
 import java.util.Optional;
 import java.util.Set; // Paper
@@ -77,7 +78,7 @@ public class EntityTypes<T extends Entity> {
     public static final EntityTypes<EntityRabbit> RABBIT = a("rabbit", EntityTypes.a.a(EntityRabbit::new, EnumCreatureType.CREATURE).a(0.4F, 0.5F));
     public static final EntityTypes<EntitySalmon> SALMON = a("salmon", EntityTypes.a.a(EntitySalmon::new, EnumCreatureType.WATER_CREATURE).a(0.7F, 0.4F));
     public static final EntityTypes<EntitySheep> SHEEP = a("sheep", EntityTypes.a.a(EntitySheep::new, EnumCreatureType.CREATURE).a(0.9F, 1.3F));
-    public static final EntityTypes<EntityShulker> SHULKER = a("shulker", EntityTypes.a.a(EntityShulker::new, EnumCreatureType.MONSTER).c().d().a(1.0F, 1.0F));
+    public static final EntityTypes<EntityShulker> SHULKER = a("shulker", EntityTypes.a.a(EntityShulker::new, EnumCreatureType.MONSTER).c().a(1.0F, 1.0F));
     public static final EntityTypes<EntityShulkerBullet> SHULKER_BULLET = a("shulker_bullet", EntityTypes.a.a(EntityShulkerBullet::new, EnumCreatureType.MISC).a(0.3125F, 0.3125F));
     public static final EntityTypes<EntitySilverfish> SILVERFISH = a("silverfish", EntityTypes.a.a(EntitySilverfish::new, EnumCreatureType.MONSTER).a(0.4F, 0.3F));
     public static final EntityTypes<EntitySkeleton> SKELETON = a("skeleton", EntityTypes.a.a(EntitySkeleton::new, EnumCreatureType.MONSTER).a(0.6F, 1.99F));
@@ -102,7 +103,7 @@ public class EntityTypes<T extends Entity> {
     public static final EntityTypes<EntityVillager> VILLAGER = a("villager", EntityTypes.a.a(EntityVillager::new, EnumCreatureType.MISC).a(0.6F, 1.95F));
     public static final EntityTypes<EntityIronGolem> IRON_GOLEM = a("iron_golem", EntityTypes.a.a(EntityIronGolem::new, EnumCreatureType.MISC).a(1.4F, 2.7F));
     public static final EntityTypes<EntityVindicator> VINDICATOR = a("vindicator", EntityTypes.a.a(EntityVindicator::new, EnumCreatureType.MONSTER).a(0.6F, 1.95F));
-    public static final EntityTypes<EntityPillager> PILLAGER = a("pillager", EntityTypes.a.a(EntityPillager::new, EnumCreatureType.MONSTER).d().a(0.6F, 1.95F));
+    public static final EntityTypes<EntityPillager> PILLAGER = a("pillager", EntityTypes.a.a(EntityPillager::new, EnumCreatureType.MONSTER).a(0.6F, 1.95F));
     public static final EntityTypes<EntityVillagerTrader> WANDERING_TRADER = a("wandering_trader", EntityTypes.a.a(EntityVillagerTrader::new, EnumCreatureType.CREATURE).a(0.6F, 1.95F));
     public static final EntityTypes<EntityWitch> WITCH = a("witch", EntityTypes.a.a(EntityWitch::new, EnumCreatureType.MONSTER).a(0.6F, 1.95F));
     public static final EntityTypes<EntityWither> WITHER = a("wither", EntityTypes.a.a(EntityWither::new, EnumCreatureType.MONSTER).c().a(0.9F, 3.5F));
@@ -122,13 +123,14 @@ public class EntityTypes<T extends Entity> {
     private final boolean bb;
     private final boolean bc;
     private final boolean bd;
-    private final boolean be;
     @Nullable
-    private String bf;
+    private String be;
     @Nullable
-    private IChatBaseComponent bg;
+    private IChatBaseComponent bf;
     @Nullable
-    private MinecraftKey bh;
+    private MinecraftKey bg;
+    @Nullable
+    private final Type<?> bh;
     private final EntitySize bi;
 
     private static <T extends Entity> EntityTypes<T> a(String s, EntityTypes.a entitytypes_a) { // CraftBukkit - decompile error
@@ -143,13 +145,13 @@ public class EntityTypes<T extends Entity> {
         return IRegistry.ENTITY_TYPE.getOptional(MinecraftKey.a(s));
     }
 
-    public EntityTypes(EntityTypes.b<T> entitytypes_b, EnumCreatureType enumcreaturetype, boolean flag, boolean flag1, boolean flag2, boolean flag3, EntitySize entitysize) {
+    public EntityTypes(EntityTypes.b<T> entitytypes_b, EnumCreatureType enumcreaturetype, boolean flag, boolean flag1, boolean flag2, @Nullable Type<?> type, EntitySize entitysize) {
         this.aZ = entitytypes_b;
         this.ba = enumcreaturetype;
-        this.be = flag3;
         this.bb = flag;
         this.bc = flag1;
         this.bd = flag2;
+        this.bh = type;
         this.bi = entitysize;
     }
 
@@ -214,7 +216,7 @@ public class EntityTypes<T extends Entity> {
             axisalignedbb1 = axisalignedbb1.b(0.0D, -1.0D, 0.0D);
         }
 
-        Stream<VoxelShape> stream = iworldreader.c((Entity) null, axisalignedbb1, Collections.emptySet());
+        Stream<VoxelShape> stream = iworldreader.b((Entity) null, axisalignedbb1, Collections.emptySet());
 
         return 1.0D + VoxelShapes.a(EnumDirection.EnumAxis.Y, axisalignedbb, stream, flag ? -2.0D : -1.0D);
     }
@@ -224,7 +226,7 @@ public class EntityTypes<T extends Entity> {
             MinecraftServer minecraftserver = world.getMinecraftServer();
 
             if (minecraftserver != null && entity != null) {
-                if (world.isClientSide || !entity.bT() || entityhuman != null && minecraftserver.getPlayerList().isOp(entityhuman.getProfile())) {
+                if (world.isClientSide || !entity.bS() || entityhuman != null && minecraftserver.getPlayerList().isOp(entityhuman.getProfile())) {
                     NBTTagCompound nbttagcompound1 = entity.save(new NBTTagCompound());
                     UUID uuid = entity.getUniqueID();
 
@@ -249,45 +251,42 @@ public class EntityTypes<T extends Entity> {
         return this.bd;
     }
 
-    public boolean d() {
-        return this.be;
-    }
-
-    public EnumCreatureType e() {
+    public EnumCreatureType d() {
         return this.ba;
     }
 
-    public String f() {
-        if (this.bf == null) {
-            this.bf = SystemUtils.a("entity", IRegistry.ENTITY_TYPE.getKey(this));
+    public String e() {
+        if (this.be == null) {
+            this.be = SystemUtils.a("entity", IRegistry.ENTITY_TYPE.getKey(this));
         }
 
-        return this.bf;
+        return this.be;
     }
 
-    public IChatBaseComponent g() {
-        if (this.bg == null) {
-            this.bg = new ChatMessage(this.f(), new Object[0]);
+    public IChatBaseComponent f() {
+        if (this.bf == null) {
+            this.bf = new ChatMessage(this.e(), new Object[0]);
         }
 
-        return this.bg;
+        return this.bf;
     }
 
-    public MinecraftKey h() {
-        if (this.bh == null) {
+    public final MinecraftKey getKey() { return this.g(); } // Paper - OBFHELPER
+    public MinecraftKey g() {
+        if (this.bg == null) {
             MinecraftKey minecraftkey = IRegistry.ENTITY_TYPE.getKey(this);
 
-            this.bh = new MinecraftKey(minecraftkey.getNamespace(), "entities/" + minecraftkey.getKey());
+            this.bg = new MinecraftKey(minecraftkey.b(), "entities/" + minecraftkey.getKey());
         }
 
-        return this.bh;
+        return this.bg;
     }
 
-    public float i() {
+    public float h() {
         return this.bi.width;
     }
 
-    public float j() {
+    public float i() {
         return this.bi.height;
     }
 
@@ -307,12 +306,12 @@ public class EntityTypes<T extends Entity> {
     }
 
     public AxisAlignedBB a(double d0, double d1, double d2) {
-        float f = this.i() / 2.0F;
+        float f = this.h() / 2.0F;
 
-        return new AxisAlignedBB(d0 - (double) f, d1, d2 - (double) f, d0 + (double) f, d1 + (double) this.j(), d2 + (double) f);
+        return new AxisAlignedBB(d0 - (double) f, d1, d2 - (double) f, d0 + (double) f, d1 + (double) this.i(), d2 + (double) f);
     }
 
-    public EntitySize k() {
+    public EntitySize j() {
         return this.bi;
     }
 
@@ -377,13 +376,11 @@ public class EntityTypes<T extends Entity> {
         private boolean c = true;
         private boolean d = true;
         private boolean e;
-        private boolean f;
-        private EntitySize g = EntitySize.b(0.6F, 1.8F);
+        private EntitySize f = EntitySize.b(0.6F, 1.8F);
 
         private a(EntityTypes.b<T> entitytypes_b, EnumCreatureType enumcreaturetype) {
             this.a = entitytypes_b;
             this.b = enumcreaturetype;
-            this.f = enumcreaturetype == EnumCreatureType.CREATURE || enumcreaturetype == EnumCreatureType.MISC;
         }
 
         public static <T extends Entity> EntityTypes.a<T> a(EntityTypes.b entitytypes_b, EnumCreatureType enumcreaturetype) { // CraftBukkit - decompile error
@@ -397,7 +394,7 @@ public class EntityTypes<T extends Entity> {
         }
 
         public EntityTypes.a<T> a(float f, float f1) {
-            this.g = EntitySize.b(f, f1);
+            this.f = EntitySize.b(f, f1);
             return this;
         }
 
@@ -416,15 +413,12 @@ public class EntityTypes<T extends Entity> {
             return this;
         }
 
-        public EntityTypes.a<T> d() {
-            this.f = true;
-            return this;
-        }
-
         public EntityTypes<T> a(String s) {
+            Type<?> type = null;
+
             if (this.c) {
                 try {
-                    DataConverterRegistry.a().getSchema(DataFixUtils.makeKey(SharedConstants.a().getWorldVersion())).getChoiceType(DataConverterTypes.o, s);
+                    type = DataConverterRegistry.a().getSchema(DataFixUtils.makeKey(SharedConstants.a().getWorldVersion())).getChoiceType(DataConverterTypes.o, s);
                 } catch (IllegalStateException illegalstateexception) {
                     if (SharedConstants.b) {
                         throw illegalstateexception;
@@ -434,7 +428,7 @@ public class EntityTypes<T extends Entity> {
                 }
             }
 
-            return new EntityTypes<>(this.a, this.b, this.c, this.d, this.e, this.f, this.g);
+            return new EntityTypes<>(this.a, this.b, this.c, this.d, this.e, type, this.f);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityVex.java b/src/main/java/net/minecraft/server/EntityVex.java
index 51c05376..bcda21ba 100644
--- a/src/main/java/net/minecraft/server/EntityVex.java
+++ b/src/main/java/net/minecraft/server/EntityVex.java
@@ -98,7 +98,7 @@ public class EntityVex extends EntityMonster {
     }
 
     @Nullable
-    public BlockPosition dV() {
+    public BlockPosition dW() {
         return this.d;
     }
 
@@ -159,7 +159,7 @@ public class EntityVex extends EntityMonster {
     }
 
     @Override
-    public float aF() {
+    public float aE() {
         return 1.0F;
     }
 
@@ -215,7 +215,7 @@ public class EntityVex extends EntityMonster {
 
         @Override
         public void e() {
-            BlockPosition blockposition = EntityVex.this.dV();
+            BlockPosition blockposition = EntityVex.this.dW();
 
             if (blockposition == null) {
                 blockposition = new BlockPosition(EntityVex.this);
diff --git a/src/main/java/net/minecraft/server/EntityVillager.java b/src/main/java/net/minecraft/server/EntityVillager.java
index c2ccb858..fe9efa9d 100644
--- a/src/main/java/net/minecraft/server/EntityVillager.java
+++ b/src/main/java/net/minecraft/server/EntityVillager.java
@@ -12,6 +12,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
+import java.util.UUID;
 import java.util.Map.Entry;
 import java.util.function.BiPredicate;
 import java.util.stream.Collectors;
@@ -36,16 +37,16 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
     private boolean bF;
     @Nullable
     private EntityHuman bG;
-    private byte bI;
-    private final Reputation bJ;
-    private long bK;
-    private long bL;
-    private int bM;
-    private long bN;
-    private int bO;
-    private long bP;
-    private static final ImmutableList<MemoryModuleType<?>> bQ = ImmutableList.of(MemoryModuleType.HOME, MemoryModuleType.JOB_SITE, MemoryModuleType.MEETING_POINT, MemoryModuleType.MOBS, MemoryModuleType.VISIBLE_MOBS, MemoryModuleType.VISIBLE_VILLAGER_BABIES, MemoryModuleType.NEAREST_PLAYERS, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.WALK_TARGET, MemoryModuleType.LOOK_TARGET, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.BREED_TARGET, new MemoryModuleType[]{MemoryModuleType.PATH, MemoryModuleType.INTERACTABLE_DOORS, MemoryModuleType.OPENED_DOORS, MemoryModuleType.NEAREST_BED, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.NEAREST_HOSTILE, MemoryModuleType.SECONDARY_JOB_SITE, MemoryModuleType.HIDING_PLACE, MemoryModuleType.HEARD_BELL_TIME, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.LAST_SLEPT, MemoryModuleType.LAST_WORKED_AT_POI, MemoryModuleType.GOLEM_LAST_SEEN_TIME});
-    private static final ImmutableList<SensorType<? extends Sensor<? super EntityVillager>>> bR = ImmutableList.of(SensorType.b, SensorType.c, SensorType.d, SensorType.e, SensorType.f, SensorType.g, SensorType.h, SensorType.i, SensorType.j);
+    @Nullable
+    private UUID bH;
+    private long bI;
+    private byte bK;
+    private final Reputation bL;
+    private long bM;
+    private int bN;
+    private long bO;
+    private static final ImmutableList<MemoryModuleType<?>> bP = ImmutableList.of(MemoryModuleType.HOME, MemoryModuleType.JOB_SITE, MemoryModuleType.MEETING_POINT, MemoryModuleType.MOBS, MemoryModuleType.VISIBLE_MOBS, MemoryModuleType.VISIBLE_VILLAGER_BABIES, MemoryModuleType.NEAREST_PLAYERS, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.WALK_TARGET, MemoryModuleType.LOOK_TARGET, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.BREED_TARGET, new MemoryModuleType[]{MemoryModuleType.PATH, MemoryModuleType.INTERACTABLE_DOORS, MemoryModuleType.NEAREST_BED, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.NEAREST_HOSTILE, MemoryModuleType.SECONDARY_JOB_SITE, MemoryModuleType.GOLEM_SPAWN_CONDITIONS, MemoryModuleType.HIDING_PLACE, MemoryModuleType.HEARD_BELL_TIME, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE});
+    private static final ImmutableList<SensorType<? extends Sensor<? super EntityVillager>>> bQ = ImmutableList.of(SensorType.b, SensorType.c, SensorType.d, SensorType.e, SensorType.f, SensorType.g, SensorType.h, SensorType.i);
     public static final Map<MemoryModuleType<GlobalPos>, BiPredicate<EntityVillager, VillagePlaceType>> bB = ImmutableMap.of(MemoryModuleType.HOME, (entityvillager, villageplacetype) -> {
         return villageplacetype == VillagePlaceType.q;
     }, MemoryModuleType.JOB_SITE, (entityvillager, villageplacetype) -> {
@@ -60,7 +61,8 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
 
     public EntityVillager(EntityTypes<? extends EntityVillager> entitytypes, World world, VillagerType villagertype) {
         super(entitytypes, world);
-        this.bJ = new Reputation();
+        this.bI = Long.MIN_VALUE;
+        this.bL = new Reputation();
         ((Navigation) this.getNavigation()).a(true);
         this.getNavigation().d(true);
         this.setCanPickupLoot(true);
@@ -75,7 +77,7 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
 
     @Override
     protected BehaviorController<?> a(Dynamic<?> dynamic) {
-        BehaviorController<EntityVillager> behaviorcontroller = new BehaviorController<>(EntityVillager.bQ, EntityVillager.bR, dynamic);
+        BehaviorController<EntityVillager> behaviorcontroller = new BehaviorController<>(EntityVillager.bP, EntityVillager.bQ, dynamic);
 
         this.a(behaviorcontroller);
         return behaviorcontroller;
@@ -168,26 +170,26 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
         if (!this.isNoAI() && this.random.nextInt(100) == 0) {
             Raid raid = ((WorldServer) this.world).c_(new BlockPosition(this));
 
-            if (raid != null && raid.v() && !raid.a()) {
+            if (raid != null && raid.u() && !raid.a()) {
                 this.world.broadcastEntityEffect(this, (byte) 42);
             }
         }
 
-        if (this.getVillagerData().getProfession() == VillagerProfession.NONE && this.dY()) {
-            this.ed();
-        }
-
         super.mobTick();
     }
 
+    public void eg() {
+        this.setTradingPlayer((EntityHuman) null);
+        this.es();
+    }
+
     @Override
     public void tick() {
         super.tick();
         if (this.dV() > 0) {
-            this.r(this.dV() - 1);
+            this.q(this.dV() - 1);
         }
 
-        this.eF();
     }
 
     @Override
@@ -200,14 +202,14 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
             return true;
         } else if (itemstack.getItem() != Items.VILLAGER_SPAWN_EGG && this.isAlive() && !this.dY() && !this.isSleeping()) {
             if (this.isBaby()) {
-                this.et();
+                this.er();
                 return super.a(entityhuman, enumhand);
             } else {
                 boolean flag1 = this.getOffers().isEmpty();
 
                 if (enumhand == EnumHand.MAIN_HAND) {
                     if (flag1 && !this.world.isClientSide) {
-                        this.et();
+                        this.er();
                     }
 
                     entityhuman.a(StatisticList.TALKED_TO_VILLAGER);
@@ -228,10 +230,10 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
         }
     }
 
-    private void et() {
-        this.r(40);
+    private void er() {
+        this.q(40);
         if (!this.world.e()) {
-            this.a(SoundEffects.ENTITY_VILLAGER_NO, this.getSoundVolume(), this.cV());
+            this.a(SoundEffects.ENTITY_VILLAGER_NO, this.getSoundVolume(), this.cU());
         }
 
     }
@@ -248,123 +250,28 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
 
         super.setTradingPlayer(entityhuman);
         if (flag) {
-            this.ed();
-        }
-
-    }
-
-    @Override
-    protected void ed() {
-        super.ed();
-        this.eu();
-    }
-
-    private void eu() {
-        Iterator iterator = this.getOffers().iterator();
-
-        while (iterator.hasNext()) {
-            MerchantRecipe merchantrecipe = (MerchantRecipe) iterator.next();
-
-            merchantrecipe.setSpecialPrice();
+            this.eg();
         }
 
     }
 
-    @Override
-    public boolean ei() {
-        return true;
-    }
-
-    public void ej() {
-        this.ey();
-        Iterator iterator = this.getOffers().iterator();
-
-        while (iterator.hasNext()) {
-            MerchantRecipe merchantrecipe = (MerchantRecipe) iterator.next();
-
-            merchantrecipe.resetUses();
-        }
-
-        if (this.getVillagerData().getProfession() == VillagerProfession.FARMER) {
-            this.eE();
-        }
-
-        this.bN = this.world.getTime();
-        ++this.bO;
-    }
-
-    private boolean ev() {
-        Iterator iterator = this.getOffers().iterator();
-
-        MerchantRecipe merchantrecipe;
-
-        do {
-            if (!iterator.hasNext()) {
-                return false;
-            }
-
-            merchantrecipe = (MerchantRecipe) iterator.next();
-        } while (!merchantrecipe.isFullyUsed());
-
-        return true;
-    }
-
-    private boolean ew() {
-        return this.bO < 2 && this.world.getTime() > this.bN + 2400L;
-    }
-
-    public boolean ek() {
-        long i = this.bN + 12000L;
-        boolean flag = this.world.getTime() > i;
-        long j = this.world.getDayTime();
-
-        if (this.bP > 0L) {
-            long k = this.bP / 24000L;
-            long l = j / 24000L;
-
-            flag |= l > k;
-        }
-
-        this.bP = j;
-        if (flag) {
-            this.eH();
-        }
-
-        return this.ew() && this.ev();
-    }
-
-    private void ex() {
-        int i = 2 - this.bO;
-
-        if (i > 0) {
-            Iterator iterator = this.getOffers().iterator();
-
-            while (iterator.hasNext()) {
-                MerchantRecipe merchantrecipe = (MerchantRecipe) iterator.next();
-
-                merchantrecipe.resetUses();
-            }
-        }
-
-        for (int j = 0; j < i; ++j) {
-            this.ey();
-        }
-
-    }
-
-    private void ey() {
+    public void ei() {
         Iterator iterator = this.getOffers().iterator();
 
         while (iterator.hasNext()) {
             MerchantRecipe merchantrecipe = (MerchantRecipe) iterator.next();
 
             merchantrecipe.e();
+            merchantrecipe.resetUses();
         }
 
+        this.bO = this.world.getDayTime() % 24000L;
     }
 
     private void h(EntityHuman entityhuman) {
-        int i = this.f(entityhuman);
+        int i = this.bL.a(entityhuman.getUniqueID(), (reputationtype) -> {
+            return reputationtype != ReputationType.GOLEM;
+        });
 
         if (i != 0) {
             Iterator iterator = this.getOffers().iterator();
@@ -399,6 +306,17 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
 
     }
 
+    private void es() {
+        Iterator iterator = this.getOffers().iterator();
+
+        while (iterator.hasNext()) {
+            MerchantRecipe merchantrecipe = (MerchantRecipe) iterator.next();
+
+            merchantrecipe.setSpecialPrice();
+        }
+
+    }
+
     @Override
     protected void initDatawatcher() {
         super.initDatawatcher();
@@ -409,12 +327,14 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
         nbttagcompound.set("VillagerData", (NBTBase) this.getVillagerData().a(DynamicOpsNBT.a));
-        nbttagcompound.setByte("FoodLevel", this.bI);
-        nbttagcompound.set("Gossips", (NBTBase) this.bJ.a((DynamicOps) DynamicOpsNBT.a).getValue());
-        nbttagcompound.setInt("Xp", this.bM);
-        nbttagcompound.setLong("LastRestock", this.bN);
-        nbttagcompound.setLong("LastGossipDecay", this.bL);
-        nbttagcompound.setInt("RestocksToday", this.bO);
+        nbttagcompound.setByte("FoodLevel", this.bK);
+        nbttagcompound.set("Gossips", (NBTBase) this.bL.a((DynamicOps) DynamicOpsNBT.a).getValue());
+        nbttagcompound.setInt("Xp", this.bN);
+        nbttagcompound.setLong("LastRestock", this.bO);
+        if (this.bH != null) {
+            nbttagcompound.a("BuddyGolem", this.bH);
+        }
+
     }
 
     @Override
@@ -429,21 +349,23 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
         }
 
         if (nbttagcompound.hasKeyOfType("FoodLevel", 1)) {
-            this.bI = nbttagcompound.getByte("FoodLevel");
+            this.bK = nbttagcompound.getByte("FoodLevel");
         }
 
         NBTTagList nbttaglist = nbttagcompound.getList("Gossips", 10);
 
-        this.bJ.a(new Dynamic(DynamicOpsNBT.a, nbttaglist));
+        this.bL.a(new Dynamic(DynamicOpsNBT.a, nbttaglist));
         if (nbttagcompound.hasKeyOfType("Xp", 3)) {
-            this.bM = nbttagcompound.getInt("Xp");
+            this.bN = nbttagcompound.getInt("Xp");
+        }
+
+        this.bO = nbttagcompound.getLong("LastRestock");
+        if (nbttagcompound.b("BuddyGolem")) {
+            this.bH = nbttagcompound.a("BuddyGolem");
         }
 
-        this.bN = nbttagcompound.getLong("LastRestock");
-        this.bL = nbttagcompound.getLong("LastGossipDecay");
         this.setCanPickupLoot(true);
         this.a((WorldServer) this.world);
-        this.bO = nbttagcompound.getInt("RestocksToday");
     }
 
     @Override
@@ -467,11 +389,11 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
         return SoundEffects.ENTITY_VILLAGER_DEATH;
     }
 
-    public void el() {
-        SoundEffect soundeffect = this.getVillagerData().getProfession().b().e();
+    public void ej() {
+        SoundEffect soundeffect = this.getVillagerData().getProfession().b().d();
 
         if (soundeffect != null) {
-            this.a(soundeffect, this.getSoundVolume(), this.cV());
+            this.a(soundeffect, this.getSoundVolume(), this.cU());
         }
 
     }
@@ -495,9 +417,9 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
     protected void b(MerchantRecipe merchantrecipe) {
         int i = 3 + this.random.nextInt(4);
 
-        this.bM += merchantrecipe.getXp();
+        this.bN += merchantrecipe.getXp();
         this.bG = this.getTrader();
-        if (this.eB()) {
+        if (this.et()) {
             this.bE = 40;
             this.bF = true;
             i += 5;
@@ -523,34 +445,12 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
 
     @Override
     public void die(DamageSource damagesource) {
-        Entity entity = damagesource.getEntity();
-
-        if (entity != null) {
-            this.a(entity);
-        }
-
         this.a(MemoryModuleType.HOME);
         this.a(MemoryModuleType.JOB_SITE);
         this.a(MemoryModuleType.MEETING_POINT);
         super.die(damagesource);
     }
 
-    private void a(Entity entity) {
-        if (this.world instanceof WorldServer) {
-            Optional<List<EntityLiving>> optional = this.br.getMemory(MemoryModuleType.VISIBLE_MOBS);
-
-            if (optional.isPresent()) {
-                WorldServer worldserver = (WorldServer) this.world;
-
-                ((List) optional.get()).stream().filter((entityliving) -> {
-                    return entityliving instanceof ReputationHandler;
-                }).forEach((entityliving) -> {
-                    worldserver.a(ReputationEvent.d, entity, (ReputationHandler) entityliving);
-                });
-            }
-        }
-    }
-
     public void a(MemoryModuleType<GlobalPos> memorymoduletype) {
         if (this.world instanceof WorldServer) {
             MinecraftServer minecraftserver = ((WorldServer) this.world).getMinecraftServer();
@@ -571,15 +471,11 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
     }
 
     public boolean canBreed() {
-        return this.bI + this.eD() >= 12 && this.getAge() == 0;
-    }
-
-    private boolean ez() {
-        return this.bI < 12;
+        return this.bK + this.ev() >= 12 && this.getAge() == 0;
     }
 
-    private void eA() {
-        if (this.ez() && this.eD() != 0) {
+    public void em() {
+        if (this.bK < 12 && this.ev() != 0) {
             for (int i = 0; i < this.getInventory().getSize(); ++i) {
                 ItemStack itemstack = this.getInventory().getItem(i);
 
@@ -590,9 +486,9 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
                         int j = itemstack.getCount();
 
                         for (int k = j; k > 0; --k) {
-                            this.bI = (byte) (this.bI + integer);
+                            this.bK = (byte) (this.bK + integer);
                             this.getInventory().splitStack(i, 1);
-                            if (!this.ez()) {
+                            if (this.bK >= 12) {
                                 return;
                             }
                         }
@@ -604,33 +500,28 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
     }
 
     public int f(EntityHuman entityhuman) {
-        return this.bJ.a(entityhuman.getUniqueID(), (reputationtype) -> {
-            return true;
+        return this.bL.a(entityhuman.getUniqueID(), (reputationtype) -> {
+            return reputationtype != ReputationType.GOLEM;
         });
     }
 
-    private void u(int i) {
-        this.bI = (byte) (this.bI - i);
-    }
-
-    public void eo() {
-        this.eA();
-        this.u(12);
+    public void s(int i) {
+        this.bK = (byte) (this.bK - i);
     }
 
     public void b(MerchantRecipeList merchantrecipelist) {
         this.trades = merchantrecipelist;
     }
 
-    private boolean eB() {
+    private boolean et() {
         int i = this.getVillagerData().getLevel();
 
-        return VillagerData.d(i) && this.bM >= VillagerData.c(i);
+        return VillagerData.d(i) && this.bN >= VillagerData.c(i);
     }
 
     public void populateTrades() {
         this.setVillagerData(this.getVillagerData().withLevel(this.getVillagerData().getLevel() + 1));
-        this.eh();
+        this.ef();
     }
 
     @Override
@@ -640,12 +531,12 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
 
         if (ichatbasecomponent != null) {
             return ScoreboardTeam.a(scoreboardteambase, ichatbasecomponent).a((chatmodifier) -> {
-                chatmodifier.setChatHoverable(this.bK()).setInsertion(this.getUniqueIDString());
+                chatmodifier.setChatHoverable(this.bJ()).setInsertion(this.getUniqueIDString());
             });
         } else {
             VillagerProfession villagerprofession = this.getVillagerData().getProfession();
-            IChatBaseComponent ichatbasecomponent1 = (new ChatMessage(this.getEntityType().f() + '.' + IRegistry.VILLAGER_PROFESSION.getKey(villagerprofession).getKey(), new Object[0])).a((chatmodifier) -> {
-                chatmodifier.setChatHoverable(this.bK()).setInsertion(this.getUniqueIDString());
+            IChatBaseComponent ichatbasecomponent1 = (new ChatMessage(this.getEntityType().e() + '.' + IRegistry.VILLAGER_PROFESSION.getKey(villagerprofession).getKey(), new Object[0])).a((chatmodifier) -> {
+                chatmodifier.setChatHoverable(this.bJ()).setInsertion(this.getUniqueIDString());
             });
 
             if (scoreboardteambase != null) {
@@ -721,60 +612,46 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
     protected void a(EntityItem entityitem) {
         ItemStack itemstack = entityitem.getItemStack();
         Item item = itemstack.getItem();
+        VillagerProfession villagerprofession = this.getVillagerData().getProfession();
 
-        if (this.b(item)) {
-            InventorySubcontainer inventorysubcontainer = this.getInventory();
-            boolean flag = false;
+        if (EntityVillager.bD.contains(item) || villagerprofession.c().contains(item)) {
+            if (villagerprofession == VillagerProfession.FARMER && item == Items.WHEAT) {
+                int i = itemstack.getCount() / 3;
 
-            ItemStack itemstack1;
-            int i;
+                if (i > 0) {
+                    ItemStack itemstack1 = this.getInventory().a(new ItemStack(Items.BREAD, i));
 
-            for (i = 0; i < inventorysubcontainer.getSize(); ++i) {
-                itemstack1 = inventorysubcontainer.getItem(i);
-                if (itemstack1.isEmpty() || itemstack1.getItem() == item && itemstack1.getCount() < itemstack1.getMaxStackSize()) {
-                    flag = true;
-                    break;
+                    itemstack.subtract(i * 3);
+                    if (!itemstack1.isEmpty()) {
+                        this.a(itemstack1, 0.5F);
+                    }
                 }
             }
 
-            if (!flag) {
-                return;
-            }
-
-            i = inventorysubcontainer.a(item);
-            if (i == 256) {
-                return;
-            }
-
-            if (i > 256) {
-                inventorysubcontainer.a(item, i - 256);
-                return;
-            }
-
             this.receive(entityitem, itemstack.getCount());
-            itemstack1 = inventorysubcontainer.a(itemstack);
-            if (itemstack1.isEmpty()) {
+            ItemStack itemstack2 = this.getInventory().a(itemstack);
+
+            if (itemstack2.isEmpty()) {
                 entityitem.die();
             } else {
-                itemstack.setCount(itemstack1.getCount());
+                itemstack.setCount(itemstack2.getCount());
             }
         }
 
     }
 
-    public boolean b(Item item) {
-        return EntityVillager.bD.contains(item) || this.getVillagerData().getProfession().c().contains(item);
+    public boolean en() {
+        return this.ev() >= 24;
     }
 
-    public boolean ep() {
-        return this.eD() >= 24;
-    }
+    public boolean eo() {
+        boolean flag = this.getVillagerData().getProfession() == VillagerProfession.FARMER;
+        int i = this.ev();
 
-    public boolean eq() {
-        return this.eD() < 12;
+        return flag ? i < 60 : i < 12;
     }
 
-    private int eD() {
+    private int ev() {
         InventorySubcontainer inventorysubcontainer = this.getInventory();
 
         return EntityVillager.bA.entrySet().stream().mapToInt((entry) -> {
@@ -782,32 +659,14 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
         }).sum();
     }
 
-    private void eE() {
-        InventorySubcontainer inventorysubcontainer = this.getInventory();
-        int i = inventorysubcontainer.a(Items.WHEAT);
-        int j = i / 3;
-
-        if (j != 0) {
-            int k = j * 3;
-
-            inventorysubcontainer.a(Items.WHEAT, k);
-            ItemStack itemstack = inventorysubcontainer.a(new ItemStack(Items.BREAD, j));
-
-            if (!itemstack.isEmpty()) {
-                this.a(itemstack, 0.5F);
-            }
-
-        }
-    }
-
-    public boolean er() {
+    public boolean ep() {
         InventorySubcontainer inventorysubcontainer = this.getInventory();
 
         return inventorysubcontainer.a((Set) ImmutableSet.of(Items.WHEAT_SEEDS, Items.POTATO, Items.CARROT, Items.BEETROOT_SEEDS));
     }
 
     @Override
-    protected void eh() {
+    protected void ef() {
         VillagerData villagerdata = this.getVillagerData();
         Int2ObjectMap<VillagerTrades.IMerchantRecipeOption[]> int2objectmap = (Int2ObjectMap) VillagerTrades.a.get(villagerdata.getProfession());
 
@@ -823,104 +682,106 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
     }
 
     public void a(EntityVillager entityvillager, long i) {
-        if ((i < this.bK || i >= this.bK + 1200L) && (i < entityvillager.bK || i >= entityvillager.bK + 1200L)) {
-            this.bJ.a(entityvillager.bJ, this.random, 10);
-            this.bK = i;
-            entityvillager.bK = i;
-            this.a(i, 5);
-        }
-    }
+        if ((i < this.bM || i >= this.bM + 1200L) && (i < entityvillager.bM || i >= entityvillager.bM + 1200L)) {
+            boolean flag = this.a(i);
+
+            if (this.a((Entity) this) || flag) {
+                this.bL.a(this.getUniqueID(), ReputationType.GOLEM, ReputationType.GOLEM.i);
+            }
 
-    private void eF() {
-        long i = this.world.getTime();
+            this.bL.a(entityvillager.bL, this.random, 10);
+            this.bM = i;
+            entityvillager.bM = i;
+            if (flag) {
+                this.ew();
+            }
 
-        if (this.bL == 0L) {
-            this.bL = i;
-        } else if (i >= this.bL + 24000L) {
-            this.bJ.b();
-            this.bL = i;
         }
     }
 
-    public void a(long i, int j) {
-        if (this.a(i)) {
-            AxisAlignedBB axisalignedbb = this.getBoundingBox().grow(10.0D, 10.0D, 10.0D);
-            List<EntityVillager> list = this.world.a(EntityVillager.class, axisalignedbb);
-            List<EntityVillager> list1 = (List) list.stream().filter((entityvillager) -> {
-                return entityvillager.a(i);
-            }).limit(5L).collect(Collectors.toList());
+    private void ew() {
+        VillagerData villagerdata = this.getVillagerData();
 
-            if (list1.size() >= j) {
-                EntityIronGolem entityirongolem = this.eG();
+        if (villagerdata.getProfession() != VillagerProfession.NONE && villagerdata.getProfession() != VillagerProfession.NITWIT) {
+            Optional<EntityVillager.a> optional = this.getBehaviorController().getMemory(MemoryModuleType.GOLEM_SPAWN_CONDITIONS);
+
+            if (optional.isPresent()) {
+                if (((EntityVillager.a) optional.get()).c(this.world.getTime())) {
+                    boolean flag = this.bL.a(ReputationType.GOLEM, (d0) -> {
+                        return d0 > 30.0D;
+                    }) >= 5L;
 
-                if (entityirongolem != null) {
-                    list.forEach((entityvillager) -> {
-                        entityvillager.b(i);
-                    });
+                    if (flag) {
+                        AxisAlignedBB axisalignedbb = this.getBoundingBox().b(80.0D, 80.0D, 80.0D);
+                        List<EntityVillager> list = (List) this.world.a(EntityVillager.class, axisalignedbb, this::a).stream().limit(5L).collect(Collectors.toList());
+                        boolean flag1 = list.size() >= 5;
+
+                        if (flag1) {
+                            EntityIronGolem entityirongolem = this.ex();
+
+                            if (entityirongolem != null) {
+                                UUID uuid = entityirongolem.getUniqueID();
+
+                                EntityVillager entityvillager;
+
+                                for (Iterator iterator = list.iterator(); iterator.hasNext(); entityvillager.bH = uuid) {
+                                    entityvillager = (EntityVillager) iterator.next();
+                                    Iterator iterator1 = list.iterator();
+
+                                    while (iterator1.hasNext()) {
+                                        EntityVillager entityvillager1 = (EntityVillager) iterator1.next();
+
+                                        entityvillager.bL.a(entityvillager1.getUniqueID(), ReputationType.GOLEM, -ReputationType.GOLEM.i);
+                                    }
+                                }
+
+                            }
+                        }
+                    }
                 }
             }
         }
     }
 
-    private void b(long i) {
-        this.br.setMemory(MemoryModuleType.GOLEM_LAST_SEEN_TIME, i); // CraftBukkit - decompile error
+    private boolean a(Entity entity) {
+        return this.bL.a(entity.getUniqueID(), (reputationtype) -> {
+            return reputationtype == ReputationType.GOLEM;
+        }) > 30;
     }
 
-    private boolean c(long i) {
-        Optional<Long> optional = this.br.getMemory(MemoryModuleType.GOLEM_LAST_SEEN_TIME);
-
-        if (!optional.isPresent()) {
-            return false;
+    private boolean a(long i) {
+        if (this.bH == null) {
+            return true;
         } else {
-            Long olong = (Long) optional.get();
-
-            return i - olong <= 600L;
-        }
-    }
+            if (this.bI < i + 1200L) {
+                this.bI = i + 1200L;
+                Entity entity = ((WorldServer) this.world).getEntity(this.bH);
 
-    public boolean a(long i) {
-        VillagerData villagerdata = this.getVillagerData();
+                if (entity == null || !entity.isAlive() || this.h(entity) > 6400.0D) {
+                    this.bH = null;
+                    return true;
+                }
+            }
 
-        return villagerdata.getProfession() != VillagerProfession.NONE && villagerdata.getProfession() != VillagerProfession.NITWIT ? (!this.d(this.world.getTime()) ? false : !this.c(i)) : false;
+            return false;
+        }
     }
 
     @Nullable
-    private EntityIronGolem eG() {
+    private EntityIronGolem ex() {
         BlockPosition blockposition = new BlockPosition(this);
-        int i = 0;
-
-        while (i < 10) {
-            double d0 = (double) (this.world.random.nextInt(16) - 8);
-            double d1 = (double) (this.world.random.nextInt(16) - 8);
-            double d2 = 6.0D;
-            int j = 0;
-
-            while (true) {
-                if (j >= -12) {
-                    BlockPosition blockposition1 = blockposition.a(d0, d2 + (double) j, d1);
 
-                    if (!this.world.getType(blockposition1).isAir() && !this.world.getType(blockposition1).getMaterial().isLiquid() || !this.world.getType(blockposition1.down()).getMaterial().f()) {
-                        --j;
-                        continue;
-                    }
+        for (int i = 0; i < 10; ++i) {
+            BlockPosition blockposition1 = blockposition.b(this.world.random.nextInt(16) - 8, this.world.random.nextInt(6) - 3, this.world.random.nextInt(16) - 8);
+            EntityIronGolem entityirongolem = (EntityIronGolem) EntityTypes.IRON_GOLEM.b(this.world, (NBTTagCompound) null, (IChatBaseComponent) null, (EntityHuman) null, blockposition1, EnumMobSpawn.MOB_SUMMONED, false, false);
 
-                    d2 += (double) j;
+            if (entityirongolem != null) {
+                if (entityirongolem.a((GeneratorAccess) this.world, EnumMobSpawn.MOB_SUMMONED) && entityirongolem.a((IWorldReader) this.world)) {
+                    this.world.addEntity(entityirongolem, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.VILLAGE_DEFENSE); // CraftBukkit
+                    return entityirongolem;
                 }
 
-                BlockPosition blockposition2 = blockposition.a(d0, d2, d1);
-                EntityIronGolem entityirongolem = (EntityIronGolem) EntityTypes.IRON_GOLEM.b(this.world, (NBTTagCompound) null, (IChatBaseComponent) null, (EntityHuman) null, blockposition2, EnumMobSpawn.MOB_SUMMONED, false, false);
-
-                if (entityirongolem != null) {
-                    if (entityirongolem.a((GeneratorAccess) this.world, EnumMobSpawn.MOB_SUMMONED) && entityirongolem.a((IWorldReader) this.world)) {
-                        this.world.addEntity(entityirongolem, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.VILLAGE_DEFENSE); // CraftBukkit
-                        return entityirongolem;
-                    }
-
-                    entityirongolem.die();
-                }
-
-                ++i;
-                break;
+                entityirongolem.die();
             }
         }
 
@@ -930,38 +791,28 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
     @Override
     public void a(ReputationEvent reputationevent, Entity entity) {
         if (reputationevent == ReputationEvent.a) {
-            this.bJ.a(entity.getUniqueID(), ReputationType.MAJOR_POSITIVE, 20);
-            this.bJ.a(entity.getUniqueID(), ReputationType.MINOR_POSITIVE, 25);
+            this.bL.a(entity.getUniqueID(), ReputationType.MAJOR_POSITIVE, 25);
         } else if (reputationevent == ReputationEvent.e) {
-            this.bJ.a(entity.getUniqueID(), ReputationType.TRADING, 2);
+            this.bL.a(entity.getUniqueID(), ReputationType.TRADING, 2);
         } else if (reputationevent == ReputationEvent.c) {
-            this.bJ.a(entity.getUniqueID(), ReputationType.MINOR_NEGATIVE, 25);
+            this.bL.a(entity.getUniqueID(), ReputationType.MINOR_NEGATIVE, 25);
         } else if (reputationevent == ReputationEvent.d) {
-            this.bJ.a(entity.getUniqueID(), ReputationType.MAJOR_NEGATIVE, 25);
+            this.bL.a(entity.getUniqueID(), ReputationType.MAJOR_NEGATIVE, 25);
         }
 
     }
 
     @Override
     public int getExperience() {
-        return this.bM;
+        return this.bN;
     }
 
     public void setExperience(int i) {
-        this.bM = i;
-    }
-
-    private void eH() {
-        this.ex();
-        this.bO = 0;
+        this.bN = i;
     }
 
-    public Reputation es() {
-        return this.bJ;
-    }
-
-    public void a(NBTBase nbtbase) {
-        this.bJ.a(new Dynamic(DynamicOpsNBT.a, nbtbase));
+    public long eq() {
+        return this.bO;
     }
 
     @Override
@@ -973,13 +824,29 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
     @Override
     public void e(BlockPosition blockposition) {
         super.e(blockposition);
-        this.br.setMemory(MemoryModuleType.LAST_SLEPT, MinecraftSerializableLong.a(this.world.getTime())); // CraftBukkit - decompile error
+        EntityVillager.a entityvillager_a = (EntityVillager.a) this.getBehaviorController().getMemory(MemoryModuleType.GOLEM_SPAWN_CONDITIONS).orElseGet(EntityVillager.a::new);
+
+        entityvillager_a.b(this.world.getTime());
+        this.br.setMemory(MemoryModuleType.GOLEM_SPAWN_CONDITIONS, entityvillager_a); // CraftBukkit - decompile error
     }
 
-    private boolean d(long i) {
-        Optional<MinecraftSerializableLong> optional = this.br.getMemory(MemoryModuleType.LAST_SLEPT);
-        Optional<MinecraftSerializableLong> optional1 = this.br.getMemory(MemoryModuleType.LAST_WORKED_AT_POI);
+    public static final class a {
+
+        private long a;
+        private long b;
+
+        public a() {}
 
-        return optional.isPresent() && optional1.isPresent() ? i - ((MinecraftSerializableLong) optional.get()).a() < 24000L && i - ((MinecraftSerializableLong) optional1.get()).a() < 36000L : false;
+        public void a(long i) {
+            this.a = i;
+        }
+
+        public void b(long i) {
+            this.b = i;
+        }
+
+        private boolean c(long i) {
+            return i - this.b < 24000L && i - this.a < 36000L;
+        }
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityVillagerAbstract.java b/src/main/java/net/minecraft/server/EntityVillagerAbstract.java
index f161ccb9..f8ef10f9 100644
--- a/src/main/java/net/minecraft/server/EntityVillagerAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityVillagerAbstract.java
@@ -37,7 +37,7 @@ public abstract class EntityVillagerAbstract extends EntityAgeable implements NP
         return (Integer) this.datawatcher.get(EntityVillagerAbstract.bA);
     }
 
-    public void r(int i) {
+    public void q(int i) {
         this.datawatcher.set(EntityVillagerAbstract.bA, i);
     }
 
@@ -76,14 +76,14 @@ public abstract class EntityVillagerAbstract extends EntityAgeable implements NP
     public MerchantRecipeList getOffers() {
         if (this.trades == null) {
             this.trades = new MerchantRecipeList();
-            this.eh();
+            this.ef();
         }
 
         return this.trades;
     }
 
     @Override
-    public void s(int i) {}
+    public void r(int i) {}
 
     @Override
     public void a(MerchantRecipe merchantrecipe) {
@@ -107,7 +107,7 @@ public abstract class EntityVillagerAbstract extends EntityAgeable implements NP
     public void i(ItemStack itemstack) {
         if (!this.world.isClientSide && this.e > -this.A() + 20) {
             this.e = -this.A();
-            this.a(this.r(!itemstack.isEmpty()), this.getSoundVolume(), this.cV());
+            this.a(this.r(!itemstack.isEmpty()), this.getSoundVolume(), this.cU());
         }
 
     }
@@ -122,7 +122,7 @@ public abstract class EntityVillagerAbstract extends EntityAgeable implements NP
     }
 
     public void ec() {
-        this.a(SoundEffects.ENTITY_VILLAGER_CELEBRATE, this.getSoundVolume(), this.cV());
+        this.a(SoundEffects.ENTITY_VILLAGER_CELEBRATE, this.getSoundVolume(), this.cU());
     }
 
     @Override
@@ -166,23 +166,6 @@ public abstract class EntityVillagerAbstract extends EntityAgeable implements NP
 
     }
 
-    @Nullable
-    @Override
-    public Entity a(DimensionManager dimensionmanager) {
-        this.ed();
-        return super.a(dimensionmanager);
-    }
-
-    protected void ed() {
-        this.setTradingPlayer((EntityHuman) null);
-    }
-
-    @Override
-    public void die(DamageSource damagesource) {
-        super.die(damagesource);
-        this.ed();
-    }
-
     @Override
     public boolean a(EntityHuman entityhuman) {
         return false;
@@ -213,7 +196,7 @@ public abstract class EntityVillagerAbstract extends EntityAgeable implements NP
         return this.world;
     }
 
-    protected abstract void eh();
+    protected abstract void ef();
 
     protected void a(MerchantRecipeList merchantrecipelist, VillagerTrades.IMerchantRecipeOption[] avillagertrades_imerchantrecipeoption, int i) {
         Set<Integer> set = Sets.newHashSet();
diff --git a/src/main/java/net/minecraft/server/EntityVillagerTrader.java b/src/main/java/net/minecraft/server/EntityVillagerTrader.java
index a24e7127..46a349e7 100644
--- a/src/main/java/net/minecraft/server/EntityVillagerTrader.java
+++ b/src/main/java/net/minecraft/server/EntityVillagerTrader.java
@@ -85,7 +85,7 @@ public class EntityVillagerTrader extends EntityVillagerAbstract {
     }
 
     @Override
-    protected void eh() {
+    protected void ef() {
         VillagerTrades.IMerchantRecipeOption[] avillagertrades_imerchantrecipeoption = (VillagerTrades.IMerchantRecipeOption[]) VillagerTrades.b.get(1);
         VillagerTrades.IMerchantRecipeOption[] avillagertrades_imerchantrecipeoption1 = (VillagerTrades.IMerchantRecipeOption[]) VillagerTrades.b.get(2);
 
@@ -184,11 +184,11 @@ public class EntityVillagerTrader extends EntityVillagerAbstract {
         return SoundEffects.ENTITY_WANDERING_TRADER_YES;
     }
 
-    public void t(int i) {
+    public void s(int i) {
         this.bB = i;
     }
 
-    public int ef() {
+    public int eg() {
         return this.bB;
     }
 
@@ -196,12 +196,12 @@ public class EntityVillagerTrader extends EntityVillagerAbstract {
     public void movementTick() {
         super.movementTick();
         if (!this.world.isClientSide) {
-            this.ej();
+            this.eh();
         }
 
     }
 
-    private void ej() {
+    private void eh() {
         if (this.bB > 0 && !this.dY() && --this.bB == 0) {
             this.die();
         }
@@ -213,7 +213,7 @@ public class EntityVillagerTrader extends EntityVillagerAbstract {
     }
 
     @Nullable
-    private BlockPosition ek() {
+    private BlockPosition ei() {
         return this.bA;
     }
 
@@ -238,14 +238,14 @@ public class EntityVillagerTrader extends EntityVillagerAbstract {
 
         @Override
         public boolean a() {
-            BlockPosition blockposition = this.a.ek();
+            BlockPosition blockposition = this.a.ei();
 
             return blockposition != null && this.a(blockposition, this.b);
         }
 
         @Override
         public void e() {
-            BlockPosition blockposition = this.a.ek();
+            BlockPosition blockposition = this.a.ei();
 
             if (blockposition != null && EntityVillagerTrader.this.navigation.n()) {
                 if (this.a(blockposition, 10.0D)) {
@@ -261,7 +261,7 @@ public class EntityVillagerTrader extends EntityVillagerAbstract {
         }
 
         private boolean a(BlockPosition blockposition, double d0) {
-            return !blockposition.a((IPosition) this.a.getPositionVector(), d0);
+            return !blockposition.a((IPosition) this.a.ch(), d0);
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityVindicator.java b/src/main/java/net/minecraft/server/EntityVindicator.java
index ffbd6e92..130a2e4f 100644
--- a/src/main/java/net/minecraft/server/EntityVindicator.java
+++ b/src/main/java/net/minecraft/server/EntityVindicator.java
@@ -76,7 +76,7 @@ public class EntityVindicator extends EntityIllagerAbstract {
     }
 
     @Override
-    public SoundEffect dV() {
+    public SoundEffect dW() {
         return SoundEffects.ENTITY_VINDICATOR_CELEBRATE;
     }
 
@@ -93,7 +93,7 @@ public class EntityVindicator extends EntityIllagerAbstract {
 
     @Override
     protected void a(DifficultyDamageScaler difficultydamagescaler) {
-        if (this.ej() == null) {
+        if (this.ek() == null) {
             this.setSlot(EnumItemSlot.MAINHAND, new ItemStack(Items.IRON_AXE));
         }
 
@@ -131,14 +131,14 @@ public class EntityVindicator extends EntityIllagerAbstract {
     @Override
     public void a(int i, boolean flag) {
         ItemStack itemstack = new ItemStack(Items.IRON_AXE);
-        Raid raid = this.ej();
+        Raid raid = this.ek();
         byte b0 = 1;
 
         if (i > raid.a(EnumDifficulty.NORMAL)) {
             b0 = 2;
         }
 
-        boolean flag1 = this.random.nextFloat() <= raid.w();
+        boolean flag1 = this.random.nextFloat() <= raid.v();
 
         if (flag1) {
             Map<Enchantment, Integer> map = Maps.newHashMap();
@@ -164,7 +164,7 @@ public class EntityVindicator extends EntityIllagerAbstract {
         @Override
         public void c() {
             super.c();
-            this.e.n(0);
+            this.e.m(0);
         }
     }
 
@@ -179,20 +179,20 @@ public class EntityVindicator extends EntityIllagerAbstract {
         public boolean b() {
             EntityVindicator entityvindicator = (EntityVindicator) this.entity;
 
-            return entityvindicator.ek() && super.b();
+            return entityvindicator.el() && super.b();
         }
 
         @Override
         public boolean a() {
             EntityVindicator entityvindicator = (EntityVindicator) this.entity;
 
-            return entityvindicator.ek() && entityvindicator.random.nextInt(10) == 0 && super.a();
+            return entityvindicator.el() && entityvindicator.random.nextInt(10) == 0 && super.a();
         }
 
         @Override
         public void c() {
             super.c();
-            this.entity.n(0);
+            this.entity.m(0);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityWitch.java b/src/main/java/net/minecraft/server/EntityWitch.java
index 0b849f37..f30ce956 100644
--- a/src/main/java/net/minecraft/server/EntityWitch.java
+++ b/src/main/java/net/minecraft/server/EntityWitch.java
@@ -28,7 +28,7 @@ public class EntityWitch extends EntityRaider implements IRangedEntity {
     protected void initPathfinder() {
         super.initPathfinder();
         this.bC = new PathfinderGoalNearestHealableRaider<>(this, EntityRaider.class, true, (entityliving) -> {
-            return entityliving != null && this.ek() && entityliving.getEntityType() != EntityTypes.WITCH;
+            return entityliving != null && this.el() && entityliving.getEntityType() != EntityTypes.WITCH;
         });
         this.bD = new PathfinderGoalNearestAttackableTargetWitch<>(this, EntityHuman.class, 10, true, false, (Predicate) null);
         this.goalSelector.a(1, new PathfinderGoalFloat(this));
@@ -113,14 +113,14 @@ public class EntityWitch extends EntityRaider implements IRangedEntity {
                         }
                     }
 
-                    this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).removeModifier(EntityWitch.bz);
+                    this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).c(EntityWitch.bz);
                 }
             } else {
                 PotionRegistry potionregistry = null;
 
                 if (this.random.nextFloat() < 0.15F && this.a(TagsFluid.WATER) && !this.hasEffect(MobEffects.WATER_BREATHING)) {
                     potionregistry = Potions.WATER_BREATHING;
-                } else if (this.random.nextFloat() < 0.15F && (this.isBurning() || this.cE() != null && this.cE().p()) && !this.hasEffect(MobEffects.FIRE_RESISTANCE)) {
+                } else if (this.random.nextFloat() < 0.15F && (this.isBurning() || this.cD() != null && this.cD().p()) && !this.hasEffect(MobEffects.FIRE_RESISTANCE)) {
                     potionregistry = Potions.FIRE_RESISTANCE;
                 } else if (this.random.nextFloat() < 0.05F && this.getHealth() < this.getMaxHealth()) {
                     potionregistry = Potions.HEALING;
@@ -129,19 +129,18 @@ public class EntityWitch extends EntityRaider implements IRangedEntity {
                 }
 
                 if (potionregistry != null) {
-                    // Paper start - move all this down into its own method
-//                    ItemStack potion = PotionUtil.a(new ItemStack(Items.POTION), potionregistry);
-//                    org.bukkit.inventory.ItemStack bukkitStack = com.destroystokyo.paper.event.entity.WitchReadyPotionEvent.process((org.bukkit.entity.Witch) this.getBukkitEntity(), org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(potion));
-//                    this.setSlot(EnumItemSlot.MAINHAND, org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(bukkitStack));
-//                    // Paper end
-//                    this.bB = this.getItemInMainHand().k();
-//                    this.s(true);
-//                    this.world.playSound((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_WITCH_DRINK, this.getSoundCategory(), 1.0F, 0.8F + this.random.nextFloat() * 0.4F);
-//                    AttributeInstance attributeinstance = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED);
-//
-//                    attributeinstance.removeModifier(EntityWitch.bz);
-//                    attributeinstance.addModifier(EntityWitch.bz);
-                    this.setDrinkingPotion(PotionUtil.addPotionToItemStack(new ItemStack(Items.POTION), potionregistry));
+                    // Paper start - moved all this down into its own method
+                    //ItemStack potion = PotionUtil.a(new ItemStack(Items.POTION), potionregistry);
+                    //org.bukkit.inventory.ItemStack bukkitStack = com.destroystokyo.paper.event.entity.WitchReadyPotionEvent.process((org.bukkit.entity.Witch) this.getBukkitEntity(), org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(potion));
+                    //this.setSlot(EnumItemSlot.MAINHAND, org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(bukkitStack));
+                    //this.bB = this.getItemInMainHand().k();
+                    //this.s(true);
+                    //this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_WITCH_DRINK, this.getSoundCategory(), 1.0F, 0.8F + this.random.nextFloat() * 0.4F);
+                    //AttributeInstance attributeinstance = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED);
+                    //attributeinstance.c(EntityWitch.bz);
+                    //attributeinstance.b(EntityWitch.bz);
+
+                    setDrinkingPotion(PotionUtil.addPotionToItemStack(new ItemStack(Items.POTION), potionregistry));
                     // Paper end
                 }
             }
@@ -167,7 +166,7 @@ public class EntityWitch extends EntityRaider implements IRangedEntity {
     // Paper end
 
     @Override
-    public SoundEffect dV() {
+    public SoundEffect dW() {
         return SoundEffects.ENTITY_WITCH_CELEBRATE;
     }
 
@@ -223,7 +222,7 @@ public class EntityWitch extends EntityRaider implements IRangedEntity {
             // Paper end
             entitypotion.pitch -= -20.0F;
             entitypotion.shoot(d0, d1 + (double) (f1 * 0.2F), d2, 0.75F, 8.0F);
-            this.world.playSound((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_WITCH_THROW, this.getSoundCategory(), 1.0F, 0.8F + this.random.nextFloat() * 0.4F);
+            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.ENTITY_WITCH_THROW, this.getSoundCategory(), 1.0F, 0.8F + this.random.nextFloat() * 0.4F);
             this.world.addEntity(entitypotion);
         }
     }
@@ -237,7 +236,7 @@ public class EntityWitch extends EntityRaider implements IRangedEntity {
     public void a(int i, boolean flag) {}
 
     @Override
-    public boolean dX() {
+    public boolean dY() {
         return false;
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityWither.java b/src/main/java/net/minecraft/server/EntityWither.java
index 8b3052b1..5609fcfe 100644
--- a/src/main/java/net/minecraft/server/EntityWither.java
+++ b/src/main/java/net/minecraft/server/EntityWither.java
@@ -70,7 +70,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
     @Override
     public void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
-        this.r(nbttagcompound.getInt("Invul"));
+        this.q(nbttagcompound.getInt("Invul"));
         if (this.hasCustomName()) {
             this.bossBattle.a(this.getScoreboardDisplayName());
         }
@@ -149,9 +149,9 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
             }
 
             if (entity1 != null) {
-                double d1 = this.t(i + 1);
-                double d2 = this.u(i + 1);
-                double d3 = this.v(i + 1);
+                double d1 = this.s(i + 1);
+                double d2 = this.t(i + 1);
+                double d3 = this.u(i + 1);
                 double d4 = entity1.locX - d1;
                 double d5 = entity1.locY + (double) entity1.getHeadHeight() - d2;
                 double d6 = entity1.locZ - d3;
@@ -169,9 +169,9 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
         boolean flag = this.dW();
 
         for (j = 0; j < 3; ++j) {
-            double d8 = this.t(j);
-            double d9 = this.u(j);
-            double d10 = this.v(j);
+            double d8 = this.s(j);
+            double d9 = this.t(j);
+            double d10 = this.u(j);
 
             this.world.addParticle(Particles.SMOKE, d8 + this.random.nextGaussian() * 0.30000001192092896D, d9 + this.random.nextGaussian() * 0.30000001192092896D, d10 + this.random.nextGaussian() * 0.30000001192092896D, 0.0D, 0.0D, 0.0D);
             if (flag && this.world.random.nextInt(4) == 0) {
@@ -194,7 +194,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
         if (this.dV() > 0) {
             i = this.dV() - 1;
             if (i <= 0) {
-                Explosion.Effect explosion_effect = this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING) ? Explosion.Effect.DESTROY : Explosion.Effect.NONE;
+                Explosion.Effect explosion_effect = this.world.getGameRules().getBoolean("mobGriefing") ? Explosion.Effect.DESTROY : Explosion.Effect.NONE;
                 // CraftBukkit start
                 // this.world.createExplosion(this, this.locX, this.locY + (double) this.getHeadHeight(), this.locZ, 7.0F, false, explosion_effect);
                 ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), 7.0F, false);
@@ -228,7 +228,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
                 // CraftBukkit end
             }
 
-            this.r(i);
+            this.q(i);
             if (this.ticksLived % 10 == 0) {
                 this.heal(10.0F, EntityRegainHealthEvent.RegainReason.WITHER_SPAWN); // CraftBukkit
             }
@@ -306,7 +306,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
 
             if (this.bH > 0) {
                 --this.bH;
-                if (this.bH == 0 && this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) {
+                if (this.bH == 0 && this.world.getGameRules().getBoolean("mobGriefing")) {
                     i = MathHelper.floor(this.locY);
                     j = MathHelper.floor(this.locX);
                     int j1 = MathHelper.floor(this.locZ);
@@ -352,7 +352,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
     }
 
     public void l() {
-        this.r(220);
+        this.q(220);
         this.setHealth(this.getMaxHealth() / 3.0F);
     }
 
@@ -371,7 +371,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
         this.bossBattle.removePlayer(entityplayer);
     }
 
-    private double t(int i) {
+    private double s(int i) {
         if (i <= 0) {
             return this.locX;
         } else {
@@ -382,11 +382,11 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
         }
     }
 
-    private double u(int i) {
+    private double t(int i) {
         return i <= 0 ? this.locY + 3.0D : this.locY + 2.2D;
     }
 
-    private double v(int i) {
+    private double u(int i) {
         if (i <= 0) {
             return this.locZ;
         } else {
@@ -417,9 +417,9 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
 
     private void a(int i, double d0, double d1, double d2, boolean flag) {
         this.world.a((EntityHuman) null, 1024, new BlockPosition(this), 0);
-        double d3 = this.t(i);
-        double d4 = this.u(i);
-        double d5 = this.v(i);
+        double d3 = this.s(i);
+        double d4 = this.t(i);
+        double d5 = this.u(i);
         double d6 = d0 - d3;
         double d7 = d1 - d4;
         double d8 = d2 - d5;
@@ -514,7 +514,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
         return (Integer) this.datawatcher.get(EntityWither.bA);
     }
 
-    public void r(int i) {
+    public void q(int i) {
         this.datawatcher.set(EntityWither.bA, i);
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityWitherSkull.java b/src/main/java/net/minecraft/server/EntityWitherSkull.java
index 2a056024..9610c059 100644
--- a/src/main/java/net/minecraft/server/EntityWitherSkull.java
+++ b/src/main/java/net/minecraft/server/EntityWitherSkull.java
@@ -66,7 +66,7 @@ public class EntityWitherSkull extends EntityFireball {
                 }
             }
 
-            Explosion.Effect explosion_effect = this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING) ? Explosion.Effect.DESTROY : Explosion.Effect.NONE;
+            Explosion.Effect explosion_effect = this.world.getGameRules().getBoolean("mobGriefing") ? Explosion.Effect.DESTROY : Explosion.Effect.NONE;
 
             // CraftBukkit start
             // this.world.createExplosion(this, this.locX, this.locY, this.locZ, 1.0F, false, explosion_effect);
@@ -106,7 +106,7 @@ public class EntityWitherSkull extends EntityFireball {
     }
 
     @Override
-    protected boolean K_() {
+    protected boolean L_() {
         return false;
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityWolf.java b/src/main/java/net/minecraft/server/EntityWolf.java
index 02492663..0f4554c3 100644
--- a/src/main/java/net/minecraft/server/EntityWolf.java
+++ b/src/main/java/net/minecraft/server/EntityWolf.java
@@ -12,19 +12,19 @@ import org.bukkit.event.entity.EntityTargetEvent.TargetReason;
 public class EntityWolf extends EntityTameableAnimal {
 
     private static final DataWatcherObject<Float> DATA_HEALTH = DataWatcher.a(EntityWolf.class, DataWatcherRegistry.c);
-    private static final DataWatcherObject<Boolean> bE = DataWatcher.a(EntityWolf.class, DataWatcherRegistry.i);
-    private static final DataWatcherObject<Integer> bF = DataWatcher.a(EntityWolf.class, DataWatcherRegistry.b);
-    public static final Predicate<EntityLiving> bC = (entityliving) -> {
+    private static final DataWatcherObject<Boolean> bF = DataWatcher.a(EntityWolf.class, DataWatcherRegistry.i);
+    private static final DataWatcherObject<Integer> bG = DataWatcher.a(EntityWolf.class, DataWatcherRegistry.b);
+    public static final Predicate<EntityLiving> bD = (entityliving) -> {
         EntityTypes<?> entitytypes = entityliving.getEntityType();
 
         return entitytypes == EntityTypes.SHEEP || entitytypes == EntityTypes.RABBIT || entitytypes == EntityTypes.FOX;
     };
-    private float bG;
     private float bH;
-    private boolean bI;
+    private float bI;
     private boolean bJ;
-    private float bK;
+    private boolean bK;
     private float bL;
+    private float bM;
 
     public EntityWolf(EntityTypes<? extends EntityWolf> entitytypes, World world) {
         super(entitytypes, world);
@@ -48,7 +48,7 @@ public class EntityWolf extends EntityTameableAnimal {
         this.targetSelector.a(1, new PathfinderGoalOwnerHurtByTarget(this));
         this.targetSelector.a(2, new PathfinderGoalOwnerHurtTarget(this));
         this.targetSelector.a(3, (new PathfinderGoalHurtByTarget(this, new Class[0])).a(new Class[0])); // CraftBukkit - decompile error
-        this.targetSelector.a(4, new PathfinderGoalRandomTargetNonTamed<>(this, EntityAnimal.class, false, EntityWolf.bC));
+        this.targetSelector.a(4, new PathfinderGoalRandomTargetNonTamed<>(this, EntityAnimal.class, false, EntityWolf.bD));
         this.targetSelector.a(4, new PathfinderGoalRandomTargetNonTamed<>(this, EntityTurtle.class, false, EntityTurtle.bz));
         this.targetSelector.a(5, new PathfinderGoalNearestAttackableTarget<>(this, EntitySkeletonAbstract.class, false));
     }
@@ -102,8 +102,8 @@ public class EntityWolf extends EntityTameableAnimal {
     protected void initDatawatcher() {
         super.initDatawatcher();
         this.datawatcher.register(EntityWolf.DATA_HEALTH, this.getHealth());
-        this.datawatcher.register(EntityWolf.bE, false);
-        this.datawatcher.register(EntityWolf.bF, EnumColor.RED.getColorIndex());
+        this.datawatcher.register(EntityWolf.bF, false);
+        this.datawatcher.register(EntityWolf.bG, EnumColor.RED.getColorIndex());
     }
 
     @Override
@@ -156,10 +156,10 @@ public class EntityWolf extends EntityTameableAnimal {
     @Override
     public void movementTick() {
         super.movementTick();
-        if (!this.world.isClientSide && this.bI && !this.bJ && !this.dT() && this.onGround) {
-            this.bJ = true;
-            this.bK = 0.0F;
+        if (!this.world.isClientSide && this.bJ && !this.bK && !this.dT() && this.onGround) {
+            this.bK = true;
             this.bL = 0.0F;
+            this.bM = 0.0F;
             this.world.broadcastEntityEffect(this, (byte) 8);
         }
 
@@ -173,35 +173,35 @@ public class EntityWolf extends EntityTameableAnimal {
     public void tick() {
         super.tick();
         if (this.isAlive()) {
-            this.bH = this.bG;
+            this.bI = this.bH;
             if (this.ei()) {
-                this.bG += (1.0F - this.bG) * 0.4F;
+                this.bH += (1.0F - this.bH) * 0.4F;
             } else {
-                this.bG += (0.0F - this.bG) * 0.4F;
+                this.bH += (0.0F - this.bH) * 0.4F;
             }
 
-            if (this.au()) {
-                this.bI = true;
-                this.bJ = false;
-                this.bK = 0.0F;
+            if (this.at()) {
+                this.bJ = true;
+                this.bK = false;
                 this.bL = 0.0F;
-            } else if ((this.bI || this.bJ) && this.bJ) {
-                if (this.bK == 0.0F) {
+                this.bM = 0.0F;
+            } else if ((this.bJ || this.bK) && this.bK) {
+                if (this.bL == 0.0F) {
                     this.a(SoundEffects.ENTITY_WOLF_SHAKE, this.getSoundVolume(), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
                 }
 
-                this.bL = this.bK;
-                this.bK += 0.05F;
-                if (this.bL >= 2.0F) {
-                    this.bI = false;
+                this.bM = this.bL;
+                this.bL += 0.05F;
+                if (this.bM >= 2.0F) {
                     this.bJ = false;
+                    this.bK = false;
+                    this.bM = 0.0F;
                     this.bL = 0.0F;
-                    this.bK = 0.0F;
                 }
 
-                if (this.bK > 0.4F) {
+                if (this.bL > 0.4F) {
                     float f = (float) this.getBoundingBox().minY;
-                    int i = (int) (MathHelper.sin((this.bK - 0.4F) * 3.1415927F) * 7.0F);
+                    int i = (int) (MathHelper.sin((this.bL - 0.4F) * 3.1415927F) * 7.0F);
                     Vec3D vec3d = this.getMot();
 
                     for (int j = 0; j < i; ++j) {
@@ -218,10 +218,10 @@ public class EntityWolf extends EntityTameableAnimal {
 
     @Override
     public void die(DamageSource damagesource) {
-        this.bI = false;
         this.bJ = false;
+        this.bK = false;
+        this.bM = 0.0F;
         this.bL = 0.0F;
-        this.bK = 0.0F;
         super.die(damagesource);
     }
 
@@ -369,11 +369,11 @@ public class EntityWolf extends EntityTameableAnimal {
     }
 
     public EnumColor getCollarColor() {
-        return EnumColor.fromColorIndex((Integer) this.datawatcher.get(EntityWolf.bF));
+        return EnumColor.fromColorIndex((Integer) this.datawatcher.get(EntityWolf.bG));
     }
 
     public void setCollarColor(EnumColor enumcolor) {
-        this.datawatcher.set(EntityWolf.bF, enumcolor.getColorIndex());
+        this.datawatcher.set(EntityWolf.bG, enumcolor.getColorIndex());
     }
 
     @Override
@@ -390,7 +390,7 @@ public class EntityWolf extends EntityTameableAnimal {
     }
 
     public void v(boolean flag) {
-        this.datawatcher.set(EntityWolf.bE, flag);
+        this.datawatcher.set(EntityWolf.bF, flag);
     }
 
     @Override
@@ -409,7 +409,7 @@ public class EntityWolf extends EntityTameableAnimal {
     }
 
     public boolean ei() {
-        return (Boolean) this.datawatcher.get(EntityWolf.bE);
+        return (Boolean) this.datawatcher.get(EntityWolf.bF);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/EntityZombie.java b/src/main/java/net/minecraft/server/EntityZombie.java
index 5950f3eb..40a79638 100644
--- a/src/main/java/net/minecraft/server/EntityZombie.java
+++ b/src/main/java/net/minecraft/server/EntityZombie.java
@@ -1,6 +1,5 @@
 package net.minecraft.server;
 
-import com.mojang.datafixers.types.DynamicOps;
 import java.time.LocalDate;
 import java.time.temporal.ChronoField;
 import java.util.List;
@@ -53,7 +52,7 @@ public class EntityZombie extends EntityMonster {
 
     protected void l() {
         this.goalSelector.a(2, new PathfinderGoalZombieAttack(this, 1.0D, false));
-        this.goalSelector.a(6, new PathfinderGoalMoveThroughVillage(this, 1.0D, true, 4, this::ed));
+        this.goalSelector.a(6, new PathfinderGoalMoveThroughVillage(this, 1.0D, true, 4, this::ef));
         this.goalSelector.a(7, new PathfinderGoalRandomStrollLand(this, 1.0D));
         this.targetSelector.a(1, (new PathfinderGoalHurtByTarget(this, new Class[0])).a(EntityPigZombie.class));
         this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget<>(this, EntityHuman.class, true));
@@ -85,12 +84,12 @@ public class EntityZombie extends EntityMonster {
         return (Boolean) this.getDataWatcher().get(EntityZombie.DROWN_CONVERTING);
     }
 
-    public boolean ed() {
+    public boolean ef() {
         return this.bE;
     }
 
     public void s(boolean flag) {
-        if (this.dV()) {
+        if (this.dW()) {
             if (this.bE != flag) {
                 this.bE = flag;
                 ((Navigation) this.getNavigation()).a(flag);
@@ -107,7 +106,7 @@ public class EntityZombie extends EntityMonster {
 
     }
 
-    protected boolean dV() {
+    protected boolean dW() {
         return true;
     }
 
@@ -130,9 +129,9 @@ public class EntityZombie extends EntityMonster {
         if (this.world != null && !this.world.isClientSide) {
             AttributeInstance attributeinstance = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED);
 
-            attributeinstance.removeModifier(this.babyModifier); // Paper
+            attributeinstance.c(this.babyModifier); // Paper
             if (flag) {
-                attributeinstance.addModifier(this.babyModifier); // Paper
+                attributeinstance.b(this.babyModifier); // Paper
             }
         }
 
@@ -147,7 +146,7 @@ public class EntityZombie extends EntityMonster {
         super.a(datawatcherobject);
     }
 
-    protected boolean dY() {
+    protected boolean dZ() {
         return true;
     }
 
@@ -161,9 +160,9 @@ public class EntityZombie extends EntityMonster {
                 this.drownedConversionTime -= elapsedTicks;
                 // CraftBukkit end
                 if (this.drownedConversionTime < 0) {
-                    this.ea();
+                    this.eb();
                 }
-            } else if (this.dY()) {
+            } else if (this.dZ()) {
                 if (this.a(TagsFluid.WATER)) {
                     ++this.bF;
                     if (this.bF >= 600) {
@@ -182,7 +181,7 @@ public class EntityZombie extends EntityMonster {
     @Override
     public void movementTick() {
         if (this.isAlive()) {
-            boolean flag = this.I_() && this.dS();
+            boolean flag = this.J_() && this.dS();
 
             if (flag) {
                 ItemStack itemstack = this.getEquipment(EnumItemSlot.HEAD);
@@ -209,7 +208,6 @@ public class EntityZombie extends EntityMonster {
     }
 
     public void startDrownedConversion(int i) {
-        this.lastTick = MinecraftServer.currentTick; // CraftBukkit
         this.drownedConversionTime = i;
         this.getDataWatcher().set(EntityZombie.DROWN_CONVERTING, true);
     }
@@ -221,7 +219,7 @@ public class EntityZombie extends EntityMonster {
     }
     // Paper end
 
-    protected void ea() {
+    protected void eb() {
         this.b(EntityTypes.DROWNED);
         this.world.a((EntityHuman) null, 1040, new BlockPosition(this), 0);
     }
@@ -232,7 +230,7 @@ public class EntityZombie extends EntityMonster {
 
             entityzombie.u(this);
             entityzombie.setCanPickupLoot(this.canPickupLoot());
-            entityzombie.s(entityzombie.dV() && this.ed());
+            entityzombie.s(entityzombie.dW() && this.ef());
             entityzombie.v(entityzombie.world.getDamageScaler(new BlockPosition(entityzombie)).d());
             entityzombie.setBaby(this.isBaby());
             entityzombie.setNoAI(this.isNoAI());
@@ -244,9 +242,8 @@ public class EntityZombie extends EntityMonster {
                 ItemStack itemstack = this.getEquipment(enumitemslot);
 
                 if (!itemstack.isEmpty()) {
-                    entityzombie.setSlot(enumitemslot, itemstack.cloneItemStack());
+                    entityzombie.setSlot(enumitemslot, itemstack);
                     entityzombie.a(enumitemslot, this.d(enumitemslot));
-                    itemstack.setCount(0);
                 }
             }
 
@@ -266,8 +263,8 @@ public class EntityZombie extends EntityMonster {
         }
     }
 
-    public boolean shouldBurnInDay() { return I_(); } // Paper - OBFHELPER
-    protected boolean I_() {
+    public boolean shouldBurnInDay() { return J_(); } // Paper - OBFHELPER
+    protected boolean J_() {
         return shouldBurnInDay;
     }
 
@@ -286,7 +283,7 @@ public class EntityZombie extends EntityMonster {
                 entityliving = (EntityLiving) damagesource.getEntity();
             }
 
-            if (entityliving != null && this.world.getDifficulty() == EnumDifficulty.HARD && (double) this.random.nextFloat() < this.getAttributeInstance(EntityZombie.d).getValue() && this.world.getGameRules().getBoolean(GameRules.DO_MOB_SPAWNING)) {
+            if (entityliving != null && this.world.getDifficulty() == EnumDifficulty.HARD && (double) this.random.nextFloat() < this.getAttributeInstance(EntityZombie.d).getValue() && this.world.getGameRules().getBoolean("doMobSpawning")) {
                 int i = MathHelper.floor(this.locX);
                 int j = MathHelper.floor(this.locY);
                 int k = MathHelper.floor(this.locZ);
@@ -304,8 +301,8 @@ public class EntityZombie extends EntityMonster {
                             this.world.addEntity(entityzombie, CreatureSpawnEvent.SpawnReason.REINFORCEMENTS); // CraftBukkit
                             entityzombie.setGoalTarget(entityliving, EntityTargetEvent.TargetReason.REINFORCEMENT_TARGET, true); // CraftBukkit
                             entityzombie.prepare(this.world, this.world.getDamageScaler(new BlockPosition(entityzombie)), EnumMobSpawn.REINFORCEMENT, (GroupDataEntity) null, (NBTTagCompound) null);
-                            this.getAttributeInstance(EntityZombie.d).addModifier(new AttributeModifier("Zombie reinforcement caller charge", -0.05000000074505806D, AttributeModifier.Operation.ADDITION));
-                            entityzombie.getAttributeInstance(EntityZombie.d).addModifier(new AttributeModifier("Zombie reinforcement callee charge", -0.05000000074505806D, AttributeModifier.Operation.ADDITION));
+                            this.getAttributeInstance(EntityZombie.d).b(new AttributeModifier("Zombie reinforcement caller charge", -0.05000000074505806D, AttributeModifier.Operation.ADDITION));
+                            entityzombie.getAttributeInstance(EntityZombie.d).b(new AttributeModifier("Zombie reinforcement callee charge", -0.05000000074505806D, AttributeModifier.Operation.ADDITION));
                             break;
                         }
                     }
@@ -391,7 +388,7 @@ public class EntityZombie extends EntityMonster {
             nbttagcompound.setBoolean("IsBaby", true);
         }
 
-        nbttagcompound.setBoolean("CanBreakDoors", this.ed());
+        nbttagcompound.setBoolean("CanBreakDoors", this.ef());
         nbttagcompound.setInt("InWaterTime", this.isInWater() ? this.bF : -1);
         nbttagcompound.setInt("DrownedConversionTime", this.isDrownConverting() ? this.drownedConversionTime : -1);
         nbttagcompound.setBoolean("Paper.ShouldBurnInDay", shouldBurnInDay); // Paper
@@ -431,7 +428,6 @@ public class EntityZombie extends EntityMonster {
             // entityvillager.die(); // CraftBukkit - moved down
             entityzombievillager.prepare(this.world, this.world.getDamageScaler(new BlockPosition(entityzombievillager)), EnumMobSpawn.CONVERSION, new EntityZombie.GroupDataZombie(false), (NBTTagCompound) null);
             entityzombievillager.setVillagerData(entityvillager.getVillagerData());
-            entityzombievillager.a((NBTBase) entityvillager.es().a((DynamicOps) DynamicOpsNBT.a).getValue());
             entityzombievillager.setOffers(entityvillager.getOffers().a());
             entityzombievillager.a(entityvillager.getExperience());
             entityzombievillager.setBaby(entityvillager.isBaby());
@@ -500,7 +496,7 @@ public class EntityZombie extends EntityMonster {
                 }
             }
 
-            this.s(this.dV() && this.random.nextFloat() < f * 0.1F);
+            this.s(this.dW() && this.random.nextFloat() < f * 0.1F);
             this.a(difficultydamagescaler);
             this.b(difficultydamagescaler);
         }
@@ -521,23 +517,23 @@ public class EntityZombie extends EntityMonster {
     }
 
     protected void v(float f) {
-        this.getAttributeInstance(GenericAttributes.KNOCKBACK_RESISTANCE).addModifier(new AttributeModifier("Random spawn bonus", this.random.nextDouble() * 0.05000000074505806D, AttributeModifier.Operation.ADDITION));
+        this.getAttributeInstance(GenericAttributes.KNOCKBACK_RESISTANCE).b(new AttributeModifier("Random spawn bonus", this.random.nextDouble() * 0.05000000074505806D, AttributeModifier.Operation.ADDITION));
         double d0 = this.random.nextDouble() * 1.5D * (double) f;
 
         if (d0 > 1.0D) {
-            this.getAttributeInstance(GenericAttributes.FOLLOW_RANGE).addModifier(new AttributeModifier("Random zombie-spawn bonus", d0, AttributeModifier.Operation.MULTIPLY_TOTAL));
+            this.getAttributeInstance(GenericAttributes.FOLLOW_RANGE).b(new AttributeModifier("Random zombie-spawn bonus", d0, AttributeModifier.Operation.MULTIPLY_TOTAL));
         }
 
         if (this.random.nextFloat() < f * 0.05F) {
-            this.getAttributeInstance(EntityZombie.d).addModifier(new AttributeModifier("Leader zombie bonus", this.random.nextDouble() * 0.25D + 0.5D, AttributeModifier.Operation.ADDITION));
-            this.getAttributeInstance(GenericAttributes.MAX_HEALTH).addModifier(new AttributeModifier("Leader zombie bonus", this.random.nextDouble() * 3.0D + 1.0D, AttributeModifier.Operation.MULTIPLY_TOTAL));
-            this.s(this.dV());
+            this.getAttributeInstance(EntityZombie.d).b(new AttributeModifier("Leader zombie bonus", this.random.nextDouble() * 0.25D + 0.5D, AttributeModifier.Operation.ADDITION));
+            this.getAttributeInstance(GenericAttributes.MAX_HEALTH).b(new AttributeModifier("Leader zombie bonus", this.random.nextDouble() * 3.0D + 1.0D, AttributeModifier.Operation.MULTIPLY_TOTAL));
+            this.s(this.dW());
         }
 
     }
 
     @Override
-    public double aO() {
+    public double aN() {
         return this.isBaby() ? 0.0D : -0.45D;
     }
 
@@ -551,7 +547,7 @@ public class EntityZombie extends EntityMonster {
 
             if (entitycreeper.canCauseHeadDrop()) {
                 entitycreeper.setCausedHeadDrop();
-                ItemStack itemstack = this.dX();
+                ItemStack itemstack = this.dY();
 
                 if (!itemstack.isEmpty()) {
                     this.a(itemstack);
@@ -561,7 +557,7 @@ public class EntityZombie extends EntityMonster {
 
     }
 
-    protected ItemStack dX() {
+    protected ItemStack dY() {
         return new ItemStack(Items.ZOMBIE_HEAD);
     }
 
@@ -573,12 +569,12 @@ public class EntityZombie extends EntityMonster {
 
         @Override
         public void a(GeneratorAccess generatoraccess, BlockPosition blockposition) {
-            generatoraccess.playSound((EntityHuman) null, blockposition, SoundEffects.ENTITY_ZOMBIE_DESTROY_EGG, SoundCategory.HOSTILE, 0.5F, 0.9F + EntityZombie.this.random.nextFloat() * 0.2F);
+            generatoraccess.a((EntityHuman) null, blockposition, SoundEffects.ENTITY_ZOMBIE_DESTROY_EGG, SoundCategory.HOSTILE, 0.5F, 0.9F + EntityZombie.this.random.nextFloat() * 0.2F);
         }
 
         @Override
         public void a(World world, BlockPosition blockposition) {
-            world.playSound((EntityHuman) null, blockposition, SoundEffects.ENTITY_TURTLE_EGG_BREAK, SoundCategory.BLOCKS, 0.7F, 0.9F + world.random.nextFloat() * 0.2F);
+            world.a((EntityHuman) null, blockposition, SoundEffects.ENTITY_TURTLE_EGG_BREAK, SoundCategory.BLOCKS, 0.7F, 0.9F + world.random.nextFloat() * 0.2F);
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/server/EntityZombieHusk.java b/src/main/java/net/minecraft/server/EntityZombieHusk.java
index 4c8b2dd0..1c078742 100644
--- a/src/main/java/net/minecraft/server/EntityZombieHusk.java
+++ b/src/main/java/net/minecraft/server/EntityZombieHusk.java
@@ -1,19 +1,18 @@
 package net.minecraft.server;
 
-import java.util.Random;
-
 public class EntityZombieHusk extends EntityZombie {
 
     public EntityZombieHusk(EntityTypes<? extends EntityZombieHusk> entitytypes, World world) {
         super(entitytypes, world);
     }
 
-    public static boolean b(EntityTypes<EntityZombieHusk> entitytypes, GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn, BlockPosition blockposition, Random random) {
-        return c(entitytypes, generatoraccess, enummobspawn, blockposition, random) && (enummobspawn == EnumMobSpawn.SPAWNER || generatoraccess.f(blockposition));
+    @Override
+    public boolean a(GeneratorAccess generatoraccess, EnumMobSpawn enummobspawn) {
+        return super.a(generatoraccess, enummobspawn) && (enummobspawn == EnumMobSpawn.SPAWNER || generatoraccess.f(new BlockPosition(this)));
     }
 
     @Override
-    protected boolean I_() {
+    protected boolean J_() {
         return false;
     }
 
@@ -51,18 +50,18 @@ public class EntityZombieHusk extends EntityZombie {
     }
 
     @Override
-    protected boolean dY() {
+    protected boolean dZ() {
         return true;
     }
 
     @Override
-    protected void ea() {
+    protected void eb() {
         this.b(EntityTypes.ZOMBIE);
         this.world.a((EntityHuman) null, 1041, new BlockPosition(this), 0);
     }
 
     @Override
-    protected ItemStack dX() {
+    protected ItemStack dY() {
         return ItemStack.a;
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityZombieVillager.java b/src/main/java/net/minecraft/server/EntityZombieVillager.java
index da8a8c85..5cfda316 100644
--- a/src/main/java/net/minecraft/server/EntityZombieVillager.java
+++ b/src/main/java/net/minecraft/server/EntityZombieVillager.java
@@ -14,9 +14,8 @@ public class EntityZombieVillager extends EntityZombie implements VillagerDataHo
     private static final DataWatcherObject<VillagerData> c = DataWatcher.a(EntityZombieVillager.class, DataWatcherRegistry.q);
     public int conversionTime;
     public UUID conversionPlayer;
-    private NBTBase bB;
-    private NBTTagCompound bC;
-    private int bD;
+    private NBTTagCompound bB;
+    private int bC;
     private int lastTick = MinecraftServer.currentTick; // CraftBukkit - add field
 
     public EntityZombieVillager(EntityTypes<? extends EntityZombieVillager> entitytypes, World world) {
@@ -35,12 +34,8 @@ public class EntityZombieVillager extends EntityZombie implements VillagerDataHo
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
         nbttagcompound.set("VillagerData", (NBTBase) this.getVillagerData().a(DynamicOpsNBT.a));
-        if (this.bC != null) {
-            nbttagcompound.set("Offers", this.bC);
-        }
-
         if (this.bB != null) {
-            nbttagcompound.set("Gossips", this.bB);
+            nbttagcompound.set("Offers", this.bB);
         }
 
         nbttagcompound.setInt("ConversionTime", this.isConverting() ? this.conversionTime : -1);
@@ -48,7 +43,7 @@ public class EntityZombieVillager extends EntityZombie implements VillagerDataHo
             nbttagcompound.a("ConversionPlayer", this.conversionPlayer);
         }
 
-        nbttagcompound.setInt("Xp", this.bD);
+        nbttagcompound.setInt("Xp", this.bC);
     }
 
     @Override
@@ -59,11 +54,7 @@ public class EntityZombieVillager extends EntityZombie implements VillagerDataHo
         }
 
         if (nbttagcompound.hasKeyOfType("Offers", 10)) {
-            this.bC = nbttagcompound.getCompound("Offers");
-        }
-
-        if (nbttagcompound.hasKeyOfType("Gossips", 10)) {
-            this.bB = nbttagcompound.getList("Gossips", 10);
+            this.bB = nbttagcompound.getCompound("Offers");
         }
 
         if (nbttagcompound.hasKeyOfType("ConversionTime", 99) && nbttagcompound.getInt("ConversionTime") > -1) {
@@ -71,7 +62,7 @@ public class EntityZombieVillager extends EntityZombie implements VillagerDataHo
         }
 
         if (nbttagcompound.hasKeyOfType("Xp", 3)) {
-            this.bD = nbttagcompound.getInt("Xp");
+            this.bC = nbttagcompound.getInt("Xp");
         }
 
     }
@@ -115,7 +106,7 @@ public class EntityZombieVillager extends EntityZombie implements VillagerDataHo
     }
 
     @Override
-    protected boolean dY() {
+    protected boolean dZ() {
         return false;
     }
 
@@ -140,20 +131,16 @@ public class EntityZombieVillager extends EntityZombie implements VillagerDataHo
         this.world.broadcastEntityEffect(this, (byte) 16);
     }
 
-    private void a(WorldServer worldserver) {
+    protected void a(WorldServer worldserver) {
         EntityVillager entityvillager = (EntityVillager) EntityTypes.VILLAGER.a((World) worldserver);
 
         entityvillager.u(this);
         entityvillager.setVillagerData(this.getVillagerData());
         if (this.bB != null) {
-            entityvillager.a(this.bB);
+            entityvillager.b(new MerchantRecipeList(this.bB));
         }
 
-        if (this.bC != null) {
-            entityvillager.b(new MerchantRecipeList(this.bC));
-        }
-
-        entityvillager.setExperience(this.bD);
+        entityvillager.setExperience(this.bC);
         entityvillager.prepare(worldserver, worldserver.getDamageScaler(new BlockPosition(entityvillager)), EnumMobSpawn.CONVERSION, (GroupDataEntity) null, (NBTTagCompound) null);
         if (this.isBaby()) {
             entityvillager.setAgeRaw(-24000);
@@ -187,7 +174,7 @@ public class EntityZombieVillager extends EntityZombie implements VillagerDataHo
         worldserver.a((EntityHuman) null, 1027, new BlockPosition(this), 0);
     }
 
-    private int getConversionProgress() {
+    protected int getConversionProgress() {
         int i = 1;
 
         if (this.random.nextFloat() < 0.01F) {
@@ -215,7 +202,7 @@ public class EntityZombieVillager extends EntityZombie implements VillagerDataHo
     }
 
     @Override
-    protected float cV() {
+    protected float cU() {
         return this.isBaby() ? (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 2.0F : (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F;
     }
 
@@ -240,16 +227,12 @@ public class EntityZombieVillager extends EntityZombie implements VillagerDataHo
     }
 
     @Override
-    protected ItemStack dX() {
+    protected ItemStack dY() {
         return ItemStack.a;
     }
 
     public void setOffers(NBTTagCompound nbttagcompound) {
-        this.bC = nbttagcompound;
-    }
-
-    public void a(NBTBase nbtbase) {
-        this.bB = nbtbase;
+        this.bB = nbttagcompound;
     }
 
     @Nullable
@@ -263,7 +246,7 @@ public class EntityZombieVillager extends EntityZombie implements VillagerDataHo
         VillagerData villagerdata1 = this.getVillagerData();
 
         if (villagerdata1.getProfession() != villagerdata.getProfession()) {
-            this.bC = null;
+            this.bB = null;
         }
 
         this.datawatcher.set(EntityZombieVillager.c, villagerdata);
@@ -275,6 +258,6 @@ public class EntityZombieVillager extends EntityZombie implements VillagerDataHo
     }
 
     public void a(int i) {
-        this.bD = i;
+        this.bC = i;
     }
 }
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index 8cfdac03..6eeff4ce 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -115,7 +115,7 @@ public class Explosion {
                             Fluid fluid = this.world.getFluid(blockposition);
 
                             if (!iblockdata.isAir() || !fluid.isEmpty()) {
-                                float f2 = Math.max(iblockdata.getBlock().getDurability(), fluid.l());
+                                float f2 = Math.max(iblockdata.getBlock().getDurability(), fluid.k());
 
                                 if (this.source != null) {
                                     f2 = this.source.a(this, this.world, blockposition, iblockdata, fluid, f2);
@@ -159,7 +159,7 @@ public class Explosion {
         for (int l1 = 0; l1 < list.size(); ++l1) {
             Entity entity = (Entity) list.get(l1);
 
-            if (!entity.bS()) {
+            if (!entity.bR()) {
                 double d7 = (double) (MathHelper.sqrt(entity.c(new Vec3D(this.posX, this.posY, this.posZ))) / f3);
 
                 if (d7 <= 1.0D) {
@@ -207,7 +207,7 @@ public class Explosion {
     }
 
     public void a(boolean flag) {
-        this.world.playSound((EntityHuman) null, this.posX, this.posY, this.posZ, SoundEffects.ENTITY_GENERIC_EXPLODE, SoundCategory.BLOCKS, 4.0F, (1.0F + (this.world.random.nextFloat() - this.world.random.nextFloat()) * 0.2F) * 0.7F);
+        this.world.a((EntityHuman) null, this.posX, this.posY, this.posZ, SoundEffects.ENTITY_GENERIC_EXPLODE, SoundCategory.BLOCKS, 4.0F, (1.0F + (this.world.random.nextFloat() - this.world.random.nextFloat()) * 0.2F) * 0.7F);
         boolean flag1 = this.b != Explosion.Effect.NONE;
 
         if (this.size >= 2.0F && flag1) {
@@ -239,13 +239,13 @@ public class Explosion {
             float yield;
 
             if (explode != null) {
-                EntityExplodeEvent event = new EntityExplodeEvent(explode, location, blockList, this.b == Explosion.Effect.DESTROY ? 1.0F / this.size : 1.0F);
+                EntityExplodeEvent event = new EntityExplodeEvent(explode, location, blockList, 1.0F / this.size);
                 this.world.getServer().getPluginManager().callEvent(event);
                 cancelled = event.isCancelled();
                 bukkitBlocks = event.blockList();
                 yield = event.getYield();
             } else {
-                BlockExplodeEvent event = new BlockExplodeEvent(location.getBlock(), blockList, this.b == Explosion.Effect.DESTROY ? 1.0F / this.size : 1.0F);
+                BlockExplodeEvent event = new BlockExplodeEvent(location.getBlock(), blockList, 1.0F / this.size);
                 this.world.getServer().getPluginManager().callEvent(event);
                 cancelled = event.isCancelled();
                 bukkitBlocks = event.blockList();
@@ -298,7 +298,7 @@ public class Explosion {
                         TileEntity tileentity = block.isTileEntity() ? this.world.getTileEntity(blockposition) : null;
                         LootTableInfo.Builder loottableinfo_builder = (new LootTableInfo.Builder((WorldServer) this.world)).a(this.world.random).set(LootContextParameters.POSITION, blockposition).set(LootContextParameters.TOOL, ItemStack.a).setOptional(LootContextParameters.BLOCK_ENTITY, tileentity);
 
-                        if (this.b == Explosion.Effect.DESTROY || yield < 1.0F) { // CraftBukkit - add yield
+                        if (this.b == Explosion.Effect.DESTROY) {
                             loottableinfo_builder.set(LootContextParameters.EXPLOSION_RADIUS, 1.0F / yield); // CraftBukkit - add yield
                         }
 
diff --git a/src/main/java/net/minecraft/server/FluidTypeFlowing.java b/src/main/java/net/minecraft/server/FluidTypeFlowing.java
index 4660b953..5f151436 100644
--- a/src/main/java/net/minecraft/server/FluidTypeFlowing.java
+++ b/src/main/java/net/minecraft/server/FluidTypeFlowing.java
@@ -58,8 +58,8 @@ public abstract class FluidTypeFlowing extends FluidType {
                 blockposition_pooledblockposition.g(blockposition).c(enumdirection);
                 Fluid fluid1 = iblockaccess.getFluid(blockposition_pooledblockposition);
 
-                if (this.g(fluid1)) {
-                    float f = fluid1.f();
+                if (this.f(fluid1)) {
+                    float f = fluid1.getHeight(iblockaccess, blockposition_pooledblockposition);
                     float f1 = 0.0F;
 
                     if (f == 0.0F) {
@@ -67,15 +67,15 @@ public abstract class FluidTypeFlowing extends FluidType {
                             BlockPosition blockposition1 = blockposition_pooledblockposition.down();
                             Fluid fluid2 = iblockaccess.getFluid(blockposition1);
 
-                            if (this.g(fluid2)) {
-                                f = fluid2.f();
+                            if (this.f(fluid2)) {
+                                f = fluid2.getHeight(iblockaccess, blockposition1);
                                 if (f > 0.0F) {
-                                    f1 = fluid.f() - (f - 0.8888889F);
+                                    f1 = fluid.getHeight(iblockaccess, blockposition) - (f - 0.8888889F);
                                 }
                             }
                         }
                     } else if (f > 0.0F) {
-                        f1 = fluid.f() - f;
+                        f1 = fluid.getHeight(iblockaccess, blockposition) - f;
                     }
 
                     if (f1 != 0.0F) {
@@ -123,7 +123,7 @@ public abstract class FluidTypeFlowing extends FluidType {
         return vec3d;
     }
 
-    private boolean g(Fluid fluid) {
+    private boolean f(Fluid fluid) {
         return fluid.isEmpty() || fluid.getType().a((FluidType) this);
     }
 
@@ -131,7 +131,7 @@ public abstract class FluidTypeFlowing extends FluidType {
         IBlockData iblockdata = iblockaccess.getType(blockposition);
         Fluid fluid = iblockaccess.getFluid(blockposition);
 
-        return fluid.getType().a((FluidType) this) ? false : (enumdirection == EnumDirection.UP ? true : (iblockdata.getMaterial() == Material.ICE ? false : iblockdata.d(iblockaccess, blockposition, enumdirection)));
+        return fluid.getType().a((FluidType) this) ? false : (enumdirection == EnumDirection.UP ? true : (iblockdata.getMaterial() == Material.ICE ? false : Block.d(iblockdata, iblockaccess, blockposition, enumdirection)));
     }
 
     protected void a(GeneratorAccess generatoraccess, BlockPosition blockposition, Fluid fluid) {
@@ -163,7 +163,7 @@ public abstract class FluidTypeFlowing extends FluidType {
     }
 
     private void a(GeneratorAccess generatoraccess, BlockPosition blockposition, Fluid fluid, IBlockData iblockdata) {
-        int i = fluid.g() - this.c((IWorldReader) generatoraccess);
+        int i = fluid.f() - this.c((IWorldReader) generatoraccess);
 
         if ((Boolean) fluid.get(FluidTypeFlowing.FALLING)) {
             i = 7;
@@ -215,7 +215,7 @@ public abstract class FluidTypeFlowing extends FluidType {
                     ++j;
                 }
 
-                i = Math.max(i, fluid.g());
+                i = Math.max(i, fluid.f());
             }
         }
 
@@ -223,7 +223,7 @@ public abstract class FluidTypeFlowing extends FluidType {
             IBlockData iblockdata2 = iworldreader.getType(blockposition.down());
             Fluid fluid1 = iblockdata2.p();
 
-            if (iblockdata2.getMaterial().isBuildable() || this.h(fluid1)) {
+            if (iblockdata2.getMaterial().isBuildable() || this.g(fluid1)) {
                 return this.a(false);
             }
         }
@@ -371,10 +371,10 @@ public abstract class FluidTypeFlowing extends FluidType {
     }
 
     private boolean a(IBlockAccess iblockaccess, FluidType fluidtype, BlockPosition blockposition, IBlockData iblockdata, EnumDirection enumdirection, BlockPosition blockposition1, IBlockData iblockdata1, Fluid fluid) {
-        return !this.h(fluid) && this.a(enumdirection, iblockaccess, blockposition, iblockdata, blockposition1, iblockdata1) && this.a(iblockaccess, blockposition1, iblockdata1, fluidtype);
+        return !this.g(fluid) && this.a(enumdirection, iblockaccess, blockposition, iblockdata, blockposition1, iblockdata1) && this.a(iblockaccess, blockposition1, iblockdata1, fluidtype);
     }
 
-    private boolean h(Fluid fluid) {
+    private boolean g(Fluid fluid) {
         return fluid.getType().a((FluidType) this) && fluid.isSource();
     }
 
@@ -389,7 +389,7 @@ public abstract class FluidTypeFlowing extends FluidType {
             BlockPosition blockposition1 = blockposition.shift(enumdirection);
             Fluid fluid = iworldreader.getFluid(blockposition1);
 
-            if (this.h(fluid)) {
+            if (this.g(fluid)) {
                 ++i;
             }
         }
@@ -508,8 +508,8 @@ public abstract class FluidTypeFlowing extends FluidType {
         this.a((GeneratorAccess) world, blockposition, fluid);
     }
 
-    protected static int e(Fluid fluid) {
-        return fluid.isSource() ? 0 : 8 - Math.min(fluid.g(), 8) + ((Boolean) fluid.get(FluidTypeFlowing.FALLING) ? 8 : 0);
+    protected static int d(Fluid fluid) {
+        return fluid.isSource() ? 0 : 8 - Math.min(fluid.f(), 8) + ((Boolean) fluid.get(FluidTypeFlowing.FALLING) ? 8 : 0);
     }
 
     private static boolean c(Fluid fluid, IBlockAccess iblockaccess, BlockPosition blockposition) {
@@ -518,17 +518,12 @@ public abstract class FluidTypeFlowing extends FluidType {
 
     @Override
     public float a(Fluid fluid, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return c(fluid, iblockaccess, blockposition) ? 1.0F : fluid.f();
-    }
-
-    @Override
-    public float a(Fluid fluid) {
-        return (float) fluid.g() / 9.0F;
+        return c(fluid, iblockaccess, blockposition) ? 1.0F : (float) fluid.f() / 9.0F;
     }
 
     @Override
     public VoxelShape b(Fluid fluid, IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return fluid.g() == 9 && c(fluid, iblockaccess, blockposition) ? VoxelShapes.b() : (VoxelShape) this.f.computeIfAbsent(fluid, (fluid1) -> {
+        return fluid.f() == 9 && c(fluid, iblockaccess, blockposition) ? VoxelShapes.b() : (VoxelShape) this.f.computeIfAbsent(fluid, (fluid1) -> {
             return VoxelShapes.create(0.0D, 0.0D, 0.0D, 1.0D, (double) fluid1.getHeight(iblockaccess, blockposition), 1.0D);
         });
     }
diff --git a/src/main/java/net/minecraft/server/FluidTypeLava.java b/src/main/java/net/minecraft/server/FluidTypeLava.java
index ff677c59..3c07aa65 100644
--- a/src/main/java/net/minecraft/server/FluidTypeLava.java
+++ b/src/main/java/net/minecraft/server/FluidTypeLava.java
@@ -23,7 +23,7 @@ public abstract class FluidTypeLava extends FluidTypeFlowing {
 
     @Override
     public void b(World world, BlockPosition blockposition, Fluid fluid, Random random) {
-        if (world.getGameRules().getBoolean(GameRules.DO_FIRE_TICK)) {
+        if (world.getGameRules().getBoolean("doFireTick")) {
             int i = random.nextInt(3);
 
             if (i > 0) {
@@ -31,7 +31,7 @@ public abstract class FluidTypeLava extends FluidTypeFlowing {
 
                 for (int j = 0; j < i; ++j) {
                     blockposition1 = blockposition1.b(random.nextInt(3) - 1, 1, random.nextInt(3) - 1);
-                    if (!world.n(blockposition1)) {
+                    if (!world.o(blockposition1)) {
                         return;
                     }
 
@@ -57,7 +57,7 @@ public abstract class FluidTypeLava extends FluidTypeFlowing {
                 for (int k = 0; k < 3; ++k) {
                     BlockPosition blockposition2 = blockposition.b(random.nextInt(3) - 1, 0, random.nextInt(3) - 1);
 
-                    if (!world.n(blockposition2)) {
+                    if (!world.o(blockposition2)) {
                         return;
                     }
 
@@ -108,8 +108,8 @@ public abstract class FluidTypeLava extends FluidTypeFlowing {
     }
 
     @Override
-    public IBlockData b(Fluid fluid) {
-        return (IBlockData) Blocks.LAVA.getBlockData().set(BlockFluids.LEVEL, e(fluid));
+    public IBlockData a(Fluid fluid) {
+        return (IBlockData) Blocks.LAVA.getBlockData().set(BlockFluids.LEVEL, d(fluid));
     }
 
     @Override
@@ -195,12 +195,12 @@ public abstract class FluidTypeLava extends FluidTypeFlowing {
         }
 
         @Override
-        public int d(Fluid fluid) {
+        public int c(Fluid fluid) {
             return (Integer) fluid.get(FluidTypeLava.a.LEVEL);
         }
 
         @Override
-        public boolean c(Fluid fluid) {
+        public boolean b(Fluid fluid) {
             return false;
         }
     }
@@ -210,12 +210,12 @@ public abstract class FluidTypeLava extends FluidTypeFlowing {
         public b() {}
 
         @Override
-        public int d(Fluid fluid) {
+        public int c(Fluid fluid) {
             return 8;
         }
 
         @Override
-        public boolean c(Fluid fluid) {
+        public boolean b(Fluid fluid) {
             return true;
         }
     }
diff --git a/src/main/java/net/minecraft/server/FoodMetaData.java b/src/main/java/net/minecraft/server/FoodMetaData.java
index ea404119..d184422f 100644
--- a/src/main/java/net/minecraft/server/FoodMetaData.java
+++ b/src/main/java/net/minecraft/server/FoodMetaData.java
@@ -29,7 +29,7 @@ public class FoodMetaData {
             // CraftBukkit start
             int oldFoodLevel = foodLevel;
 
-            org.bukkit.event.entity.FoodLevelChangeEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callFoodLevelChangeEvent(entityhuman, foodinfo.getNutrition() + oldFoodLevel, itemstack);
+            org.bukkit.event.entity.FoodLevelChangeEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callFoodLevelChangeEvent(entityhuman, foodinfo.getNutrition() + oldFoodLevel);
 
             if (!event.isCancelled()) {
                 this.eat(event.getFoodLevel() - oldFoodLevel, foodinfo.getSaturationModifier());
@@ -62,7 +62,7 @@ public class FoodMetaData {
             }
         }
 
-        boolean flag = entityhuman.world.getGameRules().getBoolean(GameRules.NATURAL_REGENERATION);
+        boolean flag = entityhuman.world.getGameRules().getBoolean("naturalRegeneration");
 
         if (flag && this.saturationLevel > 0.0F && entityhuman.dP() && this.foodLevel >= 20) {
             ++this.foodTickTimer;
diff --git a/src/main/java/net/minecraft/server/FurnaceRecipe.java b/src/main/java/net/minecraft/server/FurnaceRecipe.java
index 0b15f253..61ddfbad 100644
--- a/src/main/java/net/minecraft/server/FurnaceRecipe.java
+++ b/src/main/java/net/minecraft/server/FurnaceRecipe.java
@@ -19,7 +19,7 @@ public class FurnaceRecipe extends RecipeCooking {
 
     @Override
     public RecipeSerializer<?> getRecipeSerializer() {
-        return RecipeSerializer.p;
+        return RecipeSerializer.o;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/GameRules.java b/src/main/java/net/minecraft/server/GameRules.java
index 58b3d0ec..c6a80047 100644
--- a/src/main/java/net/minecraft/server/GameRules.java
+++ b/src/main/java/net/minecraft/server/GameRules.java
@@ -1,318 +1,240 @@
 package net.minecraft.server;
 
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.Maps;
 import com.mojang.brigadier.arguments.ArgumentType;
 import com.mojang.brigadier.arguments.BoolArgumentType;
 import com.mojang.brigadier.arguments.IntegerArgumentType;
+import com.mojang.brigadier.arguments.StringArgumentType;
 import com.mojang.brigadier.builder.RequiredArgumentBuilder;
 import com.mojang.brigadier.context.CommandContext;
-import java.util.Comparator;
 import java.util.Iterator;
-import java.util.Map;
+import java.util.Set;
+import java.util.TreeMap;
 import java.util.Map.Entry;
 import java.util.function.BiConsumer;
-import java.util.function.Function;
+import java.util.function.BiFunction;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 public class GameRules {
 
-    private static final Logger LOGGER = LogManager.getLogger();
-    private static final Map<GameRules.GameRuleKey<?>, GameRules.GameRuleDefinition<?>> z = Maps.newLinkedHashMap(); // Paper
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> DO_FIRE_TICK = a("doFireTick", GameRules.GameRuleBoolean.b(true));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> MOB_GRIEFING = a("mobGriefing", GameRules.GameRuleBoolean.b(true));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> KEEP_INVENTORY = a("keepInventory", GameRules.GameRuleBoolean.b(false));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> DO_MOB_SPAWNING = a("doMobSpawning", GameRules.GameRuleBoolean.b(true));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> DO_MOB_LOOT = a("doMobLoot", GameRules.GameRuleBoolean.b(true));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> DO_TILE_DROPS = a("doTileDrops", GameRules.GameRuleBoolean.b(true));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> DO_ENTITY_DROPS = a("doEntityDrops", GameRules.GameRuleBoolean.b(true));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> COMMAND_BLOCK_OUTPUT = a("commandBlockOutput", GameRules.GameRuleBoolean.b(true));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> NATURAL_REGENERATION = a("naturalRegeneration", GameRules.GameRuleBoolean.b(true));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> DO_DAYLIGHT_CYCLE = a("doDaylightCycle", GameRules.GameRuleBoolean.b(true));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> LOG_ADMIN_COMMANDS = a("logAdminCommands", GameRules.GameRuleBoolean.b(true));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> SHOW_DEATH_MESSAGES = a("showDeathMessages", GameRules.GameRuleBoolean.b(true));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleInt> RANDOM_TICK_SPEED = a("randomTickSpeed", GameRules.GameRuleInt.b(3));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> SEND_COMMAND_FEEDBACK = a("sendCommandFeedback", GameRules.GameRuleBoolean.b(true));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> REDUCED_DEBUG_INFO = a("reducedDebugInfo", GameRules.GameRuleBoolean.b(false, (minecraftserver, gamerules_gameruleboolean) -> {
-        int i = gamerules_gameruleboolean.a() ? 22 : 23;
-        Iterator iterator = minecraftserver.getPlayerList().getPlayers().iterator();
+    // Paper start - Optimize GameRules
+    private static final int RULES_SIZE = 256;
 
-        while (iterator.hasNext()) {
-            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
+    private static <K, V> java.util.LinkedHashMap<K, V> linkedMapOf(final int capacity, final TreeMap<K, V> map) {
+        final java.util.LinkedHashMap<K, V> ret = new java.util.LinkedHashMap<>(capacity);
+        ret.putAll(map);
+        return ret;
+    }
 
-            entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityStatus(entityplayer, (byte) i));
-        }
+    private static final java.util.LinkedHashMap<String, GameRuleDefinition> a = GameRules.linkedMapOf(RULES_SIZE, SystemUtils.a(new TreeMap(), (treemap) -> { // Paper - decompile fix
+        // Paper end
+        treemap.put("doFireTick", new GameRules.GameRuleDefinition("true", GameRules.EnumGameRuleType.BOOLEAN_VALUE));
+        treemap.put("mobGriefing", new GameRules.GameRuleDefinition("true", GameRules.EnumGameRuleType.BOOLEAN_VALUE));
+        treemap.put("keepInventory", new GameRules.GameRuleDefinition("false", GameRules.EnumGameRuleType.BOOLEAN_VALUE));
+        treemap.put("doMobSpawning", new GameRules.GameRuleDefinition("true", GameRules.EnumGameRuleType.BOOLEAN_VALUE));
+        treemap.put("doMobLoot", new GameRules.GameRuleDefinition("true", GameRules.EnumGameRuleType.BOOLEAN_VALUE));
+        treemap.put("doTileDrops", new GameRules.GameRuleDefinition("true", GameRules.EnumGameRuleType.BOOLEAN_VALUE));
+        treemap.put("doEntityDrops", new GameRules.GameRuleDefinition("true", GameRules.EnumGameRuleType.BOOLEAN_VALUE));
+        treemap.put("commandBlockOutput", new GameRules.GameRuleDefinition("true", GameRules.EnumGameRuleType.BOOLEAN_VALUE));
+        treemap.put("naturalRegeneration", new GameRules.GameRuleDefinition("true", GameRules.EnumGameRuleType.BOOLEAN_VALUE));
+        treemap.put("doDaylightCycle", new GameRules.GameRuleDefinition("true", GameRules.EnumGameRuleType.BOOLEAN_VALUE));
+        treemap.put("logAdminCommands", new GameRules.GameRuleDefinition("true", GameRules.EnumGameRuleType.BOOLEAN_VALUE));
+        treemap.put("showDeathMessages", new GameRules.GameRuleDefinition("true", GameRules.EnumGameRuleType.BOOLEAN_VALUE));
+        treemap.put("randomTickSpeed", new GameRules.GameRuleDefinition("3", GameRules.EnumGameRuleType.NUMERICAL_VALUE));
+        treemap.put("sendCommandFeedback", new GameRules.GameRuleDefinition("true", GameRules.EnumGameRuleType.BOOLEAN_VALUE));
+        treemap.put("reducedDebugInfo", new GameRules.GameRuleDefinition("false", GameRules.EnumGameRuleType.BOOLEAN_VALUE, (minecraftserver, gamerules_gamerulevalue) -> {
+            int i = gamerules_gamerulevalue.getBooleanValue() ? 22 : 23;
+            Iterator iterator = minecraftserver.getPlayerList().getPlayers().iterator();
+
+            while (iterator.hasNext()) {
+                EntityPlayer entityplayer = (EntityPlayer) iterator.next();
+
+                entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityStatus(entityplayer, (byte) i));
+            }
 
-    }));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> SPECTATORS_GENERATE_CHUNKS = a("spectatorsGenerateChunks", GameRules.GameRuleBoolean.b(true));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleInt> SPAWN_RADIUS = a("spawnRadius", GameRules.GameRuleInt.b(10));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> DISABLE_ELYTRA_MOVEMENT_CHECK = a("disableElytraMovementCheck", GameRules.GameRuleBoolean.b(false));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleInt> MAX_ENTITY_CRAMMING = a("maxEntityCramming", GameRules.GameRuleInt.b(24));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> DO_WEATHER_CYCLE = a("doWeatherCycle", GameRules.GameRuleBoolean.b(true));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> DO_LIMITED_CRAFTING = a("doLimitedCrafting", GameRules.GameRuleBoolean.b(false));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleInt> MAX_COMMAND_CHAIN_LENGTH = a("maxCommandChainLength", GameRules.GameRuleInt.b(65536));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> ANNOUNCE_ADVANCEMENTS = a("announceAdvancements", GameRules.GameRuleBoolean.b(true));
-    public static final GameRules.GameRuleKey<GameRules.GameRuleBoolean> x = a("disableRaids", GameRules.GameRuleBoolean.b(false));
-    private final Map<GameRules.GameRuleKey<?>, GameRules.GameRuleValue<?>> A;
-
-    private static <T extends GameRules.GameRuleValue<T>> GameRules.GameRuleKey<T> a(String s, GameRules.GameRuleDefinition<T> gamerules_gameruledefinition) {
-        GameRules.GameRuleKey<T> gamerules_gamerulekey = new GameRules.GameRuleKey<>(s);
-        GameRules.GameRuleDefinition<?> gamerules_gameruledefinition1 = (GameRules.GameRuleDefinition) GameRules.z.put(gamerules_gamerulekey, gamerules_gameruledefinition);
-
-        if (gamerules_gameruledefinition1 != null) {
-            throw new IllegalStateException("Duplicate game rule registration for " + s);
-        } else {
-            return gamerules_gamerulekey;
-        }
-    }
+        }));
+        treemap.put("spectatorsGenerateChunks", new GameRules.GameRuleDefinition("true", GameRules.EnumGameRuleType.BOOLEAN_VALUE));
+        treemap.put("spawnRadius", new GameRules.GameRuleDefinition("10", GameRules.EnumGameRuleType.NUMERICAL_VALUE));
+        treemap.put("disableElytraMovementCheck", new GameRules.GameRuleDefinition("false", GameRules.EnumGameRuleType.BOOLEAN_VALUE));
+        treemap.put("maxEntityCramming", new GameRules.GameRuleDefinition("24", GameRules.EnumGameRuleType.NUMERICAL_VALUE));
+        treemap.put("doWeatherCycle", new GameRules.GameRuleDefinition("true", GameRules.EnumGameRuleType.BOOLEAN_VALUE));
+        treemap.put("doLimitedCrafting", new GameRules.GameRuleDefinition("false", GameRules.EnumGameRuleType.BOOLEAN_VALUE));
+        treemap.put("maxCommandChainLength", new GameRules.GameRuleDefinition("65536", GameRules.EnumGameRuleType.NUMERICAL_VALUE));
+        treemap.put("announceAdvancements", new GameRules.GameRuleDefinition("true", GameRules.EnumGameRuleType.BOOLEAN_VALUE));
+    })); // Paper - Optimize GameRules
+    private final java.util.LinkedHashMap<String, GameRuleValue> b = new java.util.LinkedHashMap<>(RULES_SIZE); // Paper - Optimize GameRules
 
     public GameRules() {
-        this.A = (Map) GameRules.z.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entry) -> {
-            return ((GameRules.GameRuleDefinition) entry.getValue()).getValue();
-        }));
-    }
+        Iterator iterator = GameRules.a.entrySet().iterator();
 
-    public <T extends GameRules.GameRuleValue<T>> T get(GameRules.GameRuleKey<T> gamerules_gamerulekey) {
-        return (T) this.A.get(gamerules_gamerulekey); // CraftBukkit - decompile error
-    }
+        while (iterator.hasNext()) {
+            Entry<String, GameRules.GameRuleDefinition> entry = (Entry) iterator.next();
 
-    public NBTTagCompound a() {
-        NBTTagCompound nbttagcompound = new NBTTagCompound();
+            this.b.put(entry.getKey(), ((GameRules.GameRuleDefinition) entry.getValue()).a());
+        }
 
-        this.A.forEach((gamerules_gamerulekey, gamerules_gamerulevalue) -> {
-            nbttagcompound.setString(gamerules_gamerulekey.a, gamerules_gamerulevalue.getValue());
-        });
-        return nbttagcompound;
     }
 
-    public void a(NBTTagCompound nbttagcompound) {
-        this.A.forEach((gamerules_gamerulekey, gamerules_gamerulevalue) -> {
-            gamerules_gamerulevalue.setValue(nbttagcompound.getString(gamerules_gamerulekey.a));
-        });
-    }
+    public void set(String s, String s1, @Nullable MinecraftServer minecraftserver) {
+        GameRules.GameRuleValue gamerules_gamerulevalue = (GameRules.GameRuleValue) this.b.get(s);
 
-    public static void a(GameRules.GameRuleVisitor gamerules_gamerulevisitor) {
-        GameRules.z.forEach((gamerules_gamerulekey, gamerules_gameruledefinition) -> {
-            a(gamerules_gamerulevisitor, gamerules_gamerulekey, gamerules_gameruledefinition);
-        });
-    }
+        if (gamerules_gamerulevalue != null) {
+            gamerules_gamerulevalue.setValue(s1, minecraftserver);
+        }
 
-    private static <T extends GameRules.GameRuleValue<T>> void a(GameRules.GameRuleVisitor gamerules_gamerulevisitor, GameRules.GameRuleKey<?> gamerules_gamerulekey, GameRules.GameRuleDefinition<?> gamerules_gameruledefinition) {
-        gamerules_gamerulevisitor.a((GameRules.GameRuleKey<T>) gamerules_gamerulekey, (GameRules.GameRuleDefinition<T>) gamerules_gameruledefinition); // CraftBukkit - decompile error
     }
 
-    public boolean getBoolean(GameRules.GameRuleKey<GameRules.GameRuleBoolean> gamerules_gamerulekey) {
-        return ((GameRules.GameRuleBoolean) this.get(gamerules_gamerulekey)).a();
-    }
+    public boolean getBoolean(String s) {
+        GameRules.GameRuleValue gamerules_gamerulevalue = (GameRules.GameRuleValue) this.b.get(s);
 
-    public int getInt(GameRules.GameRuleKey<GameRules.GameRuleInt> gamerules_gamerulekey) {
-        return ((GameRules.GameRuleInt) this.get(gamerules_gamerulekey)).a();
+        return gamerules_gamerulevalue != null ? gamerules_gamerulevalue.getBooleanValue() : false;
     }
 
-    public static class GameRuleBoolean extends GameRules.GameRuleValue<GameRules.GameRuleBoolean> {
+    public int c(String s) {
+        GameRules.GameRuleValue gamerules_gamerulevalue = (GameRules.GameRuleValue) this.b.get(s);
 
-        private boolean a;
-
-        private static GameRules.GameRuleDefinition<GameRules.GameRuleBoolean> b(boolean flag, BiConsumer<MinecraftServer, GameRules.GameRuleBoolean> biconsumer) {
-            return new GameRules.GameRuleDefinition<>(BoolArgumentType::bool, (gamerules_gameruledefinition) -> {
-                return new GameRules.GameRuleBoolean(gamerules_gameruledefinition, flag);
-            }, biconsumer);
-        }
-
-        private static GameRules.GameRuleDefinition<GameRules.GameRuleBoolean> b(boolean flag) {
-            return b(flag, (minecraftserver, gamerules_gameruleboolean) -> {
-            });
-        }
-
-        public GameRuleBoolean(GameRules.GameRuleDefinition<GameRules.GameRuleBoolean> gamerules_gameruledefinition, boolean flag) {
-            super(gamerules_gameruledefinition);
-            this.a = flag;
-        }
-
-        @Override
-        protected void a(CommandContext<CommandListenerWrapper> commandcontext, String s) {
-            this.a = BoolArgumentType.getBool(commandcontext, s);
-        }
-
-        public boolean a() {
-            return this.a;
-        }
-
-        public void a(boolean flag, @Nullable MinecraftServer minecraftserver) {
-            this.a = flag;
-            this.onChange(minecraftserver);
-        }
+        return gamerules_gamerulevalue != null ? gamerules_gamerulevalue.getIntValue() : 0;
+    }
 
-        @Override
-        protected String getValue() {
-            return Boolean.toString(this.a);
-        }
+    public NBTTagCompound a() {
+        NBTTagCompound nbttagcompound = new NBTTagCompound();
+        Iterator iterator = this.b.keySet().iterator();
 
-        @Override
-        public void setValue(String s) { // PAIL - private->public
-            this.a = Boolean.parseBoolean(s);
-        }
+        while (iterator.hasNext()) {
+            String s = (String) iterator.next();
+            GameRules.GameRuleValue gamerules_gamerulevalue = (GameRules.GameRuleValue) this.b.get(s);
 
-        @Override
-        public int getIntValue() {
-            return this.a ? 1 : 0;
+            nbttagcompound.setString(s, gamerules_gamerulevalue.getValue());
         }
 
-        @Override
-        protected GameRules.GameRuleBoolean e() {
-            return this;
-        }
+        return nbttagcompound;
     }
 
-    public static class GameRuleInt extends GameRules.GameRuleValue<GameRules.GameRuleInt> {
-
-        private int a;
+    public void a(NBTTagCompound nbttagcompound) {
+        Set<String> set = nbttagcompound.getKeys();
+        Iterator iterator = set.iterator();
 
-        private static GameRules.GameRuleDefinition<GameRules.GameRuleInt> a(int i, BiConsumer<MinecraftServer, GameRules.GameRuleInt> biconsumer) {
-            return new GameRules.GameRuleDefinition<>(IntegerArgumentType::integer, (gamerules_gameruledefinition) -> {
-                return new GameRules.GameRuleInt(gamerules_gameruledefinition, i);
-            }, biconsumer);
-        }
+        while (iterator.hasNext()) {
+            String s = (String) iterator.next();
 
-        private static GameRules.GameRuleDefinition<GameRules.GameRuleInt> b(int i) {
-            return a(i, (minecraftserver, gamerules_gameruleint) -> {
-            });
+            this.set(s, nbttagcompound.getString(s), (MinecraftServer) null);
         }
 
-        public GameRuleInt(GameRules.GameRuleDefinition<GameRules.GameRuleInt> gamerules_gameruledefinition, int i) {
-            super(gamerules_gameruledefinition);
-            this.a = i;
-        }
+    }
 
-        @Override
-        protected void a(CommandContext<CommandListenerWrapper> commandcontext, String s) {
-            this.a = IntegerArgumentType.getInteger(commandcontext, s);
-        }
+    public GameRules.GameRuleValue get(String s) {
+        return (GameRules.GameRuleValue) this.b.get(s);
+    }
 
-        public int a() {
-            return this.a;
-        }
+    public static java.util.LinkedHashMap<String, GameRuleDefinition> getGameRules() { // Paper - Optimize GameRules
+        return GameRules.a;
+    }
 
-        @Override
-        protected String getValue() {
-            return Integer.toString(this.a);
-        }
+    public static enum EnumGameRuleType {
 
-        @Override
-        public void setValue(String s) { // PAIL - private->public
-            this.a = b(s);
-        }
+        ANY_VALUE(StringArgumentType::greedyString, (commandcontext, s) -> {
+            return (String) commandcontext.getArgument(s, String.class);
+        }), BOOLEAN_VALUE(BoolArgumentType::bool, (commandcontext, s) -> {
+            return ((Boolean) commandcontext.getArgument(s, Boolean.class)).toString();
+        }), NUMERICAL_VALUE(IntegerArgumentType::integer, (commandcontext, s) -> {
+            return ((Integer) commandcontext.getArgument(s, Integer.class)).toString();
+        });
 
-        private static int b(String s) {
-            if (!s.isEmpty()) {
-                try {
-                    return Integer.parseInt(s);
-                } catch (NumberFormatException numberformatexception) {
-                    GameRules.LOGGER.warn("Failed to parse integer {}", s);
-                }
-            }
+        private final Supplier<ArgumentType<?>> d;
+        private final BiFunction<CommandContext<CommandListenerWrapper>, String, String> e;
 
-            return 0;
+        private EnumGameRuleType(Supplier supplier, BiFunction<CommandContext<CommandListenerWrapper>, String, String> bifunction) { // Paper - decompile fix
+            this.d = supplier;
+            this.e = bifunction;
         }
 
-        @Override
-        public int getIntValue() {
-            return this.a;
+        public RequiredArgumentBuilder<CommandListenerWrapper, ?> a(String s) {
+            return CommandDispatcher.a(s, (ArgumentType) this.d.get());
         }
 
-        @Override
-        protected GameRules.GameRuleInt e() {
-            return this;
+        public void a(CommandContext<CommandListenerWrapper> commandcontext, String s, GameRules.GameRuleValue gamerules_gamerulevalue) {
+            gamerules_gamerulevalue.setValue((String) this.e.apply(commandcontext, s), ((CommandListenerWrapper) commandcontext.getSource()).getServer());
         }
     }
 
-    public abstract static class GameRuleValue<T extends GameRules.GameRuleValue<T>> {
+    public static class GameRuleValue {
 
-        private final GameRules.GameRuleDefinition<T> a;
+        private String a;
+        private boolean b;
+        private int c;
+        private double d;
+        private final GameRules.EnumGameRuleType e;
+        private final BiConsumer<MinecraftServer, GameRules.GameRuleValue> f;
 
-        public GameRuleValue(GameRules.GameRuleDefinition<T> gamerules_gameruledefinition) {
-            this.a = gamerules_gameruledefinition;
+        public GameRuleValue(String s, GameRules.EnumGameRuleType gamerules_enumgameruletype, BiConsumer<MinecraftServer, GameRules.GameRuleValue> biconsumer) {
+            this.e = gamerules_enumgameruletype;
+            this.f = biconsumer;
+            this.setValue(s, (MinecraftServer) null);
         }
 
-        protected abstract void a(CommandContext<CommandListenerWrapper> commandcontext, String s);
+        public void setValue(String s, @Nullable MinecraftServer minecraftserver) {
+            this.a = s;
+            this.b = Boolean.parseBoolean(s);
+            this.c = this.b ? 1 : 0;
 
-        public void b(CommandContext<CommandListenerWrapper> commandcontext, String s) {
-            this.a(commandcontext, s);
-            this.onChange(((CommandListenerWrapper) commandcontext.getSource()).getServer());
-        }
+            try {
+                this.c = Integer.parseInt(s);
+            } catch (NumberFormatException numberformatexception) {
+                ;
+            }
+
+            try {
+                this.d = Double.parseDouble(s);
+            } catch (NumberFormatException numberformatexception1) {
+                ;
+            }
 
-        public void onChange(@Nullable MinecraftServer minecraftserver) {
             if (minecraftserver != null) {
-                this.a.c.accept(minecraftserver, this.e());
+                this.f.accept(minecraftserver, this);
             }
 
         }
 
-        public abstract void setValue(String s); // PAIL - private->public
-
-        protected abstract String getValue();
-
-        public String toString() {
-            return this.getValue();
+        public String getValue() {
+            return this.a;
         }
 
-        public abstract int getIntValue();
-
-        protected abstract T e();
-    }
-
-    public static class GameRuleDefinition<T extends GameRules.GameRuleValue<T>> {
-
-        private final Supplier<ArgumentType<?>> a;
-        private final Function<GameRules.GameRuleDefinition<T>, T> b;
-        private final BiConsumer<MinecraftServer, T> c;
-
-        private GameRuleDefinition(Supplier<ArgumentType<?>> supplier, Function<GameRules.GameRuleDefinition<T>, T> function, BiConsumer<MinecraftServer, T> biconsumer) {
-            this.a = supplier;
-            this.b = function;
-            this.c = biconsumer;
+        public boolean getBooleanValue() {
+            return this.b;
         }
 
-        public RequiredArgumentBuilder<CommandListenerWrapper, ?> a(String s) {
-            return CommandDispatcher.a(s, (ArgumentType) this.a.get());
+        public int getIntValue() {
+            return this.c;
         }
 
-        public T getValue() {
-            return this.b.apply(this); // CraftBukkit - decompile error
+        public GameRules.EnumGameRuleType getType() {
+            return this.e;
         }
     }
 
-    public static final class GameRuleKey<T extends GameRules.GameRuleValue<T>> {
-
-        private final String a;
+    public static class GameRuleDefinition {
 
-        public GameRuleKey(String s) {
-            this.a = s;
-        }
+        private final GameRules.EnumGameRuleType a;
+        private final String b;
+        private final BiConsumer<MinecraftServer, GameRules.GameRuleValue> c;
 
-        public String toString() {
-            return this.a;
+        public GameRuleDefinition(String s, GameRules.EnumGameRuleType gamerules_enumgameruletype) {
+            this(s, gamerules_enumgameruletype, (minecraftserver, gamerules_gamerulevalue) -> {
+            });
         }
 
-        public boolean equals(Object object) {
-            return this == object ? true : object instanceof GameRules.GameRuleKey && ((GameRules.GameRuleKey) object).a.equals(this.a);
+        public GameRuleDefinition(String s, GameRules.EnumGameRuleType gamerules_enumgameruletype, BiConsumer<MinecraftServer, GameRules.GameRuleValue> biconsumer) {
+            this.a = gamerules_enumgameruletype;
+            this.b = s;
+            this.c = biconsumer;
         }
 
-        public int hashCode() {
-            return this.a.hashCode();
+        public GameRules.GameRuleValue a() {
+            return new GameRules.GameRuleValue(this.b, this.a, this.c);
         }
 
-        public String a() {
+        public GameRules.EnumGameRuleType b() {
             return this.a;
         }
     }
-
-    @FunctionalInterface
-    public interface GameRuleVisitor {
-
-        <T extends GameRules.GameRuleValue<T>> void a(GameRules.GameRuleKey<T> gamerules_gamerulekey, GameRules.GameRuleDefinition<T> gamerules_gameruledefinition);
-    }
 }
diff --git a/src/main/java/net/minecraft/server/GenericAttributes.java b/src/main/java/net/minecraft/server/GenericAttributes.java
index 469e293c..908f11f9 100644
--- a/src/main/java/net/minecraft/server/GenericAttributes.java
+++ b/src/main/java/net/minecraft/server/GenericAttributes.java
@@ -42,8 +42,8 @@ public class GenericAttributes {
         IAttribute iattribute = attributeinstance.getAttribute();
 
         nbttagcompound.setString("Name", iattribute.getName());
-        nbttagcompound.setDouble("Base", attributeinstance.getBaseValue());
-        Collection<AttributeModifier> collection = attributeinstance.getModifiers();
+        nbttagcompound.setDouble("Base", attributeinstance.b());
+        Collection<AttributeModifier> collection = attributeinstance.c();
 
         if (collection != null && !collection.isEmpty()) {
             NBTTagList nbttaglist = new NBTTagList();
@@ -66,10 +66,10 @@ public class GenericAttributes {
     public static NBTTagCompound a(AttributeModifier attributemodifier) {
         NBTTagCompound nbttagcompound = new NBTTagCompound();
 
-        nbttagcompound.setString("Name", attributemodifier.getName());
-        nbttagcompound.setDouble("Amount", attributemodifier.getAmount());
-        nbttagcompound.setInt("Operation", attributemodifier.getOperation().a());
-        nbttagcompound.a("UUID", attributemodifier.getUniqueId());
+        nbttagcompound.setString("Name", attributemodifier.b());
+        nbttagcompound.setDouble("Amount", attributemodifier.d());
+        nbttagcompound.setInt("Operation", attributemodifier.c().a());
+        nbttagcompound.a("UUID", attributemodifier.a());
         return nbttagcompound;
     }
 
@@ -96,13 +96,13 @@ public class GenericAttributes {
                 AttributeModifier attributemodifier = a(nbttaglist.getCompound(i));
 
                 if (attributemodifier != null) {
-                    AttributeModifier attributemodifier1 = attributeinstance.a(attributemodifier.getUniqueId());
+                    AttributeModifier attributemodifier1 = attributeinstance.a(attributemodifier.a());
 
                     if (attributemodifier1 != null) {
-                        attributeinstance.removeModifier(attributemodifier1);
+                        attributeinstance.c(attributemodifier1);
                     }
 
-                    attributeinstance.addModifier(attributemodifier);
+                    attributeinstance.b(attributemodifier);
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
index 9a8e5e12..4b76c2d1 100644
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -138,9 +138,4 @@ public class HandshakeListener implements PacketHandshakingInListener {
 
     @Override
     public void a(IChatBaseComponent ichatbasecomponent) {}
-
-    @Override
-    public NetworkManager a() {
-        return this.b;
-    }
 }
diff --git a/src/main/java/net/minecraft/server/IAsyncTaskHandler.java b/src/main/java/net/minecraft/server/IAsyncTaskHandler.java
index d521d25c..c0d51124 100644
--- a/src/main/java/net/minecraft/server/IAsyncTaskHandler.java
+++ b/src/main/java/net/minecraft/server/IAsyncTaskHandler.java
@@ -34,12 +34,8 @@ public abstract class IAsyncTaskHandler<R extends Runnable> implements Mailbox<R
         return !this.isMainThread();
     }
 
-    public int be() {
-        return this.d.size();
-    }
-
     @Override
-    public String bf() {
+    public String bd() {
         return this.b;
     }
 
@@ -117,7 +113,7 @@ public abstract class IAsyncTaskHandler<R extends Runnable> implements Mailbox<R
         try {
             while (!booleansupplier.getAsBoolean()) {
                 if (!this.executeNext()) {
-                    this.bi();
+                    LockSupport.parkNanos("waiting for tasks", 1000L);
                 }
             }
         } finally {
@@ -126,16 +122,11 @@ public abstract class IAsyncTaskHandler<R extends Runnable> implements Mailbox<R
 
     }
 
-    protected void bi() {
-        Thread.yield();
-        LockSupport.parkNanos("waiting for tasks", 100000L);
-    }
-
     protected void executeTask(R r0) {
         try {
             r0.run();
         } catch (Exception exception) {
-            IAsyncTaskHandler.LOGGER.fatal("Error executing task on {}", this.bf(), exception);
+            IAsyncTaskHandler.LOGGER.fatal("Error executing task on {}", this.bd(), exception);
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/IBlockData.java b/src/main/java/net/minecraft/server/IBlockData.java
index 21f734a7..709cc3d7 100644
--- a/src/main/java/net/minecraft/server/IBlockData.java
+++ b/src/main/java/net/minecraft/server/IBlockData.java
@@ -65,12 +65,8 @@ public class IBlockData extends BlockDataAbstract<Block, IBlockData> implements
         return this.c != null ? this.c.e : this.getBlock().k(this, iblockaccess, blockposition);
     }
 
-    public VoxelShape a(IBlockAccess iblockaccess, BlockPosition blockposition, EnumDirection enumdirection) {
-        return this.c != null && this.c.f != null ? this.c.f[enumdirection.ordinal()] : VoxelShapes.a(this.j(iblockaccess, blockposition), enumdirection);
-    }
-
     public boolean f() {
-        return this.c == null || this.c.h;
+        return this.c == null || this.c.g;
     }
 
     public boolean g() {
@@ -154,10 +150,9 @@ public class IBlockData extends BlockDataAbstract<Block, IBlockData> implements
     }
 
     public VoxelShape getCollisionShape(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return this.c != null ? this.c.g : this.b(iblockaccess, blockposition, VoxelShapeCollision.a());
+        return this.b(iblockaccess, blockposition, VoxelShapeCollision.a());
     }
 
-    public final VoxelShape getCollisionShape(IBlockAccess iblockaccess, BlockPosition blockposition, VoxelShapeCollision voxelshapecollision) { return this.b(iblockaccess, blockposition, voxelshapecollision); } // Paper - OBFHELPER
     public VoxelShape b(IBlockAccess iblockaccess, BlockPosition blockposition, VoxelShapeCollision voxelshapecollision) {
         return this.getBlock().b(this, iblockaccess, blockposition, voxelshapecollision);
     }
@@ -280,14 +275,6 @@ public class IBlockData extends BlockDataAbstract<Block, IBlockData> implements
         this.getBlock().a(world, iblockdata, movingobjectpositionblock, entity);
     }
 
-    public boolean d(IBlockAccess iblockaccess, BlockPosition blockposition, EnumDirection enumdirection) {
-        return this.c != null ? this.c.i[enumdirection.ordinal()] : Block.d(this, iblockaccess, blockposition, enumdirection);
-    }
-
-    public boolean o(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return this.c != null ? this.c.j : Block.a(this.getCollisionShape(iblockaccess, blockposition));
-    }
-
     public static <T> Dynamic<T> a(DynamicOps<T> dynamicops, IBlockData iblockdata) {
         ImmutableMap<IBlockState<?>, Comparable<?>> immutablemap = iblockdata.getStateMap();
         T object; // Paper - decompile fix
@@ -340,10 +327,7 @@ public class IBlockData extends BlockDataAbstract<Block, IBlockData> implements
         private final boolean d;
         private final int e;
         private final VoxelShape[] f;
-        private final VoxelShape g;
-        private final boolean h;
-        private final boolean[] i;
-        private final boolean j;
+        private final boolean g;
 
         private a(IBlockData iblockdata) {
             Block block = iblockdata.getBlock();
@@ -352,16 +336,15 @@ public class IBlockData extends BlockDataAbstract<Block, IBlockData> implements
             this.c = block.j(iblockdata, BlockAccessAir.INSTANCE, BlockPosition.ZERO);
             this.d = block.b(iblockdata, (IBlockAccess) BlockAccessAir.INSTANCE, BlockPosition.ZERO);
             this.e = block.k(iblockdata, BlockAccessAir.INSTANCE, BlockPosition.ZERO);
-            int i;
+            VoxelShape voxelshape;
 
             if (!iblockdata.o()) {
                 this.f = null;
             } else {
                 this.f = new VoxelShape[a.length]; // Paper - decompile fix
-                VoxelShape voxelshape = block.h(iblockdata, BlockAccessAir.INSTANCE, BlockPosition.ZERO);
+                voxelshape = block.h(iblockdata, BlockAccessAir.INSTANCE, BlockPosition.ZERO);
                 EnumDirection[] aenumdirection = a; // Paper - decompile fix
-
-                i = aenumdirection.length;
+                int i = aenumdirection.length;
 
                 for (int j = 0; j < i; ++j) {
                     EnumDirection enumdirection = aenumdirection[j];
@@ -370,21 +353,11 @@ public class IBlockData extends BlockDataAbstract<Block, IBlockData> implements
                 }
             }
 
-            this.g = block.b(iblockdata, BlockAccessAir.INSTANCE, BlockPosition.ZERO, VoxelShapeCollision.a());
-            this.h = Arrays.stream(EnumDirection.EnumAxis.values()).anyMatch((enumdirection_enumaxis) -> {
-                return this.g.b(enumdirection_enumaxis) < 0.0D || this.g.c(enumdirection_enumaxis) > 1.0D;
+            voxelshape = block.b(iblockdata, BlockAccessAir.INSTANCE, BlockPosition.ZERO, VoxelShapeCollision.a());
+            final VoxelShape final_voxelshape = voxelshape; // Paper - decompile fix
+            this.g = Arrays.stream(EnumDirection.EnumAxis.values()).anyMatch((enumdirection_enumaxis) -> {
+                return final_voxelshape.b(enumdirection_enumaxis) < 0.0D || final_voxelshape.c(enumdirection_enumaxis) > 1.0D; // Paper - decompile fix
             });
-            this.i = new boolean[6];
-            EnumDirection[] aenumdirection1 = a; // Paper - decompile fix
-            int k = aenumdirection1.length;
-
-            for (i = 0; i < k; ++i) {
-                EnumDirection enumdirection1 = aenumdirection1[i];
-
-                this.i[enumdirection1.ordinal()] = Block.d(iblockdata, BlockAccessAir.INSTANCE, BlockPosition.ZERO, enumdirection1);
-            }
-
-            this.j = Block.a(iblockdata.getCollisionShape(BlockAccessAir.INSTANCE, BlockPosition.ZERO));
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/IChatBaseComponent.java b/src/main/java/net/minecraft/server/IChatBaseComponent.java
index 9ccf7f8d..1d0de5d9 100644
--- a/src/main/java/net/minecraft/server/IChatBaseComponent.java
+++ b/src/main/java/net/minecraft/server/IChatBaseComponent.java
@@ -98,7 +98,7 @@ public interface IChatBaseComponent extends Message, Iterable<IChatBaseComponent
         return stringbuilder.toString();
     }
 
-    List<IChatBaseComponent> getSiblings();
+    List<IChatBaseComponent> a();
 
     Stream<IChatBaseComponent> c();
 
@@ -116,7 +116,7 @@ public interface IChatBaseComponent extends Message, Iterable<IChatBaseComponent
         IChatBaseComponent ichatbasecomponent = this.g();
 
         ichatbasecomponent.setChatModifier(this.getChatModifier().clone());
-        Iterator iterator = this.getSiblings().iterator();
+        Iterator iterator = this.a().iterator();
 
         while (iterator.hasNext()) {
             IChatBaseComponent ichatbasecomponent1 = (IChatBaseComponent) iterator.next();
@@ -246,14 +246,14 @@ public interface IChatBaseComponent extends Message, Iterable<IChatBaseComponent
                 Object object;
 
                 if (jsonobject.has("text")) {
-                    object = new ChatComponentText(ChatDeserializer.h(jsonobject, "text"));
+                    object = new ChatComponentText(jsonobject.get("text").getAsString());
                 } else {
                     String s;
 
                     if (jsonobject.has("translate")) {
-                        s = ChatDeserializer.h(jsonobject, "translate");
+                        s = jsonobject.get("translate").getAsString();
                         if (jsonobject.has("with")) {
-                            JsonArray jsonarray1 = ChatDeserializer.u(jsonobject, "with");
+                            JsonArray jsonarray1 = jsonobject.getAsJsonArray("with");
                             Object[] aobject = new Object[jsonarray1.size()];
 
                             for (int i = 0; i < aobject.length; ++i) {
@@ -261,7 +261,7 @@ public interface IChatBaseComponent extends Message, Iterable<IChatBaseComponent
                                 if (aobject[i] instanceof ChatComponentText) {
                                     ChatComponentText chatcomponenttext = (ChatComponentText) aobject[i];
 
-                                    if (chatcomponenttext.getChatModifier().g() && chatcomponenttext.getSiblings().isEmpty()) {
+                                    if (chatcomponenttext.getChatModifier().g() && chatcomponenttext.a().isEmpty()) {
                                         aobject[i] = chatcomponenttext.i();
                                     }
                                 }
@@ -272,7 +272,7 @@ public interface IChatBaseComponent extends Message, Iterable<IChatBaseComponent
                             object = new ChatMessage(s, new Object[0]);
                         }
                     } else if (jsonobject.has("score")) {
-                        JsonObject jsonobject1 = ChatDeserializer.t(jsonobject, "score");
+                        JsonObject jsonobject1 = jsonobject.getAsJsonObject("score");
 
                         if (!jsonobject1.has("name") || !jsonobject1.has("objective")) {
                             throw new JsonParseException("A score component needs a least a name and an objective");
@@ -307,7 +307,7 @@ public interface IChatBaseComponent extends Message, Iterable<IChatBaseComponent
                 }
 
                 if (jsonobject.has("extra")) {
-                    JsonArray jsonarray2 = ChatDeserializer.u(jsonobject, "extra");
+                    JsonArray jsonarray2 = jsonobject.getAsJsonArray("extra");
 
                     if (jsonarray2.size() <= 0) {
                         throw new JsonParseException("Unexpected empty array of components");
@@ -346,9 +346,9 @@ public interface IChatBaseComponent extends Message, Iterable<IChatBaseComponent
                 this.a(ichatbasecomponent.getChatModifier(), jsonobject, jsonserializationcontext);
             }
 
-            if (!ichatbasecomponent.getSiblings().isEmpty()) {
+            if (!ichatbasecomponent.a().isEmpty()) {
                 JsonArray jsonarray = new JsonArray();
-                Iterator iterator = ichatbasecomponent.getSiblings().iterator();
+                Iterator iterator = ichatbasecomponent.a().iterator();
 
                 while (iterator.hasNext()) {
                     IChatBaseComponent ichatbasecomponent1 = (IChatBaseComponent) iterator.next();
@@ -364,10 +364,10 @@ public interface IChatBaseComponent extends Message, Iterable<IChatBaseComponent
             } else if (ichatbasecomponent instanceof ChatMessage) {
                 ChatMessage chatmessage = (ChatMessage) ichatbasecomponent;
 
-                jsonobject.addProperty("translate", chatmessage.getKey());
-                if (chatmessage.getArgs() != null && chatmessage.getArgs().length > 0) {
+                jsonobject.addProperty("translate", chatmessage.k());
+                if (chatmessage.l() != null && chatmessage.l().length > 0) {
                     JsonArray jsonarray1 = new JsonArray();
-                    Object[] aobject = chatmessage.getArgs();
+                    Object[] aobject = chatmessage.l();
                     int i = aobject.length;
 
                     for (int j = 0; j < i; ++j) {
diff --git a/src/main/java/net/minecraft/server/IDispenseBehavior.java b/src/main/java/net/minecraft/server/IDispenseBehavior.java
index fe3d9d5f..60442e4b 100644
--- a/src/main/java/net/minecraft/server/IDispenseBehavior.java
+++ b/src/main/java/net/minecraft/server/IDispenseBehavior.java
@@ -133,7 +133,7 @@ public interface IDispenseBehavior {
         DispenseBehaviorItem dispensebehavioritem = new DispenseBehaviorItem() {
             @Override
             public ItemStack a(ISourceBlock isourceblock, ItemStack itemstack) {
-                EnumDirection enumdirection = (EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING);
+                EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
                 EntityTypes<?> entitytypes = ((ItemMonsterEgg) itemstack.getItem()).b(itemstack.getTag());
 
                 // CraftBukkit start
@@ -163,14 +163,7 @@ public interface IDispenseBehavior {
                     }
                 }
 
-                try { // Paper
                 entitytypes.spawnCreature(isourceblock.getWorld(), itemstack, (EntityHuman) null, isourceblock.getBlockPosition().shift(enumdirection), EnumMobSpawn.DISPENSER, enumdirection != EnumDirection.UP, false);
-                    // Paper start
-                } catch (Exception ex){
-                    MinecraftServer.LOGGER.warn("An exception occurred dispensing entity at {}[{}]", world.getWorld().getName(), isourceblock.getBlockPosition(), ex);
-                }
-                // Paper end
-
                 // itemstack.subtract(1); // Handled during event processing
                 // CraftBukkit end
                 return itemstack;
@@ -187,7 +180,7 @@ public interface IDispenseBehavior {
         BlockDispenser.a((IMaterial) Items.FIREWORK_ROCKET, (IDispenseBehavior) (new DispenseBehaviorItem() {
             @Override
             public ItemStack a(ISourceBlock isourceblock, ItemStack itemstack) {
-                EnumDirection enumdirection = (EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING);
+                EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
                 double d0 = isourceblock.getX() + (double) enumdirection.getAdjacentX();
                 double d1 = (double) ((float) isourceblock.getBlockPosition().getY() + 0.2F);
                 double d2 = isourceblock.getZ() + (double) enumdirection.getAdjacentZ();
@@ -233,7 +226,7 @@ public interface IDispenseBehavior {
         BlockDispenser.a((IMaterial) Items.FIRE_CHARGE, (IDispenseBehavior) (new DispenseBehaviorItem() {
             @Override
             public ItemStack a(ISourceBlock isourceblock, ItemStack itemstack) {
-                EnumDirection enumdirection = (EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING);
+                EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
                 IPosition iposition = BlockDispenser.a(isourceblock);
                 double d0 = iposition.getX() + (double) ((float) enumdirection.getAdjacentX() * 0.3F);
                 double d1 = iposition.getY() + (double) ((float) enumdirection.getAdjacentY() * 0.3F);
@@ -297,7 +290,7 @@ public interface IDispenseBehavior {
             @Override
             public ItemStack a(ISourceBlock isourceblock, ItemStack itemstack) {
                 ItemBucket itembucket = (ItemBucket) itemstack.getItem();
-                BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING));
+                BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
                 World world = isourceblock.getWorld();
 
                 // CraftBukkit start
@@ -364,7 +357,7 @@ public interface IDispenseBehavior {
             @Override
             public ItemStack a(ISourceBlock isourceblock, ItemStack itemstack) {
                 World world = isourceblock.getWorld();
-                BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING));
+                BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
                 IBlockData iblockdata = world.getType(blockposition);
                 Block block = iblockdata.getBlock();
 
@@ -448,7 +441,7 @@ public interface IDispenseBehavior {
                 // CraftBukkit end
 
                 this.dispensed = true;
-                BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING));
+                BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
                 IBlockData iblockdata = world.getType(blockposition);
 
                 if (ItemFlintAndSteel.a(iblockdata, (GeneratorAccess) world, blockposition)) {
@@ -478,7 +471,7 @@ public interface IDispenseBehavior {
             protected ItemStack a(ISourceBlock isourceblock, ItemStack itemstack) {
                 this.dispensed = true;
                 World world = isourceblock.getWorld();
-                BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING));
+                BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
                 // CraftBukkit start
                 org.bukkit.block.Block block = world.getWorld().getBlockAt(isourceblock.getBlockPosition().getX(), isourceblock.getBlockPosition().getY(), isourceblock.getBlockPosition().getZ());
                 CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
@@ -538,7 +531,7 @@ public interface IDispenseBehavior {
             @Override
             protected ItemStack a(ISourceBlock isourceblock, ItemStack itemstack) {
                 World world = isourceblock.getWorld();
-                BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING));
+                BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
                 // EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, (EntityLiving) null);
 
                 // CraftBukkit start
@@ -571,7 +564,7 @@ public interface IDispenseBehavior {
                 // CraftBukkit end
 
                 world.addEntity(entitytntprimed);
-                world.playSound((EntityHuman) null, entitytntprimed.locX, entitytntprimed.locY, entitytntprimed.locZ, SoundEffects.ENTITY_TNT_PRIMED, SoundCategory.BLOCKS, 1.0F, 1.0F);
+                world.a((EntityHuman) null, entitytntprimed.locX, entitytntprimed.locY, entitytntprimed.locZ, SoundEffects.ENTITY_TNT_PRIMED, SoundCategory.BLOCKS, 1.0F, 1.0F);
                 // itemstack.subtract(1); // CraftBukkit - handled above
                 return itemstack;
             }
@@ -593,7 +586,7 @@ public interface IDispenseBehavior {
             @Override
             protected ItemStack a(ISourceBlock isourceblock, ItemStack itemstack) {
                 World world = isourceblock.getWorld();
-                EnumDirection enumdirection = (EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING);
+                EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
                 BlockPosition blockposition = isourceblock.getBlockPosition().shift(enumdirection);
 
                 // CraftBukkit start
@@ -641,7 +634,7 @@ public interface IDispenseBehavior {
             @Override
             protected ItemStack a(ISourceBlock isourceblock, ItemStack itemstack) {
                 World world = isourceblock.getWorld();
-                BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING));
+                BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
                 BlockPumpkinCarved blockpumpkincarved = (BlockPumpkinCarved) Blocks.CARVED_PUMPKIN;
 
                 // CraftBukkit start
@@ -726,7 +719,7 @@ public interface IDispenseBehavior {
 
                 if (!world.e()) {
                     this.dispensed = false;
-                    BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING));
+                    BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
                     List<EntitySheep> list = world.a(EntitySheep.class, new AxisAlignedBB(blockposition));
                     Iterator iterator1 = list.iterator();
 
diff --git a/src/main/java/net/minecraft/server/IEntityAccess.java b/src/main/java/net/minecraft/server/IEntityAccess.java
index dca18afd..e5a013ff 100644
--- a/src/main/java/net/minecraft/server/IEntityAccess.java
+++ b/src/main/java/net/minecraft/server/IEntityAccess.java
@@ -16,19 +16,24 @@ public interface IEntityAccess {
 
     <T extends Entity> List<T> a(Class<? extends T> oclass, AxisAlignedBB axisalignedbb, @Nullable Predicate<? super T> predicate);
 
-    default <T extends Entity> List<T> b(Class<? extends T> oclass, AxisAlignedBB axisalignedbb, @Nullable Predicate<? super T> predicate) {
-        return this.a(oclass, axisalignedbb, predicate);
-    }
-
     List<? extends EntityHuman> getPlayers();
 
     default List<Entity> getEntities(@Nullable Entity entity, AxisAlignedBB axisalignedbb) {
         return this.getEntities(entity, axisalignedbb, IEntitySelector.f);
     }
 
+    // Paper start
     default boolean a(@Nullable Entity entity, VoxelShape voxelshape) {
+        return this.checkEntityCollision(entity, voxelshape, false);
+    }
+    default boolean checkEntityCollision(Entity entity, VoxelShape voxelshape, boolean checkCanSee) {
         return voxelshape.isEmpty() ? true : this.getEntities(entity, voxelshape.getBoundingBox()).stream().filter((entity1) -> {
+            if (entity instanceof EntityPlayer && entity1 instanceof EntityPlayer
+                && !((EntityPlayer)entity).getBukkitEntity().canSee(((EntityPlayer)entity1).getBukkitEntity())) {
+                return false;
+            }
             return !entity1.dead && entity1.i && (entity == null || !entity1.x(entity));
+            // Paper end
         }).noneMatch((entity1) -> {
             return VoxelShapes.c(voxelshape, VoxelShapes.a(entity1.getBoundingBox()), OperatorBoolean.AND);
         });
@@ -38,24 +43,19 @@ public interface IEntityAccess {
         return this.a(oclass, axisalignedbb, IEntitySelector.f);
     }
 
-    default <T extends Entity> List<T> b(Class<? extends T> oclass, AxisAlignedBB axisalignedbb) {
-        return this.b(oclass, axisalignedbb, IEntitySelector.f);
-    }
-
-    default Stream<VoxelShape> a(@Nullable Entity entity, AxisAlignedBB axisalignedbb, Set<Entity> set) {
-        if (axisalignedbb.a() < 1.0E-7D) {
+    default Stream<VoxelShape> a(@Nullable Entity entity, VoxelShape voxelshape, Set<Entity> set) {
+        if (voxelshape.isEmpty()) {
             return Stream.empty();
         } else {
-            AxisAlignedBB axisalignedbb1 = axisalignedbb.g(1.0E-7D);
-            Stream<AxisAlignedBB> stream = this.getEntities(entity, axisalignedbb1).stream().filter((entity1) -> { // Paper - decompile fix
-                return !set.contains(entity1);
-            }).filter((entity1) -> {
-                return entity == null || !entity.x(entity1);
-            }).flatMap((entity1) -> {
-                return Stream.of(entity1.aq(), entity == null ? null : entity.j(entity1));
-            }).filter(Objects::nonNull);
+            AxisAlignedBB axisalignedbb = voxelshape.getBoundingBox();
 
-            return stream.filter(axisalignedbb1::c).map(VoxelShapes::a);
+            return this.getEntities(entity, axisalignedbb.g(0.25D)).stream().filter((entity1) -> {
+                return !set.contains(entity1) && (entity == null || !entity.x(entity1));
+            }).flatMap((entity1) -> {
+                return Stream.of(entity1.ap(), entity == null ? null : entity.j(entity1)).filter(Objects::nonNull).filter((axisalignedbb1) -> {
+                    return axisalignedbb1.c(axisalignedbb);
+                }).map(VoxelShapes::a);
+            });
         }
     }
 
@@ -159,11 +159,6 @@ public interface IEntityAccess {
         return this.a(this.a(oclass, axisalignedbb, null), pathfindertargetcondition, entityliving, d0, d1, d2); // Paper - decompile fix
     }
 
-    @Nullable
-    default <T extends EntityLiving> T b(Class<? extends T> oclass, PathfinderTargetCondition pathfindertargetcondition, @Nullable EntityLiving entityliving, double d0, double d1, double d2, AxisAlignedBB axisalignedbb) {
-        return this.a(this.b(oclass, axisalignedbb, null), pathfindertargetcondition, entityliving, d0, d1, d2); // Paper - decompile fix
-    }
-
     @Nullable
     default <T extends EntityLiving> T a(List<? extends T> list, PathfinderTargetCondition pathfindertargetcondition, @Nullable EntityLiving entityliving, double d0, double d1, double d2) {
         double d3 = -1.0D;
diff --git a/src/main/java/net/minecraft/server/IMerchant.java b/src/main/java/net/minecraft/server/IMerchant.java
index cf164fbf..236e17e8 100644
--- a/src/main/java/net/minecraft/server/IMerchant.java
+++ b/src/main/java/net/minecraft/server/IMerchant.java
@@ -20,16 +20,12 @@ public interface IMerchant {
 
     int getExperience();
 
-    void s(int i);
+    void r(int i);
 
     boolean ea();
 
     SoundEffect eb();
 
-    default boolean ei() {
-        return false;
-    }
-
     default void openTrade(EntityHuman entityhuman, IChatBaseComponent ichatbasecomponent, int i) {
         OptionalInt optionalint = entityhuman.openContainer(new TileInventory((j, playerinventory, entityhuman1) -> {
             return new ContainerMerchant(j, playerinventory, this);
@@ -39,7 +35,7 @@ public interface IMerchant {
             MerchantRecipeList merchantrecipelist = this.getOffers();
 
             if (!merchantrecipelist.isEmpty()) {
-                entityhuman.openTrade(optionalint.getAsInt(), merchantrecipelist, i, this.getExperience(), this.ea(), this.ei());
+                entityhuman.openTrade(optionalint.getAsInt(), merchantrecipelist, i, this.getExperience(), this.ea());
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/IWorldReader.java b/src/main/java/net/minecraft/server/IWorldReader.java
index a25736e2..ed3f793f 100644
--- a/src/main/java/net/minecraft/server/IWorldReader.java
+++ b/src/main/java/net/minecraft/server/IWorldReader.java
@@ -15,7 +15,7 @@ public interface IWorldReader extends IIBlockAccess {
         return this.getType(blockposition).isAir();
     }
 
-    default boolean u(BlockPosition blockposition) {
+    default boolean v(BlockPosition blockposition) {
         if (blockposition.getY() >= this.getSeaLevel()) {
             return this.f(blockposition);
         } else {
@@ -50,7 +50,7 @@ public interface IWorldReader extends IIBlockAccess {
 
     int a(HeightMap.Type heightmap_type, int i, int j);
 
-    default float v(BlockPosition blockposition) {
+    default float w(BlockPosition blockposition) {
         return this.getWorldProvider().i()[this.getLightLevel(blockposition)];
     }
 
@@ -68,7 +68,7 @@ public interface IWorldReader extends IIBlockAccess {
 
     int getSeaLevel();
 
-    default IChunkAccess w(BlockPosition blockposition) {
+    default IChunkAccess x(BlockPosition blockposition) {
         return this.getChunkAt(blockposition.getX() >> 4, blockposition.getZ() >> 4);
     }
 
@@ -84,7 +84,12 @@ public interface IWorldReader extends IIBlockAccess {
         return ChunkStatus.EMPTY;
     }
 
+    // Paper start
     default boolean a(IBlockData iblockdata, BlockPosition blockposition, VoxelShapeCollision voxelshapecollision) {
+        return this.checkEntityCollision(iblockdata, blockposition, voxelshapecollision, false);
+    }
+    default boolean checkEntityCollision(IBlockData iblockdata, BlockPosition blockposition, VoxelShapeCollision voxelshapecollision, boolean checkCanSee) {
+        // Paper end
         VoxelShape voxelshape = iblockdata.b((IBlockAccess) this, blockposition, voxelshapecollision);
 
         return voxelshape.isEmpty() || this.a((Entity) null, voxelshape.a((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ()));
@@ -95,91 +100,99 @@ public interface IWorldReader extends IIBlockAccess {
     }
 
     default boolean c(AxisAlignedBB axisalignedbb) {
-        return this.b((Entity) null, axisalignedbb, Collections.emptySet());
+        return this.a((Entity) null, axisalignedbb, Collections.emptySet());
     }
 
     default boolean getCubes(Entity entity) {
-        return this.b(entity, entity.getBoundingBox(), Collections.emptySet());
+        return this.a(entity, entity.getBoundingBox(), Collections.emptySet());
     }
 
     default boolean getCubes(Entity entity, AxisAlignedBB axisalignedbb) {
-        return this.b(entity, axisalignedbb, Collections.emptySet());
+        return this.a(entity, axisalignedbb, Collections.emptySet());
     }
 
-    default boolean b(@Nullable Entity entity, AxisAlignedBB axisalignedbb, Set<Entity> set) {
-        return this.c(entity, axisalignedbb, set).allMatch(VoxelShape::isEmpty);
+    default boolean a(@Nullable Entity entity, AxisAlignedBB axisalignedbb, Set<Entity> set) {
+        return this.b(entity, axisalignedbb, set).allMatch(VoxelShape::isEmpty);
     }
 
-    default Stream<VoxelShape> a(@Nullable Entity entity, AxisAlignedBB axisalignedbb, Set<Entity> set) {
+    default Stream<VoxelShape> a(@Nullable Entity entity, VoxelShape voxelshape, Set<Entity> set) {
         return Stream.empty();
     }
 
-    default Stream<VoxelShape> c(@Nullable Entity entity, AxisAlignedBB axisalignedbb, Set<Entity> set) {
-        return Streams.concat(new Stream[]{this.b(entity, axisalignedbb), this.a(entity, axisalignedbb, set)});
-    }
-
-    default Stream<VoxelShape> b(@Nullable final Entity entity, AxisAlignedBB axisalignedbb) {
-        int i = MathHelper.floor(axisalignedbb.minX - 1.0E-7D) - 1;
-        int j = MathHelper.floor(axisalignedbb.maxX + 1.0E-7D) + 1;
-        int k = MathHelper.floor(axisalignedbb.minY - 1.0E-7D) - 1;
-        int l = MathHelper.floor(axisalignedbb.maxY + 1.0E-7D) + 1;
-        int i1 = MathHelper.floor(axisalignedbb.minZ - 1.0E-7D) - 1;
-        int j1 = MathHelper.floor(axisalignedbb.maxZ + 1.0E-7D) + 1;
+    default Stream<VoxelShape> b(@Nullable final Entity entity, AxisAlignedBB axisalignedbb, Set<Entity> set) {
+        final VoxelShape voxelshape = VoxelShapes.a(axisalignedbb);
+        final int i = MathHelper.floor(voxelshape.b(EnumDirection.EnumAxis.X) - 1.0E-7D) - 1;
+        final int j = MathHelper.floor(voxelshape.c(EnumDirection.EnumAxis.X) + 1.0E-7D) + 1;
+        final int k = MathHelper.floor(voxelshape.b(EnumDirection.EnumAxis.Y) - 1.0E-7D) - 1;
+        final int l = MathHelper.floor(voxelshape.c(EnumDirection.EnumAxis.Y) + 1.0E-7D) + 1;
+        final int i1 = MathHelper.floor(voxelshape.b(EnumDirection.EnumAxis.Z) - 1.0E-7D) - 1;
+        final int j1 = MathHelper.floor(voxelshape.c(EnumDirection.EnumAxis.Z) + 1.0E-7D) + 1;
         final VoxelShapeCollision voxelshapecollision = entity == null ? VoxelShapeCollision.a() : VoxelShapeCollision.a(entity);
         final CursorPosition cursorposition = new CursorPosition(i, k, i1, j, l, j1);
         final BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
-        final VoxelShape voxelshape = VoxelShapes.a(axisalignedbb);
 
-        return StreamSupport.stream(new AbstractSpliterator<VoxelShape>(Long.MAX_VALUE, 1280) {
-            boolean a = entity == null;
+        return Streams.concat(new Stream[]{StreamSupport.stream(new AbstractSpliterator<VoxelShape>(Long.MAX_VALUE, 0) {
+                    boolean a = entity == null;
 
-            public boolean tryAdvance(Consumer<? super VoxelShape> consumer) {
-                if (!this.a) {
-                    this.a = true;
-                    VoxelShape voxelshape1 = IWorldReader.this.getWorldBorder().a();
-                    boolean flag = VoxelShapes.c(voxelshape1, VoxelShapes.a(entity.getBoundingBox().shrink(1.0E-7D)), OperatorBoolean.AND);
-                    boolean flag1 = VoxelShapes.c(voxelshape1, VoxelShapes.a(entity.getBoundingBox().g(1.0E-7D)), OperatorBoolean.AND);
+                    public boolean tryAdvance(Consumer<? super VoxelShape> consumer) {
+                        if (!this.a) {
+                            this.a = true;
+                            VoxelShape voxelshape1 = IWorldReader.this.getWorldBorder().a();
+                            boolean flag = VoxelShapes.c(voxelshape1, VoxelShapes.a(entity.getBoundingBox().shrink(1.0E-7D)), OperatorBoolean.AND);
+                            boolean flag1 = VoxelShapes.c(voxelshape1, VoxelShapes.a(entity.getBoundingBox().g(1.0E-7D)), OperatorBoolean.AND);
 
-                    if (!flag && flag1) {
-                        consumer.accept(voxelshape1);
-                        return true;
-                    }
-                }
+                            if (!flag && flag1) {
+                                consumer.accept(voxelshape1);
+                                return true;
+                            }
+                        }
 
-                while (cursorposition.a()) {
-                    int k1 = cursorposition.b();
-                    int l1 = cursorposition.c();
-                    int i2 = cursorposition.d();
-                    int j2 = cursorposition.e();
+                        while (cursorposition.a()) {
+                            int k1 = cursorposition.b();
+                            int l1 = cursorposition.c();
+                            int i2 = cursorposition.d();
+                            int j2 = 0;
 
-                    if (j2 != 3) {
-                        int k2 = k1 >> 4;
-                        int l2 = i2 >> 4;
-                        IChunkAccess ichunkaccess = IWorldReader.this.getChunkAt(k2, l2, IWorldReader.this.O(), false);
+                            if (k1 == i || k1 == j) {
+                                ++j2;
+                            }
 
-                        if (ichunkaccess != null) {
-                            blockposition_mutableblockposition.d(k1, l1, i2);
-                            IBlockData iblockdata = ichunkaccess.getType(blockposition_mutableblockposition);
+                            if (l1 == k || l1 == l) {
+                                ++j2;
+                            }
 
-                            if ((j2 != 1 || iblockdata.f()) && (j2 != 2 || iblockdata.getBlock() == Blocks.MOVING_PISTON)) {
-                                VoxelShape voxelshape2 = iblockdata.b((IBlockAccess) IWorldReader.this, blockposition_mutableblockposition, voxelshapecollision);
-                                VoxelShape voxelshape3 = voxelshape2.a((double) k1, (double) l1, (double) i2);
+                            if (i2 == i1 || i2 == j1) {
+                                ++j2;
+                            }
+
+                            if (j2 < 3) {
+                                int k2 = k1 >> 4;
+                                int l2 = i2 >> 4;
+                                IChunkAccess ichunkaccess = IWorldReader.this.getChunkAt(k2, l2, IWorldReader.this.O(), false);
+
+                                if (ichunkaccess != null) {
+                                    blockposition_mutableblockposition.d(k1, l1, i2);
+                                    IBlockData iblockdata = ichunkaccess.getType(blockposition_mutableblockposition);
 
-                                if (VoxelShapes.c(voxelshape, voxelshape3, OperatorBoolean.AND)) {
-                                    consumer.accept(voxelshape3);
-                                    return true;
+                                    if ((j2 != 1 || iblockdata.f()) && (j2 != 2 || iblockdata.getBlock() == Blocks.MOVING_PISTON)) {
+                                        VoxelShape voxelshape2 = IWorldReader.this.getType(blockposition_mutableblockposition).b((IBlockAccess) IWorldReader.this, blockposition_mutableblockposition, voxelshapecollision);
+                                        VoxelShape voxelshape3 = voxelshape2.a((double) k1, (double) l1, (double) i2);
+
+                                        if (VoxelShapes.c(voxelshape, voxelshape3, OperatorBoolean.AND)) {
+                                            consumer.accept(voxelshape3);
+                                            return true;
+                                        }
+                                    }
                                 }
                             }
                         }
-                    }
-                }
 
-                return false;
-            }
-        }, false);
+                        return false;
+                    }
+                }, false), this.a(entity, voxelshape, set)});
     }
 
-    default boolean x(BlockPosition blockposition) {
+    default boolean y(BlockPosition blockposition) {
         return this.getFluid(blockposition).a(TagsFluid.WATER);
     }
 
diff --git a/src/main/java/net/minecraft/server/InventoryCraftResult.java b/src/main/java/net/minecraft/server/InventoryCraftResult.java
index 06c0bc5b..a6386d8d 100644
--- a/src/main/java/net/minecraft/server/InventoryCraftResult.java
+++ b/src/main/java/net/minecraft/server/InventoryCraftResult.java
@@ -112,7 +112,7 @@ public class InventoryCraftResult implements IInventory, RecipeHolder {
 
     @Nullable
     @Override
-    public IRecipe<?> U_() {
+    public IRecipe<?> V_() {
         return this.b;
     }
 }
diff --git a/src/main/java/net/minecraft/server/InventorySubcontainer.java b/src/main/java/net/minecraft/server/InventorySubcontainer.java
index af84469d..da12ebcd 100644
--- a/src/main/java/net/minecraft/server/InventorySubcontainer.java
+++ b/src/main/java/net/minecraft/server/InventorySubcontainer.java
@@ -3,7 +3,6 @@ package net.minecraft.server;
 import com.google.common.collect.Lists;
 import java.util.Iterator;
 import java.util.List;
-import java.util.stream.Collectors;
 
 // CraftBukkit start
 import org.bukkit.Location;
@@ -100,40 +99,38 @@ public class InventorySubcontainer implements IInventory, AutoRecipeOutput {
         return itemstack;
     }
 
-    public ItemStack a(Item item, int i) {
-        ItemStack itemstack = new ItemStack(item, 0);
+    public ItemStack a(ItemStack itemstack) {
+        ItemStack itemstack1 = itemstack.cloneItemStack();
 
-        for (int j = this.a - 1; j >= 0; --j) {
-            ItemStack itemstack1 = this.getItem(j);
+        for (int i = 0; i < this.a; ++i) {
+            ItemStack itemstack2 = this.getItem(i);
 
-            if (itemstack1.getItem().equals(item)) {
-                int k = i - itemstack.getCount();
-                ItemStack itemstack2 = itemstack1.cloneAndSubtract(k);
+            if (itemstack2.isEmpty()) {
+                this.setItem(i, itemstack1);
+                this.update();
+                return ItemStack.a;
+            }
 
-                itemstack.add(itemstack2.getCount());
-                if (itemstack.getCount() == i) {
-                    break;
+            if (ItemStack.c(itemstack2, itemstack1)) {
+                int j = Math.min(this.getMaxStackSize(), itemstack2.getMaxStackSize());
+                int k = Math.min(itemstack1.getCount(), j - itemstack2.getCount());
+
+                if (k > 0) {
+                    itemstack2.add(k);
+                    itemstack1.subtract(k);
+                    if (itemstack1.isEmpty()) {
+                        this.update();
+                        return ItemStack.a;
+                    }
                 }
             }
         }
 
-        if (!itemstack.isEmpty()) {
+        if (itemstack1.getCount() != itemstack.getCount()) {
             this.update();
         }
 
-        return itemstack;
-    }
-
-    public ItemStack a(ItemStack itemstack) {
-        ItemStack itemstack1 = itemstack.cloneItemStack();
-
-        this.c(itemstack1);
-        if (itemstack1.isEmpty()) {
-            return ItemStack.a;
-        } else {
-            this.b(itemstack1);
-            return itemstack1.isEmpty() ? ItemStack.a : itemstack1;
-        }
+        return itemstack1;
     }
 
     @Override
@@ -202,7 +199,6 @@ public class InventorySubcontainer implements IInventory, AutoRecipeOutput {
     @Override
     public void clear() {
         this.items.clear();
-        this.update();
     }
 
     @Override
@@ -216,49 +212,4 @@ public class InventorySubcontainer implements IInventory, AutoRecipeOutput {
         }
 
     }
-
-    public String toString() {
-        return ((List) this.items.stream().filter((itemstack) -> {
-            return !itemstack.isEmpty();
-        }).collect(Collectors.toList())).toString();
-    }
-
-    private void b(ItemStack itemstack) {
-        for (int i = 0; i < this.a; ++i) {
-            ItemStack itemstack1 = this.getItem(i);
-
-            if (itemstack1.isEmpty()) {
-                this.setItem(i, itemstack.cloneItemStack());
-                itemstack.setCount(0);
-                return;
-            }
-        }
-
-    }
-
-    private void c(ItemStack itemstack) {
-        for (int i = 0; i < this.a; ++i) {
-            ItemStack itemstack1 = this.getItem(i);
-
-            if (ItemStack.c(itemstack1, itemstack)) {
-                this.a(itemstack, itemstack1);
-                if (itemstack.isEmpty()) {
-                    return;
-                }
-            }
-        }
-
-    }
-
-    private void a(ItemStack itemstack, ItemStack itemstack1) {
-        int i = Math.min(this.getMaxStackSize(), itemstack1.getMaxStackSize());
-        int j = Math.min(itemstack.getCount(), i - itemstack1.getCount());
-
-        if (j > 0) {
-            itemstack1.add(j);
-            itemstack.subtract(j);
-            this.update();
-        }
-
-    }
 }
diff --git a/src/main/java/net/minecraft/server/ItemArmor.java b/src/main/java/net/minecraft/server/ItemArmor.java
index dec03e4a..f5c98ac7 100644
--- a/src/main/java/net/minecraft/server/ItemArmor.java
+++ b/src/main/java/net/minecraft/server/ItemArmor.java
@@ -26,7 +26,7 @@ public class ItemArmor extends Item {
     protected final ArmorMaterial e;
 
     public static ItemStack a(ISourceBlock isourceblock, ItemStack itemstack) {
-        BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING));
+        BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
         List<EntityLiving> list = isourceblock.getWorld().a(EntityLiving.class, new AxisAlignedBB(blockposition), IEntitySelector.f.and(new IEntitySelector.EntitySelectorEquipable(itemstack)));
 
         if (list.isEmpty()) {
diff --git a/src/main/java/net/minecraft/server/ItemArmorStand.java b/src/main/java/net/minecraft/server/ItemArmorStand.java
index dfe932c1..aa3e1b24 100644
--- a/src/main/java/net/minecraft/server/ItemArmorStand.java
+++ b/src/main/java/net/minecraft/server/ItemArmorStand.java
@@ -47,7 +47,7 @@ public class ItemArmorStand extends Item {
                         }
                         // CraftBukkit end
                         world.addEntity(entityarmorstand);
-                        world.playSound((EntityHuman) null, entityarmorstand.locX, entityarmorstand.locY, entityarmorstand.locZ, SoundEffects.ENTITY_ARMOR_STAND_PLACE, SoundCategory.BLOCKS, 0.75F, 0.8F);
+                        world.a((EntityHuman) null, entityarmorstand.locX, entityarmorstand.locY, entityarmorstand.locZ, SoundEffects.ENTITY_ARMOR_STAND_PLACE, SoundCategory.BLOCKS, 0.75F, 0.8F);
                     }
 
                     itemstack.subtract(1);
diff --git a/src/main/java/net/minecraft/server/ItemBlock.java b/src/main/java/net/minecraft/server/ItemBlock.java
index 0c8b11bb..b90cc665 100644
--- a/src/main/java/net/minecraft/server/ItemBlock.java
+++ b/src/main/java/net/minecraft/server/ItemBlock.java
@@ -60,7 +60,7 @@ public class ItemBlock extends Item {
 
                     SoundEffectType soundeffecttype = iblockdata1.r();
 
-                    // world.playSound(entityhuman, blockposition, this.a(iblockdata1), SoundCategory.BLOCKS, (soundeffecttype.a() + 1.0F) / 2.0F, soundeffecttype.b() * 0.8F);
+                    // world.a(entityhuman, blockposition, this.a(iblockdata1), SoundCategory.BLOCKS, (soundeffecttype.a() + 1.0F) / 2.0F, soundeffecttype.b() * 0.8F);
                     itemstack.subtract(1);
                     return EnumInteractionResult.SUCCESS;
                 }
@@ -94,21 +94,6 @@ public class ItemBlock extends Item {
 
         if (nbttagcompound != null) {
             NBTTagCompound nbttagcompound1 = nbttagcompound.getCompound("BlockStateTag");
-            // CraftBukkit start
-            iblockdata1 = getBlockState(iblockdata1, nbttagcompound1);
-        }
-
-        if (iblockdata1 != iblockdata) {
-            world.setTypeAndData(blockposition, iblockdata1, 2);
-        }
-
-        return iblockdata1;
-    }
-
-    public static IBlockData getBlockState(IBlockData iblockdata, NBTTagCompound nbttagcompound1) {
-        IBlockData iblockdata1 = iblockdata;
-        {
-            // CraftBukkit end
             BlockStateList<Block, IBlockData> blockstatelist = iblockdata.getBlock().getStates();
             Iterator iterator = nbttagcompound1.getKeys().iterator();
 
@@ -123,6 +108,11 @@ public class ItemBlock extends Item {
                 }
             }
         }
+
+        if (iblockdata1 != iblockdata) {
+            world.setTypeAndData(blockposition, iblockdata1, 2);
+        }
+
         return iblockdata1;
     }
 
@@ -136,8 +126,8 @@ public class ItemBlock extends Item {
         EntityHuman entityhuman = blockactioncontext.getEntity();
         VoxelShapeCollision voxelshapecollision = entityhuman == null ? VoxelShapeCollision.a() : VoxelShapeCollision.a((Entity) entityhuman);
         // CraftBukkit start - store default return
-        World world = blockactioncontext.getWorld(); // Paper
-        boolean defaultReturn = (!this.d() || iblockdata.canPlace(world, blockactioncontext.getClickPosition())) && world.checkEntityCollision(iblockdata, entityhuman, voxelshapecollision, blockactioncontext.getClickPosition(), true); // Paper
+        final World world = blockactioncontext.getWorld(); // Paper
+        boolean defaultReturn = (!this.d() || iblockdata.canPlace(world, blockactioncontext.getClickPosition())) && world.checkEntityCollision(iblockdata, blockactioncontext.getClickPosition(), voxelshapecollision, true); // Paper
         org.bukkit.entity.Player player = (blockactioncontext.getEntity() instanceof EntityPlayer) ? (org.bukkit.entity.Player) blockactioncontext.getEntity().getBukkitEntity() : null;
 
         BlockCanBuildEvent event = new BlockCanBuildEvent(CraftBlock.at(blockactioncontext.getWorld(), blockactioncontext.getClickPosition()), player, CraftBlockData.fromData(iblockdata), defaultReturn);
diff --git a/src/main/java/net/minecraft/server/ItemBoat.java b/src/main/java/net/minecraft/server/ItemBoat.java
index 03956c6b..f5900f1f 100644
--- a/src/main/java/net/minecraft/server/ItemBoat.java
+++ b/src/main/java/net/minecraft/server/ItemBoat.java
@@ -32,7 +32,7 @@ public class ItemBoat extends Item {
 
                 while (iterator.hasNext()) {
                     Entity entity = (Entity) iterator.next();
-                    AxisAlignedBB axisalignedbb = entity.getBoundingBox().g((double) entity.aS());
+                    AxisAlignedBB axisalignedbb = entity.getBoundingBox().g((double) entity.aR());
 
                     if (axisalignedbb.c(vec3d1)) {
                         return new InteractionResultWrapper<>(EnumInteractionResult.PASS, itemstack);
diff --git a/src/main/java/net/minecraft/server/ItemBow.java b/src/main/java/net/minecraft/server/ItemBow.java
index 90592fd3..4ec02c8c 100644
--- a/src/main/java/net/minecraft/server/ItemBow.java
+++ b/src/main/java/net/minecraft/server/ItemBow.java
@@ -89,7 +89,7 @@ public class ItemBow extends ItemProjectileWeapon {
                         // CraftBukkit end
                     }
 
-                    world.playSound((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_ARROW_SHOOT, SoundCategory.PLAYERS, 1.0F, 1.0F / (ItemBow.i.nextFloat() * 0.4F + 1.2F) + f * 0.5F);
+                    world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_ARROW_SHOOT, SoundCategory.PLAYERS, 1.0F, 1.0F / (ItemBow.i.nextFloat() * 0.4F + 1.2F) + f * 0.5F);
                     if (!flag1 && !entityhuman.abilities.canInstantlyBuild && consumeArrow) { // Paper
                         itemstack1.subtract(1);
                         if (itemstack1.isEmpty()) {
diff --git a/src/main/java/net/minecraft/server/ItemBucket.java b/src/main/java/net/minecraft/server/ItemBucket.java
index 731f1170..5dc967f8 100644
--- a/src/main/java/net/minecraft/server/ItemBucket.java
+++ b/src/main/java/net/minecraft/server/ItemBucket.java
@@ -42,7 +42,6 @@ public class ItemBucket extends Item {
                         PlayerBucketFillEvent event = CraftEventFactory.callPlayerBucketFillEvent(entityhuman, blockposition.getX(), blockposition.getY(), blockposition.getZ(), null, itemstack, dummyFluid.b(), enumhand); // Paper - add enumHand
 
                         if (event.isCancelled()) {
-                            ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutBlockChange(world, blockposition)); // SPIGOT-5163 (see PlayerInteractManager)
                             ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory(); // SPIGOT-4541
                             return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
                         }
@@ -150,7 +149,7 @@ public class ItemBucket extends Item {
                     int j = blockposition.getY();
                     int k = blockposition.getZ();
 
-                    world.playSound(entityhuman, blockposition, SoundEffects.BLOCK_FIRE_EXTINGUISH, SoundCategory.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
+                    world.a(entityhuman, blockposition, SoundEffects.BLOCK_FIRE_EXTINGUISH, SoundCategory.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
 
                     for (int l = 0; l < 8; ++l) {
                         world.addParticle(Particles.LARGE_SMOKE, (double) i + Math.random(), (double) j + Math.random(), (double) k + Math.random(), 0.0D, 0.0D, 0.0D);
@@ -176,6 +175,6 @@ public class ItemBucket extends Item {
     protected void a(@Nullable EntityHuman entityhuman, GeneratorAccess generatoraccess, BlockPosition blockposition) {
         SoundEffect soundeffect = this.fluidType.a(TagsFluid.LAVA) ? SoundEffects.ITEM_BUCKET_EMPTY_LAVA : SoundEffects.ITEM_BUCKET_EMPTY;
 
-        generatoraccess.playSound(entityhuman, blockposition, soundeffect, SoundCategory.BLOCKS, 1.0F, 1.0F);
+        generatoraccess.a(entityhuman, blockposition, soundeffect, SoundCategory.BLOCKS, 1.0F, 1.0F);
     }
 }
diff --git a/src/main/java/net/minecraft/server/ItemChorusFruit.java b/src/main/java/net/minecraft/server/ItemChorusFruit.java
index 6b4ea514..d2cf5ae2 100644
--- a/src/main/java/net/minecraft/server/ItemChorusFruit.java
+++ b/src/main/java/net/minecraft/server/ItemChorusFruit.java
@@ -45,14 +45,14 @@ public class ItemChorusFruit extends Item {
                 }
 
                 if (entityliving.a(d3, d4, d5, true)) {
-                    world.playSound((EntityHuman) null, d0, d1, d2, SoundEffects.ITEM_CHORUS_FRUIT_TELEPORT, SoundCategory.PLAYERS, 1.0F, 1.0F);
+                    world.a((EntityHuman) null, d0, d1, d2, SoundEffects.ITEM_CHORUS_FRUIT_TELEPORT, SoundCategory.PLAYERS, 1.0F, 1.0F);
                     entityliving.a(SoundEffects.ITEM_CHORUS_FRUIT_TELEPORT, 1.0F, 1.0F);
                     break;
                 }
             }
 
             if (entityliving instanceof EntityHuman) {
-                ((EntityHuman) entityliving).getCooldownTracker().setCooldown(this, 20);
+                ((EntityHuman) entityliving).getCooldownTracker().a(this, 20);
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/ItemCrossbow.java b/src/main/java/net/minecraft/server/ItemCrossbow.java
index f0d78410..1e175221 100644
--- a/src/main/java/net/minecraft/server/ItemCrossbow.java
+++ b/src/main/java/net/minecraft/server/ItemCrossbow.java
@@ -70,7 +70,7 @@ public class ItemCrossbow extends ItemProjectileWeapon {
             a(itemstack, true);
             SoundCategory soundcategory = entityliving instanceof EntityHuman ? SoundCategory.PLAYERS : SoundCategory.HOSTILE;
 
-            world.playSound((EntityHuman) null, entityliving.locX, entityliving.locY, entityliving.locZ, SoundEffects.ITEM_CROSSBOW_LOADING_END, soundcategory, 1.0F, 1.0F / (ItemCrossbow.i.nextFloat() * 0.5F + 1.0F) + 0.2F);
+            world.a((EntityHuman) null, entityliving.locX, entityliving.locY, entityliving.locZ, SoundEffects.ITEM_CROSSBOW_LOADING_END, soundcategory, 1.0F, 1.0F / (ItemCrossbow.i.nextFloat() * 0.5F + 1.0F) + 0.2F);
         }
 
     }
@@ -199,7 +199,6 @@ public class ItemCrossbow extends ItemProjectileWeapon {
 
             if (flag1) {
                 object = new EntityFireworks(world, itemstack1, entityliving.locX, entityliving.locY + (double) entityliving.getHeadHeight() - 0.15000000596046448D, entityliving.locZ, true);
-                ((EntityFireworks) object).spawningEntity = entityliving.getUniqueID(); // Paper
             } else {
                 object = a(world, entityliving, itemstack, itemstack1);
                 if (flag || f3 != 0.0F) {
@@ -241,7 +240,7 @@ public class ItemCrossbow extends ItemProjectileWeapon {
                 }
             }
             // CraftBukkit end
-            world.playSound((EntityHuman) null, entityliving.locX, entityliving.locY, entityliving.locZ, SoundEffects.ITEM_CROSSBOW_SHOOT, SoundCategory.PLAYERS, 1.0F, f);
+            world.a((EntityHuman) null, entityliving.locX, entityliving.locY, entityliving.locZ, SoundEffects.ITEM_CROSSBOW_SHOOT, SoundCategory.PLAYERS, 1.0F, f);
         }
     }
 
@@ -258,7 +257,7 @@ public class ItemCrossbow extends ItemProjectileWeapon {
         int i = EnchantmentManager.getEnchantmentLevel(Enchantments.PIERCING, itemstack);
 
         if (i > 0) {
-            entityarrow.setPierceLevel((byte) i);
+            entityarrow.b((byte) i);
         }
 
         return entityarrow;
@@ -327,12 +326,12 @@ public class ItemCrossbow extends ItemProjectileWeapon {
 
             if (f >= 0.2F && !this.c) {
                 this.c = true;
-                world.playSound((EntityHuman) null, entityliving.locX, entityliving.locY, entityliving.locZ, soundeffect, SoundCategory.PLAYERS, 0.5F, 1.0F);
+                world.a((EntityHuman) null, entityliving.locX, entityliving.locY, entityliving.locZ, soundeffect, SoundCategory.PLAYERS, 0.5F, 1.0F);
             }
 
             if (f >= 0.5F && soundeffect1 != null && !this.d) {
                 this.d = true;
-                world.playSound((EntityHuman) null, entityliving.locX, entityliving.locY, entityliving.locZ, soundeffect1, SoundCategory.PLAYERS, 0.5F, 1.0F);
+                world.a((EntityHuman) null, entityliving.locX, entityliving.locY, entityliving.locZ, soundeffect1, SoundCategory.PLAYERS, 0.5F, 1.0F);
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/ItemDebugStick.java b/src/main/java/net/minecraft/server/ItemDebugStick.java
index 519617de..351040a7 100644
--- a/src/main/java/net/minecraft/server/ItemDebugStick.java
+++ b/src/main/java/net/minecraft/server/ItemDebugStick.java
@@ -68,7 +68,7 @@ public class ItemDebugStick extends Item {
     }
 
     private static <T extends Comparable<T>> IBlockData a(IBlockData iblockdata, IBlockState<T> iblockstate, boolean flag) {
-        return (IBlockData) iblockdata.set(iblockstate, a(iblockstate.getValues(), iblockdata.get(iblockstate), flag));
+        return (IBlockData) iblockdata.set(iblockstate, a(iblockstate.d(), iblockdata.get(iblockstate), flag));
     }
 
     private static <T> T a(Iterable<T> iterable, @Nullable T t0, boolean flag) {
diff --git a/src/main/java/net/minecraft/server/ItemEgg.java b/src/main/java/net/minecraft/server/ItemEgg.java
index b92d3960..f526af45 100644
--- a/src/main/java/net/minecraft/server/ItemEgg.java
+++ b/src/main/java/net/minecraft/server/ItemEgg.java
@@ -15,7 +15,7 @@ public class ItemEgg extends Item {
             itemstack.subtract(1);
         }
 
-        world.playSound((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_EGG_THROW, SoundCategory.PLAYERS, 0.5F, 0.4F / (ItemEgg.i.nextFloat() * 0.4F + 0.8F));
+        world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_EGG_THROW, SoundCategory.PLAYERS, 0.5F, 0.4F / (ItemEgg.i.nextFloat() * 0.4F + 0.8F));
         */ // Paper end
         if (!world.isClientSide) {
             EntityEgg entityegg = new EntityEgg(world, entityhuman);
@@ -31,7 +31,7 @@ public class ItemEgg extends Item {
                     ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory();
                 }
 
-                world.playSound((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_EGG_THROW, SoundCategory.PLAYERS, 0.5F, 0.4F / (Entity.SHARED_RANDOM.nextFloat() * 0.4F + 0.8F));
+                world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_EGG_THROW, SoundCategory.PLAYERS, 0.5F, 0.4F / (Entity.SHARED_RANDOM.nextFloat() * 0.4F + 0.8F));
             } else {
                 if (entityhuman instanceof EntityPlayer) {
                     ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory();
diff --git a/src/main/java/net/minecraft/server/ItemEnderPearl.java b/src/main/java/net/minecraft/server/ItemEnderPearl.java
index 8a02b69f..e8e52d72 100644
--- a/src/main/java/net/minecraft/server/ItemEnderPearl.java
+++ b/src/main/java/net/minecraft/server/ItemEnderPearl.java
@@ -25,7 +25,7 @@ public class ItemEnderPearl extends Item {
                     ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory();
                 }
 
-                world.playSound((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_ENDER_PEARL_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (Entity.SHARED_RANDOM.nextFloat() * 0.4F + 0.8F));
+                world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_ENDER_PEARL_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (Entity.SHARED_RANDOM.nextFloat() * 0.4F + 0.8F));
                 entityhuman.getCooldownTracker().a(this, 20);
             } else {
                 // Paper end
@@ -36,15 +36,15 @@ public class ItemEnderPearl extends Item {
             }
         }
 
-//        // Paper start - moved up
-//        if (!entityhuman.abilities.canInstantlyBuild) {
-//            itemstack.subtract(1);
-//        }
-//
-//        world.playSound((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_ENDER_PEARL_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemEnderPearl.i.nextFloat() * 0.4F + 0.8F));
-//        entityhuman.getCooldownTracker().a(this, 20);
-//        // CraftBukkit end
-//        // Paper end
+        // Paper start - moved up
+        //if (!entityhuman.abilities.canInstantlyBuild) {
+        //    itemstack.subtract(1);
+        //}
+        //
+        //world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_ENDER_PEARL_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemEnderPearl.i.nextFloat() * 0.4F + 0.8F));
+        //entityhuman.getCooldownTracker().a(this, 20);
+        // // CraftBukkit end
+        // Paper end
 
         entityhuman.b(StatisticList.ITEM_USED.b(this));
         return new InteractionResultWrapper<>(EnumInteractionResult.SUCCESS, itemstack);
diff --git a/src/main/java/net/minecraft/server/ItemExpBottle.java b/src/main/java/net/minecraft/server/ItemExpBottle.java
index 2a0aded6..eb626a6f 100644
--- a/src/main/java/net/minecraft/server/ItemExpBottle.java
+++ b/src/main/java/net/minecraft/server/ItemExpBottle.java
@@ -14,7 +14,7 @@ public class ItemExpBottle extends Item {
             itemstack.subtract(1);
         }
 
-        world.playSound((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_EXPERIENCE_BOTTLE_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemExpBottle.i.nextFloat() * 0.4F + 0.8F));
+        world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_EXPERIENCE_BOTTLE_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemExpBottle.i.nextFloat() * 0.4F + 0.8F));
         */ // Paper end
         if (!world.isClientSide) {
             EntityThrownExpBottle entitythrownexpbottle = new EntityThrownExpBottle(world, entityhuman);
@@ -30,7 +30,7 @@ public class ItemExpBottle extends Item {
                     ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory();
                 }
 
-                world.playSound((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_EXPERIENCE_BOTTLE_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (Entity.SHARED_RANDOM.nextFloat() * 0.4F + 0.8F));
+                world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_EXPERIENCE_BOTTLE_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (Entity.SHARED_RANDOM.nextFloat() * 0.4F + 0.8F));
             } else {
                 if (entityhuman instanceof EntityPlayer) {
                     ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory();
diff --git a/src/main/java/net/minecraft/server/ItemFireball.java b/src/main/java/net/minecraft/server/ItemFireball.java
index 8924753b..660602d8 100644
--- a/src/main/java/net/minecraft/server/ItemFireball.java
+++ b/src/main/java/net/minecraft/server/ItemFireball.java
@@ -51,6 +51,6 @@ public class ItemFireball extends Item {
     }
 
     private void a(World world, BlockPosition blockposition) {
-        world.playSound((EntityHuman) null, blockposition, SoundEffects.ITEM_FIRECHARGE_USE, SoundCategory.BLOCKS, 1.0F, (ItemFireball.i.nextFloat() - ItemFireball.i.nextFloat()) * 0.2F + 1.0F);
+        world.a((EntityHuman) null, blockposition, SoundEffects.ITEM_FIRECHARGE_USE, SoundCategory.BLOCKS, 1.0F, (ItemFireball.i.nextFloat() - ItemFireball.i.nextFloat()) * 0.2F + 1.0F);
     }
 }
diff --git a/src/main/java/net/minecraft/server/ItemFishingRod.java b/src/main/java/net/minecraft/server/ItemFishingRod.java
index 37c4707c..4332dcc5 100644
--- a/src/main/java/net/minecraft/server/ItemFishingRod.java
+++ b/src/main/java/net/minecraft/server/ItemFishingRod.java
@@ -40,9 +40,9 @@ public class ItemFishingRod extends Item {
             }
 
             entityhuman.a(enumhand);
-            world.playSound((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_FISHING_BOBBER_RETRIEVE, SoundCategory.NEUTRAL, 1.0F, 0.4F / (ItemFishingRod.i.nextFloat() * 0.4F + 0.8F));
+            world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_FISHING_BOBBER_RETRIEVE, SoundCategory.NEUTRAL, 1.0F, 0.4F / (ItemFishingRod.i.nextFloat() * 0.4F + 0.8F));
         } else {
-            // world.playSound((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_FISHING_BOBBER_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemFishingRod.i.nextFloat() * 0.4F + 0.8F));
+            // world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_FISHING_BOBBER_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemFishingRod.i.nextFloat() * 0.4F + 0.8F));
             if (!world.isClientSide) {
                 i = EnchantmentManager.c(itemstack);
                 int j = EnchantmentManager.b(itemstack);
@@ -56,7 +56,7 @@ public class ItemFishingRod extends Item {
                     entityhuman.hookedFish = null;
                     return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
                 }
-                world.playSound((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_FISHING_BOBBER_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemFishingRod.i.nextFloat() * 0.4F + 0.8F));
+                world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_FISHING_BOBBER_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemFishingRod.i.nextFloat() * 0.4F + 0.8F));
                 world.addEntity(entityfishinghook);
                 // CraftBukkit end
             }
diff --git a/src/main/java/net/minecraft/server/ItemFlintAndSteel.java b/src/main/java/net/minecraft/server/ItemFlintAndSteel.java
index 298dc620..4700eff9 100644
--- a/src/main/java/net/minecraft/server/ItemFlintAndSteel.java
+++ b/src/main/java/net/minecraft/server/ItemFlintAndSteel.java
@@ -25,7 +25,7 @@ public class ItemFlintAndSteel extends Item {
                 return EnumInteractionResult.PASS;
             }
             // CraftBukkit end
-            world.playSound(entityhuman, blockposition1, SoundEffects.ITEM_FLINTANDSTEEL_USE, SoundCategory.BLOCKS, 1.0F, ItemFlintAndSteel.i.nextFloat() * 0.4F + 0.8F);
+            world.a(entityhuman, blockposition1, SoundEffects.ITEM_FLINTANDSTEEL_USE, SoundCategory.BLOCKS, 1.0F, ItemFlintAndSteel.i.nextFloat() * 0.4F + 0.8F);
             iblockdata = ((BlockFire) Blocks.FIRE).a((IBlockAccess) world, blockposition1);
             world.setTypeAndData(blockposition1, iblockdata, 11);
             ItemStack itemstack = itemactioncontext.getItemStack();
@@ -41,7 +41,7 @@ public class ItemFlintAndSteel extends Item {
         } else {
             iblockdata = world.getType(blockposition);
             if (a(iblockdata)) {
-                world.playSound(entityhuman, blockposition, SoundEffects.ITEM_FLINTANDSTEEL_USE, SoundCategory.BLOCKS, 1.0F, ItemFlintAndSteel.i.nextFloat() * 0.4F + 0.8F);
+                world.a(entityhuman, blockposition, SoundEffects.ITEM_FLINTANDSTEEL_USE, SoundCategory.BLOCKS, 1.0F, ItemFlintAndSteel.i.nextFloat() * 0.4F + 0.8F);
                 world.setTypeAndData(blockposition, (IBlockData) iblockdata.set(BlockProperties.r, true), 11);
                 if (entityhuman != null) {
                     itemactioncontext.getItemStack().damage(1, entityhuman, (entityhuman1) -> {
diff --git a/src/main/java/net/minecraft/server/ItemLingeringPotion.java b/src/main/java/net/minecraft/server/ItemLingeringPotion.java
index ca3f9f8c..f3ad1cd6 100644
--- a/src/main/java/net/minecraft/server/ItemLingeringPotion.java
+++ b/src/main/java/net/minecraft/server/ItemLingeringPotion.java
@@ -12,7 +12,7 @@ public class ItemLingeringPotion extends ItemPotion {
         /* // Paper start
         ItemStack itemstack1 = entityhuman.abilities.canInstantlyBuild ? itemstack.cloneItemStack() : itemstack.cloneAndSubtract(1);
 
-        world.playSound((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_LINGERING_POTION_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemLingeringPotion.i.nextFloat() * 0.4F + 0.8F));
+        world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_LINGERING_POTION_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemLingeringPotion.i.nextFloat() * 0.4F + 0.8F));
         */ // Paper end
         if (!world.isClientSide) {
 
@@ -35,7 +35,7 @@ public class ItemLingeringPotion extends ItemPotion {
                     ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory();
                 }
 
-                world.playSound((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_LINGERING_POTION_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (Entity.SHARED_RANDOM.nextFloat() * 0.4F + 0.8F));
+                world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_LINGERING_POTION_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (Entity.SHARED_RANDOM.nextFloat() * 0.4F + 0.8F));
             } else {
                 if (entityhuman instanceof EntityPlayer) {
                     ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory();
diff --git a/src/main/java/net/minecraft/server/ItemMinecart.java b/src/main/java/net/minecraft/server/ItemMinecart.java
index ec96fa0a..76442745 100644
--- a/src/main/java/net/minecraft/server/ItemMinecart.java
+++ b/src/main/java/net/minecraft/server/ItemMinecart.java
@@ -12,7 +12,7 @@ public class ItemMinecart extends Item {
 
         @Override
         public ItemStack a(ISourceBlock isourceblock, ItemStack itemstack) {
-            EnumDirection enumdirection = (EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING);
+            EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
             World world = isourceblock.getWorld();
             double d0 = isourceblock.getX() + (double) enumdirection.getAdjacentX() * 1.125D;
             double d1 = Math.floor(isourceblock.getY()) + (double) enumdirection.getAdjacentY();
diff --git a/src/main/java/net/minecraft/server/ItemSnowball.java b/src/main/java/net/minecraft/server/ItemSnowball.java
index bbd22596..c119785b 100644
--- a/src/main/java/net/minecraft/server/ItemSnowball.java
+++ b/src/main/java/net/minecraft/server/ItemSnowball.java
@@ -16,7 +16,7 @@ public class ItemSnowball extends Item {
             itemstack.subtract(1);
         }
 
-        world.playSound((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_SNOWBALL_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemSnowball.i.nextFloat() * 0.4F + 0.8F));
+        world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_SNOWBALL_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemSnowball.i.nextFloat() * 0.4F + 0.8F));
         */
         if (!world.isClientSide) {
             EntitySnowball entitysnowball = new EntitySnowball(world, entityhuman);
@@ -32,13 +32,14 @@ public class ItemSnowball extends Item {
                     ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory();
                 }
 
-                world.playSound((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_SNOWBALL_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (Entity.SHARED_RANDOM.nextFloat() * 0.4F + 0.8F));
+                world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_SNOWBALL_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (Entity.SHARED_RANDOM.nextFloat() * 0.4F + 0.8F));
             } else {
                 if (entityhuman instanceof EntityPlayer) {
                     ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory();
                 }
-                return new InteractionResultWrapper<>(EnumInteractionResult.FAIL, itemstack);
+                return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
             }
+            // Paper end
         }
         // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/server/ItemSplashPotion.java b/src/main/java/net/minecraft/server/ItemSplashPotion.java
index 4460ddc6..fa6d627d 100644
--- a/src/main/java/net/minecraft/server/ItemSplashPotion.java
+++ b/src/main/java/net/minecraft/server/ItemSplashPotion.java
@@ -12,7 +12,7 @@ public class ItemSplashPotion extends ItemPotion {
         /* // Paper start
         ItemStack itemstack1 = entityhuman.abilities.canInstantlyBuild ? itemstack.cloneItemStack() : itemstack.cloneAndSubtract(1);
 
-        world.playSound((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_SPLASH_POTION_THROW, SoundCategory.PLAYERS, 0.5F, 0.4F / (ItemSplashPotion.i.nextFloat() * 0.4F + 0.8F));
+        world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_SPLASH_POTION_THROW, SoundCategory.PLAYERS, 0.5F, 0.4F / (ItemSplashPotion.i.nextFloat() * 0.4F + 0.8F));
         */ // Paper end
         if (!world.isClientSide) {
             EntityPotion entitypotion = new EntityPotion(world, entityhuman);
@@ -34,7 +34,7 @@ public class ItemSplashPotion extends ItemPotion {
                     ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory();
                 }
 
-                world.playSound((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_SPLASH_POTION_THROW, SoundCategory.PLAYERS, 0.5F, 0.4F / (Entity.SHARED_RANDOM.nextFloat() * 0.4F + 0.8F));
+                world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.ENTITY_SPLASH_POTION_THROW, SoundCategory.PLAYERS, 0.5F, 0.4F / (Entity.SHARED_RANDOM.nextFloat() * 0.4F + 0.8F));
             } else {
                 if (entityhuman instanceof EntityPlayer) {
                     ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory();
diff --git a/src/main/java/net/minecraft/server/ItemStack.java b/src/main/java/net/minecraft/server/ItemStack.java
index 0e164840..dec58946 100644
--- a/src/main/java/net/minecraft/server/ItemStack.java
+++ b/src/main/java/net/minecraft/server/ItemStack.java
@@ -308,7 +308,7 @@ public final class ItemStack {
                     // SPIGOT-1288 - play sound stripped from ItemBlock
                     if (this.item instanceof ItemBlock) {
                         SoundEffectType soundeffecttype = ((ItemBlock) this.item).getBlock().stepSound;
-                        world.playSound(entityhuman, blockposition, soundeffecttype.e(), SoundCategory.BLOCKS, (soundeffecttype.a() + 1.0F) / 2.0F, soundeffecttype.b() * 0.8F);
+                        world.a(entityhuman, blockposition, soundeffecttype.e(), SoundCategory.BLOCKS, (soundeffecttype.a() + 1.0F) / 2.0F, soundeffecttype.b() * 0.8F);
                     }
 
                     entityhuman.b(StatisticList.ITEM_USED.b(item));
@@ -528,7 +528,7 @@ public final class ItemStack {
     }
 
     public String toString() {
-        return this.count + " " + this.getItem();
+        return this.count + "x" + this.getItem().getName();
     }
 
     public void a(World world, Entity entity, int i, boolean flag) {
@@ -762,7 +762,7 @@ public final class ItemStack {
                 NBTTagCompound nbttagcompound = nbttaglist.getCompound(i);
                 AttributeModifier attributemodifier = GenericAttributes.a(nbttagcompound);
 
-                if (attributemodifier != null && (!nbttagcompound.hasKeyOfType("Slot", 8) || nbttagcompound.getString("Slot").equals(enumitemslot.getSlotName())) && attributemodifier.getUniqueId().getLeastSignificantBits() != 0L && attributemodifier.getUniqueId().getMostSignificantBits() != 0L) {
+                if (attributemodifier != null && (!nbttagcompound.hasKeyOfType("Slot", 8) || nbttagcompound.getString("Slot").equals(enumitemslot.getSlotName())) && attributemodifier.a().getLeastSignificantBits() != 0L && attributemodifier.a().getMostSignificantBits() != 0L) {
                     ((Multimap) object).put(nbttagcompound.getString("AttributeName"), attributemodifier);
                 }
             }
diff --git a/src/main/java/net/minecraft/server/ItemTrident.java b/src/main/java/net/minecraft/server/ItemTrident.java
index c4081573..dd3f3916 100644
--- a/src/main/java/net/minecraft/server/ItemTrident.java
+++ b/src/main/java/net/minecraft/server/ItemTrident.java
@@ -69,7 +69,7 @@ public class ItemTrident extends Item {
                             entitythrowntrident.trident = itemstack.cloneItemStack(); // SPIGOT-4511 update since damage call moved
                             // CraftBukkit end
 
-                            world.playSound((EntityHuman) null, (Entity) entitythrowntrident, SoundEffects.ITEM_TRIDENT_THROW, SoundCategory.PLAYERS, 1.0F, 1.0F);
+                            world.a((EntityHuman) null, (Entity) entitythrowntrident, SoundEffects.ITEM_TRIDENT_THROW, SoundCategory.PLAYERS, 1.0F, 1.0F);
                             if (!entityhuman.abilities.canInstantlyBuild) {
                                 entityhuman.inventory.f(itemstack);
                             }
@@ -94,7 +94,7 @@ public class ItemTrident extends Item {
                         f3 *= f6 / f5;
                         f4 *= f6 / f5;
                         entityhuman.f((double) f2, (double) f3, (double) f4);
-                        entityhuman.q(20);
+                        entityhuman.p(20);
                         if (entityhuman.onGround) {
                             float f7 = 1.1999999F;
 
@@ -111,7 +111,7 @@ public class ItemTrident extends Item {
                             soundeffect = SoundEffects.ITEM_TRIDENT_RIPTIDE_1;
                         }
 
-                        world.playSound((EntityHuman) null, (Entity) entityhuman, soundeffect, SoundCategory.PLAYERS, 1.0F, 1.0F);
+                        world.a((EntityHuman) null, (Entity) entityhuman, soundeffect, SoundCategory.PLAYERS, 1.0F, 1.0F);
                     }
 
                 }
diff --git a/src/main/java/net/minecraft/server/ItemWaterLily.java b/src/main/java/net/minecraft/server/ItemWaterLily.java
index 694a3a70..6edb3893 100644
--- a/src/main/java/net/minecraft/server/ItemWaterLily.java
+++ b/src/main/java/net/minecraft/server/ItemWaterLily.java
@@ -52,7 +52,7 @@ public class ItemWaterLily extends ItemBlock {
                     }
 
                     entityhuman.b(StatisticList.ITEM_USED.b(this));
-                    world.playSound(entityhuman, blockposition, SoundEffects.BLOCK_LILY_PAD_PLACE, SoundCategory.BLOCKS, 1.0F, 1.0F);
+                    world.a(entityhuman, blockposition, SoundEffects.BLOCK_LILY_PAD_PLACE, SoundCategory.BLOCKS, 1.0F, 1.0F);
                     return new InteractionResultWrapper<>(EnumInteractionResult.SUCCESS, itemstack);
                 }
             }
diff --git a/src/main/java/net/minecraft/server/ItemWorldMap.java b/src/main/java/net/minecraft/server/ItemWorldMap.java
index cf9efcf1..3aeda38b 100644
--- a/src/main/java/net/minecraft/server/ItemWorldMap.java
+++ b/src/main/java/net/minecraft/server/ItemWorldMap.java
@@ -207,7 +207,7 @@ public class ItemWorldMap extends ItemWorldMapBase {
     private IBlockData a(World world, IBlockData iblockdata, BlockPosition blockposition) {
         Fluid fluid = iblockdata.p();
 
-        return !fluid.isEmpty() && !iblockdata.d(world, blockposition, EnumDirection.UP) ? fluid.getBlockData() : iblockdata;
+        return !fluid.isEmpty() && !Block.d(iblockdata, world, blockposition, EnumDirection.UP) ? fluid.getBlockData() : iblockdata;
     }
 
     private static boolean a(BiomeBase[] abiomebase, int i, int j, int k) {
diff --git a/src/main/java/net/minecraft/server/LocaleLanguage.java b/src/main/java/net/minecraft/server/LocaleLanguage.java
index 60127393..295c01b2 100644
--- a/src/main/java/net/minecraft/server/LocaleLanguage.java
+++ b/src/main/java/net/minecraft/server/LocaleLanguage.java
@@ -5,7 +5,6 @@ import com.google.gson.Gson;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParseException;
-import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.nio.charset.StandardCharsets;
@@ -27,40 +26,20 @@ public class LocaleLanguage {
     public LocaleLanguage() {
         try {
             InputStream inputstream = LocaleLanguage.class.getResourceAsStream("/assets/minecraft/lang/en_us.json");
-            Throwable throwable = null;
+            JsonElement jsonelement = (JsonElement) (new Gson()).fromJson(new InputStreamReader(inputstream, StandardCharsets.UTF_8), JsonElement.class);
+            JsonObject jsonobject = ChatDeserializer.m(jsonelement, "strings");
+            Iterator iterator = jsonobject.entrySet().iterator();
 
-            try {
-                JsonElement jsonelement = (JsonElement) (new Gson()).fromJson(new InputStreamReader(inputstream, StandardCharsets.UTF_8), JsonElement.class);
-                JsonObject jsonobject = ChatDeserializer.m(jsonelement, "strings");
-                Iterator iterator = jsonobject.entrySet().iterator();
-
-                while (iterator.hasNext()) {
-                    Entry<String, JsonElement> entry = (Entry) iterator.next();
-                    String s = LocaleLanguage.b.matcher(ChatDeserializer.a((JsonElement) entry.getValue(), (String) entry.getKey())).replaceAll("%$1s");
-
-                    this.d.put(entry.getKey(), s);
-                }
-
-                this.e = SystemUtils.getMonotonicMillis();
-            } catch (Throwable throwable1) {
-                throwable = throwable1;
-                throw throwable1;
-            } finally {
-                if (inputstream != null) {
-                    if (throwable != null) {
-                        try {
-                            inputstream.close();
-                        } catch (Throwable throwable2) {
-                            throwable.addSuppressed(throwable2);
-                        }
-                    } else {
-                        inputstream.close();
-                    }
-                }
+            while (iterator.hasNext()) {
+                Entry<String, JsonElement> entry = (Entry) iterator.next();
+                String s = LocaleLanguage.b.matcher(ChatDeserializer.a((JsonElement) entry.getValue(), (String) entry.getKey())).replaceAll("%$1s");
 
+                this.d.put(entry.getKey(), s);
             }
-        } catch (JsonParseException | IOException ioexception) {
-            LocaleLanguage.LOGGER.error("Couldn't read strings from /assets/minecraft/lang/en_us.json", ioexception);
+
+            this.e = SystemUtils.getMonotonicMillis();
+        } catch (JsonParseException jsonparseexception) {
+            LocaleLanguage.LOGGER.error("Couldn't read strings from /assets/minecraft/lang/en_us.json", jsonparseexception);
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
index c09e1edf..028c23db 100644
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -95,11 +95,6 @@ public class LoginListener implements PacketLoginInListener {
     }
     // CraftBukkit end
 
-    @Override
-    public NetworkManager a() {
-        return this.networkManager;
-    }
-
     public void disconnect(IChatBaseComponent ichatbasecomponent) {
         try {
             LoginListener.LOGGER.info("Disconnecting {}: {}", this.d(), ichatbasecomponent.getString());
@@ -158,9 +153,9 @@ public class LoginListener implements PacketLoginInListener {
             // CraftBukkit end
         } else {
             this.g = LoginListener.EnumProtocolState.ACCEPTED;
-            if (this.server.az() >= 0 && !this.networkManager.isLocal()) {
-                this.networkManager.sendPacket(new PacketLoginOutSetCompression(this.server.az()), (channelfuture) -> {
-                    this.networkManager.setCompressionLevel(this.server.az());
+            if (this.server.ay() >= 0 && !this.networkManager.isLocal()) {
+                this.networkManager.sendPacket(new PacketLoginOutSetCompression(this.server.ay()), (channelfuture) -> {
+                    this.networkManager.setCompressionLevel(this.server.ay());
                 });
             }
 
@@ -283,7 +278,7 @@ public class LoginListener implements PacketLoginInListener {
                 private InetAddress a() {
                     SocketAddress socketaddress = LoginListener.this.networkManager.getSocketAddress();
 
-                    return LoginListener.this.server.U() && socketaddress instanceof InetSocketAddress ? ((InetSocketAddress) socketaddress).getAddress() : null;
+                    return LoginListener.this.server.T() && socketaddress instanceof InetSocketAddress ? ((InetSocketAddress) socketaddress).getAddress() : null;
                 }
             });
             // Paper end
diff --git a/src/main/java/net/minecraft/server/MCUtil.java b/src/main/java/net/minecraft/server/MCUtil.java
index 23d1935d..fa0763cd 100644
--- a/src/main/java/net/minecraft/server/MCUtil.java
+++ b/src/main/java/net/minecraft/server/MCUtil.java
@@ -440,7 +440,7 @@ public final class MCUtil {
             int fullLoadedChunks = 0;
 
             for (PlayerChunk chunk : allChunks) {
-                if (chunk.getFullChunkIfCached() != null) {
+                if (chunk.getFullChunk() != null) {
                     ++fullLoadedChunks;
                 }
             }
diff --git a/src/main/java/net/minecraft/server/MerchantRecipe.java b/src/main/java/net/minecraft/server/MerchantRecipe.java
index b5ec1f1b..615297bf 100644
--- a/src/main/java/net/minecraft/server/MerchantRecipe.java
+++ b/src/main/java/net/minecraft/server/MerchantRecipe.java
@@ -65,10 +65,6 @@ public class MerchantRecipe {
     }
 
     public MerchantRecipe(ItemStack itemstack, ItemStack itemstack1, ItemStack itemstack2, int i, int j, int k, float f) {
-        this(itemstack, itemstack1, itemstack2, i, j, k, f, 0);
-    }
-
-    public MerchantRecipe(ItemStack itemstack, ItemStack itemstack1, ItemStack itemstack2, int i, int j, int k, float f, int l) {
         this.rewardExp = true;
         this.xp = 1;
         this.buyingItem1 = itemstack;
@@ -78,7 +74,6 @@ public class MerchantRecipe {
         this.maxUses = j;
         this.xp = k;
         this.priceMultiplier = f;
-        this.demand = l;
     }
 
     public ItemStack a() {
@@ -126,10 +121,6 @@ public class MerchantRecipe {
         ++this.uses;
     }
 
-    public int k() {
-        return this.demand;
-    }
-
     public void increaseSpecialPrice(int i) {
         this.specialPrice += i;
     }
@@ -158,7 +149,7 @@ public class MerchantRecipe {
         return this.uses >= this.maxUses;
     }
 
-    public void q() {
+    public void p() {
         this.uses = this.maxUses;
     }
 
@@ -166,7 +157,7 @@ public class MerchantRecipe {
         return this.rewardExp;
     }
 
-    public NBTTagCompound s() {
+    public NBTTagCompound r() {
         NBTTagCompound nbttagcompound = new NBTTagCompound();
 
         nbttagcompound.set("buy", this.buyingItem1.save(new NBTTagCompound()));
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 01b389d8..0f4c788c 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1,9 +1,5 @@
 package net.minecraft.server;
 
-import com.google.common.base.Splitter;
-import co.aikar.timings.Timings;
-import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
-import com.google.common.base.Stopwatch;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.gson.JsonElement;
@@ -16,29 +12,22 @@ import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
 import it.unimi.dsi.fastutil.longs.LongIterator;
-import java.awt.GraphicsEnvironment;
+
 import java.awt.image.BufferedImage;
-import java.io.BufferedWriter;
 import java.io.File;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
-import java.lang.management.ManagementFactory;
-import java.lang.management.ThreadInfo;
-import java.lang.management.ThreadMXBean;
 import java.net.Proxy;
 import java.net.URLEncoder;
 import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
-import java.nio.file.Files;
 import java.nio.file.Paths;
 import java.security.KeyPair;
 import java.text.SimpleDateFormat;
-import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Base64;
 import java.util.Collection;
 import java.util.Collections;
-import java.util.Comparator;
 import java.util.Date;
 import java.util.Iterator;
 import java.util.List;
@@ -46,41 +35,35 @@ import java.util.Map;
 import java.util.Optional;
 import java.util.Random;
 import java.util.UUID;
-import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
+import java.util.concurrent.locks.LockSupport;
 import java.util.function.BooleanSupplier;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
-import joptsimple.NonOptionArgumentSpec;
-import joptsimple.OptionParser;
+
 import joptsimple.OptionSet;
-import joptsimple.OptionSpec;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 // CraftBukkit start
-import joptsimple.OptionSet;
-import org.bukkit.Bukkit;
-import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.Main;
 import org.bukkit.event.server.ServerLoadEvent;
 // CraftBukkit end
-import co.aikar.timings.MinecraftTimings; // Paper
 import org.spigotmc.SlackActivityAccountant; // Spigot
+import co.aikar.timings.MinecraftTimings; // Paper
+import java.util.ArrayList;
 
 public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTask> implements IMojangStatistics, ICommandListener, AutoCloseable, Runnable {
 
     private static MinecraftServer SERVER; // Paper
     public static final Logger LOGGER = LogManager.getLogger();
     public static final File b = new File("usercache.json");
-    private static final CompletableFuture<Unit> i = CompletableFuture.completedFuture(Unit.INSTANCE);
     public static final WorldSettings c = (new WorldSettings((long) "North Carolina".hashCode(), EnumGamemode.SURVIVAL, true, false, WorldType.NORMAL)).a();
     public Convertable convertable;
     private final MojangStatisticsGenerator snooper = new MojangStatisticsGenerator("server", this, SystemUtils.getMonotonicMillis());
     public File universe;
     private final List<Runnable> tickables = Lists.newArrayList();
-    private final GameProfiler methodProfiler = new GameProfiler(this::aj);
+    private final GameProfiler methodProfiler = new GameProfiler(this::ai);
     private ServerConnection serverConnection;
     public final WorldLoadListenerFactory worldLoadListenerFactory;
     private final ServerPing serverPing = new ServerPing();
@@ -106,6 +89,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     private int G;
     private int H;
     public final long[] f = new long[100];
+    protected final Map<DimensionManager, long[]> g = Maps.newIdentityHashMap();
     @Nullable
     private KeyPair I;
     @Nullable
@@ -165,7 +149,6 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     public static int currentTick = 0; // Paper - Further improve tick loop
     public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
     public int autosavePeriod;
-    public boolean serverAutoSave = false; // Paper
     public File bukkitDataPackFolder;
     public CommandDispatcher vanillaCommandDispatcher;
     private boolean forceTicks;
@@ -177,11 +160,13 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     public final double[] recentTps = new double[ 3 ];
     public final SlackActivityAccountant slackActivityAccountant = new SlackActivityAccountant();
     // Spigot end
+    
+    public List<Double> threadsTPS;
 
     public MinecraftServer(OptionSet options, Proxy proxy, DataFixer datafixer, CommandDispatcher commanddispatcher, YggdrasilAuthenticationService yggdrasilauthenticationservice, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, UserCache usercache, WorldLoadListenerFactory worldloadlistenerfactory, String s) {
         super("Server");
-        this.ae = new ResourceManager(EnumResourcePackType.SERVER_DATA, this.serverThread);
         SERVER = this; // Paper - better singleton
+        this.ae = new ResourceManager(EnumResourcePackType.SERVER_DATA, this.serverThread);
         this.resourcePackRepository = new ResourcePackRepository<>(ResourcePackLoader::new);
         this.ai = new CraftingManager();
         this.aj = new TagRegistry();
@@ -488,7 +473,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         }
         // CraftBukkit end
 
-        if (!worlddata.u()) {
+        if (!worlddata.v()) {
             try {
                 worldserver1.a(worldsettings);
                 if (worlddata.getType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
@@ -524,7 +509,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         worlddata.g(false);
         worlddata.setDifficulty(EnumDifficulty.PEACEFUL);
         worlddata.e(true);
-        ((GameRules.GameRuleBoolean) worlddata.v().get(GameRules.DO_DAYLIGHT_CYCLE)).a(false, this);
+        worlddata.w().set("doDaylightCycle", "false", this);
     }
 
     protected void a(File file, WorldData worlddata) {
@@ -536,21 +521,23 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
             bukkitDataPackFolder.mkdirs();
         }
         File mcMeta = new File(bukkitDataPackFolder, "pack.mcmeta");
-        try {
-            com.google.common.io.Files.write("{\n"
-                    + "    \"pack\": {\n"
-                    + "        \"description\": \"Data pack for resources provided by Bukkit plugins\",\n"
-                    + "        \"pack_format\": " + SharedConstants.a().getPackVersion() + "\n"
-                    + "    }\n"
-                    + "}\n", mcMeta, com.google.common.base.Charsets.UTF_8);
-        } catch (IOException ex) {
-            throw new RuntimeException("Could not initialize Bukkit datapack", ex);
+        if (!mcMeta.exists()) {
+            try {
+                com.google.common.io.Files.write("{\n"
+                        + "    \"pack\": {\n"
+                        + "        \"description\": \"Data pack for resources provided by Bukkit plugins\",\n"
+                        + "        \"pack_format\": 1\n"
+                        + "    }\n"
+                        + "}", mcMeta, com.google.common.base.Charsets.UTF_8);
+            } catch (IOException ex) {
+                throw new RuntimeException("Could not initialize Bukkit datapack", ex);
+            }
         }
         // CraftBukkit end
         this.resourcePackRepository.a((ResourcePackSource) this.resourcePackFolder);
         this.resourcePackRepository.a();
         List<ResourcePackLoader> list = Lists.newArrayList();
-        Iterator iterator = worlddata.O().iterator();
+        Iterator iterator = worlddata.P().iterator();
 
         while (iterator.hasNext()) {
             String s = (String) iterator.next();
@@ -664,9 +651,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
 
     public abstract int j();
 
-    public abstract int k();
-
-    public abstract boolean l();
+    public abstract boolean k();
 
     public boolean saveChunks(boolean flag, boolean flag1, boolean flag2) {
         boolean flag3 = false;
@@ -683,18 +668,14 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
             } catch (ExceptionWorldConflict exceptionworldconflict) {
                 MinecraftServer.LOGGER.warn(exceptionworldconflict.getMessage());
             }
-        }
 
-        // CraftBukkit start - moved to WorldServer.save
-        /*
-        WorldServer worldserver1 = this.getWorldServer(DimensionManager.OVERWORLD);
+        WorldServer worldserver1 = worldserver; // CraftBukkit
         WorldData worlddata = worldserver1.getWorldData();
 
         worldserver1.getWorldBorder().a(worlddata);
         worlddata.c(this.getBossBattleCustomData().c());
         worldserver1.getDataManager().saveWorldData(worlddata, this.getPlayerList().r());
-        */
-        // CraftBukkit end
+        } // CraftBukkit - moved down
         return flag3;
     }
 
@@ -864,6 +845,53 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     // Paper End
     // Spigot End
 
+    public int tickingThreadCount = Runtime.getRuntime().availableProcessors()-1;
+    long tickDuration = 50_000_000L; // ns
+    volatile int handlerThreads = 0;
+    private void scheduleChunkHandler(int threadId) {
+        handlerThreads++;
+
+        Thread thread = new Thread("Partition Handler #" + threadId) {
+            public void run() {
+                MinecraftServer.LOGGER.warn("MCMT | Running Partition Thread #" + threadId);
+
+                long ticks = 0;
+                long start = System.nanoTime();
+                while (isRunning()) {
+                    long t1 = System.nanoTime();
+
+                    for(WorldServer world : getWorlds()) {
+                        // Extremely naive scheduler that just round robin schedules work, one partition per thread
+                        // With 1 threads, all partitions will be handled by thread 0
+                        // With 2 threads, partition 0, 2, 4, 6, ..., n % 2 == 0 will be handled by thread 0
+                        //                 partition 1, 3, 5, 7, ..., n % 2 == 1 will be handled by thread 1
+
+                        for(int i = 0; i< world.getPartitionManager().getPartitions().size(); i++) {
+                            if (i % handlerThreads == threadId) {
+                                world.tickPartition(i);
+                            }
+                        }
+                    }
+                    long elapsed = (System.nanoTime() - t1); // ns
+                    LockSupport.parkNanos("waiting for " + this.getName(), Math.max(0, tickDuration - elapsed));
+
+                    ticks++;
+                    double elapsedSinceLastLog = Math.max(1.0, (System.nanoTime()-start)/1_000_000_000.0);
+                    double tps = (ticks / elapsedSinceLastLog);
+                    if (elapsedSinceLastLog > 9) {
+                        getServer().threadsTPS.set(threadId, tps);
+                        MinecraftServer.LOGGER.warn("MCMT | Partition Thread #" + threadId + " TPS: " + tps);
+                        start = System.nanoTime();
+                        ticks = 0;
+                    }
+                }
+
+                MinecraftServer.LOGGER.warn("MCMT | Exiting Partition Thread #" + threadId);
+            }
+        };
+        thread.start();
+    }
+
     public void run() {
         try {
             if (this.init()) {
@@ -877,6 +905,13 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
                 Arrays.fill( recentTps, 20 );
                 long start = System.nanoTime(), curTime, tickSection = start; // Paper - Further improve server tick loop
                 lastTick = start - TICK_TIME; // Paper
+
+                this.threadsTPS = new ArrayList<>();
+                for (int i = 0; i<tickingThreadCount; i++) {
+                    scheduleChunkHandler(i);
+                    threadsTPS.add(Double.NaN);
+                }
+
                 while (this.isRunning) {
                     long i = ((curTime = System.nanoTime()) / (1000L * 1000L)) - this.nextTick; // Paper
 
@@ -943,7 +978,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
                 crashreport = this.b(new CrashReport("Exception in server tick loop", throwable));
             }
 
-            File file = new File(new File(this.t(), "crash-reports"), "crash-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + "-server.txt");
+            File file = new File(new File(this.s(), "crash-reports"), "crash-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + "-server.txt");
 
             if (crashreport.a(file)) {
                 MinecraftServer.LOGGER.error("This crash report has been saved to: {}", file.getAbsolutePath());
@@ -985,7 +1020,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     // CraftBukkit end
 
     protected void sleepForTick() {
-        //this.executeAll(); // Paper - move this into the tick method for timings
+        this.executeAll();
         this.awaitTasks(() -> {
             return !this.canSleepForTick();
         });
@@ -1002,13 +1037,13 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
 
     @Override
     public boolean executeNext() {
-        boolean flag = this.aX();
+        boolean flag = this.aW();
 
         this.ac = flag;
         return flag;
     }
 
-    private boolean aX() {
+    private boolean aW() {
         if (super.executeNext()) {
             return true;
         } else {
@@ -1056,7 +1091,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
 
     }
 
-    public File t() {
+    public File s() {
         return new File(".");
     }
 
@@ -1086,28 +1121,14 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
             this.serverPing.b().a(agameprofile);
         }
 
-        //if (autosavePeriod > 0 && this.ticks % autosavePeriod == 0) { // CraftBukkit // Paper - move down
+        if (autosavePeriod > 0 && this.ticks % autosavePeriod == 0) { // CraftBukkit
             MinecraftServer.LOGGER.debug("Autosave started");
-            serverAutoSave = (autosavePeriod > 0 && this.ticks % autosavePeriod == 0); // Paper
             this.methodProfiler.enter("save");
-            if (autosavePeriod > 0 && this.ticks % autosavePeriod == 0) { // Paper
             this.playerList.savePlayers();
-            }// Paper
-            // Paper start
-            for (WorldServer world : getWorlds()) {
-                if (world.paperConfig.autoSavePeriod > 0) {
-                    try {
-                        world.save(null, false, world.isSavingDisabled());
-                    } catch (ExceptionWorldConflict exceptionWorldConflict) {
-                        MinecraftServer.LOGGER.warn(exceptionWorldConflict.getMessage());
-                    }
-                }
-            }
-            // Paper end
-
+            this.saveChunks(true, false, false);
             this.methodProfiler.exit();
             MinecraftServer.LOGGER.debug("Autosave finished");
-        //} // Paper
+        }
 
         this.methodProfiler.enter("snooper");
         if (((DedicatedServer) this).getDedicatedServerProperties().snooperEnabled && !this.snooper.d() && this.ticks > 100) { // Spigot
@@ -1129,11 +1150,6 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         this.methodProfiler.exit();
         org.spigotmc.WatchdogThread.tick(); // Spigot
         this.slackActivityAccountant.tickEnded(l); // Spigot
-        // Paper start - move executeAll() into full server tick timing
-        try (co.aikar.timings.Timing ignored = MinecraftTimings.processTasksTimer.startTiming()) {
-            this.executeAll();
-        }
-        // Paper end
         // Paper start
         long endTime = System.nanoTime();
         long remaining = (TICK_TIME - (endTime - lastTick)) - catchupTime;
@@ -1151,7 +1167,6 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         this.getFunctionData().tick();
         MinecraftTimings.commandFunctionsTimer.stopTiming(); // Spigot // Paper
         this.methodProfiler.exitEnter("levels");
-        Iterator iterator = this.getWorlds().iterator();
 
         // CraftBukkit start
         // Run tasks that are waiting on processing
@@ -1165,7 +1180,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         // Send time updates to everyone, it will get the right time from the world the player is in.
         // Paper start - optimize time updates
         for (final WorldServer world : this.getWorlds()) {
-            final boolean doDaylight = world.getGameRules().getBoolean(GameRules.DO_DAYLIGHT_CYCLE);
+            final boolean doDaylight = world.getGameRules().getBoolean("doDaylightCycle");
             final long dayTime = world.getDayTime();
             long worldTime = world.getTime();
             final PacketPlayOutUpdateTime worldPacket = new PacketPlayOutUpdateTime(worldTime, dayTime, doDaylight);
@@ -1183,11 +1198,15 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         // Paper end
         MinecraftTimings.timeUpdateTimer.stopTiming(); // Spigot // Paper
 
-        while (iterator.hasNext()) {
-            WorldServer worldserver = (WorldServer) iterator.next();
+        // WorldServer worldserver; // CraftBukkit - dropped down
+        long i;
 
+        // CraftBukkit - dropTickTime
+        for (Iterator iterator = this.getWorlds().iterator(); iterator.hasNext();) {
+            WorldServer worldserver = (WorldServer) iterator.next();
             worldserver.hasPhysicsEvent =  org.bukkit.event.block.BlockPhysicsEvent.getHandlerList().getRegisteredListeners().length > 0; // Paper
             TileEntityHopper.skipHopperEvents = worldserver.paperConfig.disableHopperMoveEvents || org.bukkit.event.inventory.InventoryMoveItemEvent.getHandlerList().getRegisteredListeners().length == 0; // Paper
+            i = SystemUtils.getMonotonicNanos();
             if (true || worldserver.worldProvider.getDimensionManager() == DimensionManager.OVERWORLD || this.getAllowNether()) { // CraftBukkit
                 this.methodProfiler.a(() -> {
                     return worldserver.getWorldData().getName() + " " + IRegistry.DIMENSION_TYPE.getKey(worldserver.worldProvider.getDimensionManager());
@@ -1195,7 +1214,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
                 /* Drop global time updates
                 if (this.ticks % 20 == 0) {
                     this.methodProfiler.enter("timeSync");
-                    this.playerList.a((Packet) (new PacketPlayOutUpdateTime(worldserver.getTime(), worldserver.getDayTime(), worldserver.getGameRules().getBoolean(GameRules.DO_DAYLIGHT_CYCLE))), worldserver.worldProvider.getDimensionManager());
+                    this.playerList.a((Packet) (new PacketPlayOutUpdateTime(worldserver.getTime(), worldserver.getDayTime(), worldserver.getGameRules().getBoolean("doDaylightCycle"))), worldserver.worldProvider.getDimensionManager());
                     this.methodProfiler.exit();
                 }
                 // CraftBukkit end */
@@ -1231,16 +1250,16 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         this.getServerConnection().c();
         MinecraftTimings.connectionTimer.stopTiming(); // Spigot
         this.methodProfiler.exitEnter("players");
-        MinecraftTimings.playerListTimer.startTiming(); // Spigot // Paper
+        MinecraftTimings.playerListTimer.startTiming(); // Spigot
         this.playerList.tick();
-        MinecraftTimings.playerListTimer.stopTiming(); // Spigot // Paper
+        MinecraftTimings.playerListTimer.stopTiming(); // Spigot
         this.methodProfiler.exitEnter("server gui refresh");
 
-        MinecraftTimings.tickablesTimer.startTiming(); // Spigot // Paper
-        for (int i = 0; i < this.tickables.size(); ++i) {
-            ((Runnable) this.tickables.get(i)).run();
+        MinecraftTimings.tickablesTimer.startTiming(); // Spigot
+        for (int j = 0; j < this.tickables.size(); ++j) {
+            ((Runnable) this.tickables.get(j)).run();
         }
-        MinecraftTimings.tickablesTimer.stopTiming(); // Spigot // Paper
+        MinecraftTimings.tickablesTimer.stopTiming(); // Spigot
 
         this.methodProfiler.exit();
     }
@@ -1327,7 +1346,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
             boolean flag = !optionset.has(optionspec) && !optionset.valuesOf(nonoptionargumentspec).contains("nogui");
 
             if (flag && !GraphicsEnvironment.isHeadless()) {
-                dedicatedserver.aZ();
+                dedicatedserver.aY();
             }
 
             dedicatedserver.startServerThread();
@@ -1387,7 +1406,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     }
 
     public File d(String s) {
-        return new File(this.t(), s);
+        return new File(this.s(), s);
     }
 
     public void info(String s) {
@@ -1476,7 +1495,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         return crashreport;
     }
 
-    public boolean F() {
+    public boolean E() {
         return true; // CraftBukkit
     }
 
@@ -1604,7 +1623,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         }
 
         mojangstatisticsgenerator.a("uses_auth", this.onlineMode);
-        mojangstatisticsgenerator.a("gui_state", this.ai() ? "enabled" : "disabled");
+        mojangstatisticsgenerator.a("gui_state", this.ah() ? "enabled" : "disabled");
         mojangstatisticsgenerator.a("run_time", (SystemUtils.getMonotonicMillis() - mojangstatisticsgenerator.g()) / 60L * 1000L);
         mojangstatisticsgenerator.a("avg_tick_ms", (int) (MathHelper.a(this.f) * 1.0E-6D));
         int i = 0;
@@ -1623,7 +1642,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
                 mojangstatisticsgenerator.a("world[" + i + "][generator_name]", worlddata.getType().name());
                 mojangstatisticsgenerator.a("world[" + i + "][generator_version]", worlddata.getType().getVersion());
                 mojangstatisticsgenerator.a("world[" + i + "][height]", this.G);
-                mojangstatisticsgenerator.a("world[" + i + "][chunks_loaded]", worldserver.getChunkProvider().h());
+                mojangstatisticsgenerator.a("world[" + i + "][chunks_loaded]", worldserver.getChunkProvider().g());
                 ++i;
             }
         }
@@ -1631,7 +1650,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         mojangstatisticsgenerator.a("worlds", i);
     }
 
-    public abstract boolean S();
+    public abstract boolean R();
 
     public boolean getOnlineMode() {
         return this.onlineMode;
@@ -1641,7 +1660,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         this.onlineMode = flag;
     }
 
-    public boolean U() {
+    public boolean T() {
         return this.A;
     }
 
@@ -1661,7 +1680,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         return this.spawnNPCs;
     }
 
-    public abstract boolean X();
+    public abstract boolean W();
 
     public void setSpawnNPCs(boolean flag) {
         this.spawnNPCs = flag;
@@ -1713,7 +1732,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         this.playerList = playerlist;
     }
 
-    public abstract boolean af();
+    public abstract boolean ae();
 
     public void setGamemode(EnumGamemode enumgamemode) {
         Iterator iterator = this.getWorlds().iterator();
@@ -1731,17 +1750,17 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         return this.serverConnection == null ? this.serverConnection = new ServerConnection(this) : this.serverConnection; // Spigot
     }
 
-    public boolean ai() {
+    public boolean ah() {
         return false;
     }
 
     public abstract boolean a(EnumGamemode enumgamemode, boolean flag, int i);
 
-    public int aj() {
+    public int ai() {
         return this.ticks;
     }
 
-    public void ak() {
+    public void aj() {
         this.T = true;
     }
 
@@ -1790,7 +1809,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         this.Z = 0L;
     }
 
-    public int aw() {
+    public int av() {
         return 29999984;
     }
 
@@ -1804,20 +1823,20 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         return this.serverThread;
     }
 
-    public int az() {
+    public int ay() {
         return 256;
     }
 
-    public long aA() {
+    public long az() {
         return this.nextTick;
     }
 
-    public DataFixer aB() {
+    public DataFixer aA() {
         return this.dataConverterManager;
     }
 
     public int a(@Nullable WorldServer worldserver) {
-        return worldserver != null ? worldserver.getGameRules().getInt(GameRules.SPAWN_RADIUS) : 10;
+        return worldserver != null ? worldserver.getGameRules().c("spawnRadius") : 10;
     }
 
     public AdvancementDataWorld getAdvancementData() {
@@ -1846,7 +1865,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         while (iterator.hasNext()) {
             ResourcePackLoader resourcepackloader = (ResourcePackLoader) iterator.next();
 
-            if (!worlddata.N().contains(resourcepackloader.e()) && !list.contains(resourcepackloader)) {
+            if (!worlddata.O().contains(resourcepackloader.e()) && !list.contains(resourcepackloader)) {
                 MinecraftServer.LOGGER.info("Found new data pack {}, loading it automatically", resourcepackloader.e());
                 resourcepackloader.h().a(list, resourcepackloader, (resourcepackloader1) -> {
                     return resourcepackloader1;
@@ -1860,31 +1879,24 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         this.resourcePackRepository.d().forEach((resourcepackloader1) -> {
             list1.add(resourcepackloader1.d());
         });
-        CompletableFuture<Unit> completablefuture = this.ae.a(this.executorService, this, list1, MinecraftServer.i);
+        CompletableFuture<Unit> completablefuture = this.ae.a(this.executorService, this, list1, CompletableFuture.completedFuture(Unit.INSTANCE));
 
         this.awaitTasks(completablefuture::isDone);
-
-        try {
-            completablefuture.get();
-        } catch (Exception exception) {
-            MinecraftServer.LOGGER.error("Failed to reload data packs", exception);
-        }
-
+        worlddata.P().clear();
         worlddata.O().clear();
-        worlddata.N().clear();
         this.resourcePackRepository.d().forEach((resourcepackloader1) -> {
-            worlddata.O().add(resourcepackloader1.e());
+            worlddata.P().add(resourcepackloader1.e());
         });
         this.resourcePackRepository.b().forEach((resourcepackloader1) -> {
             if (!this.resourcePackRepository.d().contains(resourcepackloader1)) {
-                worlddata.N().add(resourcepackloader1.e());
+                worlddata.O().add(resourcepackloader1.e());
             }
 
         });
     }
 
     public void a(CommandListenerWrapper commandlistenerwrapper) {
-        if (this.aQ()) {
+        if (this.aP()) {
             PlayerList playerlist = commandlistenerwrapper.getServer().getPlayerList();
             WhiteList whitelist = playerlist.getWhitelist();
 
@@ -1954,7 +1966,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         return this.al;
     }
 
-    public boolean aQ() {
+    public boolean aP() {
         return this.aq;
     }
 
@@ -1962,10 +1974,6 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         this.aq = flag;
     }
 
-    public float aR() {
-        return this.at;
-    }
-
     public int a(GameProfile gameprofile) {
         if (this.getPlayerList().isOp(gameprofile)) {
             OpListEntry oplistentry = (OpListEntry) this.getPlayerList().getOPs().get(gameprofile);
@@ -1980,204 +1988,12 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         return this.methodProfiler;
     }
 
-    public Executor aU() {
+    public Executor aT() {
         return this.executorService;
     }
 
     public abstract boolean b(GameProfile gameprofile);
 
-    public void a(java.nio.file.Path java_nio_file_path) throws IOException {
-        java.nio.file.Path java_nio_file_path1 = java_nio_file_path.resolve("levels");
-        Iterator iterator = this.worldServer.entrySet().iterator();
-
-        while (iterator.hasNext()) {
-            Entry<DimensionManager, WorldServer> entry = (Entry) iterator.next();
-            MinecraftKey minecraftkey = DimensionManager.a((DimensionManager) entry.getKey());
-            java.nio.file.Path java_nio_file_path2 = java_nio_file_path1.resolve(minecraftkey.getNamespace()).resolve(minecraftkey.getKey());
-
-            Files.createDirectories(java_nio_file_path2);
-            ((WorldServer) entry.getValue()).a(java_nio_file_path2);
-        }
-
-        this.d(java_nio_file_path.resolve("gamerules.txt"));
-        this.e(java_nio_file_path.resolve("classpath.txt"));
-        this.c(java_nio_file_path.resolve("example_crash.txt"));
-        this.b(java_nio_file_path.resolve("stats.txt"));
-        this.f(java_nio_file_path.resolve("threads.txt"));
-    }
-
-    private void b(java.nio.file.Path java_nio_file_path) throws IOException {
-        BufferedWriter bufferedwriter = Files.newBufferedWriter(java_nio_file_path);
-        Throwable throwable = null;
-
-        try {
-            bufferedwriter.write(String.format("pending_tasks: %d\n", this.be()));
-            bufferedwriter.write(String.format("average_tick_time: %f\n", this.aR()));
-            bufferedwriter.write(String.format("tick_times: %s\n", Arrays.toString(this.f)));
-            bufferedwriter.write(String.format("queue: %s\n", SystemUtils.e()));
-        } catch (Throwable throwable1) {
-            throwable = throwable1;
-            throw throwable1;
-        } finally {
-            if (bufferedwriter != null) {
-                if (throwable != null) {
-                    try {
-                        bufferedwriter.close();
-                    } catch (Throwable throwable2) {
-                        throwable.addSuppressed(throwable2);
-                    }
-                } else {
-                    bufferedwriter.close();
-                }
-            }
-
-        }
-
-    }
-
-    private void c(java.nio.file.Path java_nio_file_path) throws IOException {
-        CrashReport crashreport = new CrashReport("Server dump", new Exception("dummy"));
-
-        this.b(crashreport);
-        BufferedWriter bufferedwriter = Files.newBufferedWriter(java_nio_file_path);
-        Throwable throwable = null;
-
-        try {
-            bufferedwriter.write(crashreport.e());
-        } catch (Throwable throwable1) {
-            throwable = throwable1;
-            throw throwable1;
-        } finally {
-            if (bufferedwriter != null) {
-                if (throwable != null) {
-                    try {
-                        bufferedwriter.close();
-                    } catch (Throwable throwable2) {
-                        throwable.addSuppressed(throwable2);
-                    }
-                } else {
-                    bufferedwriter.close();
-                }
-            }
-
-        }
-
-    }
-
-    private void d(java.nio.file.Path java_nio_file_path) throws IOException {
-        BufferedWriter bufferedwriter = Files.newBufferedWriter(java_nio_file_path);
-        Throwable throwable = null;
-
-        try {
-            final List<String> list = Lists.newArrayList();
-            final GameRules gamerules = this.getGameRules();
-
-            GameRules.a(new GameRules.GameRuleVisitor() {
-                @Override
-                public <T extends GameRules.GameRuleValue<T>> void a(GameRules.GameRuleKey<T> gamerules_gamerulekey, GameRules.GameRuleDefinition<T> gamerules_gameruledefinition) {
-                    list.add(String.format("%s=%s\n", gamerules_gamerulekey.a(), gamerules.get(gamerules_gamerulekey).toString()));
-                }
-            });
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                String s = (String) iterator.next();
-
-                bufferedwriter.write(s);
-            }
-        } catch (Throwable throwable1) {
-            throwable = throwable1;
-            throw throwable1;
-        } finally {
-            if (bufferedwriter != null) {
-                if (throwable != null) {
-                    try {
-                        bufferedwriter.close();
-                    } catch (Throwable throwable2) {
-                        throwable.addSuppressed(throwable2);
-                    }
-                } else {
-                    bufferedwriter.close();
-                }
-            }
-
-        }
-
-    }
-
-    private void e(java.nio.file.Path java_nio_file_path) throws IOException {
-        BufferedWriter bufferedwriter = Files.newBufferedWriter(java_nio_file_path);
-        Throwable throwable = null;
-
-        try {
-            String s = System.getProperty("java.class.path");
-            String s1 = System.getProperty("path.separator");
-            Iterator iterator = Splitter.on(s1).split(s).iterator();
-
-            while (iterator.hasNext()) {
-                String s2 = (String) iterator.next();
-
-                bufferedwriter.write(s2);
-                bufferedwriter.write("\n");
-            }
-        } catch (Throwable throwable1) {
-            throwable = throwable1;
-            throw throwable1;
-        } finally {
-            if (bufferedwriter != null) {
-                if (throwable != null) {
-                    try {
-                        bufferedwriter.close();
-                    } catch (Throwable throwable2) {
-                        throwable.addSuppressed(throwable2);
-                    }
-                } else {
-                    bufferedwriter.close();
-                }
-            }
-
-        }
-
-    }
-
-    private void f(java.nio.file.Path java_nio_file_path) throws IOException {
-        ThreadMXBean threadmxbean = ManagementFactory.getThreadMXBean();
-        ThreadInfo[] athreadinfo = threadmxbean.dumpAllThreads(true, true);
-
-        Arrays.sort(athreadinfo, Comparator.comparing(ThreadInfo::getThreadName));
-        BufferedWriter bufferedwriter = Files.newBufferedWriter(java_nio_file_path);
-        Throwable throwable = null;
-
-        try {
-            ThreadInfo[] athreadinfo1 = athreadinfo;
-            int i = athreadinfo.length;
-
-            for (int j = 0; j < i; ++j) {
-                ThreadInfo threadinfo = athreadinfo1[j];
-
-                bufferedwriter.write(threadinfo.toString());
-                bufferedwriter.write(10);
-            }
-        } catch (Throwable throwable1) {
-            throwable = throwable1;
-            throw throwable1;
-        } finally {
-            if (bufferedwriter != null) {
-                if (throwable != null) {
-                    try {
-                        bufferedwriter.close();
-                    } catch (Throwable throwable2) {
-                        throwable.addSuppressed(throwable2);
-                    }
-                } else {
-                    bufferedwriter.close();
-                }
-            }
-
-        }
-
-    }
-
     // CraftBukkit start
     @Override
     public boolean isMainThread() {
diff --git a/src/main/java/net/minecraft/server/MobEffectList.java b/src/main/java/net/minecraft/server/MobEffectList.java
index 233eaf67..0911b4f0 100644
--- a/src/main/java/net/minecraft/server/MobEffectList.java
+++ b/src/main/java/net/minecraft/server/MobEffectList.java
@@ -62,8 +62,8 @@ public class MobEffectList {
                 ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutUpdateHealth(((EntityPlayer) entityhuman).getBukkitEntity().getScaledHealth(), entityhuman.getFoodData().foodLevel, entityhuman.getFoodData().saturationLevel));
                 // CraftBukkit end
             }
-        } else if ((this != MobEffects.HEAL || entityliving.cC()) && (this != MobEffects.HARM || !entityliving.cC())) {
-            if (this == MobEffects.HARM && !entityliving.cC() || this == MobEffects.HEAL && entityliving.cC()) {
+        } else if ((this != MobEffects.HEAL || entityliving.cB()) && (this != MobEffects.HARM || !entityliving.cB())) {
+            if (this == MobEffects.HARM && !entityliving.cB() || this == MobEffects.HEAL && entityliving.cB()) {
                 entityliving.damageEntity(DamageSource.MAGIC, (float) (6 << i));
             }
         } else {
@@ -75,8 +75,8 @@ public class MobEffectList {
     public void applyInstantEffect(@Nullable Entity entity, @Nullable Entity entity1, EntityLiving entityliving, int i, double d0) {
         int j;
 
-        if ((this != MobEffects.HEAL || entityliving.cC()) && (this != MobEffects.HARM || !entityliving.cC())) {
-            if ((this != MobEffects.HARM || entityliving.cC()) && (this != MobEffects.HEAL || !entityliving.cC())) {
+        if ((this != MobEffects.HEAL || entityliving.cB()) && (this != MobEffects.HARM || !entityliving.cB())) {
+            if ((this != MobEffects.HARM || entityliving.cB()) && (this != MobEffects.HEAL || !entityliving.cB())) {
                 this.tick(entityliving, i);
             } else {
                 j = (int) (d0 * (double) (6 << i) + 0.5D);
@@ -149,7 +149,7 @@ public class MobEffectList {
             AttributeInstance attributeinstance = attributemapbase.a((IAttribute) entry.getKey());
 
             if (attributeinstance != null) {
-                attributeinstance.removeModifier((AttributeModifier) entry.getValue());
+                attributeinstance.c((AttributeModifier) entry.getValue());
             }
         }
 
@@ -165,14 +165,14 @@ public class MobEffectList {
             if (attributeinstance != null) {
                 AttributeModifier attributemodifier = (AttributeModifier) entry.getValue();
 
-                attributeinstance.removeModifier(attributemodifier);
-                attributeinstance.addModifier(new AttributeModifier(attributemodifier.getUniqueId(), this.c() + " " + i, this.a(i, attributemodifier), attributemodifier.getOperation()));
+                attributeinstance.c(attributemodifier);
+                attributeinstance.b(new AttributeModifier(attributemodifier.a(), this.c() + " " + i, this.a(i, attributemodifier), attributemodifier.c()));
             }
         }
 
     }
 
     public double a(int i, AttributeModifier attributemodifier) {
-        return attributemodifier.getAmount() * (double) (i + 1);
+        return attributemodifier.d() * (double) (i + 1);
     }
 }
diff --git a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
index b05f6c2f..e9bcb5ab 100644
--- a/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
+++ b/src/main/java/net/minecraft/server/MobSpawnerAbstract.java
@@ -104,11 +104,9 @@ public abstract class MobSpawnerAbstract {
                     double d4 = j >= 2 ? nbttaglist.h(1) : (double) (blockposition.getY() + world.random.nextInt(3) - 1);
                     double d5 = j >= 3 ? nbttaglist.h(2) : (double) blockposition.getZ() + (world.random.nextDouble() - world.random.nextDouble()) * (double) this.spawnRange + 0.5D;
 
-                    if (world.c(((EntityTypes) optional.get()).a(d3, d4, d5)) && EntityPositionTypes.a((EntityTypes) optional.get(), world.getMinecraftWorld(), EnumMobSpawn.SPAWNER, new BlockPosition(d3, d4, d5), world.getRandom())) {
                     // Paper start
                     EntityTypes entityType = optional.get();
-                    String key = EntityTypes.getName(entityType).getKey();
-
+                    String key = entityType.getKey().getKey();
                     org.bukkit.entity.EntityType type = org.bukkit.entity.EntityType.fromName(key);
                     if (type != null) {
                         com.destroystokyo.paper.event.entity.PreSpawnerSpawnEvent event;
@@ -127,6 +125,7 @@ public abstract class MobSpawnerAbstract {
                     }
                     // Paper end
 
+                    if (world.c(((EntityTypes) optional.get()).a(d3, d4, d5))) {
                         Entity entity = EntityTypes.a(nbttagcompound, world, (entity1) -> {
                             entity1.setPositionRotation(d3, d4, d5, entity1.yaw, entity1.pitch);
                             return entity1;
diff --git a/src/main/java/net/minecraft/server/Navigation.java b/src/main/java/net/minecraft/server/Navigation.java
index fd1dbb10..bc30e3f3 100644
--- a/src/main/java/net/minecraft/server/Navigation.java
+++ b/src/main/java/net/minecraft/server/Navigation.java
@@ -24,11 +24,11 @@ public class Navigation extends NavigationAbstract {
 
     @Override
     protected Vec3D b() {
-        return new Vec3D(this.a.locX, (double) this.t(), this.a.locZ);
+        return new Vec3D(this.a.locX, (double) this.s(), this.a.locZ);
     }
 
     @Override
-    public PathEntity a(BlockPosition blockposition, int i) {
+    public PathEntity b(BlockPosition blockposition) {
         BlockPosition blockposition1;
 
         if (this.b.getType(blockposition).isAir()) {
@@ -37,7 +37,7 @@ public class Navigation extends NavigationAbstract {
             }
 
             if (blockposition1.getY() > 0) {
-                return super.a(blockposition1.up(), i);
+                return super.b(blockposition1.up());
             }
 
             while (blockposition1.getY() < this.b.getBuildHeight() && this.b.getType(blockposition1).isAir()) {
@@ -48,22 +48,22 @@ public class Navigation extends NavigationAbstract {
         }
 
         if (!this.b.getType(blockposition).getMaterial().isBuildable()) {
-            return super.a(blockposition, i);
+            return super.b(blockposition);
         } else {
             for (blockposition1 = blockposition.up(); blockposition1.getY() < this.b.getBuildHeight() && this.b.getType(blockposition1).getMaterial().isBuildable(); blockposition1 = blockposition1.up()) {
                 ;
             }
 
-            return super.a(blockposition1, i);
+            return super.b(blockposition1);
         }
     }
 
     @Override
-    public PathEntity a(Entity entity, int i) {
-        return this.a(new BlockPosition(entity), entity, i); // Paper - Forward target entity
+    public PathEntity a(Entity entity) {
+        return this.b(new BlockPosition(entity), entity); // Paper - Forward target entity
     }
 
-    private int t() {
+    private int s() {
         if (this.a.isInWater() && this.r()) {
             int i = MathHelper.floor(this.a.getBoundingBox().minY);
             Block block = this.b.getType(new BlockPosition(this.a.locX, (double) i, this.a.locZ)).getBlock();
diff --git a/src/main/java/net/minecraft/server/NavigationAbstract.java b/src/main/java/net/minecraft/server/NavigationAbstract.java
index 66e10108..856ff22b 100644
--- a/src/main/java/net/minecraft/server/NavigationAbstract.java
+++ b/src/main/java/net/minecraft/server/NavigationAbstract.java
@@ -1,9 +1,5 @@
 package net.minecraft.server;
 
-import com.google.common.collect.ImmutableSet;
-import java.util.Set;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
 import javax.annotation.Nullable;
 
 public abstract class NavigationAbstract {
@@ -26,8 +22,7 @@ public abstract class NavigationAbstract {
     protected long n;
     protected PathfinderAbstract o;
     private BlockPosition q;
-    private int r;
-    private Pathfinder s; public Pathfinder getPathfinder() { return this.s; } // Paper - OBFHELPER
+    private Pathfinder r; public Pathfinder getPathfinder() { return r; } // Paper - OBFHELPER
 
     public NavigationAbstract(EntityInsentient entityinsentient, World world) {
         this.g = Vec3D.a;
@@ -36,7 +31,7 @@ public abstract class NavigationAbstract {
         this.a = entityinsentient;
         this.b = world;
         this.p = entityinsentient.getAttributeInstance(GenericAttributes.FOLLOW_RANGE);
-        this.s = this.a(MathHelper.floor(this.p.getValue() * 16.0D));
+        this.r = this.a(MathHelper.floor(this.p.getValue() * 16.0D));
     }
 
     public BlockPosition h() {
@@ -61,7 +56,7 @@ public abstract class NavigationAbstract {
         if (this.b.getTime() - this.n > 20L) {
             if (this.q != null) {
                 this.c = null;
-                this.c = this.a(this.q, this.r);
+                this.c = this.b(this.q);
                 this.n = this.b.getTime();
                 this.m = false;
             }
@@ -72,89 +67,87 @@ public abstract class NavigationAbstract {
     }
 
     @Nullable
-    public final PathEntity calculateDestination(double d0, double d1, double d2) { return a(d0, d1, d2, 0); } public final PathEntity a(double d0, double d1, double d2, int i) { // Paper - OBFHELPER
-        return this.a(new BlockPosition(d0, d1, d2), i);
+    public final PathEntity calculateDestination(double d0, double d1, double d2) { return a(d0, d1, d2); } @Nullable public final PathEntity a(double d0, double d1, double d2) { // Paper - OBFHELPER
+        return this.b(new BlockPosition(d0, d1, d2));
     }
 
-    @Nullable
-    public PathEntity a(Stream<BlockPosition> stream, int i) {
-        return this.a((Set) stream.collect(Collectors.toSet()), 8, false, i);
-    }
-
-    @Nullable
-    public PathEntity a(BlockPosition blockposition, int i) {
-        // Paper start - add target parameter
-        return this.a(blockposition, null, i);
-    }
-    @Nullable public PathEntity a(BlockPosition blockposition, Entity target, int i) {
-        return this.a(ImmutableSet.of(blockposition), target, 8, false, i);
+    // Paper start - Add target entity parameter for path find event
+    @Nullable public PathEntity b(BlockPosition blockposition) { return this.b(blockposition, null); }
+    @Nullable public PathEntity b(BlockPosition blockposition, Entity target) {
         // Paper end
+        float f = (float) blockposition.getX() + 0.5F;
+        float f1 = (float) blockposition.getY() + 0.5F;
+        float f2 = (float) blockposition.getZ() + 0.5F;
+
+        return this.a(blockposition, target, (double) f, (double) f1, (double) f2, 8, false); // Paper - Path find event
     }
 
     @Nullable
-    public final PathEntity calculateDestination(Entity entity) { return a(entity, 0); }  public PathEntity a(Entity entity, int i) {
-        return this.a(ImmutableSet.of(new BlockPosition(entity)), entity, 16, true, i); // Paper
+    public PathEntity calculateDestination(Entity entity) { return a(entity); } @Nullable public PathEntity a(Entity entity) { // Paper - OBFHELPER
+        BlockPosition blockposition = new BlockPosition(entity);
+        double d0 = entity.locX;
+        double d1 = entity.getBoundingBox().minY;
+        double d2 = entity.locZ;
+
+        return this.a(blockposition, entity, d0, d1, d2, 16, true); // Paper - Path find event
     }
 
     @Nullable
-    // Paper start - Add target
-    protected PathEntity a(Set<BlockPosition> set, int i, boolean flag, int j) {
-        return this.a(set, null, i, flag, j);
-    }
-    @Nullable protected PathEntity a(Set<BlockPosition> set, Entity target, int i, boolean flag, int j) {
-        // Paper end
-        if (set.isEmpty()) {
-            return null;
-        } else if (this.a.locY < 0.0D) {
+    protected PathEntity a(BlockPosition blockposition, double d0, double d1, double d2, int i, boolean flag) { return this.a(blockposition, null, d0, d1, d2, i, flag); }
+    @Nullable protected PathEntity a(BlockPosition blockposition, Entity target, double d0, double d1, double d2, int i, boolean flag) {
+        if (!getEntity().getWorld().getWorldBorder().isInBounds(blockposition)) return null; // Paper - don't path out of world border
+        if (this.a.locY < 0.0D) {
             return null;
         } else if (!this.a()) {
             return null;
-        } else if (this.c != null && !this.c.b() && set.contains(this.q)) {
+        } else if (this.c != null && !this.c.b() && blockposition.equals(this.q)) {
             return this.c;
         } else {
             // Paper start - Pathfind event
-            boolean copiedSet = false;
-            for (BlockPosition possibleTarget : set) {
-                if (!getEntity().getWorld().getWorldBorder().isInBounds(possibleTarget) || !new com.destroystokyo.paper.event.entity.EntityPathfindEvent(getEntity().getBukkitEntity(), // Paper - don't path out of world border
-                    MCUtil.toLocation(getEntity().world, possibleTarget), target == null ? null : target.getBukkitEntity()).callEvent()) {
-                    if (!copiedSet) {
-                        copiedSet = true;
-                        set = new java.util.HashSet<>(set);
-                    }
-                    // note: since we copy the set this remove call is safe, since we're iterating over the old copy
-                    set.remove(possibleTarget);
-                    if (set.isEmpty()) {
-                        return null;
-                    }
-                }
+            if (!new com.destroystokyo.paper.event.entity.EntityPathfindEvent(getEntity().getBukkitEntity(),
+                MCUtil.toLocation(getEntity().world, blockposition), target == null ? null : target.getBukkitEntity()).callEvent()) {
+                return null;
             }
             // Paper end
-            this.b.getMethodProfiler().enter("pathfind");
+            this.q = blockposition.immutableCopy();
             float f = this.i();
-            BlockPosition blockposition = flag ? (new BlockPosition(this.a)).up() : new BlockPosition(this.a);
-            int k = (int) (f + (float) i);
-            ChunkCache chunkcache = new ChunkCache(this.b, blockposition.b(-k, -k, -k), blockposition.b(k, k, k));
-            PathEntity pathentity = this.s.a(chunkcache, this.a, set, f, j);
 
-            this.b.getMethodProfiler().exit();
-            if (pathentity != null && pathentity.k() != null) {
-                this.q = pathentity.k();
-                this.r = j;
-            }
+            this.b.getMethodProfiler().enter("pathfind");
+            BlockPosition blockposition1 = flag ? (new BlockPosition(this.a)).up() : new BlockPosition(this.a);
+            int j = (int) (f + (float) i);
+            ChunkCache chunkcache = new ChunkCache(this.b, blockposition1.b(-j, -j, -j), blockposition1.b(j, j, j));
+            PathEntity pathentity = this.r.a(chunkcache, this.a, d0, d1, d2, f);
 
+            this.b.getMethodProfiler().exit();
             return pathentity;
         }
     }
 
     public boolean a(double d0, double d1, double d2, double d3) {
-        return this.a(this.a(d0, d1, d2, 1), d3);
+        return this.a(this.a(d0, d1, d2), d3);
     }
 
     public boolean a(Entity entity, double d0) {
-        PathEntity pathentity = this.a(entity, 1);
+        // Paper start - Pathfinding optimizations
+        if (this.pathfindFailures > 10 && this.c == null && MinecraftServer.currentTick < this.lastFailure + 40) {
+            return false;
+        }
+
+        PathEntity pathentity = this.a(entity);
 
-        return pathentity != null && this.a(pathentity, d0);
+        if (pathentity != null && this.a(pathentity, d0)) {
+            this.lastFailure = 0;
+            this.pathfindFailures = 0;
+            return true;
+        } else {
+            this.pathfindFailures++;
+            this.lastFailure = MinecraftServer.currentTick;
+            return false;
+        }
     }
+    private int lastFailure = 0;
+    private int pathfindFailures = 0;
+    // Paper end
 
     public boolean setDestination(@Nullable PathEntity pathentity, double speed) { return a(pathentity, speed); } // Paper - OBFHELPER
     public boolean a(@Nullable PathEntity pathentity, double d0) {
@@ -247,7 +240,7 @@ public abstract class NavigationAbstract {
                 this.h = vec3d1;
                 double d0 = vec3d.f(this.h);
 
-                this.k = this.a.db() > 0.0F ? d0 / (double) this.a.db() * 1000.0D : 0.0D;
+                this.k = this.a.da() > 0.0F ? d0 / (double) this.a.da() * 1000.0D : 0.0D;
             }
 
             if (this.k > 0.0D && (double) this.i > this.k * 3.0D) {
@@ -268,6 +261,7 @@ public abstract class NavigationAbstract {
 
     public void stopPathfinding() { o(); } // Paper - OBFHELPER
     public void o() {
+        this.pathfindFailures = 0; this.lastFailure = 0; // Paper - Pathfinding optimizations
         this.c = null;
     }
 
@@ -276,7 +270,7 @@ public abstract class NavigationAbstract {
     protected abstract boolean a();
 
     protected boolean p() {
-        return this.a.av() || this.a.aD();
+        return this.a.au() || this.a.aC();
     }
 
     protected void D_() {
@@ -318,7 +312,7 @@ public abstract class NavigationAbstract {
         return this.o.e();
     }
 
-    public void b(BlockPosition blockposition) {
+    public void c(BlockPosition blockposition) {
         if (this.c != null && !this.c.b() && this.c.e() != 0) {
             PathPoint pathpoint = this.c.c();
             Vec3D vec3d = new Vec3D(((double) pathpoint.a + this.a.locX) / 2.0D, ((double) pathpoint.b + this.a.locY) / 2.0D, ((double) pathpoint.c + this.a.locZ) / 2.0D);
diff --git a/src/main/java/net/minecraft/server/NavigationFlying.java b/src/main/java/net/minecraft/server/NavigationFlying.java
index fbf5752a..551ff417 100644
--- a/src/main/java/net/minecraft/server/NavigationFlying.java
+++ b/src/main/java/net/minecraft/server/NavigationFlying.java
@@ -24,8 +24,8 @@ public class NavigationFlying extends NavigationAbstract {
     }
 
     @Override
-    public PathEntity a(Entity entity, int i) {
-        return this.a(new BlockPosition(entity), entity, i); // Paper - Forward target entity
+    public PathEntity a(Entity entity) {
+        return this.b(new BlockPosition(entity), entity); // Paper - Pathfind event
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 96a785af..ba23d283 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -18,6 +18,7 @@ import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
 import java.net.SocketAddress;
 import java.util.Queue;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
 import javax.annotation.Nullable;
 import javax.crypto.SecretKey;
 import org.apache.commons.lang3.Validate;
@@ -42,7 +43,8 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
         return new DefaultEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Client IO #%d").setDaemon(true).build());
     });
     private final EnumProtocolDirection h;
-    private final Queue<NetworkManager.QueuedPacket> packetQueue = Queues.newConcurrentLinkedQueue(); private final Queue<NetworkManager.QueuedPacket> getPacketQueue() { return this.packetQueue; } // Paper - OBFHELPER
+    private final Queue<NetworkManager.QueuedPacket> packetQueue = Queues.newConcurrentLinkedQueue();  private final Queue<NetworkManager.QueuedPacket> getPacketQueue() { return this.packetQueue; } // Paper - OBFHELPER
+    private final ReentrantReadWriteLock j = new ReentrantReadWriteLock();
     public Channel channel;
     public SocketAddress socketAddress; public void setSpoofedRemoteAddress(SocketAddress address) { this.socketAddress = address; } // Paper - OBFHELPER
     // Spigot Start
@@ -51,15 +53,15 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
     public boolean preparing = true;
     // Spigot End
     private PacketListener packetListener;
-    private IChatBaseComponent m;
-    private boolean n;
+    private IChatBaseComponent n;
     private boolean o;
-    private int p;
+    private boolean p;
     private int q;
-    private float r;
+    private int r;
     private float s;
-    private int t;
-    private boolean u;
+    private float t;
+    private int u;
+    private boolean v;
     // Paper start - NetworkClient implementation
     public int protocolVersion;
     public java.net.InetSocketAddress virtualHost;
@@ -109,9 +111,9 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
         if (throwable instanceof SkipEncodeException) {
             NetworkManager.LOGGER.debug("Skipping packet due to errors", throwable.getCause());
         } else {
-            boolean flag = !this.u;
+            boolean flag = !this.v;
 
-            this.u = true;
+            this.v = true;
             if (this.channel.isOpen()) {
                 if (throwable instanceof TimeoutException) {
                     NetworkManager.LOGGER.debug("Timeout", throwable);
@@ -144,7 +146,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
                 ;
             }
 
-            ++this.p;
+            ++this.q;
         }
 
     }
@@ -164,11 +166,17 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
     }
 
     public void sendPacket(Packet<?> packet, @Nullable GenericFutureListener<? extends Future<? super Void>> genericfuturelistener) {
-        if (this.isConnected() && this.sendPacketQueue() && !(packet instanceof PacketPlayOutMapChunk && !((PacketPlayOutMapChunk) packet).isReady())) { // Paper - Async-Anti-Xray - Add chunk packets which are not ready or all packets if the packet queue contains chunk packets which are not ready to the packet queue and send the packets later in the right order
-            //this.o(); // Paper - Async-Anti-Xray - Move to if statement (this.sendPacketQueue())
+        if (this.isConnected()) {
+            this.o();
             this.b(packet, genericfuturelistener);
         } else {
-            this.packetQueue.add(new NetworkManager.QueuedPacket(packet, genericfuturelistener));
+            this.j.writeLock().lock();
+
+            try {
+                this.packetQueue.add(new NetworkManager.QueuedPacket(packet, genericfuturelistener));
+            } finally {
+                this.j.writeLock().unlock();
+            }
         }
 
     }
@@ -178,7 +186,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
         EnumProtocol enumprotocol = EnumProtocol.a(packet);
         EnumProtocol enumprotocol1 = (EnumProtocol) this.channel.attr(NetworkManager.c).get();
 
-        ++this.q;
+        ++this.r;
         if (enumprotocol1 != enumprotocol) {
             NetworkManager.LOGGER.debug("Disabled auto read");
             this.channel.config().setAutoRead(false);
@@ -223,32 +231,23 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 
     }
 
-    // Paper start - Async-Anti-Xray - Stop dispatching further packets and return false if the peeked packet is a chunk packet which is not ready
-    private boolean sendPacketQueue() { return this.o(); } // OBFHELPER // void -> boolean
-    private boolean o() { // void -> boolean
+    private void sendPacketQueue() { this.o(); } // Paper - OBFHELPER
+    private void o() {
         if (this.channel != null && this.channel.isOpen()) {
-            Queue queue = this.packetQueue;
+            this.j.readLock().lock();
 
-            synchronized (this.packetQueue) {
+            try {
                 while (!this.packetQueue.isEmpty()) {
-                    NetworkManager.QueuedPacket networkmanager_queuedpacket = (NetworkManager.QueuedPacket) this.getPacketQueue().peek(); // poll -> peek
-
-                    if (networkmanager_queuedpacket != null) { // Fix NPE (Spigot bug caused by handleDisconnection())
-                        if (networkmanager_queuedpacket.getPacket() instanceof PacketPlayOutMapChunk && !((PacketPlayOutMapChunk) networkmanager_queuedpacket.getPacket()).isReady()) { // Check if the peeked packet is a chunk packet which is not ready
-                            return false; // Return false if the peeked packet is a chunk packet which is not ready
-                        } else {
-                            this.getPacketQueue().poll(); // poll here
-                            this.dispatchPacket(networkmanager_queuedpacket.getPacket(), networkmanager_queuedpacket.getGenericFutureListener()); // dispatch the packet
-                        }
-                    }
-                }
+                    NetworkManager.QueuedPacket networkmanager_queuedpacket = (NetworkManager.QueuedPacket) this.packetQueue.poll();
 
+                    this.b(networkmanager_queuedpacket.a, networkmanager_queuedpacket.b);
+                }
+            } finally {
+                this.j.readLock().unlock();
             }
-        }
 
-        return true; // Return true if all packets were dispatched
+        }
     }
-    // Paper end
 
     public void a() {
         this.o();
@@ -264,11 +263,11 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
             if (enableExplicitFlush) this.channel.eventLoop().execute(() -> this.channel.flush()); // Paper - we don't need to explicit flush here, but allow opt in incase issues are found to a better version
         }
 
-        if (this.t++ % 20 == 0) {
+        if (this.u++ % 20 == 0) {
+            this.t = this.t * 0.75F + (float) this.r * 0.25F;
             this.s = this.s * 0.75F + (float) this.q * 0.25F;
-            this.r = this.r * 0.75F + (float) this.p * 0.25F;
+            this.r = 0;
             this.q = 0;
-            this.p = 0;
         }
 
     }
@@ -283,7 +282,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
         // Spigot End
         if (this.channel.isOpen()) {
             this.channel.close(); // We can't wait as this may be called from an event loop.
-            this.m = ichatbasecomponent;
+            this.n = ichatbasecomponent;
         }
 
     }
@@ -293,7 +292,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
     }
 
     public void a(SecretKey secretkey) {
-        this.n = true;
+        this.o = true;
         this.channel.pipeline().addBefore("splitter", "decrypt", new PacketDecrypter(MinecraftEncryption.a(2, secretkey)));
         this.channel.pipeline().addBefore("prepender", "encrypt", new PacketEncrypter(MinecraftEncryption.a(1, secretkey)));
     }
@@ -312,7 +311,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 
     @Nullable
     public IChatBaseComponent j() {
-        return this.m;
+        return this.n;
     }
 
     public void stopReading() {
@@ -346,10 +345,10 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 
     public void handleDisconnection() {
         if (this.channel != null && !this.channel.isOpen()) {
-            if (this.o) {
+            if (this.p) {
                 NetworkManager.LOGGER.warn("handleDisconnection() called twice");
             } else {
-                this.o = true;
+                this.p = true;
                 if (this.j() != null) {
                     this.i().a(this.j());
                 } else if (this.i() != null) {
diff --git a/src/main/java/net/minecraft/server/NibbleArray.java b/src/main/java/net/minecraft/server/NibbleArray.java
index 90c09687..f58c8f7c 100644
--- a/src/main/java/net/minecraft/server/NibbleArray.java
+++ b/src/main/java/net/minecraft/server/NibbleArray.java
@@ -21,7 +21,7 @@ public class NibbleArray {
     }
 
     public int a(int i, int j, int k) {
-        return this.b(this.b(i, j, k));
+        return this.a(this.b(i, j, k));
     }
 
     public void a(int i, int j, int k, int l) {
@@ -32,11 +32,11 @@ public class NibbleArray {
         return j << 8 | k << 4 | i;
     }
 
-    public int b(int i) { // PAIL: private -> public
+    public int a(int i) { // PAIL: private -> public
         if (this.a == null) {
             return 0;
         } else {
-            int j = this.d(i);
+            int j = this.c(i);
 
             return this.a[j] >> ((i & 1) << 2) & 15; // Spigot
         }
@@ -47,7 +47,7 @@ public class NibbleArray {
             this.a = new byte[2048];
         }
 
-        int k = this.d(i);
+        int k = this.c(i);
 
         // Spigot start
         int shift = (i & 1) << 2;
@@ -55,11 +55,11 @@ public class NibbleArray {
         // Spigot end
     }
 
-    private boolean c(int i) {
+    private boolean b(int i) {
         return (i & 1) == 0;
     }
 
-    private int d(int i) {
+    private int c(int i) {
         return i >> 1;
     }
 
@@ -79,7 +79,7 @@ public class NibbleArray {
         StringBuilder stringbuilder = new StringBuilder();
 
         for (int i = 0; i < 4096; ++i) {
-            stringbuilder.append(Integer.toHexString(this.b(i)));
+            stringbuilder.append(Integer.toHexString(this.a(i)));
             if ((i & 15) == 15) {
                 stringbuilder.append("\n");
             }
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
index 48331760..ef71a1fe 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -1,6 +1,5 @@
 package net.minecraft.server;
 
-import com.destroystokyo.paper.antixray.ChunkPacketInfo; // Paper - Anti-Xray
 import com.google.common.collect.Lists;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
@@ -18,11 +17,8 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
     private byte[] e; private byte[] getData() { return this.e; } // Paper - OBFHELPER
     private List<NBTTagCompound> f;
     private boolean g;
-    private volatile boolean ready; // Paper - Async-Anti-Xray - Ready flag for the network manager
 
-    public PacketPlayOutMapChunk() {
-        this.ready = true; // Paper - Async-Anti-Xray - Set the ready flag to true
-    }
+    public PacketPlayOutMapChunk() {}
 
     // Paper start
     private final java.util.List<Packet> extraPackets = new java.util.ArrayList<>();
@@ -34,12 +30,6 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
     }
     // Paper end
     public PacketPlayOutMapChunk(Chunk chunk, int i) {
-        // Paper start - add forceLoad param
-        this(chunk, i, false);
-    }
-    public PacketPlayOutMapChunk(Chunk chunk, int i, boolean forceLoad) {
-        // Paper end
-        ChunkPacketInfo<IBlockData> chunkPacketInfo = chunk.world.chunkPacketBlockController.getChunkPacketInfo(this, chunk, i, forceLoad); // Paper - Anti-Xray - Add chunk packet info
         ChunkCoordIntPair chunkcoordintpair = chunk.getPos();
 
         this.a = chunkcoordintpair.x;
@@ -58,12 +48,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
         }
 
         this.e = new byte[this.a(chunk, i)];
-        // Paper start - Anti-Xray - Add chunk packet info
-        if (chunkPacketInfo != null) {
-            chunkPacketInfo.setData(this.getData());
-        }
-        // Paper end
-        this.c = this.writeChunk(new PacketDataSerializer(this.i()), chunk, i, chunkPacketInfo); // Paper - Anti-Xray - Add chunk packet info
+        this.c = this.a(new PacketDataSerializer(this.i()), chunk, i);
         this.f = Lists.newArrayList();
         iterator = chunk.getTileEntities().entrySet().iterator();
         int totalSigns = 0; // Paper
@@ -89,19 +74,9 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
                 this.f.add(nbttagcompound);
             }
         }
-        chunk.world.chunkPacketBlockController.modifyBlocks(this, chunkPacketInfo, forceLoad, null); // Paper - Anti-Xray - Modify blocks
-    }
 
-    // Paper start - Async-Anti-Xray - Getter and Setter for the ready flag
-    public boolean isReady() {
-        return this.ready;
     }
 
-    public void setReady(boolean ready) {
-        this.ready = ready;
-    }
-    // Paper end
-
     @Override
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
         this.a = packetdataserializer.readInt();
@@ -160,11 +135,6 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
 
     public int writeChunk(PacketDataSerializer packetDataSerializer, Chunk chunk, int chunkSectionSelector) { return this.a(packetDataSerializer, chunk, chunkSectionSelector); } // Paper - OBFHELPER
     public int a(PacketDataSerializer packetdataserializer, Chunk chunk, int i) {
-        // Paper start - Add parameter
-        return this.writeChunk(packetdataserializer, chunk, i, null);
-    }
-    public int writeChunk(PacketDataSerializer packetdataserializer, Chunk chunk, int i, ChunkPacketInfo<IBlockData> chunkPacketInfo) {
-        // Paper end
         int j = 0;
         ChunkSection[] achunksection = chunk.getSections();
         int k = 0;
@@ -176,8 +146,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
 
             if (chunksection != Chunk.a && (!this.f() || !chunksection.c()) && (i & 1 << k) != 0) {
                 j |= 1 << k;
-                packetdataserializer.writeShort(chunksection.nonEmptyBlockCount); // Paper - Anti-Xray - Add chunk packet info
-                chunksection.getBlocks().writeDataPaletteBlock(packetdataserializer, chunkPacketInfo, k); // Paper - Anti-Xray - Add chunk packet info
+                chunksection.b(packetdataserializer);
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/PacketStatusListener.java b/src/main/java/net/minecraft/server/PacketStatusListener.java
index 295c9ac2..ba1c76c1 100644
--- a/src/main/java/net/minecraft/server/PacketStatusListener.java
+++ b/src/main/java/net/minecraft/server/PacketStatusListener.java
@@ -26,11 +26,6 @@ public class PacketStatusListener implements PacketStatusInListener {
     @Override
     public void a(IChatBaseComponent ichatbasecomponent) {}
 
-    @Override
-    public NetworkManager a() {
-        return this.networkManager;
-    }
-
     @Override
     public void a(PacketStatusInStart packetstatusinstart) {
         if (this.d) {
diff --git a/src/main/java/net/minecraft/server/Partition.java b/src/main/java/net/minecraft/server/Partition.java
new file mode 100644
index 00000000..22c22dfc
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Partition.java
@@ -0,0 +1,459 @@
+package net.minecraft.server;
+
+import com.destroystokyo.paper.event.server.ServerExceptionEvent;
+import com.destroystokyo.paper.exception.ServerInternalException;
+import com.mojang.datafixers.util.Either;
+import it.unimi.dsi.fastutil.objects.Object2IntMap;
+
+import java.util.*;
+import java.util.function.Consumer;
+
+import org.bukkit.util.BoundingBox;
+import org.spigotmc.ActivationRange;
+
+public class Partition {
+
+    public List<PlayerChunk> chunks;
+    public List<Entity> entities;
+    public TickListServer<Block> blockTickListServer;
+    public TickListServer<FluidType> fluidTickListServer;
+    private long age;
+    private long lastTickTime;
+
+    Partition(WorldServer world) {
+        this.chunks = new ArrayList<>();
+        this.entities = new ArrayList<>();
+        this.age = 0;
+
+        // Create individual TickListServer's for each Partition
+        this.blockTickListServer = new TickListServer<Block>(world, (block) -> {
+            return block == null || block.getBlockData().isAir();
+        }, IRegistry.BLOCK::getKey, IRegistry.BLOCK::get, world::b, "Blocks");
+
+        this.fluidTickListServer = new TickListServer<FluidType>(world, (fluidtype) -> {
+            return fluidtype == null || fluidtype == FluidTypes.EMPTY;
+        }, IRegistry.FLUID::getKey, IRegistry.FLUID::get, world::a, "Fluids");
+    }
+
+    long mergeRadius = 32;
+
+    public boolean isInMergeDistance(PlayerChunk playerChunkToCheck) {
+        Chunk playerChunk = playerChunkToCheck.getFullChunk();
+        ChunkCoordIntPair playerPos = playerChunk.getPos();
+        return this.isInMergeDistance(playerPos);
+    }
+
+    public boolean isInMergeDistance(Entity ent) {
+        ChunkCoordIntPair pos = ent.getCurrentChunk().getPos();
+        return this.isInMergeDistance(pos);
+    }
+
+    public boolean isInMergeDistance(ChunkCoordIntPair pos) {
+       return isInRadius(pos, this.mergeRadius);
+    }
+
+    public boolean isInRadius(ChunkCoordIntPair pos, long radius) {
+        for (int i = 0; i < this.chunks.size(); ++i) {
+            Chunk partitionChunk = this.chunks.get(i).getFullChunk();
+            ChunkCoordIntPair partitionPos = partitionChunk.getPos();
+            if ((long)Math.abs(partitionPos.x - pos.x) <= radius && (long)Math.abs(partitionPos.z - pos.z) <= radius) {
+                return true;
+            }
+        }
+        for (int i = 0; i < this.entities.size(); ++i) {
+            Chunk partitionChunk = this.entities.get(i).getCurrentChunk();
+            if(partitionChunk != null) {
+                ChunkCoordIntPair partitionPos = partitionChunk.getPos();
+                if ((long) Math.abs(partitionPos.x - pos.x) <= radius && (long) Math.abs(partitionPos.z - pos.z) <= radius) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+    
+    public boolean alreadyHasChunk(PlayerChunk playerChunkToCheck)
+    {
+        ChunkCoordIntPair posToCheck = playerChunkToCheck.getFullChunk().getPos();
+        for(int i = 0; i < this.chunks.size(); i++)
+        {
+            ChunkCoordIntPair pos = this.chunks.get(i).getFullChunk().getPos();
+            if(pos.x == posToCheck.x && pos.z == posToCheck.x)
+            {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    public TickListServer<Block> getBlockTickList()
+    {
+        return this.blockTickListServer;
+    }
+
+    public boolean alreadyHasEntity(Entity entityToCheck)
+    {
+        String uuid = entityToCheck.getName();
+        for(int i = 0; i < this.entities.size(); i++)
+        {
+            Entity entity = this.entities.get(i);
+            if(uuid.equals(entity.getName()))
+            {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    public void addChunk(PlayerChunk chunk)
+    {
+        if(!alreadyHasChunk(chunk))
+        {
+            chunks.add(chunk);
+        }
+        else
+        {
+            //MinecraftServer.LOGGER.warn("MCMT | Attempted to addChunk already loaded chunk!");
+        }
+    }
+    
+    public void addEntity(Entity entity) {
+        if(!alreadyHasEntity(entity))
+        {
+            this.entities.add(entity);
+            if (entity instanceof EntityEnderDragon) {
+                for (EntityComplexPart entitycomplexpart : ((EntityEnderDragon)entity).dT()) {
+                    this.entities.add(entitycomplexpart);
+                }
+            }
+        }
+    }
+
+    public BoundingBox getChunkBoundingBox() {
+        double minX = 1e99, maxX = -1e99;
+        double minY = 0, maxY = 255;
+        double minZ = 1e99, maxZ = -1e99;
+        for (int i=0; i<this.chunks.size(); i++) {
+            PlayerChunk playerChunk = this.chunks.get(i);
+            ChunkCoordIntPair pos = playerChunk.getFullChunk().getPos();
+
+            minX = Math.min(minX, pos.x);
+            maxX = Math.max(maxX, pos.x);
+            minZ = Math.min(minZ, pos.z);
+            maxZ = Math.max(maxZ, pos.z);
+        }
+        return new BoundingBox(minX, minY, minZ, maxX, maxY, maxZ);
+    }
+    public BoundingBox getEntityBoundingBox() {
+        double minX = 1e99, maxX = -1e99;
+        double minY = 0, maxY = 255;
+        double minZ = 1e99, maxZ = -1e99;
+        for (int i=0; i<this.entities.size(); i++) {
+            Entity entity = this.entities.get(i);
+            ChunkCoordIntPair pos = entity.getCurrentChunk().getPos();
+            minX = Math.min(minX, pos.x);
+            maxX = Math.max(maxX, pos.x);
+            minZ = Math.min(minZ, pos.z);
+            maxZ = Math.max(maxZ, pos.z);
+        }
+        return new BoundingBox(minX, minY, minZ, maxX, maxY, maxZ);
+    }
+    public BoundingBox getBlockTickBoundingBox() {
+        double minX = 1e99, maxX = -1e99;
+        double minY = 0, maxY = 255;
+        double minZ = 1e99, maxZ = -1e99;
+        for (NextTickListEntry<Block> entry : blockTickListServer.getNextTickList()) {
+            BlockPosition blockPosition = entry.a;
+            int x = Math.floorDiv(blockPosition.getX(), 16);
+            int z = Math.floorDiv(blockPosition.getZ(), 16);
+            ChunkCoordIntPair pos = new ChunkCoordIntPair(x, z);
+            minX = Math.min(minX, pos.x);
+            maxX = Math.max(maxX, pos.x);
+            minZ = Math.min(minZ, pos.z);
+            maxZ = Math.max(maxZ, pos.z);
+        }
+        return new BoundingBox(minX, minY, minZ, maxX, maxY, maxZ);
+    }
+    public BoundingBox getFluidTickBoundingBox() {
+        double minX = 1e99, maxX = -1e99;
+        double minY = 0, maxY = 255;
+        double minZ = 1e99, maxZ = -1e99;
+        for (NextTickListEntry<FluidType> entry : fluidTickListServer.getNextTickList()) {
+            BlockPosition blockPosition = entry.a;
+            int x = Math.floorDiv(blockPosition.getX(), 16);
+            int z = Math.floorDiv(blockPosition.getZ(), 16);
+            ChunkCoordIntPair pos = new ChunkCoordIntPair(x, z);
+            minX = Math.min(minX, pos.x);
+            maxX = Math.max(maxX, pos.x);
+            minZ = Math.min(minZ, pos.z);
+            maxZ = Math.max(maxZ, pos.z);
+        }
+        return new BoundingBox(minX, minY, minZ, maxX, maxY, maxZ);
+    }
+
+    public boolean removeChunk(PlayerChunk chunk)
+    {
+        return this.chunks.remove(chunk);
+    }
+
+    public boolean removeEntitiy(Entity entity)
+    {
+        return this.entities.remove(entity);
+    }
+
+    public void tickChunks(WorldServer world, PlayerChunkMap playerChunkMap, boolean allowAnimals, boolean allowMonsters) {
+        ChunkMapDistance chunkMapDistance = playerChunkMap.e();
+
+        long currentTime = world.getTime();
+        long timeSinceLastTick = currentTime - this.lastTickTime;
+
+        this.lastTickTime = currentTime;
+
+        WorldData worlddata = world.getWorldData();
+
+        boolean doMobSpawning = world.getGameRules().getBoolean("doMobSpawning") && !world.getPlayers().isEmpty(); // CraftBukkit
+
+        world.getMethodProfiler().enter("pollingChunks");
+        int randomTickSpeed = world.getGameRules().c("randomTickSpeed");
+        BlockPosition spawn = world.getSpawn();
+        boolean flag2 = world.ticksPerAnimalSpawns != 0L && worlddata.getTime() % world.ticksPerAnimalSpawns == 0L; // CraftBukkit // PAIL: TODO monster ticks
+
+        world.getMethodProfiler().enter("naturalSpawnCount");
+        int l = chunkMapDistance.b();
+
+        EnumCreatureType[] aenumcreaturetype = EnumCreatureType.values();
+        Object2IntMap<EnumCreatureType> object2intmap = world.l();
+
+        for (int i=0; i<chunks.size(); i++) {
+            PlayerChunk playerchunk = chunks.get(i);
+
+            Optional<Chunk> optional = ((Either) playerchunk.b().getNow(PlayerChunk.UNLOADED_CHUNK)).left();
+            if (optional.isPresent()) {
+                Chunk chunk = (Chunk) optional.get();
+
+                world.getMethodProfiler().enter("broadcast");
+                playerchunk.a(chunk);
+                world.getMethodProfiler().exit();
+                ChunkCoordIntPair chunkcoordintpair = playerchunk.h();
+
+                if (!playerChunkMap.isOutsideOfRange(chunkcoordintpair, false)) { // Spigot
+                    chunk.b(chunk.q() + timeSinceLastTick);
+                    if (doMobSpawning && (allowMonsters || allowAnimals) && world.getWorldBorder().isInBounds(chunk.getPos()) && !playerChunkMap.isOutsideOfRange(chunkcoordintpair, true)) { // Spigot
+                        world.getMethodProfiler().enter("spawner");
+                        world.timings.mobSpawn.startTiming(); // Spigot
+                        EnumCreatureType[] aenumcreaturetype1 = aenumcreaturetype;
+                        int i1 = aenumcreaturetype.length;
+
+                        for (int j1 = 0; j1 < i1; ++j1) {
+                            EnumCreatureType enumcreaturetype = aenumcreaturetype1[j1];
+
+                            // CraftBukkit start - Use per-world spawn limits
+                            int limit = enumcreaturetype.b();
+                            switch (enumcreaturetype) {
+                                case MONSTER:
+                                    limit = world.getWorld().getMonsterSpawnLimit();
+                                    break;
+                                case CREATURE:
+                                    limit = world.getWorld().getAnimalSpawnLimit();
+                                    break;
+                                case WATER_CREATURE:
+                                    limit = world.getWorld().getWaterAnimalSpawnLimit();
+                                    break;
+                                case AMBIENT:
+                                    limit = world.getWorld().getAmbientSpawnLimit();
+                                    break;
+                            }
+
+                            if (limit == 0) {
+                                continue;
+                            }
+                            // CraftBukkit end
+
+                            if (enumcreaturetype != EnumCreatureType.MISC && (!enumcreaturetype.c() || allowAnimals) && (enumcreaturetype.c() || allowMonsters) && (!enumcreaturetype.d() || flag2)) {
+                                int k1 = limit * l / playerChunkMap.c(); // CraftBukkit - use per-world limits
+                                if (object2intmap.getInt(enumcreaturetype) <= k1) {
+                                    SpawnerCreature.a(enumcreaturetype, (World) world, chunk, spawn);
+                                }
+                            }
+                        }
+
+                        world.timings.mobSpawn.stopTiming(); // Spigot
+                        world.getMethodProfiler().exit();
+                    }
+
+                    world.timings.chunkTicks.startTiming(); // Spigot
+                    world.a(chunk, randomTickSpeed);
+                    world.timings.chunkTicks.stopTiming(); // Spigot
+                }
+            }
+        }
+    }
+
+    boolean isEmpty()
+    {
+        return (this.chunks.isEmpty() && this.entities.isEmpty() && this.age > 5);
+    }
+    
+    public void tickEntities(WorldServer world, Profile profile) {
+
+        world.timings.tickEntities.startTiming();
+
+        profile.profile("doBossBattle", p -> {
+            world.worldProvider.doBossBattle();
+        });
+
+        GameProfilerFiller gameprofilerfiller = world.getMethodProfiler();
+        gameprofilerfiller.enter("global");
+
+        profile.profile("entityLoop", p -> {
+            for (int i = 0; i < this.entities.size(); ++i) {
+                Entity entity = this.entities.get(i);
+
+                if (entity == null)
+                {
+                    System.out.println("MCMT | Removed Entity: " + entity.getName());
+                    this.entities.remove(i--);
+                    continue;
+                }
+
+                try {
+                    world.timings.tickEntities.startTiming();
+                    entity.tickTimer.startTiming();
+                    // Spigot end
+                    entity.ticksLived++;
+                    entity.tick();
+                } catch (Throwable throwable) {
+                    // Paper start - Prevent tile entity and entity crashes
+                    String msg = "Entity threw exception at " + entity.world.getWorld().getName() + ":" + entity.locX + "," + entity.locY + "," + entity.locZ;
+                    System.err.println(msg);
+                    throwable.printStackTrace();
+                    world.getServer().getPluginManager().callEvent(new ServerExceptionEvent(new ServerInternalException(msg, throwable)));
+                    entity.dead = true;
+                    // Paper end
+                } finally {
+                    entity.tickTimer.stopTiming();
+                    world.timings.tickEntities.stopTiming();
+                }
+
+                if (entity.dead)
+                {
+                    System.out.println("MCMT | Removed Entity: " + entity.getName());
+                    this.entities.remove(i--);
+                }
+            }
+        });
+
+        gameprofilerfiller.exitEnter("regular");
+        world.tickingEntities = true;
+
+        profile.profile("activateEntities", p -> {
+            ActivationRange.activateEntities(world);
+        });
+
+        world.timings.entityTick.startTiming();
+        profile.profile("stop and remove", p -> {
+            for (int i = 0; i < this.entities.size(); ++i) {
+                Entity entity = this.entities.get(i);
+                Entity vehicle = entity.getVehicle();
+                if (vehicle != null) {
+                    if (!vehicle.dead && vehicle.w(entity)) continue;
+                    entity.stopRiding();
+                }
+                if (!entity.dead && !(entity instanceof EntityComplexPart)) {
+                    world.a(world::entityJoinedWorld, entity);
+                }
+
+                if (entity.dead) {
+                    world.removeEntityFromChunk(entity);
+                    world.unregisterEntity(entity);
+                }
+            }
+        });
+        world.timings.entityTick.stopTiming(); // Spigot
+        world.tickingEntities = false;
+
+        gameprofilerfiller.exit();
+        world.timings.tickEntities.stopTiming(); // Spigot
+    }
+
+    public void tick(WorldServer worldServer, PlayerChunkMap playerChunkMap, boolean allowAnimals, boolean allowMonsters) {
+        profiler.profile("tick", tickProfile -> {
+            tickProfile.profile("tickChunks", profile -> {
+                tickChunks(worldServer, playerChunkMap, allowAnimals, allowMonsters);
+            });
+
+            tickProfile.profile("tickEntities", profile -> {
+                tickEntities(worldServer, profile);
+            });
+
+            tickProfile.profile("fluidTickListServer", profile -> {
+                fluidTickListServer.doTick();
+            });
+
+            tickProfile.profile("blockTickListServer", profile -> {
+                blockTickListServer.doTick();
+            });
+
+            this.age++;
+        });
+    }
+
+
+    public void mergeInto(Partition partition) {
+        int j;
+        for (j = 0; j < partition.chunks.size(); ++j) {
+            this.addChunk(partition.chunks.get(j));
+        }
+        for (j = 0; j < partition.entities.size(); ++j) {
+            this.addEntity(partition.entities.get(j));
+        }
+    }
+
+    public static class Profile {
+        private String key;
+        private long started; // ns
+        private long stopped; // ns
+        private long elapsed;
+        private Map<String, Profile> children = new HashMap<>();
+        public Profile(String key) {
+            this.key = key;
+            this.started = System.nanoTime();
+        }
+        public Profile start(String key) {
+            Profile child = children.get(key);
+            if (child == null) {
+                child = new Profile(key);
+                children.put(key, child);
+            } else {
+                child.restart();
+            }
+            return child;
+        }
+        void restart() {
+            this.started = System.nanoTime();
+        }
+        public void stop() {
+            this.stopped = System.nanoTime();
+            elapsed += this.stopped - this.started;
+        }
+
+        public String getKey() { return this.key;}
+        public Collection<Profile> getChildren() { return this.children.values(); }
+        public long getElapsed() { return this.elapsed; }
+
+        public void profile(String key, Consumer<Profile> target) {
+            Profile profile = start(key);
+            target.accept(profile);
+            profile.stop();
+        }
+    }
+    private Profile profiler = new Profile("Partition");
+    public Profile startProfiling() {
+        profiler = new Profile("Partition");
+        return profiler;
+    }
+    public Profile stopProfiling() {
+        profiler.stop();
+        return profiler;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PartitionManager.java b/src/main/java/net/minecraft/server/PartitionManager.java
new file mode 100644
index 00000000..956efab3
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PartitionManager.java
@@ -0,0 +1,140 @@
+package net.minecraft.server;
+
+import org.bukkit.craftbukkit.LoggerOutputStream;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.function.Consumer;
+import java.util.function.Function;
+
+public class PartitionManager {
+
+    private List<Partition> partitions;
+    private WorldServer world;
+    public List<Partition> getPartitions() {
+        return this.partitions;
+    }
+    private PartitionedTickList<Block> partionedBlockTickList;
+    private PartitionedTickList<FluidType> partionedFluidTickList;
+
+    public PartitionManager(WorldServer world) {
+
+        this.world = world;
+
+        this.partitions = new ArrayList<>();
+        this.partionedBlockTickList = new PartitionedTickList<>(this, x -> x.blockTickListServer);
+        this.partionedFluidTickList = new PartitionedTickList<>(this, x -> x.fluidTickListServer);
+    }
+
+    public PartitionedTickList<Block> getPartionBlockTickList() {
+        return this.partionedBlockTickList;
+    }
+    
+    public PartitionedTickList<FluidType> getPartionFluidTickList() {
+        return this.partionedFluidTickList;
+    }
+
+    public Partition getPartition(BlockPosition blockPosition) {
+        int x = Math.floorDiv(blockPosition.getX(), 16);
+        int z = Math.floorDiv(blockPosition.getZ(), 16);
+        ChunkCoordIntPair chunk = new ChunkCoordIntPair(x, z);
+        return getPartition(chunk);
+    }
+    public Partition getPartition(ChunkCoordIntPair chunk) {
+        for (int i = 0; i < this.partitions.size(); i++) {
+            Partition partition = this.partitions.get(i);
+            if(partition.isInMergeDistance(chunk))
+            {
+                return partition;
+            }
+        }
+        System.out.println("MCMT | Requested partition for area that isn't loaded");
+        return partitions.get(0); //Should never hit here
+    }
+
+    public void addChunk(PlayerChunk playerChunk) {
+        //Chunk chunk = playerChunk.getFullChunk();
+        //System.out.println("MCMT | Loaded Chunk: " + Integer.toString(chunk.getPos().x) + ", " + Integer.toString(chunk.getPos().z));
+        add(p -> p.isInMergeDistance(playerChunk), p -> p.addChunk(playerChunk));
+    }
+
+    public void addEntity(Entity entity) {
+        if(entity instanceof EntityPlayer)
+        {
+            System.out.println("MCMT | Ignorning player");
+            return;
+        }
+        //System.out.println("MCMT | Loaded Entity: " + entity.getName());
+        add(p -> p.isInMergeDistance(entity), p -> p.addEntity(entity));
+    }
+
+    private void add(Function<Partition, Boolean> isInMergeDistance, Consumer<Partition> addToPartition) {
+        ArrayList<Partition> partitionsNotInRange = new ArrayList<>();
+        ArrayList<Partition> partitionsInRange = new ArrayList<>();
+
+        for (int i = 0; i < this.partitions.size(); ++i) {
+            Partition partition = this.partitions.get(i);
+            if (isInMergeDistance.apply(partition)) {
+                partitionsInRange.add(partition);
+            } else {
+                partitionsNotInRange.add(partition);
+            }
+        }
+
+        if (partitionsInRange.isEmpty()) {
+            Partition target = new Partition(this.world);
+            this.partitions.add(target);
+            addToPartition.accept(target);
+            System.out.println("MCMT | Created Partition " + (this.partitions.size() - 1));
+        } else if (partitionsInRange.size() > 1) {
+            System.out.println("MCMT | Chunk in range of more than one partition, merging partitions");
+            Partition master = partitionsInRange.get(0);
+            addToPartition.accept(master);
+            for (int i = 1; i < partitionsInRange.size(); ++i) {
+                Partition partition = partitionsInRange.get(i);
+                master.mergeInto(partition);
+            }
+            partitionsNotInRange.add(master);
+            this.partitions = partitionsNotInRange;
+        } else {
+            Partition target = partitionsInRange.get(0);
+            addToPartition.accept(target);
+        }
+    }
+
+    public void removeEntity(Entity entity)
+    {
+        remove(p -> p.removeEntitiy(entity));
+    }
+
+    public void removeChunk(PlayerChunk playerChunk)
+    {
+        remove(p -> p.removeChunk(playerChunk));
+    }
+
+    private void remove(Function<Partition, Boolean> removeFromPartition)
+    {
+        for(int i = 0; i < this.partitions.size(); i++)
+        {
+            Partition partition = this.partitions.get(i);
+            if(removeFromPartition.apply(partition))
+            {
+                if(partition.isEmpty())
+                {
+                    System.out.println("MCMT | Removed partition");
+                    partitions.remove(i);
+                }
+                return;
+            }
+        }
+    }
+
+    public void tickPartition(int index, WorldServer worldServer, PlayerChunkMap playerChunkMap, boolean allowAnimals, boolean allowMonsters) {
+        Partition partition = this.partitions.get(index);
+        partition.tick(worldServer, playerChunkMap, allowAnimals, allowMonsters);
+        if(partition.isEmpty())
+        {
+            this.partitions.remove(partition);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PartitionedTickList.java b/src/main/java/net/minecraft/server/PartitionedTickList.java
new file mode 100644
index 00000000..5a6baa3d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PartitionedTickList.java
@@ -0,0 +1,61 @@
+package net.minecraft.server;
+
+import java.util.List;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class PartitionedTickList<T> implements TickList<T> {
+
+    private PartitionManager partitionManager;
+    private Function<Partition, TickListServer<T>> getTickListForPartition;
+
+    public PartitionedTickList(PartitionManager partitionManager, Function<Partition, TickListServer<T>> getTickListForPartition) {
+        this.partitionManager = partitionManager;
+        this.getTickListForPartition = getTickListForPartition;
+    }
+
+    private TickListServer<T> getTickListServer(BlockPosition blockPosition) {
+        Partition partition = this.partitionManager.getPartition(blockPosition);
+        return this.getTickListForPartition.apply(partition);
+    }
+    private TickListServer<T> getTickListServer(ChunkCoordIntPair chunkCoordIntPair) {
+        Partition partition = this.partitionManager.getPartition(chunkCoordIntPair);
+        return this.getTickListForPartition.apply(partition);
+    }
+
+    @Override
+    public boolean a(BlockPosition blockPosition, T t) {
+        return getTickListServer(blockPosition).a(blockPosition, t);
+    }
+
+    @Override
+    public void a(BlockPosition var0, T var1, int var2) {
+        getTickListServer(var0).a(var0, var1, var2);
+    }
+
+    public List<NextTickListEntry<T>> a(ChunkCoordIntPair chunkcoordintpair, boolean flag, boolean flag1) {
+        return getTickListServer(chunkcoordintpair).a(chunkcoordintpair, flag, flag1);
+    }
+
+    public NBTTagList a(ChunkCoordIntPair chunkcoordintpair) {
+        return getTickListServer(chunkcoordintpair).a(chunkcoordintpair);
+    }
+
+    @Override
+    public void a(BlockPosition blockposition, T t0, int i, TickListPriority ticklistpriority) {
+        this.getTickListServer(blockposition).a(blockposition, t0, i, ticklistpriority);
+    }
+
+    @Override
+    public boolean b(BlockPosition blockPosition, T t) {
+        return getTickListServer(blockPosition).b(blockPosition, t);
+    }
+
+    @Override
+    public void a(Stream<NextTickListEntry<T>> stream) {
+        stream.forEach(entry -> {
+            getTickListServer(entry.a).add(entry);
+        });
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PathEntity.java b/src/main/java/net/minecraft/server/PathEntity.java
index dcb4e250..5fdb6018 100644
--- a/src/main/java/net/minecraft/server/PathEntity.java
+++ b/src/main/java/net/minecraft/server/PathEntity.java
@@ -8,17 +8,12 @@ public class PathEntity {
     private final List<PathPoint> a; public List<PathPoint> getPoints() { return a; } // Paper - OBFHELPER
     private PathPoint[] b = new PathPoint[0];
     private PathPoint[] c = new PathPoint[0];
-    private int e; public int getNextIndex() { return this.e; } // Paper - OBFHELPER
-    private final BlockPosition f;
-    private final float g;
-    private final boolean h;
+    private PathPoint d;
+    private int e; public int getNextIndex() { return e; } // Paper - OBFHELPER
     public boolean hasNext() { return getNextIndex() < getPoints().size(); } // Paper
 
-    public PathEntity(List<PathPoint> list, BlockPosition blockposition, boolean flag) {
+    public PathEntity(List<PathPoint> list) {
         this.a = list;
-        this.f = blockposition;
-        this.g = list.isEmpty() ? Float.MAX_VALUE : ((PathPoint) this.a.get(this.a.size() - 1)).c(this.f);
-        this.h = flag;
     }
 
     public void a() {
@@ -102,19 +97,18 @@ public class PathEntity {
         }
     }
 
-    public boolean h() {
-        return this.h;
-    }
+    public boolean a(BlockPosition blockposition) {
+        PathPoint pathpoint = this.c();
 
-    public String toString() {
-        return "Path(length=" + this.a.size() + ")";
+        return pathpoint == null ? false : blockposition.a(new BaseBlockPosition(pathpoint.a, pathpoint.b, pathpoint.c), 2.0D);
     }
 
-    public BlockPosition k() {
-        return this.f;
+    @Nullable
+    public PathPoint j() {
+        return this.d;
     }
 
-    public float l() {
-        return this.g;
+    public String toString() {
+        return "Path(length=" + this.a.size() + ")";
     }
 }
diff --git a/src/main/java/net/minecraft/server/PathPoint.java b/src/main/java/net/minecraft/server/PathPoint.java
index 18cdd2a6..4e2cef8f 100644
--- a/src/main/java/net/minecraft/server/PathPoint.java
+++ b/src/main/java/net/minecraft/server/PathPoint.java
@@ -59,22 +59,6 @@ public class PathPoint {
         return f * f + f1 * f1 + f2 * f2;
     }
 
-    public float c(PathPoint pathpoint) {
-        float f = (float) Math.abs(pathpoint.a - this.a);
-        float f1 = (float) Math.abs(pathpoint.b - this.b);
-        float f2 = (float) Math.abs(pathpoint.c - this.c);
-
-        return f + f1 + f2;
-    }
-
-    public float c(BlockPosition blockposition) {
-        float f = (float) Math.abs(blockposition.getX() - this.a);
-        float f1 = (float) Math.abs(blockposition.getY() - this.b);
-        float f2 = (float) Math.abs(blockposition.getZ() - this.c);
-
-        return f + f1 + f2;
-    }
-
     public boolean equals(Object object) {
         if (!(object instanceof PathPoint)) {
             return false;
@@ -94,6 +78,6 @@ public class PathPoint {
     }
 
     public String toString() {
-        return "Node{x=" + this.a + ", y=" + this.b + ", z=" + this.c + '}';
+        return this.a + ", " + this.b + ", " + this.c;
     }
 }
diff --git a/src/main/java/net/minecraft/server/Pathfinder.java b/src/main/java/net/minecraft/server/Pathfinder.java
index 0cec80ec..262fa558 100644
--- a/src/main/java/net/minecraft/server/Pathfinder.java
+++ b/src/main/java/net/minecraft/server/Pathfinder.java
@@ -2,15 +2,8 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
-import java.util.Comparator;
-import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
-import java.util.Optional;
 import java.util.Set;
-import java.util.function.Function;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
 import javax.annotation.Nullable;
 
 public class Pathfinder {
@@ -27,111 +20,81 @@ public class Pathfinder {
     }
 
     @Nullable
-    public PathEntity a(IWorldReader iworldreader, EntityInsentient entityinsentient, Set<BlockPosition> set, float f, int i) {
+    public PathEntity a(IWorldReader iworldreader, EntityInsentient entityinsentient, double d0, double d1, double d2, float f) {
         this.a.a();
         this.e.a(iworldreader, entityinsentient);
         PathPoint pathpoint = this.e.b();
-        Map<PathDestination, BlockPosition> map = (Map) set.stream().collect(Collectors.toMap((blockposition) -> {
-            return this.e.a((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ());
-        }, Function.identity()));
-        PathEntity pathentity = this.a(pathpoint, map, f, i);
+        PathPoint pathpoint1 = this.e.a(d0, d1, d2);
+        PathEntity pathentity = this.a(pathpoint, pathpoint1, f);
 
         this.e.a();
         return pathentity;
     }
 
     @Nullable
-    private PathEntity a(PathPoint pathpoint, Map<PathDestination, BlockPosition> map, float f, int i) {
-        Set<PathDestination> set = map.keySet();
-
+    private PathEntity a(PathPoint pathpoint, PathPoint pathpoint1, float f) {
         pathpoint.e = 0.0F;
-        pathpoint.f = this.a(pathpoint, set);
+        pathpoint.f = pathpoint.a(pathpoint1);
         pathpoint.g = pathpoint.f;
         this.a.a();
         this.b.clear();
         this.a.a(pathpoint);
-        int j = 0;
+        PathPoint pathpoint2 = pathpoint;
+        int i = 0;
 
         while (!this.a.e()) {
-            ++j;
-            if (j >= this.d) {
+            ++i;
+            if (i >= this.d) {
                 break;
             }
 
-            PathPoint pathpoint1 = this.a.c();
+            PathPoint pathpoint3 = this.a.c();
 
-            pathpoint1.i = true;
-            set.stream().filter((pathdestination) -> {
-                return pathpoint1.c((PathPoint) pathdestination) <= (float) i;
-            }).forEach(PathDestination::e);
-            if (set.stream().anyMatch(PathDestination::f)) {
+            pathpoint3.i = true;
+            if (pathpoint3.equals(pathpoint1)) {
+                pathpoint2 = pathpoint1;
                 break;
             }
 
-            if (pathpoint1.a(pathpoint) < f) {
-                int k = this.e.a(this.c, pathpoint1);
+            if (pathpoint3.a(pathpoint1) < pathpoint2.a(pathpoint1)) {
+                pathpoint2 = pathpoint3;
+            }
+
+            if (pathpoint3.a(pathpoint1) < f) {
+                int j = this.e.a(this.c, pathpoint3);
 
-                for (int l = 0; l < k; ++l) {
-                    PathPoint pathpoint2 = this.c[l];
-                    float f1 = pathpoint1.a(pathpoint2);
+                for (int k = 0; k < j; ++k) {
+                    PathPoint pathpoint4 = this.c[k];
+                    float f1 = pathpoint3.a(pathpoint4);
 
-                    pathpoint2.j = pathpoint1.j + f1;
-                    float f2 = pathpoint1.e + f1 + pathpoint2.k;
+                    pathpoint4.j = pathpoint3.j + f1;
+                    float f2 = pathpoint3.e + f1 + pathpoint4.k;
 
-                    if (pathpoint2.j < f && (!pathpoint2.c() || f2 < pathpoint2.e)) {
-                        pathpoint2.h = pathpoint1;
-                        pathpoint2.e = f2;
-                        pathpoint2.f = this.a(pathpoint2, set) * 1.5F;
-                        if (pathpoint2.c()) {
-                            this.a.a(pathpoint2, pathpoint2.e + pathpoint2.f);
+                    if (pathpoint4.j < f && (!pathpoint4.c() || f2 < pathpoint4.e)) {
+                        pathpoint4.h = pathpoint3;
+                        pathpoint4.e = f2;
+                        pathpoint4.f = pathpoint4.a(pathpoint1) * 1.5F + pathpoint4.k;
+                        if (pathpoint4.c()) {
+                            this.a.a(pathpoint4, pathpoint4.e + pathpoint4.f);
                         } else {
-                            pathpoint2.g = pathpoint2.e + pathpoint2.f;
-                            this.a.a(pathpoint2);
+                            pathpoint4.g = pathpoint4.e + pathpoint4.f;
+                            this.a.a(pathpoint4);
                         }
                     }
                 }
             }
         }
 
-        Stream stream;
-
-        if (set.stream().anyMatch(PathDestination::f)) {
-            stream = set.stream().filter(PathDestination::f).map((pathdestination) -> {
-                return this.a(pathdestination.d(), (BlockPosition) map.get(pathdestination), true);
-            }).sorted(Comparator.comparingInt(PathEntity::e));
-        } else {
-            stream = set.stream().map((pathdestination) -> {
-                return this.a(pathdestination.d(), (BlockPosition) map.get(pathdestination), false);
-            }).sorted(Comparator.comparingDouble(PathEntity::l).thenComparingInt(PathEntity::e));
-        }
-
-        Optional<PathEntity> optional = stream.findFirst();
-
-        if (!optional.isPresent()) {
+        if (pathpoint2.equals(pathpoint)) {
             return null;
         } else {
-            PathEntity pathentity = (PathEntity) optional.get();
+            PathEntity pathentity = this.a(pathpoint2);
 
             return pathentity;
         }
     }
 
-    private float a(PathPoint pathpoint, Set<PathDestination> set) {
-        float f = Float.MAX_VALUE;
-
-        float f1;
-
-        for (Iterator iterator = set.iterator(); iterator.hasNext(); f = Math.min(f1, f)) {
-            PathDestination pathdestination = (PathDestination) iterator.next();
-
-            f1 = pathpoint.a(pathdestination);
-            pathdestination.a(f1, pathpoint);
-        }
-
-        return f;
-    }
-
-    private PathEntity a(PathPoint pathpoint, BlockPosition blockposition, boolean flag) {
+    private PathEntity a(PathPoint pathpoint) {
         List<PathPoint> list = Lists.newArrayList();
         PathPoint pathpoint1 = pathpoint;
 
@@ -142,6 +105,6 @@ public class Pathfinder {
             list.add(0, pathpoint1);
         }
 
-        return new PathEntity(list, blockposition, flag);
+        return new PathEntity(list);
     }
 }
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalBreakDoor.java b/src/main/java/net/minecraft/server/PathfinderGoalBreakDoor.java
index 584b35e1..7f12d929 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalBreakDoor.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalBreakDoor.java
@@ -27,7 +27,7 @@ public class PathfinderGoalBreakDoor extends PathfinderGoalDoorInteract {
 
     @Override
     public boolean a() {
-        return !super.a() ? false : (!this.entity.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING) ? false : this.a(this.entity.world.getDifficulty()) && !this.g());
+        return !super.a() ? false : (!this.entity.world.getGameRules().getBoolean("mobGriefing") ? false : this.a(this.entity.world.getDifficulty()) && !this.g());
     }
 
     @Override
@@ -38,7 +38,7 @@ public class PathfinderGoalBreakDoor extends PathfinderGoalDoorInteract {
 
     @Override
     public boolean b() {
-        return this.a <= this.f() && !this.g() && this.door.a((IPosition) this.entity.getPositionVector(), 2.0D) && this.a(this.entity.world.getDifficulty());
+        return this.a <= this.f() && !this.g() && this.door.a((IPosition) this.entity.ch(), 2.0D) && this.a(this.entity.world.getDifficulty());
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalBreed.java b/src/main/java/net/minecraft/server/PathfinderGoalBreed.java
index 0cc34400..9d0b1ffe 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalBreed.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalBreed.java
@@ -114,7 +114,7 @@ public class PathfinderGoalBreed extends PathfinderGoal {
             entityageable.setPositionRotation(this.animal.locX, this.animal.locY, this.animal.locZ, 0.0F, 0.0F);
             this.b.addEntity(entityageable, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.BREEDING); // CraftBukkit - added SpawnReason
             this.b.broadcastEntityEffect(this.animal, (byte) 18);
-            if (this.b.getGameRules().getBoolean(GameRules.DO_MOB_LOOT)) {
+            if (this.b.getGameRules().getBoolean("doMobLoot")) {
                 // CraftBukkit start - use event experience
                 if (experience > 0) {
                     this.b.addEntity(new EntityExperienceOrb(this.b, this.animal.locX, this.animal.locY, this.animal.locZ, experience, org.bukkit.entity.ExperienceOrb.SpawnReason.BREED, entityplayer, entityageable)); // Paper
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalEatTile.java b/src/main/java/net/minecraft/server/PathfinderGoalEatTile.java
index e9679bb4..43d5a4b4 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalEatTile.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalEatTile.java
@@ -60,7 +60,7 @@ public class PathfinderGoalEatTile extends PathfinderGoal {
 
             if (PathfinderGoalEatTile.a.test(this.c.getType(blockposition))) {
                 // CraftBukkit
-                if (!CraftEventFactory.callEntityChangeBlockEvent(this.b, blockposition, Blocks.AIR.getBlockData(), !this.c.getGameRules().getBoolean(GameRules.MOB_GRIEFING)).isCancelled()) {
+                if (!CraftEventFactory.callEntityChangeBlockEvent(this.b, blockposition, Blocks.AIR.getBlockData(), !this.c.getGameRules().getBoolean("mobGriefing")).isCancelled()) {
                     this.c.b(blockposition, false);
                 }
 
@@ -70,7 +70,7 @@ public class PathfinderGoalEatTile extends PathfinderGoal {
 
                 if (this.c.getType(blockposition1).getBlock() == Blocks.GRASS_BLOCK) {
                     // CraftBukkit
-                    if (!CraftEventFactory.callEntityChangeBlockEvent(this.b, blockposition, Blocks.AIR.getBlockData(), !this.c.getGameRules().getBoolean(GameRules.MOB_GRIEFING)).isCancelled()) {
+                    if (!CraftEventFactory.callEntityChangeBlockEvent(this.b, blockposition, Blocks.AIR.getBlockData(), !this.c.getGameRules().getBoolean("mobGriefing")).isCancelled()) {
                         this.c.triggerEffect(2001, blockposition1, Block.getCombinedId(Blocks.GRASS_BLOCK.getBlockData()));
                         this.c.setTypeAndData(blockposition1, Blocks.DIRT.getBlockData(), 2);
                     }
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalFloat.java b/src/main/java/net/minecraft/server/PathfinderGoalFloat.java
index 2e23b5de..a10532b0 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalFloat.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalFloat.java
@@ -18,7 +18,7 @@ public class PathfinderGoalFloat extends PathfinderGoal {
     public boolean a() {
         double d0 = (double) this.a.getHeadHeight() < 0.4D ? 0.2D : 0.4D;
 
-        return this.a.isInWater() && this.a.cf() > d0 || this.a.aD();
+        return this.a.isInWater() && this.a.ce() > d0 || this.a.aC();
     }
 
     public void update() { this.e(); } // Paper - OBFHELPER
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalHurtByTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalHurtByTarget.java
index a9bfa5f6..dc9652a5 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalHurtByTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalHurtByTarget.java
@@ -20,7 +20,7 @@ public class PathfinderGoalHurtByTarget extends PathfinderGoalTarget {
 
     @Override
     public boolean a() {
-        int i = this.e.ct();
+        int i = this.e.cs();
         EntityLiving entityliving = this.e.getLastDamager();
 
         if (i != this.c && entityliving != null) {
@@ -51,7 +51,7 @@ public class PathfinderGoalHurtByTarget extends PathfinderGoalTarget {
     public void c() {
         this.e.setGoalTarget(this.e.getLastDamager(), org.bukkit.event.entity.EntityTargetEvent.TargetReason.TARGET_ATTACKED_ENTITY, true); // CraftBukkit - reason
         this.g = this.e.getGoalTarget();
-        this.c = this.e.ct();
+        this.c = this.e.cs();
         this.h = 300;
         if (this.b) {
             this.g();
@@ -62,7 +62,7 @@ public class PathfinderGoalHurtByTarget extends PathfinderGoalTarget {
 
     protected void g() {
         double d0 = this.k();
-        List<EntityInsentient> list = this.e.world.b(this.e.getClass(), (new AxisAlignedBB(this.e.locX, this.e.locY, this.e.locZ, this.e.locX + 1.0D, this.e.locY + 1.0D, this.e.locZ + 1.0D)).grow(d0, 10.0D, d0));
+        List<EntityInsentient> list = this.e.world.a(this.e.getClass(), (new AxisAlignedBB(this.e.locX, this.e.locY, this.e.locZ, this.e.locX + 1.0D, this.e.locY + 1.0D, this.e.locZ + 1.0D)).grow(d0, 10.0D, d0));
         Iterator iterator = list.iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java
index 3295dfa9..53399e31 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalNearestAttackableTarget.java
@@ -43,7 +43,7 @@ public class PathfinderGoalNearestAttackableTarget<T extends EntityLiving> exten
 
     protected void g() {
         if (this.a != EntityHuman.class && this.a != EntityPlayer.class) {
-            this.c = this.e.world.b(this.a, this.d, this.e, this.e.locX, this.e.locY + (double) this.e.getHeadHeight(), this.e.locZ, this.a(this.k()));
+            this.c = this.e.world.a(this.a, this.d, this.e, this.e.locX, this.e.locY + (double) this.e.getHeadHeight(), this.e.locZ, this.a(this.k()));
         } else {
             this.c = this.e.world.a(this.d, this.e, this.e.locX, this.e.locY + (double) this.e.getHeadHeight(), this.e.locZ);
         }
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalOwnerHurtByTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalOwnerHurtByTarget.java
index 5b99b0dd..3b3274ae 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalOwnerHurtByTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalOwnerHurtByTarget.java
@@ -23,7 +23,7 @@ public class PathfinderGoalOwnerHurtByTarget extends PathfinderGoalTarget {
                 return false;
             } else {
                 this.b = entityliving.getLastDamager();
-                int i = entityliving.ct();
+                int i = entityliving.cs();
 
                 return i != this.c && this.a(this.b, PathfinderTargetCondition.a) && this.a.a(this.b, entityliving);
             }
@@ -38,7 +38,7 @@ public class PathfinderGoalOwnerHurtByTarget extends PathfinderGoalTarget {
         EntityLiving entityliving = this.a.getOwner();
 
         if (entityliving != null) {
-            this.c = entityliving.ct();
+            this.c = entityliving.cs();
         }
 
         super.c();
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalOwnerHurtTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalOwnerHurtTarget.java
index eb99159c..eca8d323 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalOwnerHurtTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalOwnerHurtTarget.java
@@ -22,8 +22,8 @@ public class PathfinderGoalOwnerHurtTarget extends PathfinderGoalTarget {
             if (entityliving == null) {
                 return false;
             } else {
-                this.b = entityliving.cu();
-                int i = entityliving.cv();
+                this.b = entityliving.ct();
+                int i = entityliving.cu();
 
                 return i != this.c && this.a(this.b, PathfinderTargetCondition.a) && this.a.a(this.b, entityliving);
             }
@@ -38,7 +38,7 @@ public class PathfinderGoalOwnerHurtTarget extends PathfinderGoalTarget {
         EntityLiving entityliving = this.a.getOwner();
 
         if (entityliving != null) {
-            this.c = entityliving.cv();
+            this.c = entityliving.cu();
         }
 
         super.c();
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalRemoveBlock.java b/src/main/java/net/minecraft/server/PathfinderGoalRemoveBlock.java
index 7ccb3d5c..b1457526 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalRemoveBlock.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalRemoveBlock.java
@@ -23,7 +23,7 @@ public class PathfinderGoalRemoveBlock extends PathfinderGoalGotoTarget {
 
     @Override
     public boolean a() {
-        if (!this.entity.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) {
+        if (!this.entity.world.getGameRules().getBoolean("mobGriefing")) {
             return false;
         } else if (this.c > 0) {
             --this.c;
@@ -38,7 +38,7 @@ public class PathfinderGoalRemoveBlock extends PathfinderGoalGotoTarget {
     }
 
     private boolean m() {
-        return this.e != null && this.a((IWorldReader) this.a.world, this.e) ? true : this.l();
+        return this.e != null && this.a.world.isLoaded(this.e) && this.a((IWorldReader) this.a.world, this.e) ? true : this.l();
     }
 
     @Override
@@ -139,8 +139,9 @@ public class PathfinderGoalRemoveBlock extends PathfinderGoalGotoTarget {
 
     @Override
     protected boolean a(IWorldReader iworldreader, BlockPosition blockposition) {
-        IChunkAccess ichunkaccess = iworldreader.getChunkIfLoadedImmediately(blockposition.getX() >> 4, blockposition.getZ() >> 4); // Paper
+        Block block = world.getBlockIfLoaded(blockposition); // Paper
+        if (block == null) return false; // Paper
 
-        return ichunkaccess == null ? false : ichunkaccess.getType(blockposition).getBlock() == this.g && ichunkaccess.getType(blockposition.up()).isAir() && ichunkaccess.getType(blockposition.up(2)).isAir();
+        return block == this.g && iworldreader.getType(blockposition.up()).isAir() && iworldreader.getType(blockposition.up(2)).isAir();
     }
 }
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalSit.java b/src/main/java/net/minecraft/server/PathfinderGoalSit.java
index 3bb38030..21160208 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalSit.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalSit.java
@@ -21,7 +21,7 @@ public class PathfinderGoalSit extends PathfinderGoal {
     public boolean a() {
         if (!this.entity.isTamed()) {
             return this.willSit && this.entity.getGoalTarget() == null; // CraftBukkit - Allow sitting for wild animals
-        } else if (this.entity.av()) {
+        } else if (this.entity.au()) {
             return false;
         } else if (!this.entity.onGround) {
             return false;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalTame.java b/src/main/java/net/minecraft/server/PathfinderGoalTame.java
index 85fd50b3..fc426365 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalTame.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalTame.java
@@ -63,7 +63,7 @@ public class PathfinderGoalTame extends PathfinderGoal {
                     return;
                 }
 
-                this.entity.u(5);
+                this.entity.t(5);
             }
 
             this.entity.ejectPassengers();
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
index f15d8bf8..95afc8ee 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
@@ -115,7 +115,7 @@ public abstract class PathfinderGoalTarget extends PathfinderGoal {
 
     private boolean a(EntityLiving entityliving) {
         this.c = 10 + this.e.getRandom().nextInt(5);
-        PathEntity pathentity = this.e.getNavigation().a((Entity) entityliving, 0);
+        PathEntity pathentity = this.e.getNavigation().a((Entity) entityliving);
 
         if (pathentity == null) {
             return false;
diff --git a/src/main/java/net/minecraft/server/PathfinderNormal.java b/src/main/java/net/minecraft/server/PathfinderNormal.java
index 45fd1350..0cea9db8 100644
--- a/src/main/java/net/minecraft/server/PathfinderNormal.java
+++ b/src/main/java/net/minecraft/server/PathfinderNormal.java
@@ -33,7 +33,7 @@ public class PathfinderNormal extends PathfinderAbstract {
             i = MathHelper.floor(this.b.getBoundingBox().minY);
             BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition(this.b.locX, (double) i, this.b.locZ);
 
-            for (IBlockData iblockdata = this.a.getType(blockposition_mutableblockposition); iblockdata.getBlock() == Blocks.WATER || iblockdata.p() == FluidTypes.WATER.a(false); iblockdata = this.a.getType(blockposition_mutableblockposition)) {
+            for (Block block = this.a.getType(blockposition_mutableblockposition).getBlock(); block == Blocks.WATER; block = this.a.getType(blockposition_mutableblockposition).getBlock()) {
                 ++i;
                 blockposition_mutableblockposition.c(this.b.locX, (double) i, this.b.locZ);
             }
@@ -75,8 +75,8 @@ public class PathfinderNormal extends PathfinderAbstract {
     }
 
     @Override
-    public PathDestination a(double d0, double d1, double d2) {
-        return new PathDestination(this.a(MathHelper.floor(d0), MathHelper.floor(d1), MathHelper.floor(d2)));
+    public PathPoint a(double d0, double d1, double d2) {
+        return this.a(MathHelper.floor(d0), MathHelper.floor(d1), MathHelper.floor(d2));
     }
 
     @Override
@@ -142,7 +142,7 @@ public class PathfinderNormal extends PathfinderAbstract {
     }
 
     private boolean a(PathPoint pathpoint, @Nullable PathPoint pathpoint1, @Nullable PathPoint pathpoint2, @Nullable PathPoint pathpoint3) {
-        return pathpoint3 != null && pathpoint2 != null && pathpoint1 != null ? (pathpoint3.i ? false : (pathpoint2.b <= pathpoint.b && pathpoint1.b <= pathpoint.b ? pathpoint3.k >= 0.0F && (pathpoint2.b < pathpoint.b || pathpoint2.k >= 0.0F) && (pathpoint1.b < pathpoint.b || pathpoint1.k >= 0.0F) : false)) : false;
+        return pathpoint3 != null && !pathpoint3.i && pathpoint2 != null && pathpoint2.k >= 0.0F && pathpoint2.b <= pathpoint.b && pathpoint1 != null && pathpoint1.k >= 0.0F && pathpoint1.b <= pathpoint.b;
     }
 
     public static double a(IBlockAccess iblockaccess, BlockPosition blockposition) {
@@ -238,7 +238,7 @@ public class PathfinderNormal extends PathfinderAbstract {
                         }
 
                         pathpoint1 = this.a(i, j, k);
-                        if (i1++ >= this.b.bv()) {
+                        if (i1++ >= this.b.bu()) {
                             pathpoint1.l = PathType.BLOCKED;
                             pathpoint1.k = -1.0F;
                             return pathpoint1;
diff --git a/src/main/java/net/minecraft/server/PlayerChunk.java b/src/main/java/net/minecraft/server/PlayerChunk.java
index af934ef8..2d0d233f 100644
--- a/src/main/java/net/minecraft/server/PlayerChunk.java
+++ b/src/main/java/net/minecraft/server/PlayerChunk.java
@@ -57,33 +57,11 @@ public class PlayerChunk {
 
     // CraftBukkit start
     public Chunk getFullChunk() {
-        if (!getChunkState(this.oldTicketLevel).isAtLeast(PlayerChunk.State.BORDER)) return null; // note: using oldTicketLevel for isLoaded checks
         CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> statusFuture = this.getStatusFutureUnchecked(ChunkStatus.FULL);
         Either<IChunkAccess, PlayerChunk.Failure> either = (Either<IChunkAccess, PlayerChunk.Failure>) statusFuture.getNow(null);
         return either == null ? null : (Chunk) either.left().orElse(null);
     }
     // CraftBukkit end
-    // Paper start - "real" get full chunk immediately
-    public Chunk getFullChunkIfCached() {
-        // Note: Copied from above without ticket level check
-        CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> statusFuture = this.getStatusFutureUnchecked(ChunkStatus.FULL);
-        Either<IChunkAccess, PlayerChunk.Failure> either = (Either<IChunkAccess, PlayerChunk.Failure>) statusFuture.getNow(null);
-        return either == null ? null : (Chunk) either.left().orElse(null);
-    }
-
-    public IChunkAccess getAvailableChunkNow() {
-        // TODO can we just getStatusFuture(EMPTY)?
-        for (ChunkStatus curr = ChunkStatus.FULL, next = curr.getPreviousStatus(); curr != next; curr = next, next = next.getPreviousStatus()) {
-            CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> future = this.getStatusFutureUnchecked(curr);
-            Either<IChunkAccess, PlayerChunk.Failure> either = future.getNow(null);
-            if (either == null || !either.left().isPresent()) {
-                continue;
-            }
-            return either.left().get();
-        }
-        return null;
-    }
-    // Paper end
 
     public CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> getStatusFutureUnchecked(ChunkStatus chunkstatus) {
         CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> completablefuture = (CompletableFuture) this.statusFutures.get(chunkstatus.c());
@@ -91,10 +69,6 @@ public class PlayerChunk {
         return completablefuture == null ? PlayerChunk.UNLOADED_CHUNK_ACCESS_FUTURE : completablefuture;
     }
 
-    public CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> b(ChunkStatus chunkstatus) {
-        return getChunkStatus(this.ticketLevel).b(chunkstatus) ? this.getStatusFutureUnchecked(chunkstatus) : PlayerChunk.UNLOADED_CHUNK_ACCESS_FUTURE;
-    }
-
     public CompletableFuture<Either<Chunk, PlayerChunk.Failure>> a() {
         return this.tickingFuture;
     }
@@ -103,10 +77,6 @@ public class PlayerChunk {
         return this.entityTickingFuture;
     }
 
-    public CompletableFuture<Either<Chunk, PlayerChunk.Failure>> c() {
-        return this.fullChunkFuture;
-    }
-
     @Nullable
     public Chunk getChunk() {
         CompletableFuture<Either<Chunk, PlayerChunk.Failure>> completablefuture = this.a();
@@ -115,24 +85,6 @@ public class PlayerChunk {
         return either == null ? null : (Chunk) either.left().orElse(null); // CraftBukkit - decompile error
     }
 
-    @Nullable
-    public IChunkAccess f() {
-        for (int i = PlayerChunk.CHUNK_STATUSES.size() - 1; i >= 0; --i) {
-            ChunkStatus chunkstatus = (ChunkStatus) PlayerChunk.CHUNK_STATUSES.get(i);
-            CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> completablefuture = this.getStatusFutureUnchecked(chunkstatus);
-
-            if (!completablefuture.isCompletedExceptionally()) {
-                Optional<IChunkAccess> optional = ((Either) completablefuture.getNow(PlayerChunk.UNLOADED_CHUNK_ACCESS)).left();
-
-                if (optional.isPresent()) {
-                    return (IChunkAccess) optional.get();
-                }
-            }
-        }
-
-        return null;
-    }
-
     public CompletableFuture<IChunkAccess> getChunkSave() {
         return this.chunkSave;
     }
@@ -176,11 +128,6 @@ public class PlayerChunk {
             World world = chunk.getWorld();
 
             if (this.dirtyCount == 64) {
-                // Paper start - Anti-Xray - Load nearby chunks if necessary
-                if (!chunk.world.chunkPacketBlockController.onChunkPacketCreate(chunk, '\uffff', false)) {
-                    return;
-                }
-                // Paper end
                 this.s = -1;
             }
 
@@ -213,7 +160,7 @@ public class PlayerChunk {
                     this.a(world, blockposition);
                 }
             } else if (this.dirtyCount == 64) {
-                this.a(new PacketPlayOutMapChunk(chunk, this.r, true), false); // Paper - Anti-Xray
+                this.a(new PacketPlayOutMapChunk(chunk, this.r), false);
             } else if (this.dirtyCount != 0) {
                 this.a(new PacketPlayOutMultiBlockChange(this.dirtyCount, this.dirtyBlocks, chunk), false);
 
@@ -286,7 +233,7 @@ public class PlayerChunk {
         });
     }
 
-    public ChunkCoordIntPair i() {
+    public ChunkCoordIntPair h() {
         return this.location;
     }
 
@@ -294,7 +241,7 @@ public class PlayerChunk {
         return this.ticketLevel;
     }
 
-    public int k() {
+    public int j() {
         return this.n;
     }
 
@@ -316,7 +263,7 @@ public class PlayerChunk {
         // CraftBukkit start
         // ChunkUnloadEvent: Called before the chunk is unloaded: isChunkLoaded is still true and chunk can still be modified by plugins.
         if (playerchunk_state.isAtLeast(PlayerChunk.State.BORDER) && !playerchunk_state1.isAtLeast(PlayerChunk.State.BORDER)) {
-            this.getStatusFutureUnchecked(ChunkStatus.FULL).thenAcceptAsync((either) -> {
+            this.getStatusFutureUnchecked(ChunkStatus.FULL).thenAccept((either) -> {
                 either.ifLeft((chunkAccess) -> {
                     Chunk chunk = (Chunk) chunkAccess;
                     // Minecraft will apply the chunks tick lists to the world once the chunk got loaded, and then store the tick
@@ -324,11 +271,11 @@ public class PlayerChunk {
                     // These actions may however happen deferred, so we manually set the needsSaving flag already here.
                     chunk.setNeedsSaving(true);
                     chunk.unloadCallback();
-                });
-            }, playerchunkmap.callbackExecutor);
 
-            // Run callback right away if the future was already done
-            playerchunkmap.callbackExecutor.run();
+                    // MCMT
+                    this.getFullChunk().getWorld().getWorldData().world.getPartitionManager().removeChunk(this);
+                });
+            });
         }
         // CraftBukkit end
         CompletableFuture completablefuture;
@@ -398,20 +345,20 @@ public class PlayerChunk {
             this.entityTickingFuture = PlayerChunk.UNLOADED_CHUNK_FUTURE;
         }
 
-        this.w.a(this.location, this::k, this.ticketLevel, this::d);
+        this.w.a(this.location, this::j, this.ticketLevel, this::d);
         this.oldTicketLevel = this.ticketLevel;
         // CraftBukkit start
         // ChunkLoadEvent: Called after the chunk is loaded: isChunkLoaded returns true and chunk is ready to be modified by plugins.
         if (!playerchunk_state.isAtLeast(PlayerChunk.State.BORDER) && playerchunk_state1.isAtLeast(PlayerChunk.State.BORDER)) {
-            this.getStatusFutureUnchecked(ChunkStatus.FULL).thenAcceptAsync((either) -> {
+            this.getStatusFutureUnchecked(ChunkStatus.FULL).thenAccept((either) -> {
                 either.ifLeft((chunkAccess) -> {
                     Chunk chunk = (Chunk) chunkAccess;
                     chunk.loadCallback();
-                });
-            }, playerchunkmap.callbackExecutor);
 
-            // Run callback right away if the future was already done
-            playerchunkmap.callbackExecutor.run();
+                    // MCMT
+                    this.getFullChunk().getWorld().getWorldData().world.getPartitionManager().addChunk(this);
+                });
+            });
         }
         // CraftBukkit end
     }
@@ -428,7 +375,7 @@ public class PlayerChunk {
         return this.hasBeenLoaded;
     }
 
-    public void m() {
+    public void l() {
         this.hasBeenLoaded = getChunkState(this.ticketLevel).isAtLeast(PlayerChunk.State.BORDER);
     }
 
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 8aa610ba..c091007d 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -1,10 +1,9 @@
 package net.minecraft.server;
 
-import co.aikar.timings.Timing; // Paper
 import com.destroystokyo.paper.PaperWorldConfig; // Paper
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Iterables;
-import com.google.common.collect.ComparisonChain; // Paper
+import co.aikar.timings.Timing;
+import com.google.common.collect.ComparisonChain;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Queues;
 import com.google.common.collect.Sets;
@@ -21,7 +20,6 @@ import it.unimi.dsi.fastutil.objects.ObjectBidirectionalIterator;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import java.io.File;
 import java.io.IOException;
-import java.io.Writer;
 import java.util.ArrayList;
 import java.util.HashMap; // Paper
 import java.util.Iterator;
@@ -31,10 +29,8 @@ import java.util.Objects;
 import java.util.Optional;
 import java.util.Queue;
 import java.util.Set;
-import java.util.concurrent.CancellationException;
 import java.util.UUID; // Paper
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.CompletionException;
 import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.BooleanSupplier;
@@ -70,7 +66,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     private final Mailbox<ChunkTaskQueueSorter.a<Runnable>> mailboxWorldGen;
     private final Mailbox<ChunkTaskQueueSorter.a<Runnable>> mailboxMain;
     public final WorldLoadListener worldLoadListener;
-    public final PlayerChunkMap.a chunkDistanceManager; public final PlayerChunkMap.a getChunkMapDistanceManager() { return this.chunkDistanceManager; } // Paper - OBFHELPER
+    private final PlayerChunkMap.a u; public final PlayerChunkMap.a getChunkMapDistanceManager() { return this.u; } // Paper - OBFHELPER
     private final AtomicInteger v;
     private final DefinedStructureManager definedStructureManager;
     private final File x;
@@ -78,33 +74,9 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     public final Int2ObjectMap<PlayerChunkMap.EntityTracker> trackedEntities;
     private final Queue<Runnable> A;
     private int viewDistance;
+    private int entityDistance;
 
-    // CraftBukkit start - recursion-safe executor for Chunk loadCallback() and unloadCallback()
-    public final CallbackExecutor callbackExecutor = new CallbackExecutor();
-    public static final class CallbackExecutor implements java.util.concurrent.Executor, Runnable {
-
-        private Runnable queued;
-
-        @Override
-        public void execute(Runnable runnable) {
-            if (queued != null) {
-                throw new IllegalStateException("Already queued");
-            }
-            queued = runnable;
-        }
-
-        @Override
-        public void run() {
-            Runnable task = queued;
-            queued = null;
-            if (task != null) {
-                task.run();
-            }
-        }
-    };
-    // CraftBukkit end
-
-    public PlayerChunkMap(WorldServer worldserver, File file, DataFixer datafixer, DefinedStructureManager definedstructuremanager, Executor executor, IAsyncTaskHandler<Runnable> iasynctaskhandler, ILightAccess ilightaccess, ChunkGenerator<?> chunkgenerator, WorldLoadListener worldloadlistener, Supplier<WorldPersistentData> supplier, int i) {
+    public PlayerChunkMap(WorldServer worldserver, File file, DataFixer datafixer, DefinedStructureManager definedstructuremanager, Executor executor, IAsyncTaskHandler<Runnable> iasynctaskhandler, ILightAccess ilightaccess, ChunkGenerator<?> chunkgenerator, WorldLoadListener worldloadlistener, Supplier<WorldPersistentData> supplier, int i, int j) {
         super(new File(worldserver.getWorldProvider().getDimensionManager().a(file), "region"), datafixer);
         this.visibleChunks = this.updatingChunks.clone();
         this.pendingUnload = new Long2ObjectLinkedOpenHashMap();
@@ -120,21 +92,19 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         this.chunkGenerator = chunkgenerator;
         this.executor = iasynctaskhandler;
         ThreadedMailbox<Runnable> threadedmailbox = ThreadedMailbox.a(executor, "worldgen");
-
-        iasynctaskhandler.getClass();
-        Mailbox<Runnable> mailbox = Mailbox.a("main", iasynctaskhandler::a);
+        ThreadedMailbox<Runnable> threadedmailbox1 = ThreadedMailbox.a((Executor) iasynctaskhandler, "main");
 
         this.worldLoadListener = worldloadlistener;
-        ThreadedMailbox<Runnable> threadedmailbox1 = ThreadedMailbox.a(executor, "light");
+        ThreadedMailbox<Runnable> threadedmailbox2 = ThreadedMailbox.a(executor, "light");
 
-        this.q = new ChunkTaskQueueSorter(ImmutableList.of(threadedmailbox, mailbox, threadedmailbox1), executor, Integer.MAX_VALUE);
+        this.q = new ChunkTaskQueueSorter(ImmutableList.of(threadedmailbox, threadedmailbox1, threadedmailbox2), executor, Integer.MAX_VALUE);
         this.mailboxWorldGen = this.q.a(threadedmailbox, false);
-        this.mailboxMain = this.q.a(mailbox, false);
-        this.lightEngine = new LightEngineThreaded(ilightaccess, this, this.world.getWorldProvider().g(), threadedmailbox1, this.q.a(threadedmailbox1, false));
-        this.chunkDistanceManager = new PlayerChunkMap.a(executor, iasynctaskhandler);
+        this.mailboxMain = this.q.a(threadedmailbox1, false);
+        this.lightEngine = new LightEngineThreaded(ilightaccess, this, this.world.getWorldProvider().g(), threadedmailbox2, this.q.a(threadedmailbox2, false));
+        this.u = new PlayerChunkMap.a(executor, iasynctaskhandler);
         this.m = supplier;
         this.n = new VillagePlace(new File(this.x, "poi"), datafixer);
-        this.setViewDistance(i);
+        this.setViewDistance(i, j);
     }
 
     private static double a(ChunkCoordIntPair chunkcoordintpair, Entity entity) {
@@ -188,7 +158,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         return () -> {
             PlayerChunk playerchunk = this.getVisibleChunk(i);
 
-            return playerchunk == null ? ChunkTaskQueue.a - 1 : Math.min(playerchunk.k(), ChunkTaskQueue.a - 1);
+            return playerchunk == null ? ChunkTaskQueue.a - 1 : Math.min(playerchunk.j(), ChunkTaskQueue.a - 1);
         };
     }
 
@@ -299,7 +269,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
     protected void save(boolean flag) {
         if (flag) {
-            List<PlayerChunk> list = (List) this.visibleChunks.values().stream().filter(PlayerChunk::hasBeenLoaded).peek(PlayerChunk::m).collect(Collectors.toList());
+            List<PlayerChunk> list = (List) this.visibleChunks.values().stream().filter(PlayerChunk::hasBeenLoaded).peek(PlayerChunk::l).collect(Collectors.toList());
             MutableBoolean mutableboolean = new MutableBoolean();
 
             do {
@@ -325,32 +295,15 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             });
             PlayerChunkMap.LOGGER.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", this.x.getName());
         } else {
-            // Paper start
-            int savedThisTick = 0;
-            for (PlayerChunk playerchunk : this.visibleChunks.values()) {
-                if (!playerchunk.hasBeenLoaded()) continue;
-                // Paper end
+            this.visibleChunks.values().stream().filter(PlayerChunk::hasBeenLoaded).forEach((playerchunk) -> {
                 IChunkAccess ichunkaccess = (IChunkAccess) playerchunk.getChunkSave().getNow(null); // CraftBukkit - decompile error
 
                 if (ichunkaccess instanceof ProtoChunkExtension || ichunkaccess instanceof Chunk) {
-                    // paper start
-                    boolean shouldSave = true;
-
-                    if (ichunkaccess instanceof Chunk) {
-                        shouldSave = ((Chunk) ichunkaccess).lastSaved + world.paperConfig.autoSavePeriod <= world.getTime();
-                    }
-
-                    if (shouldSave && this.saveChunk(ichunkaccess)) {
-                        ++savedThisTick;
-                    playerchunk.m();
+                    this.saveChunk(ichunkaccess);
+                    playerchunk.l();
                 }
 
-                    if (savedThisTick >= world.paperConfig.maxAutoSaveChunksPerTick) {
-                        return;
-                    }
-                }
-            };
-            // paper end
+            });
         }
 
     }
@@ -375,7 +328,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         // Spigot start
         org.spigotmc.SlackActivityAccountant activityAccountant = this.world.getMinecraftServer().slackActivityAccountant;
         activityAccountant.startActivity(0.5);
-        int targetSize = Math.min(this.unloadQueue.size() - 100,  (int) (this.unloadQueue.size() * UNLOAD_QUEUE_RESIZE_FACTOR)); // Paper - Make more aggressive
+            int targetSize = Math.min(this.unloadQueue.size() - 100,  (int) (this.unloadQueue.size() * UNLOAD_QUEUE_RESIZE_FACTOR)); // Paper - Make more aggressive
         // Spigot end
         while (longiterator.hasNext()) { // Spigot
             long j = longiterator.nextLong();
@@ -437,7 +390,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         this.A.getClass();
         completablefuture.thenAcceptAsync(consumer, queue::add).whenComplete((ovoid, throwable) -> {
             if (throwable != null) {
-                PlayerChunkMap.LOGGER.error("Failed to save chunk " + playerchunk.i(), throwable);
+                PlayerChunkMap.LOGGER.error("Failed to save chunk " + playerchunk.h(), throwable);
             }
 
         });
@@ -454,7 +407,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     }
 
     public CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> a(PlayerChunk playerchunk, ChunkStatus chunkstatus) {
-        ChunkCoordIntPair chunkcoordintpair = playerchunk.i();
+        ChunkCoordIntPair chunkcoordintpair = playerchunk.h();
 
         if (chunkstatus == ChunkStatus.EMPTY) {
             return this.f(chunkcoordintpair);
@@ -468,7 +421,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                     return CompletableFuture.completedFuture(either);
                 } else {
                     if (chunkstatus == ChunkStatus.LIGHT) {
-                        this.chunkDistanceManager.a(TicketType.LIGHT, chunkcoordintpair, 33 + ChunkStatus.a(ChunkStatus.FEATURES), chunkcoordintpair);
+                        this.u.a(TicketType.LIGHT, chunkcoordintpair, 33 + ChunkStatus.a(ChunkStatus.FEATURES), chunkcoordintpair);
                     }
 
                     IChunkAccess ichunkaccess = (IChunkAccess) optional.get();
@@ -496,11 +449,8 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
     private CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> f(ChunkCoordIntPair chunkcoordintpair) {
         return CompletableFuture.supplyAsync(() -> {
-            try (Timing ignored = this.world.timings.syncChunkLoadTimer.startTimingIfSync()) { // Paper
-                NBTTagCompound nbttagcompound; // Paper
-                try (Timing ignored2 = this.world.timings.chunkIOStage1.startTimingIfSync()) { // Paper
-                nbttagcompound = this.readChunkData(chunkcoordintpair);
-                }
+            try {
+                NBTTagCompound nbttagcompound = this.readChunkData(chunkcoordintpair);
 
                 if (nbttagcompound != null) {
                     boolean flag = nbttagcompound.hasKeyOfType("Level", 10) && nbttagcompound.getCompound("Level").hasKeyOfType("Status", 8);
@@ -526,12 +476,12 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                 PlayerChunkMap.LOGGER.error("Couldn't load chunk {}", chunkcoordintpair, exception);
             }
 
-            return Either.left(new ProtoChunk(chunkcoordintpair, ChunkConverter.a, this.world)); // Paper - Anti-Xray
+            return Either.left(new ProtoChunk(chunkcoordintpair, ChunkConverter.a));
         }, this.executor);
     }
 
     private CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> b(PlayerChunk playerchunk, ChunkStatus chunkstatus) {
-        ChunkCoordIntPair chunkcoordintpair = playerchunk.i();
+        ChunkCoordIntPair chunkcoordintpair = playerchunk.h();
         CompletableFuture<Either<List<IChunkAccess>, PlayerChunk.Failure>> completablefuture = this.a(chunkcoordintpair, chunkstatus.f(), (i) -> {
             return this.a(chunkstatus, i);
         });
@@ -565,7 +515,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
     protected void c(ChunkCoordIntPair chunkcoordintpair) {
         this.executor.a(SystemUtils.a(() -> {
-            this.chunkDistanceManager.b(TicketType.LIGHT, chunkcoordintpair, 33 + ChunkStatus.a(ChunkStatus.FEATURES), chunkcoordintpair);
+            this.u.b(TicketType.LIGHT, chunkcoordintpair, 33 + ChunkStatus.a(ChunkStatus.FEATURES), chunkcoordintpair);
         }, () -> {
             return "release light ticket " + chunkcoordintpair;
         }));
@@ -590,8 +540,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             ChunkStatus chunkstatus = PlayerChunk.getChunkStatus(playerchunk.getTicketLevel());
 
             return !chunkstatus.b(ChunkStatus.FULL) ? PlayerChunk.UNLOADED_CHUNK_ACCESS : either.mapLeft((ichunkaccess) -> {
-            try (Timing ignored = world.timings.chunkIOStage2.startTimingIfSync()) { // Paper
-                ChunkCoordIntPair chunkcoordintpair = playerchunk.i();
+                ChunkCoordIntPair chunkcoordintpair = playerchunk.h();
                 Chunk chunk;
 
                 if (ichunkaccess instanceof ProtoChunkExtension) {
@@ -673,11 +622,10 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                 }
 
                 return chunk;
-                } // Paper
             });
         }, (runnable) -> {
             Mailbox mailbox = this.mailboxMain;
-            long i = playerchunk.i().pair();
+            long i = playerchunk.h().pair();
 
             playerchunk.getClass();
             mailbox.a(ChunkTaskQueueSorter.a(runnable, i, playerchunk::getTicketLevel)); // CraftBukkit - decompile error
@@ -685,7 +633,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     }
 
     public CompletableFuture<Either<Chunk, PlayerChunk.Failure>> a(PlayerChunk playerchunk) {
-        ChunkCoordIntPair chunkcoordintpair = playerchunk.i();
+        ChunkCoordIntPair chunkcoordintpair = playerchunk.h();
         CompletableFuture<Either<List<IChunkAccess>, PlayerChunk.Failure>> completablefuture = this.a(chunkcoordintpair, 1, (i) -> {
             return ChunkStatus.FULL;
         });
@@ -755,10 +703,8 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                 NBTTagCompound nbttagcompound;
 
                 if (chunkstatus.getType() != ChunkStatus.Type.LEVELCHUNK) {
-                    // Paper start - Optimize save by using status cache
-                    ChunkStatus statusOnDisk = this.getChunkStatusOnDisk(chunkcoordintpair);
-                    if (statusOnDisk != null && statusOnDisk.getType() == ChunkStatus.Type.LEVELCHUNK) {
-                        // Paper end
+                    nbttagcompound = this.readChunkData(chunkcoordintpair);
+                    if (nbttagcompound != null && ChunkRegionLoader.a(nbttagcompound) == ChunkStatus.Type.LEVELCHUNK) {
                         return false;
                     }
 
@@ -778,31 +724,38 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         }
     }
 
-    protected void setViewDistance(int i) {
-        int j = MathHelper.clamp(i + 1, 3, 33);
-
-        if (j != this.viewDistance) {
-            int k = this.viewDistance;
+    protected void setViewDistance(int i, int j) {
+        int k = MathHelper.clamp(i + 1, 3, 33);
+        int l;
 
-            this.viewDistance = j;
-            this.chunkDistanceManager.a(this.viewDistance);
+        if (k != this.viewDistance) {
+            l = this.viewDistance;
+            this.viewDistance = k;
+            this.u.b(this.viewDistance);
             ObjectIterator objectiterator = this.updatingChunks.values().iterator();
 
             while (objectiterator.hasNext()) {
                 PlayerChunk playerchunk = (PlayerChunk) objectiterator.next();
-                ChunkCoordIntPair chunkcoordintpair = playerchunk.i();
+                ChunkCoordIntPair chunkcoordintpair = playerchunk.h();
                 Packet<?>[] apacket = new Packet[2];
 
+                int finall = l; // CraftBukkit - decompile error
                 this.a(chunkcoordintpair, false).forEach((entityplayer) -> {
-                    int l = b(chunkcoordintpair, entityplayer, true);
-                    boolean flag = l <= k;
-                    boolean flag1 = l <= this.viewDistance;
+                    int i1 = b(chunkcoordintpair, entityplayer, true);
+                    boolean flag = i1 <= finall; // CraftBukkit - decompile error
+                    boolean flag1 = i1 <= this.viewDistance;
 
                     this.sendChunk(entityplayer, chunkcoordintpair, apacket, flag, flag1);
                 });
             }
         }
 
+        l = MathHelper.clamp(j + 1, 1, 16);
+        if (l != this.entityDistance) {
+            this.entityDistance = l;
+            this.u.setEntityDistance(this.entityDistance);
+        }
+
     }
 
     protected void sendChunk(EntityPlayer entityplayer, ChunkCoordIntPair chunkcoordintpair, Packet<?>[] apacket, boolean flag, boolean flag1) {
@@ -833,114 +786,21 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     }
 
     protected PlayerChunkMap.a e() {
-        return this.chunkDistanceManager;
+        return this.u;
     }
 
-    protected Iterable<PlayerChunk> f() {
-        return Iterables.unmodifiableIterable(this.visibleChunks.values());
-    }
-
-    void a(Writer writer) throws IOException {
-        CSVWriter csvwriter = CSVWriter.a().a("x").a("z").a("level").a("in_memory").a("status").a("full_status").a("accessible_ready").a("ticking_ready").a("entity_ticking_ready").a("ticket").a("spawning").a("entity_count").a("block_entity_count").a(writer);
-        ObjectBidirectionalIterator objectbidirectionaliterator = this.visibleChunks.long2ObjectEntrySet().iterator();
-
-        while (objectbidirectionaliterator.hasNext()) {
-            Entry<PlayerChunk> entry = (Entry) objectbidirectionaliterator.next();
-            ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(entry.getLongKey());
-            PlayerChunk playerchunk = (PlayerChunk) entry.getValue();
-            Optional<IChunkAccess> optional = Optional.ofNullable(playerchunk.f());
-            Optional<Chunk> optional1 = optional.flatMap((ichunkaccess) -> {
-                return ichunkaccess instanceof Chunk ? Optional.of((Chunk) ichunkaccess) : Optional.empty();
-            });
-
-            // Craftbukkit - decompile error
-            csvwriter.a(chunkcoordintpair.x, chunkcoordintpair.z, playerchunk.getTicketLevel(), optional.isPresent(), optional.map(IChunkAccess::getChunkStatus).orElse(null), optional1.map(Chunk::getState).orElse(null), a(playerchunk.c()), a(playerchunk.a()), a(playerchunk.b()), this.chunkDistanceManager.c(entry.getLongKey()), !this.isOutsideOfRange(chunkcoordintpair), optional1.map((chunk) -> {
-                return Stream.of(chunk.getEntitySlices()).mapToInt(List::size).sum(); // Spigot
-            }).orElse(0), optional1.map((chunk) -> {
-                return chunk.getTileEntities().size();
-            }).orElse(0));
-        }
-
-    }
-
-    private static String a(CompletableFuture<Either<Chunk, PlayerChunk.Failure>> completablefuture) {
-        try {
-            Either<Chunk, PlayerChunk.Failure> either = (Either) completablefuture.getNow(null); // Craftbukkit - decompile error
-
-            return either != null ? (String) either.map((chunk) -> {
-                return "done";
-            }, (playerchunk_failure) -> {
-                return "unloaded";
-            }) : "not completed";
-        } catch (CompletionException completionexception) {
-            return "failed " + completionexception.getCause().getMessage();
-        } catch (CancellationException cancellationexception) {
-            return "cancelled";
-        }
+    protected ObjectBidirectionalIterator<Entry<PlayerChunk>> f() {
+        return this.visibleChunks.long2ObjectEntrySet().fastIterator();
     }
 
     @Nullable
-    public NBTTagCompound readChunkData(ChunkCoordIntPair chunkcoordintpair) throws IOException { // Paper - private -> public
+    private NBTTagCompound readChunkData(ChunkCoordIntPair chunkcoordintpair) throws IOException {
         NBTTagCompound nbttagcompound = this.read(chunkcoordintpair);
 
-        // Paper start - Cache chunk status on disk
-        if (nbttagcompound == null) {
-            return null;
-        }
-
-        nbttagcompound = this.getChunkData(this.world.getWorldProvider().getDimensionManager(), this.m, nbttagcompound, chunkcoordintpair, world); // CraftBukkit
-        if (nbttagcompound == null) {
-            return null;
-        }
-
-        this.updateChunkStatusOnDisk(chunkcoordintpair, nbttagcompound);
-
-        return nbttagcompound;
-        // Paper end
-    }
-
-    // Paper start - chunk status cache "api"
-    public ChunkStatus getChunkStatusOnDiskIfCached(ChunkCoordIntPair chunkPos) {
-        RegionFile regionFile = this.getRegionFileIfLoaded(chunkPos);
-
-        return regionFile == null ? null : regionFile.getStatusIfCached(chunkPos.x, chunkPos.z);
-    }
-
-    public ChunkStatus getChunkStatusOnDisk(ChunkCoordIntPair chunkPos) throws IOException {
-        RegionFile regionFile = this.getRegionFile(chunkPos, false);
-
-        if (!regionFile.chunkExists(chunkPos)) {
-            return null;
-        }
-
-        ChunkStatus status = regionFile.getStatusIfCached(chunkPos.x, chunkPos.z);
-
-        if (status != null) {
-            return status;
-        }
-
-        this.readChunkData(chunkPos);
-
-        return regionFile.getStatusIfCached(chunkPos.x, chunkPos.z);
-    }
-
-    public void updateChunkStatusOnDisk(ChunkCoordIntPair chunkPos, @Nullable NBTTagCompound compound) throws IOException {
-        RegionFile regionFile = this.getRegionFile(chunkPos, false);
-
-        regionFile.setStatus(chunkPos.x, chunkPos.z, ChunkRegionLoader.getStatus(compound));
-    }
-
-    public IChunkAccess getUnloadingChunk(int chunkX, int chunkZ) {
-        PlayerChunk chunkHolder = this.pendingUnload.get(ChunkCoordIntPair.pair(chunkX, chunkZ));
-        return chunkHolder == null ? null : chunkHolder.getAvailableChunkNow();
-    }
-    // Paper end
-
-    boolean isOutsideOfRange(ChunkCoordIntPair chunkcoordintpair) {
-        // Spigot start
-        return isOutsideOfRange(chunkcoordintpair, false);
+        return nbttagcompound == null ? null : this.getChunkData(this.world.getWorldProvider().getDimensionManager(), this.m, nbttagcompound, chunkcoordintpair, world); // CraftBukkit
     }
 
+    // Spigot Start
     boolean isOutsideOfRange(ChunkCoordIntPair chunkcoordintpair, boolean reducedRange) {
         int chunkRange = world.spigotConfig.mobSpawnRange;
         chunkRange = (chunkRange > world.spigotConfig.viewDistance) ? (byte) world.spigotConfig.viewDistance : chunkRange;
@@ -949,15 +809,13 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         final int finalChunkRange = chunkRange; // Paper for lambda below
         //double blockRange = (reducedRange) ? Math.pow(chunkRange << 4, 2) : 16384.0D; // Paper - use from event
         // Spigot end
-        long i = chunkcoordintpair.pair();
 
-        return !this.chunkDistanceManager.d(i) ? true : this.playerMap.a(i).noneMatch((entityplayer) -> {
+        return this.playerMap.a(chunkcoordintpair.pair()).noneMatch((entityplayer) -> {
             // Paper start -
             com.destroystokyo.paper.event.entity.PlayerNaturallySpawnCreaturesEvent event;
             double blockRange = 16384.0D;
             if (reducedRange) {
                 event = new com.destroystokyo.paper.event.entity.PlayerNaturallySpawnCreaturesEvent(entityplayer.getBukkitEntity(), (byte) finalChunkRange);
-                event.callEvent();
                 blockRange = (double) ((event.getSpawnRadius() << 4) * (event.getSpawnRadius() << 4));
                 if (event.isCancelled()) return true;
             }
@@ -968,7 +826,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     }
 
     private boolean b(EntityPlayer entityplayer) {
-        return entityplayer.isSpectator() && !this.world.getGameRules().getBoolean(GameRules.SPECTATORS_GENERATE_CHUNKS);
+        return entityplayer.isSpectator() && !this.world.getGameRules().getBoolean("spectatorsGenerateChunks");
     }
 
     void a(EntityPlayer entityplayer, boolean flag) {
@@ -979,16 +837,15 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
         if (flag) {
             this.playerMap.a(ChunkCoordIntPair.pair(i, j), entityplayer, flag1);
-            this.c(entityplayer);
             if (!flag1) {
-                this.chunkDistanceManager.a(SectionPosition.a((Entity) entityplayer), entityplayer);
+                this.u.a(SectionPosition.a((Entity) entityplayer), entityplayer);
             }
         } else {
             SectionPosition sectionposition = entityplayer.M();
 
             this.playerMap.a(sectionposition.u().pair(), entityplayer);
-            if (!flag2) {
-                this.chunkDistanceManager.b(sectionposition, entityplayer);
+            if (!flag1) {
+                this.u.b(sectionposition, entityplayer);
             }
         }
 
@@ -996,20 +853,12 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             for (int l = j - this.viewDistance; l <= j + this.viewDistance; ++l) {
                 ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(k, l);
 
-                this.sendChunk(entityplayer, chunkcoordintpair, new Packet[2], !flag, flag);
+                this.sendChunk(entityplayer, chunkcoordintpair, new Packet[2], !flag && !flag2, flag && !flag1);
             }
         }
 
     }
 
-    private SectionPosition c(EntityPlayer entityplayer) {
-        SectionPosition sectionposition = SectionPosition.a((Entity) entityplayer);
-
-        entityplayer.a(sectionposition);
-        entityplayer.playerConnection.sendPacket(new PacketPlayOutViewCentre(sectionposition.a(), sectionposition.c()));
-        return sectionposition;
-    }
-
     public void movePlayer(EntityPlayer entityplayer) {
         ObjectIterator objectiterator = this.trackedEntities.values().iterator();
 
@@ -1029,18 +878,17 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         SectionPosition sectionposition1 = SectionPosition.a((Entity) entityplayer);
         long k = sectionposition.u().pair();
         long l = sectionposition1.u().pair();
-        boolean flag = this.playerMap.d(entityplayer);
+        boolean flag = this.playerMap.c(entityplayer);
         boolean flag1 = this.b(entityplayer);
         boolean flag2 = sectionposition.v() != sectionposition1.v();
 
         if (flag2 || flag != flag1) {
-            this.c(entityplayer);
-            if (!flag) {
-                this.chunkDistanceManager.b(sectionposition, entityplayer);
+            if (!flag && flag1 || flag2) {
+                this.u.b(sectionposition, entityplayer);
             }
 
-            if (!flag1) {
-                this.chunkDistanceManager.a(sectionposition1, entityplayer);
+            if (flag && !flag1 || flag2) {
+                this.u.a(sectionposition1, entityplayer);
             }
 
             if (!flag && flag1) {
@@ -1054,52 +902,52 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             if (k != l) {
                 this.playerMap.a(k, l, entityplayer);
             }
-        }
 
-        int i1 = sectionposition.a();
-        int j1 = sectionposition.c();
-        int k1;
-        int l1;
+            int i1 = sectionposition.a();
+            int j1 = sectionposition.c();
+            int k1;
+            int l1;
 
-        if (Math.abs(i1 - i) <= this.viewDistance * 2 && Math.abs(j1 - j) <= this.viewDistance * 2) {
-            k1 = Math.min(i, i1) - this.viewDistance;
-            l1 = Math.min(j, j1) - this.viewDistance;
-            int i2 = Math.max(i, i1) + this.viewDistance;
-            int j2 = Math.max(j, j1) + this.viewDistance;
+            if (Math.abs(i1 - i) <= this.viewDistance * 2 && Math.abs(j1 - j) <= this.viewDistance * 2) {
+                k1 = Math.min(i, i1) - this.viewDistance;
+                l1 = Math.min(j, j1) - this.viewDistance;
+                int i2 = Math.max(i, i1) + this.viewDistance;
+                int j2 = Math.max(j, j1) + this.viewDistance;
 
-            for (int k2 = k1; k2 <= i2; ++k2) {
-                for (int l2 = l1; l2 <= j2; ++l2) {
-                    ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(k2, l2);
-                    boolean flag3 = a(chunkcoordintpair, i1, j1) <= this.viewDistance;
-                    boolean flag4 = a(chunkcoordintpair, i, j) <= this.viewDistance;
+                for (int k2 = k1; k2 <= i2; ++k2) {
+                    for (int l2 = l1; l2 <= j2; ++l2) {
+                        ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(k2, l2);
+                        boolean flag3 = !flag && a(chunkcoordintpair, i1, j1) <= this.viewDistance;
+                        boolean flag4 = !flag1 && a(chunkcoordintpair, i, j) <= this.viewDistance;
 
-                    this.sendChunk(entityplayer, chunkcoordintpair, new Packet[2], flag3, flag4);
+                        this.sendChunk(entityplayer, chunkcoordintpair, new Packet[2], flag3, flag4);
+                    }
                 }
-            }
-        } else {
-            ChunkCoordIntPair chunkcoordintpair1;
-            boolean flag5;
-            boolean flag6;
-
-            for (k1 = i1 - this.viewDistance; k1 <= i1 + this.viewDistance; ++k1) {
-                for (l1 = j1 - this.viewDistance; l1 <= j1 + this.viewDistance; ++l1) {
-                    chunkcoordintpair1 = new ChunkCoordIntPair(k1, l1);
-                    flag5 = true;
-                    flag6 = false;
-                    this.sendChunk(entityplayer, chunkcoordintpair1, new Packet[2], true, false);
+            } else {
+                ChunkCoordIntPair chunkcoordintpair1;
+                boolean flag5;
+                boolean flag6;
+
+                for (k1 = i1 - this.viewDistance; k1 <= i1 + this.viewDistance; ++k1) {
+                    for (l1 = j1 - this.viewDistance; l1 <= j1 + this.viewDistance; ++l1) {
+                        chunkcoordintpair1 = new ChunkCoordIntPair(k1, l1);
+                        flag5 = !flag;
+                        flag6 = false;
+                        this.sendChunk(entityplayer, chunkcoordintpair1, new Packet[2], flag5, false);
+                    }
                 }
-            }
 
-            for (k1 = i - this.viewDistance; k1 <= i + this.viewDistance; ++k1) {
-                for (l1 = j - this.viewDistance; l1 <= j + this.viewDistance; ++l1) {
-                    chunkcoordintpair1 = new ChunkCoordIntPair(k1, l1);
-                    flag5 = false;
-                    flag6 = true;
-                    this.sendChunk(entityplayer, chunkcoordintpair1, new Packet[2], false, true);
+                for (k1 = i - this.viewDistance; k1 <= i + this.viewDistance; ++k1) {
+                    for (l1 = j - this.viewDistance; l1 <= j + this.viewDistance; ++l1) {
+                        chunkcoordintpair1 = new ChunkCoordIntPair(k1, l1);
+                        flag5 = false;
+                        flag6 = !flag1;
+                        this.sendChunk(entityplayer, chunkcoordintpair1, new Packet[2], false, flag6);
+                    }
                 }
             }
-        }
 
+        }
     }
 
     @Override
@@ -1112,7 +960,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     }
 
     protected void addEntity(Entity entity) {
-        org.spigotmc.AsyncCatcher.catchOp("entity track"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp( "entity track"); // Spigot
         if (!(entity instanceof EntityComplexPart)) {
             if (!(entity instanceof EntityLightning)) {
                 EntityTypes<?> entitytypes = entity.getEntityType();
@@ -1149,7 +997,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     }
 
     protected void removeEntity(Entity entity) {
-        org.spigotmc.AsyncCatcher.catchOp("entity untrack"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp( "entity untrack"); // Spigot
         if (entity instanceof EntityPlayer) {
             EntityPlayer entityplayer = (EntityPlayer) entity;
 
@@ -1228,7 +1076,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
     private void a(EntityPlayer entityplayer, Packet<?>[] apacket, Chunk chunk) {
         if (apacket[0] == null) {
-            apacket[0] = new PacketPlayOutMapChunk(chunk, 65535, true); // Paper - Anti-Xray
+            apacket[0] = new PacketPlayOutMapChunk(chunk, 65535);
             apacket[1] = new PacketPlayOutLightUpdate(chunk.getPos(), this.lightEngine);
         }
 
@@ -1345,7 +1193,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         }
 
         public void clear(EntityPlayer entityplayer) {
-            org.spigotmc.AsyncCatcher.catchOp("player tracker clear"); // Spigot
+            org.spigotmc.AsyncCatcher.catchOp( "player tracker clear"); // Spigot
             if (this.trackedPlayers.remove(entityplayer)) {
                 this.trackerEntry.a(entityplayer);
             }
@@ -1353,9 +1201,9 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         }
 
         public void updatePlayer(EntityPlayer entityplayer) {
-            org.spigotmc.AsyncCatcher.catchOp("player tracker update"); // Spigot
+            org.spigotmc.AsyncCatcher.catchOp( "player tracker update"); // Spigot
             if (entityplayer != this.tracker) {
-                Vec3D vec3d = (new Vec3D(entityplayer.locX, entityplayer.locY, entityplayer.locZ)).d(this.tracker.getPositionVector()); // MC-155077, SPIGOT-5113
+                Vec3D vec3d = (new Vec3D(entityplayer.locX, entityplayer.locY, entityplayer.locZ)).d(this.trackerEntry.b());
                 int i = Math.min(this.trackingDistance, (PlayerChunkMap.this.viewDistance - 1) * 16);
                 boolean flag = vec3d.x >= (double) (-i) && vec3d.x <= (double) i && vec3d.z >= (double) (-i) && vec3d.z <= (double) i && this.tracker.a(entityplayer);
 
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 9cf6cc53..a0b64480 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -235,7 +235,6 @@ public class PlayerConnection implements PacketListenerPlayIn {
         this.q = this.player.locZ;
     }
 
-    @Override
     public NetworkManager a() {
         return this.networkManager;
     }
@@ -879,7 +878,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
     @Override
     public void a(PacketPlayInEntityNBTQuery packetplayinentitynbtquery) {
         PlayerConnectionUtils.ensureMainThread(packetplayinentitynbtquery, this, this.player.getWorldServer());
-        if (this.player.k(2)) {
+        if (this.player.j(2)) {
             Entity entity = this.player.getWorldServer().getEntity(packetplayinentitynbtquery.c());
 
             if (entity != null) {
@@ -894,7 +893,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
     @Override
     public void a(PacketPlayInTileNBTQuery packetplayintilenbtquery) {
         PlayerConnectionUtils.ensureMainThread(packetplayintilenbtquery, this, this.player.getWorldServer());
-        if (this.player.k(2)) {
+        if (this.player.j(2)) {
             TileEntity tileentity = this.player.getWorldServer().getTileEntity(packetplayintilenbtquery.c());
             NBTTagCompound nbttagcompound = tileentity != null ? tileentity.save(new NBTTagCompound()) : null;
 
@@ -980,14 +979,15 @@ public class PlayerConnection implements PacketListenerPlayIn {
                             } else {
                                 speed = player.abilities.walkSpeed * 10f;
                             }
+
                             // Paper start - Prevent moving into unloaded chunks
-                            if (player.world.paperConfig.preventMovingIntoUnloadedChunks && (this.player.locX != toX || this.player.locZ != toZ) && worldserver.getChunkIfLoadedImmediately((int) Math.floor(toX) >> 4, (int) Math.floor(toZ) >> 4) == null) { // Paper - use getIfLoadedImmediately
+                            if (player.world.paperConfig.preventMovingIntoUnloadedChunks && (this.player.locX != toX || this.player.locZ != toZ) && !worldserver.isChunkLoaded((int) Math.floor(toX) >> 4, (int) Math.floor(toZ) >> 4)) {
                                 this.internalTeleport(this.player.locX, this.player.locY, this.player.locZ, this.player.yaw, this.player.pitch, Collections.emptySet());
                                 return;
                             }
                             // Paper end
 
-                            if (!this.player.H() && (!this.player.getWorldServer().getGameRules().getBoolean(GameRules.DISABLE_ELYTRA_MOVEMENT_CHECK) || !this.player.isGliding())) {
+                            if (!this.player.H() && (!this.player.getWorldServer().getGameRules().getBoolean("disableElytraMovementCheck") || !this.player.isGliding())) {
                                 float f2 = this.player.isGliding() ? 300.0F : 100.0F;
 
                                 if (d11 - d10 > Math.max(f2, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.isExemptPlayer()) {
@@ -1169,12 +1169,6 @@ public class PlayerConnection implements PacketListenerPlayIn {
         float pitch = f1;
 
         Location to = new Location(this.getPlayer().getWorld(), x, y, z, yaw, pitch);
-        // SPIGOT-5171: Triggered on join
-        if (from.equals(to)) {
-            this.internalTeleport(d0, d1, d2, f, f1, set);
-            return;
-        }
-
         PlayerTeleportEvent event = new PlayerTeleportEvent(player, from.clone(), to.clone(), cause);
         this.server.getPluginManager().callEvent(event);
 
@@ -1234,12 +1228,11 @@ public class PlayerConnection implements PacketListenerPlayIn {
     public void a(PacketPlayInBlockDig packetplayinblockdig) {
         PlayerConnectionUtils.ensureMainThread(packetplayinblockdig, this, this.player.getWorldServer());
         if (this.player.isFrozen()) return; // CraftBukkit
+        WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
         BlockPosition blockposition = packetplayinblockdig.b();
 
         this.player.resetIdleTimer();
-        PacketPlayInBlockDig.EnumPlayerDigType packetplayinblockdig_enumplayerdigtype = packetplayinblockdig.d();
-
-        switch (packetplayinblockdig_enumplayerdigtype) {
+        switch (packetplayinblockdig.d()) {
             case SWAP_HELD_ITEMS:
                 if (!this.player.isSpectator()) {
                     ItemStack itemstack = this.player.b(EnumHand.OFF_HAND);
@@ -1299,16 +1292,55 @@ public class PlayerConnection implements PacketListenerPlayIn {
             case START_DESTROY_BLOCK:
             case ABORT_DESTROY_BLOCK:
             case STOP_DESTROY_BLOCK:
-                // Paper start - Don't allow digging in unloaded chunks
-                if (this.player.world.getChunkIfLoadedImmediately(blockposition.getX() >> 4, blockposition.getZ() >> 4) == null) {
+            // Paper start - Don't allow digging in unloaded chunks
+            if (!worldserver.isChunkLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4)) {
+                return;
+            }
+            // Paper end - Don't allow digging in unloaded chunks
+                double d0 = this.player.locX - ((double) blockposition.getX() + 0.5D);
+                double d1 = this.player.locY - ((double) blockposition.getY() + 0.5D) + 1.5D;
+                double d2 = this.player.locZ - ((double) blockposition.getZ() + 0.5D);
+                double d3 = d0 * d0 + d1 * d1 + d2 * d2;
+
+                if (d3 > 36.0D) {
+                if (worldserver.isChunkLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4)) // Paper - Fix block break desync - Don't send for unloaded chunks
+                    this.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition)); // Paper - Fix block break desync
+                    return;
+                } else if (blockposition.getY() >= this.minecraftServer.getMaxBuildHeight()) {
+                    return;
+                } else {
+                    if (packetplayinblockdig.d() == PacketPlayInBlockDig.EnumPlayerDigType.START_DESTROY_BLOCK) {
+                        if (!this.minecraftServer.a(worldserver, blockposition, this.player) && worldserver.getWorldBorder().a(blockposition)) {
+                            this.player.playerInteractManager.a(blockposition, packetplayinblockdig.c());
+                        } else {
+                            // CraftBukkit start - fire PlayerInteractEvent
+                            CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, blockposition, packetplayinblockdig.c(), this.player.inventory.getItemInHand(), EnumHand.MAIN_HAND);
+                            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition));
+                            // Update any tile entity data for this block
+                            TileEntity tileentity = worldserver.getTileEntity(blockposition);
+                            if (tileentity != null) {
+                                this.player.playerConnection.sendPacket(tileentity.getUpdatePacket());
+                            }
+                            // CraftBukkit end
+                        }
+                    } else {
+                        if (packetplayinblockdig.d() == PacketPlayInBlockDig.EnumPlayerDigType.STOP_DESTROY_BLOCK) {
+                            this.player.playerInteractManager.a(blockposition);
+                        } else if (packetplayinblockdig.d() == PacketPlayInBlockDig.EnumPlayerDigType.ABORT_DESTROY_BLOCK) {
+                            this.player.playerInteractManager.e();
+                        }
+
+                        if (!worldserver.getType(blockposition).isAir()) {
+                            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition));
+                        }
+                    }
+
                     return;
                 }
-                // Paper end - Don't allow digging in unloaded chunks
-                this.player.playerInteractManager.a(blockposition, packetplayinblockdig_enumplayerdigtype, packetplayinblockdig.c(), this.minecraftServer.getMaxBuildHeight());
-                return;
             default:
                 throw new IllegalArgumentException("Invalid player action");
         }
+        // CraftBukkit end
     }
 
     // Spigot start - limit place/interactions
@@ -1349,7 +1381,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
             IChatBaseComponent ichatbasecomponent = (new ChatMessage("build.tooHigh", new Object[]{this.minecraftServer.getMaxBuildHeight()})).a(EnumChatFormat.RED);
 
             this.player.playerConnection.sendPacket(new PacketPlayOutChat(ichatbasecomponent, ChatMessageType.GAME_INFO));
-        } else if (this.teleportPos == null && this.player.e((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) < 64.0D && worldserver.a((EntityHuman) this.player, blockposition)) {
+        } else if (this.teleportPos == null && this.player.e((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) < 64.0D && !this.minecraftServer.a(worldserver, blockposition, this.player) && worldserver.getWorldBorder().a(blockposition)) {
             // CraftBukkit start - Check if we can actually do something over this large a distance
             Location eyeLoc = this.getPlayer().getEyeLocation();
             double reachDistance = NumberConversions.square(eyeLoc.getX() - blockposition.getX()) + NumberConversions.square(eyeLoc.getY() - blockposition.getY()) + NumberConversions.square(eyeLoc.getZ() - blockposition.getZ());
@@ -2015,7 +2047,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
                     // CraftBukkit end
                 } else if (packetplayinuseentity.b() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
                     enumhand = packetplayinuseentity.c();
-                    entity.a((EntityHuman) this.player, packetplayinuseentity.d(), enumhand);
+                    entity.a(this.player, packetplayinuseentity.d(), enumhand);
                     // CraftBukkit start
                     if (!itemInHand.isEmpty() && itemInHand.getCount() <= -1) {
                         this.player.updateInventory(this.player.activeContainer);
@@ -2071,7 +2103,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
                     this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, DimensionManager.OVERWORLD, false);
                     if (this.minecraftServer.isHardcore()) {
                         this.player.a(EnumGamemode.SPECTATOR);
-                        ((GameRules.GameRuleBoolean) this.player.getWorldServer().getGameRules().get(GameRules.SPECTATORS_GENERATE_CHUNKS)).a(false, this.minecraftServer);
+                        this.player.getWorldServer().getGameRules().set("spectatorsGenerateChunks", "false", this.minecraftServer);
                     }
                 }
                 break;
@@ -2666,7 +2698,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
     @Override
     public void a(PacketPlayInDifficultyChange packetplayindifficultychange) {
         PlayerConnectionUtils.ensureMainThread(packetplayindifficultychange, this, this.player.getWorldServer());
-        if (this.player.k(2) || this.isExemptPlayer()) {
+        if (this.player.j(2) || this.isExemptPlayer()) {
             this.minecraftServer.a(packetplayindifficultychange.b(), false);
         }
     }
@@ -2674,7 +2706,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
     @Override
     public void a(PacketPlayInDifficultyLock packetplayindifficultylock) {
         PlayerConnectionUtils.ensureMainThread(packetplayindifficultylock, this, this.player.getWorldServer());
-        if (this.player.k(2) || this.isExemptPlayer()) {
+        if (this.player.j(2) || this.isExemptPlayer()) {
             this.minecraftServer.d(packetplayindifficultylock.b());
         }
     }
diff --git a/src/main/java/net/minecraft/server/PlayerConnectionUtils.java b/src/main/java/net/minecraft/server/PlayerConnectionUtils.java
index e928525b..9ba03f8e 100644
--- a/src/main/java/net/minecraft/server/PlayerConnectionUtils.java
+++ b/src/main/java/net/minecraft/server/PlayerConnectionUtils.java
@@ -1,31 +1,22 @@
 package net.minecraft.server;
 
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 import co.aikar.timings.MinecraftTimings; // Paper
 import co.aikar.timings.Timing; // Paper
 
 public class PlayerConnectionUtils {
 
-    private static final Logger LOGGER = LogManager.getLogger();
-
     public static <T extends PacketListener> void ensureMainThread(Packet<T> packet, T t0, WorldServer worldserver) throws CancelledPacketHandleException {
         ensureMainThread(packet, t0, (IAsyncTaskHandler) worldserver.getMinecraftServer());
     }
 
     public static <T extends PacketListener> void ensureMainThread(Packet<T> packet, T t0, IAsyncTaskHandler<?> iasynctaskhandler) throws CancelledPacketHandleException {
         if (!iasynctaskhandler.isMainThread()) {
-            Timing timing = MinecraftTimings.getPacketTiming(packet); // Paper - timings
+            Timing timing = MinecraftTimings.getPacketTiming(packet); // Paper
             iasynctaskhandler.execute(() -> {
                 if (MinecraftServer.getServer().hasStopped() || (t0 instanceof PlayerConnection && ((PlayerConnection) t0).processedDisconnect)) return; // CraftBukkit, MC-142590
-                if (t0.a().isConnected()) {
-                    try (Timing ignored = timing.startTiming()) { // Paper - timings
-                    packet.a(t0);
-                    } // Paper - timings
-                } else {
-                    PlayerConnectionUtils.LOGGER.debug("Ignoring packet due to disconnection: " + packet);
-                }
-
+                try (Timing ignored = timing.startTiming()) { // Paper
+                packet.a(t0);
+                } // Paper - timings
             });
             throw CancelledPacketHandleException.INSTANCE;
         }
diff --git a/src/main/java/net/minecraft/server/PlayerInteractManager.java b/src/main/java/net/minecraft/server/PlayerInteractManager.java
index e5e9de54..7f90a617 100644
--- a/src/main/java/net/minecraft/server/PlayerInteractManager.java
+++ b/src/main/java/net/minecraft/server/PlayerInteractManager.java
@@ -1,7 +1,5 @@
 package net.minecraft.server;
 
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 // CraftBukkit start
 import java.util.ArrayList;
 import org.bukkit.craftbukkit.block.CraftBlock;
@@ -14,24 +12,23 @@ import org.bukkit.event.player.PlayerInteractEvent;
 
 public class PlayerInteractManager {
 
-    private static final Logger LOGGER = LogManager.getLogger();
     public WorldServer world;
     public EntityPlayer player;
     private EnumGamemode gamemode;
-    private boolean e;
+    private boolean d;
     private int lastDigTick;
-    private BlockPosition g;
+    private BlockPosition f;
     private int currentTick;
-    private boolean i;
-    private BlockPosition j;
+    private boolean h;
+    private BlockPosition i;
+    private int j;
     private int k;
-    private int l;
 
     public PlayerInteractManager(WorldServer worldserver) {
         this.gamemode = EnumGamemode.NOT_SET;
-        this.g = BlockPosition.ZERO;
-        this.j = BlockPosition.ZERO;
-        this.l = -1;
+        this.f = BlockPosition.ZERO;
+        this.i = BlockPosition.ZERO;
+        this.k = -1;
         this.world = worldserver;
     }
 
@@ -65,205 +62,197 @@ public class PlayerInteractManager {
 
     public void a() {
         this.currentTick = MinecraftServer.currentTick; // CraftBukkit;
-        IBlockData iblockdata;
+        float f;
+        int i;
+
+        if (this.h) {
+            int j = this.currentTick - this.j;
+            IBlockData iblockdata = this.world.getType(this.i);
 
-        if (this.i) {
-            iblockdata = this.world.getType(this.j);
             if (iblockdata.isAir()) {
-                this.i = false;
+                this.h = false;
             } else {
-                float f = this.a(iblockdata, this.j);
+                f = iblockdata.getDamage(this.player, this.player.world, this.i) * (float) (j + 1);
+                i = (int) (f * 10.0F);
+                if (i != this.k) {
+                    this.world.a(this.player.getId(), this.i, i);
+                    this.k = i;
+                }
 
                 if (f >= 1.0F) {
-                    this.i = false;
-                    this.breakBlock(this.j);
+                    this.h = false;
+                    this.breakBlock(this.i);
                 }
             }
-        } else if (this.e) {
-            iblockdata = this.world.getType(this.g);
-            if (iblockdata.isAir()) {
-                this.world.a(this.player.getId(), this.g, -1);
-                this.l = -1;
-                this.e = false;
+        } else if (this.d) {
+            IBlockData iblockdata1 = this.world.getType(this.f);
+
+            if (iblockdata1.isAir()) {
+                this.world.a(this.player.getId(), this.f, -1);
+                this.k = -1;
+                this.d = false;
             } else {
-                this.a(iblockdata, this.g);
+                int k = this.currentTick - this.lastDigTick;
+
+                f = iblockdata1.getDamage(this.player, this.player.world, this.i) * (float) (k + 1);
+                i = (int) (f * 10.0F);
+                if (i != this.k) {
+                    this.world.a(this.player.getId(), this.f, i);
+                    this.k = i;
+                }
             }
         }
 
     }
 
-    private float a(IBlockData iblockdata, BlockPosition blockposition) {
-        int i = this.currentTick - this.k;
-        float f = iblockdata.getDamage(this.player, this.player.world, blockposition) * (float) (i + 1);
-        int j = (int) (f * 10.0F);
-
-        if (j != this.l) {
-            this.world.a(this.player.getId(), blockposition, j);
-            this.l = j;
+    public void a(BlockPosition blockposition, EnumDirection enumdirection) {
+        // CraftBukkit start
+        PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, blockposition, enumdirection, this.player.inventory.getItemInHand(), EnumHand.MAIN_HAND);
+        if (event.isCancelled()) {
+            // Let the client know the block still exists
+            ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+            // Paper start - brute force neighbor blocks for any attached blocks
+            for (EnumDirection dir : EnumDirection.values()) {
+                ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(world, blockposition.shift(dir)));
+            }
+            // Paper end
+            // Update any tile entity data for this block
+            TileEntity tileentity = this.world.getTileEntity(blockposition);
+            if (tileentity != null) {
+                this.player.playerConnection.sendPacket(tileentity.getUpdatePacket());
+            }
+            return;
         }
+        // CraftBukkit end
+        if (this.isCreative()) {
+            if (!this.world.douseFire((EntityHuman) null, blockposition, enumdirection)) {
+                this.breakBlock(blockposition);
+            }
 
-        return f;
-    }
-
-    public void a(BlockPosition blockposition, PacketPlayInBlockDig.EnumPlayerDigType packetplayinblockdig_enumplayerdigtype, EnumDirection enumdirection, int i) {
-        double d0 = this.player.locX - ((double) blockposition.getX() + 0.5D);
-        double d1 = this.player.locY - ((double) blockposition.getY() + 0.5D) + 1.5D;
-        double d2 = this.player.locZ - ((double) blockposition.getZ() + 0.5D);
-        double d3 = d0 * d0 + d1 * d1 + d2 * d2;
-
-        if (d3 > 36.0D) {
-            this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition), packetplayinblockdig_enumplayerdigtype, false));
-        } else if (blockposition.getY() >= i) {
-            this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition), packetplayinblockdig_enumplayerdigtype, false));
         } else {
-            IBlockData iblockdata;
-
-            if (packetplayinblockdig_enumplayerdigtype == PacketPlayInBlockDig.EnumPlayerDigType.START_DESTROY_BLOCK) {
-                if (!this.world.a((EntityHuman) this.player, blockposition)) {
-                    // CraftBukkit start - fire PlayerInteractEvent
-                    CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, blockposition, enumdirection, this.player.inventory.getItemInHand(), EnumHand.MAIN_HAND);
-                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition), packetplayinblockdig_enumplayerdigtype, false));
-                    // Update any tile entity data for this block
-                    TileEntity tileentity = world.getTileEntity(blockposition);
-                    if (tileentity != null) {
-                        this.player.playerConnection.sendPacket(tileentity.getUpdatePacket());
-                    }
-                    // CraftBukkit end
+            if (this.gamemode.d()) {
+                if (this.gamemode == EnumGamemode.SPECTATOR) {
                     return;
                 }
 
-                // CraftBukkit start
-                PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, blockposition, enumdirection, this.player.inventory.getItemInHand(), EnumHand.MAIN_HAND);
-                if (event.isCancelled()) {
-                    // Let the client know the block still exists
-                    // Paper start - brute force neighbor blocks for any attached blocks
-                    for (EnumDirection dir : EnumDirection.values()) {
-                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(world, blockposition.shift(dir)));
-                    }
-                    // Paper end
-                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
-                    // Update any tile entity data for this block
-                    TileEntity tileentity = this.world.getTileEntity(blockposition);
-                    if (tileentity != null) {
-                        this.player.playerConnection.sendPacket(tileentity.getUpdatePacket());
-                    }
-                    return;
-                }
-                // CraftBukkit end
+                if (!this.player.dQ()) {
+                    ItemStack itemstack = this.player.getItemInMainHand();
 
-                if (this.isCreative()) {
-                    if (!this.world.douseFire((EntityHuman) null, blockposition, enumdirection)) {
-                        this.a(blockposition, packetplayinblockdig_enumplayerdigtype);
-                    } else {
-                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition), packetplayinblockdig_enumplayerdigtype, true));
+                    if (itemstack.isEmpty()) {
+                        return;
                     }
 
-                    return;
-                }
-
-                if (this.player.a((World) this.world, blockposition, this.gamemode)) {
-                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition), packetplayinblockdig_enumplayerdigtype, false));
-                    return;
-                }
-
-                // this.world.douseFire((EntityHuman) null, blockposition, enumdirection); // CraftBukkit - Moved down
-                this.lastDigTick = this.currentTick;
-                float f = 1.0F;
-
-                iblockdata = this.world.getType(blockposition);
-                // CraftBukkit start - Swings at air do *NOT* exist.
-                if (event.useInteractedBlock() == Event.Result.DENY) {
-                    // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
-                    IBlockData data = this.world.getType(blockposition);
-                    if (data.getBlock() instanceof BlockDoor) {
-                        // For some reason *BOTH* the bottom/top part have to be marked updated.
-                        boolean bottom = data.get(BlockDoor.HALF) == BlockPropertyDoubleBlockHalf.LOWER;
-                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
-                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, bottom ? blockposition.up() : blockposition.down()));
-                    } else if (data.getBlock() instanceof BlockTrapdoor) {
-                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
-                    }
-                } else if (!iblockdata.isAir()) {
-                    iblockdata.attack(this.world, blockposition, this.player);
-                    f = iblockdata.getDamage(this.player, this.player.world, blockposition);
-                    // Allow fire punching to be blocked
-                    this.world.douseFire((EntityHuman) null, blockposition, enumdirection);
-                }
+                    ShapeDetectorBlock shapedetectorblock = new ShapeDetectorBlock(this.world, blockposition, false);
 
-                if (event.useItemInHand() == Event.Result.DENY) {
-                    // If we 'insta destroyed' then the client needs to be informed.
-                    if (f > 1.0f) {
-                        this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                    if (!itemstack.a(this.world.t(), shapedetectorblock)) {
+                        return;
                     }
-                    return;
                 }
-                org.bukkit.event.block.BlockDamageEvent blockEvent = CraftEventFactory.callBlockDamageEvent(this.player, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this.player.inventory.getItemInHand(), f >= 1.0f);
+            }
 
-                if (blockEvent.isCancelled()) {
-                    // Let the client know the block still exists
-                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
-                    return;
+            // this.world.douseFire((EntityHuman) null, blockposition, enumdirection); // CraftBukkit - Moved down
+            this.lastDigTick = this.currentTick;
+            float f = 1.0F;
+            IBlockData iblockdata = this.world.getType(blockposition);
+
+            // CraftBukkit start - Swings at air do *NOT* exist.
+            if (event.useInteractedBlock() == Event.Result.DENY) {
+                // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
+                IBlockData data = this.world.getType(blockposition);
+                if (data.getBlock() instanceof BlockDoor) {
+                    // For some reason *BOTH* the bottom/top part have to be marked updated.
+                    boolean bottom = data.get(BlockDoor.HALF) == BlockPropertyDoubleBlockHalf.LOWER;
+                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, bottom ? blockposition.up() : blockposition.down()));
+                } else if (data.getBlock() instanceof BlockTrapdoor) {
+                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
                 }
+            } else if (!iblockdata.isAir()) {
+                iblockdata.attack(this.world, blockposition, this.player);
+                f = iblockdata.getDamage(this.player, this.player.world, blockposition);
+                // Allow fire punching to be blocked
+                this.world.douseFire((EntityHuman) null, blockposition, enumdirection);
+            }
 
-                if (blockEvent.getInstaBreak()) {
-                    f = 2.0f;
+            if (event.useItemInHand() == Event.Result.DENY) {
+                // If we 'insta destroyed' then the client needs to be informed.
+                if (f > 1.0f) {
+                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
                 }
-                // CraftBukkit end
+                return;
+            }
+            org.bukkit.event.block.BlockDamageEvent blockEvent = CraftEventFactory.callBlockDamageEvent(this.player, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this.player.inventory.getItemInHand(), f >= 1.0f);
 
-                if (!iblockdata.isAir() && f >= 1.0F) {
-                    this.a(blockposition, packetplayinblockdig_enumplayerdigtype);
-                } else {
-                    this.e = true;
-                    this.g = blockposition;
-                    int j = (int) (f * 10.0F);
+            if (blockEvent.isCancelled()) {
+                // Let the client know the block still exists
+                ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                return;
+            }
 
-                    this.world.a(this.player.getId(), blockposition, j);
-                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition), packetplayinblockdig_enumplayerdigtype, true));
-                    this.l = j;
-                }
-            } else if (packetplayinblockdig_enumplayerdigtype == PacketPlayInBlockDig.EnumPlayerDigType.STOP_DESTROY_BLOCK) {
-                if (blockposition.equals(this.g)) {
-                    int k = this.currentTick - this.lastDigTick;
-
-                    iblockdata = this.world.getType(blockposition);
-                    if (!iblockdata.isAir()) {
-                        float f1 = iblockdata.getDamage(this.player, this.player.world, blockposition) * (float) (k + 1);
-
-                        if (f1 >= 0.7F) {
-                            this.e = false;
-                            this.world.a(this.player.getId(), blockposition, -1);
-                            this.a(blockposition, packetplayinblockdig_enumplayerdigtype);
-                            return;
-                        }
+            if (blockEvent.getInstaBreak()) {
+                f = 2.0f;
+            }
+            // CraftBukkit end
 
-                        if (!this.i) {
-                            this.e = false;
-                            this.i = true;
-                            this.j = blockposition;
-                            this.k = this.lastDigTick;
-                        }
-                    }
-                }
+            if (!iblockdata.isAir() && f >= 1.0F) {
+                this.breakBlock(blockposition);
+            } else {
+                this.d = true;
+                this.f = blockposition;
+                int i = (int) (f * 10.0F);
 
-                this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition), packetplayinblockdig_enumplayerdigtype, true));
-            } else if (packetplayinblockdig_enumplayerdigtype == PacketPlayInBlockDig.EnumPlayerDigType.ABORT_DESTROY_BLOCK) {
-                this.e = false;
-                this.world.a(this.player.getId(), this.g, -1);
-                this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition), packetplayinblockdig_enumplayerdigtype, true));
+                this.world.a(this.player.getId(), blockposition, i);
+                this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                this.k = i;
             }
 
         }
-
-        this.world.chunkPacketBlockController.onPlayerLeftClickBlock(this, blockposition, enumdirection); // Paper - Anti-Xray
     }
 
-    public void a(BlockPosition blockposition, PacketPlayInBlockDig.EnumPlayerDigType packetplayinblockdig_enumplayerdigtype) {
-        if (this.breakBlock(blockposition)) {
-            this.player.playerConnection.sendPacket(new PacketPlayOutBlockBreak(blockposition, this.world.getType(blockposition), packetplayinblockdig_enumplayerdigtype, true));
+    public void a(BlockPosition blockposition) {
+        if (blockposition.equals(this.f)) {
+            this.currentTick = MinecraftServer.currentTick; // CraftBukkit
+            int i = this.currentTick - this.lastDigTick;
+            IBlockData iblockdata = this.world.getType(blockposition);
+
+            if (!iblockdata.isAir()) {
+                float f = iblockdata.getDamage(this.player, this.player.world, blockposition) * (float) (i + 1);
+
+                if (f >= 0.7F) {
+                    this.d = false;
+                    this.world.a(this.player.getId(), blockposition, -1);
+                    this.breakBlock(blockposition);
+                } else if (!this.h) {
+                    this.d = false;
+                    this.h = true;
+                    this.i = blockposition;
+                    this.j = this.lastDigTick;
+                }
+            }
+        // CraftBukkit start - Force block reset to client
         } else {
-            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition)); // CraftBukkit - SPIGOT-5196
+            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+            // CraftBukkit end
+        }
+
+    }
+
+    public void e() {
+        this.d = false;
+        this.world.a(this.player.getId(), this.f, -1);
+    }
+
+    private boolean c(BlockPosition blockposition) {
+        IBlockData iblockdata = this.world.getType(blockposition);
+
+        iblockdata.getBlock().a((World) this.world, blockposition, iblockdata, (EntityHuman) this.player);
+        boolean flag = this.world.a(blockposition, false);
+
+        if (flag) {
+            iblockdata.getBlock().postBreak(this.world, blockposition, iblockdata);
         }
 
+        return flag;
     }
 
     public boolean breakBlock(BlockPosition blockposition) {
@@ -281,7 +270,7 @@ public class PlayerInteractManager {
             if (world.getTileEntity(blockposition) == null && !isSwordNoBreak) {
                 PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(this.world, blockposition);
                 packet.block = Blocks.AIR.getBlockData();
-                this.player.playerConnection.sendPacket(packet);
+                ((EntityPlayer) this.player).playerConnection.sendPacket(packet);
             }
 
             event = new BlockBreakEvent(bblock, this.player.getBukkitEntity());
@@ -306,11 +295,11 @@ public class PlayerInteractManager {
                     return false;
                 }
                 // Let the client know the block still exists
-                this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
 
                 // Brute force all possible updates
                 for (EnumDirection dir : EnumDirection.values()) {
-                    this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(world, blockposition.shift(dir)));
+                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(world, blockposition.shift(dir)));
                 }
 
                 // Update any tile entity data for this block
@@ -334,49 +323,61 @@ public class PlayerInteractManager {
             if ((block instanceof BlockCommand || block instanceof BlockStructure || block instanceof BlockJigsaw) && !this.player.isCreativeAndOp()) {
                 this.world.notify(blockposition, iblockdata, iblockdata, 3);
                 return false;
-            } else if (this.player.a((World) this.world, blockposition, this.gamemode)) {
-                return false;
             } else {
+                if (this.gamemode.d()) {
+                    if (this.gamemode == EnumGamemode.SPECTATOR) {
+                        return false;
+                    }
+
+                    if (!this.player.dQ()) {
+                        ItemStack itemstack = this.player.getItemInMainHand();
+
+                        if (itemstack.isEmpty()) {
+                            return false;
+                        }
+
+                        ShapeDetectorBlock shapedetectorblock = new ShapeDetectorBlock(this.world, blockposition, false);
+
+                        if (!itemstack.a(this.world.t(), shapedetectorblock)) {
+                            return false;
+                        }
+                    }
+                }
+
                 // CraftBukkit start
                 org.bukkit.block.BlockState state = bblock.getState();
                 world.captureDrops = new ArrayList<>();
                 // CraftBukkit end
-                block.a((World) this.world, blockposition, iblockdata, (EntityHuman) this.player);
-                boolean flag = this.world.a(blockposition, false);
-
-                if (flag) {
-                    block.postBreak(this.world, blockposition, iblockdata);
-                }
+                boolean flag = this.c(blockposition);
 
-                if (this.isCreative()) {
-                    // return true; // CraftBukkit
-                } else {
-                    ItemStack itemstack = this.player.getItemInMainHand();
+                if (!this.isCreative()) {
+                    ItemStack itemstack1 = this.player.getItemInMainHand();
                     boolean flag1 = this.player.hasBlock(iblockdata);
 
-                    ItemStack itemstack1 = flag && flag1 && event.isDropItems() && !itemstack.isEmpty() ? itemstack.cloneItemStack() : ItemStack.a; // Paper - MC-136865 - clone before use
-                    itemstack.a(this.world, iblockdata, blockposition, this.player);
-                    if (flag && flag1 && event.isDropItems()) { // CraftBukkit - Check if block should drop items
-                        //ItemStack itemstack1 = itemstack.isEmpty() ? ItemStack.a : itemstack.cloneItemStack(); // Paper - MC-136865 - move up
+                    ItemStack itemstack2 = flag && flag1 && event.isDropItems() && !itemstack1.isEmpty() ? itemstack1.cloneItemStack() : ItemStack.a; // Paper - MC-136865 - clone before use
+                    itemstack1.a(this.world, iblockdata, blockposition, this.player);
+                    // CraftBukkit start - Check if block should drop items
+                    if (flag && flag1 && event.isDropItems()) {
+                        //ItemStack itemstack2 = itemstack1.isEmpty() ? ItemStack.a : itemstack1.cloneItemStack(); // Paper - MC-136865 - move up
 
-                        block.a(this.world, this.player, blockposition, iblockdata, tileentity, itemstack1);
+                        iblockdata.getBlock().a(this.world, this.player, blockposition, iblockdata, tileentity, itemstack2);
                     }
-
-                    // return true; // CraftBukkit
+                    // CraftBukkit end
                 }
-                // CraftBukkit start
+
                 if (event.isDropItems()) {
                     org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockDropItemEvent(bblock, state, this.player, world.captureDrops);
                 }
                 world.captureDrops = null;
+                // CraftBukkit end
 
-                // Drop event experience
+                // CraftBukkit start - Drop event experience
                 if (flag && event != null) {
                     iblockdata.getBlock().dropExperience(this.world, blockposition, event.getExpToDrop(), this.player); // Paper
                 }
-
-                return true;
                 // CraftBukkit end
+
+                return flag;
             }
         }
     }
@@ -384,7 +385,7 @@ public class PlayerInteractManager {
     public EnumInteractionResult a(EntityHuman entityhuman, World world, ItemStack itemstack, EnumHand enumhand) {
         if (this.gamemode == EnumGamemode.SPECTATOR) {
             return EnumInteractionResult.PASS;
-        } else if (entityhuman.getCooldownTracker().hasCooldown(itemstack.getItem())) {
+        } else if (entityhuman.getCooldownTracker().a(itemstack.getItem())) {
             return EnumInteractionResult.PASS;
         } else {
             int i = itemstack.getCount();
@@ -433,7 +434,7 @@ public class PlayerInteractManager {
             cancelledBlock = !(itileinventory instanceof ITileInventory);
         }
 
-        if (entityhuman.getCooldownTracker().hasCooldown(itemstack.getItem())) {
+        if (entityhuman.getCooldownTracker().a(itemstack.getItem())) {
             cancelledBlock = true;
         }
 
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index a183bb45..0a733df7 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -155,7 +155,7 @@ public abstract class PlayerList {
 
         // CraftBukkit - getType()
         // Spigot - view distance
-        playerconnection.sendPacket(new PacketPlayOutLogin(entityplayer.getId(), entityplayer.playerInteractManager.getGameMode(), worlddata.isHardcore(), worldserver.worldProvider.getDimensionManager().getType(), this.getMaxPlayers(), worlddata.getType(), worldserver.spigotConfig.viewDistance, worldserver.getGameRules().getBoolean(GameRules.REDUCED_DEBUG_INFO)));
+        playerconnection.sendPacket(new PacketPlayOutLogin(entityplayer.getId(), entityplayer.playerInteractManager.getGameMode(), worlddata.isHardcore(), worldserver.worldProvider.getDimensionManager().getType(), this.getMaxPlayers(), worlddata.getType(), worldserver.spigotConfig.viewDistance, worldserver.getGameRules().getBoolean("reducedDebugInfo")));
         entityplayer.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
         playerconnection.sendPacket(new PacketPlayOutCustomPayload(PacketPlayOutCustomPayload.a, (new PacketDataSerializer(Unpooled.buffer())).a(this.getServer().getServerModName())));
         playerconnection.sendPacket(new PacketPlayOutServerDifficulty(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
@@ -163,7 +163,7 @@ public abstract class PlayerList {
         playerconnection.sendPacket(new PacketPlayOutHeldItemSlot(entityplayer.inventory.itemInHandIndex));
         playerconnection.sendPacket(new PacketPlayOutRecipeUpdate(this.server.getCraftingManager().b()));
         playerconnection.sendPacket(new PacketPlayOutTags(this.server.getTagRegistry()));
-        playerconnection.sendPacket(new PacketPlayOutEntityStatus(entityplayer, (byte) (worldserver.getGameRules().getBoolean(GameRules.REDUCED_DEBUG_INFO) ? 22 : 23))); // Paper - fix this rule not being initialized on the client
+        playerconnection.sendPacket(new PacketPlayOutEntityStatus(entityplayer, (byte) (worldserver.getGameRules().getBoolean("reducedDebugInfo") ? 22 : 23))); // Paper - fix this rule not being initialized on the client
         this.d(entityplayer);
         entityplayer.getStatisticManager().c();
         entityplayer.B().a(entityplayer);
@@ -927,7 +927,7 @@ public abstract class PlayerList {
     // Paper end
 
     public boolean isOp(GameProfile gameprofile) {
-        return this.operators.d(gameprofile) || this.server.b(gameprofile) && this.server.getWorldServer(DimensionManager.OVERWORLD).getWorldData().t() || this.u;
+        return this.operators.d(gameprofile) || this.server.b(gameprofile) && this.server.getWorldServer(DimensionManager.OVERWORLD).getWorldData().u() || this.u;
     }
 
     @Nullable
@@ -1007,7 +1007,7 @@ public abstract class PlayerList {
         WorldBorder worldborder = entityplayer.world.getWorldBorder(); // CraftBukkit
 
         entityplayer.playerConnection.sendPacket(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.INITIALIZE));
-        entityplayer.playerConnection.sendPacket(new PacketPlayOutUpdateTime(worldserver.getTime(), worldserver.getDayTime(), worldserver.getGameRules().getBoolean(GameRules.DO_DAYLIGHT_CYCLE)));
+        entityplayer.playerConnection.sendPacket(new PacketPlayOutUpdateTime(worldserver.getTime(), worldserver.getDayTime(), worldserver.getGameRules().getBoolean("doDaylightCycle")));
         BlockPosition blockposition = worldserver.getSpawn();
 
         entityplayer.playerConnection.sendPacket(new PacketPlayOutSpawnPosition(blockposition));
@@ -1029,7 +1029,7 @@ public abstract class PlayerList {
         entityplayer.getBukkitEntity().updateScaledHealth(); // CraftBukkit - Update scaled health on respawn and worldchange
         entityplayer.playerConnection.sendPacket(new PacketPlayOutHeldItemSlot(entityplayer.inventory.itemInHandIndex));
         // CraftBukkit start - from GameRules
-        int i = entityplayer.world.getGameRules().getBoolean(GameRules.REDUCED_DEBUG_INFO) ? 22 : 23;
+        int i = entityplayer.world.getGameRules().get("reducedDebugInfo").getBooleanValue() ? 22 : 23;
         entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityStatus(entityplayer, (byte) i));
         // CraftBukkit end
     }
@@ -1170,7 +1170,7 @@ public abstract class PlayerList {
         return advancementdataplayer;
     }
 
-    public void a(int i) {
+    public void a(int i, int j) {
         this.viewDistance = i;
         this.sendAll(new PacketPlayOutViewDistance(i));
         Iterator iterator = this.server.getWorlds().iterator();
@@ -1179,7 +1179,7 @@ public abstract class PlayerList {
             WorldServer worldserver = (WorldServer) iterator.next();
 
             if (worldserver != null) {
-                worldserver.getChunkProvider().setViewDistance(i);
+                worldserver.getChunkProvider().setViewDistance(i, j);
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/ProtoChunk.java b/src/main/java/net/minecraft/server/ProtoChunk.java
index 7bad12eb..6bdd7dda 100644
--- a/src/main/java/net/minecraft/server/ProtoChunk.java
+++ b/src/main/java/net/minecraft/server/ProtoChunk.java
@@ -44,28 +44,16 @@ public class ProtoChunk implements IChunkAccess {
     private long s;
     private final Map<WorldGenStage.Features, BitSet> t;
     private volatile boolean u;
-    private final GeneratorAccess world; // Paper - Anti-Xray
 
     public ProtoChunk(ChunkCoordIntPair chunkcoordintpair, ChunkConverter chunkconverter) {
-        // Paper start - add world parameter
-        this(chunkcoordintpair, chunkconverter, (GeneratorAccess)null);
-    }
-    public ProtoChunk(ChunkCoordIntPair chunkcoordintpair, ChunkConverter chunkconverter, GeneratorAccess world) {
-        // Paper end
         this(chunkcoordintpair, chunkconverter, (ChunkSection[]) null, new ProtoChunkTickList<>((block) -> {
             return block == null || block.getBlockData().isAir();
         }, chunkcoordintpair), new ProtoChunkTickList<>((fluidtype) -> {
             return fluidtype == null || fluidtype == FluidTypes.EMPTY;
-        }, chunkcoordintpair), world); // Paper - add world parameter
+        }, chunkcoordintpair));
     }
 
     public ProtoChunk(ChunkCoordIntPair chunkcoordintpair, ChunkConverter chunkconverter, @Nullable ChunkSection[] achunksection, ProtoChunkTickList<Block> protochunkticklist, ProtoChunkTickList<FluidType> protochunkticklist1) {
-        // Paper start - add world parameter
-        this(chunkcoordintpair, chunkconverter, achunksection, protochunkticklist, protochunkticklist1, (GeneratorAccess)null);
-    }
-    public ProtoChunk(ChunkCoordIntPair chunkcoordintpair, ChunkConverter chunkconverter, @Nullable ChunkSection[] achunksection, ProtoChunkTickList<Block> protochunkticklist, ProtoChunkTickList<FluidType> protochunkticklist1, GeneratorAccess world) {
-        this.world = world;
-        // Paper end
         this.f = Maps.newEnumMap(HeightMap.Type.class);
         this.g = ChunkStatus.EMPTY;
         this.h = Maps.newHashMap();
@@ -218,7 +206,7 @@ public class ProtoChunk implements IChunkAccess {
 
     public ChunkSection a(int i) {
         if (this.j[i] == Chunk.a) {
-            this.j[i] = new ChunkSection(i << 4, this, this.world, true); // Paper - Anti-Xray
+            this.j[i] = new ChunkSection(i << 4);
         }
 
         return this.j[i];
diff --git a/src/main/java/net/minecraft/server/RandomPositionGenerator.java b/src/main/java/net/minecraft/server/RandomPositionGenerator.java
index 643dc024..c7e25e2b 100644
--- a/src/main/java/net/minecraft/server/RandomPositionGenerator.java
+++ b/src/main/java/net/minecraft/server/RandomPositionGenerator.java
@@ -8,7 +8,7 @@ public class RandomPositionGenerator {
 
     @Nullable
     public static Vec3D a(EntityCreature entitycreature, int i, int j) {
-        return d(entitycreature, i, j, (Vec3D) null);
+        return c(entitycreature, i, j, (Vec3D) null);
     }
 
     @Nullable
@@ -26,7 +26,7 @@ public class RandomPositionGenerator {
     public static Vec3D a(EntityCreature entitycreature, int i, int j, Vec3D vec3d) {
         Vec3D vec3d1 = vec3d.a(entitycreature.locX, entitycreature.locY, entitycreature.locZ);
 
-        return d(entitycreature, i, j, vec3d1);
+        return c(entitycreature, i, j, vec3d1);
     }
 
     @Nullable
@@ -41,19 +41,11 @@ public class RandomPositionGenerator {
     public static Vec3D b(EntityCreature entitycreature, int i, int j, Vec3D vec3d) {
         Vec3D vec3d1 = (new Vec3D(entitycreature.locX, entitycreature.locY, entitycreature.locZ)).d(vec3d);
 
-        entitycreature.getClass();
-        return a(entitycreature, i, j, vec3d1, false, 1.5707963705062866D, entitycreature::f);
-    }
-
-    @Nullable
-    public static Vec3D c(EntityCreature entitycreature, int i, int j, Vec3D vec3d) {
-        Vec3D vec3d1 = (new Vec3D(entitycreature.locX, entitycreature.locY, entitycreature.locZ)).d(vec3d);
-
-        return d(entitycreature, i, j, vec3d1);
+        return c(entitycreature, i, j, vec3d1);
     }
 
     @Nullable
-    private static Vec3D d(EntityCreature entitycreature, int i, int j, @Nullable Vec3D vec3d) {
+    private static Vec3D c(EntityCreature entitycreature, int i, int j, @Nullable Vec3D vec3d) {
         entitycreature.getClass();
         return a(entitycreature, i, j, vec3d, true, 1.5707963705062866D, entitycreature::f);
     }
@@ -65,54 +57,58 @@ public class RandomPositionGenerator {
         boolean flag1;
 
         if (entitycreature.dL()) {
-            flag1 = entitycreature.dI().a((IPosition) entitycreature.getPositionVector(), (double) (entitycreature.dJ() + (float) i) + 1.0D);
+            flag1 = entitycreature.dI().a((IPosition) entitycreature.ch(), (double) (entitycreature.dJ() + (float) i) + 1.0D);
         } else {
             flag1 = false;
         }
 
         boolean flag2 = false;
         double d1 = Double.NEGATIVE_INFINITY;
-        BlockPosition blockposition = new BlockPosition(entitycreature);
+        int k = 0;
+        int l = 0;
+        int i1 = 0;
 
-        for (int k = 0; k < 10; ++k) {
-            BlockPosition blockposition1 = a(random, i, j, vec3d, d0);
+        for (int j1 = 0; j1 < 10; ++j1) {
+            BlockPosition blockposition = a(random, i, j, vec3d, d0);
 
-            if (blockposition1 != null) {
-                int l = blockposition1.getX();
-                int i1 = blockposition1.getY();
-                int j1 = blockposition1.getZ();
-                BlockPosition blockposition2;
+            if (blockposition != null) {
+                int k1 = blockposition.getX();
+                int l1 = blockposition.getY();
+                int i2 = blockposition.getZ();
+                BlockPosition blockposition1;
 
                 if (entitycreature.dL() && i > 1) {
-                    blockposition2 = entitycreature.dI();
-                    if (entitycreature.locX > (double) blockposition2.getX()) {
-                        l -= random.nextInt(i / 2);
+                    blockposition1 = entitycreature.dI();
+                    if (entitycreature.locX > (double) blockposition1.getX()) {
+                        k1 -= random.nextInt(i / 2);
                     } else {
-                        l += random.nextInt(i / 2);
+                        k1 += random.nextInt(i / 2);
                     }
 
-                    if (entitycreature.locZ > (double) blockposition2.getZ()) {
-                        j1 -= random.nextInt(i / 2);
+                    if (entitycreature.locZ > (double) blockposition1.getZ()) {
+                        i2 -= random.nextInt(i / 2);
                     } else {
-                        j1 += random.nextInt(i / 2);
+                        i2 += random.nextInt(i / 2);
                     }
                 }
 
-                blockposition2 = new BlockPosition((double) l + entitycreature.locX, (double) i1 + entitycreature.locY, (double) j1 + entitycreature.locZ);
-                if (!entitycreature.world.isLoaded(blockposition2)) continue; // Paper
-                if ((!flag1 || entitycreature.a(blockposition2)) && navigationabstract.a(blockposition2)) {
+                blockposition1 = new BlockPosition((double) k1 + entitycreature.locX, (double) l1 + entitycreature.locY, (double) i2 + entitycreature.locZ);
+                if (!entitycreature.world.isLoaded(blockposition1)) continue; // Paper
+                if ((!flag1 || entitycreature.a(blockposition1)) && navigationabstract.a(blockposition1)) {
                     if (!flag) {
-                        blockposition2 = a(blockposition2, entitycreature);
-                        if (b(blockposition2, entitycreature)) {
+                        blockposition1 = a(blockposition1, entitycreature);
+                        if (b(blockposition1, entitycreature)) {
                             continue;
                         }
                     }
 
-                    double d2 = todoublefunction.applyAsDouble(blockposition2);
+                    double d2 = todoublefunction.applyAsDouble(blockposition1);
 
                     if (d2 > d1) {
                         d1 = d2;
-                        blockposition = blockposition2;
+                        k = k1;
+                        l = l1;
+                        i1 = i2;
                         flag2 = true;
                     }
                 }
@@ -120,7 +116,7 @@ public class RandomPositionGenerator {
         }
 
         if (flag2) {
-            return new Vec3D(blockposition);
+            return new Vec3D((double) k + entitycreature.locX, (double) l + entitycreature.locY, (double) i1 + entitycreature.locZ);
         } else {
             return null;
         }
diff --git a/src/main/java/net/minecraft/server/RecipeBlasting.java b/src/main/java/net/minecraft/server/RecipeBlasting.java
index a2d76d59..f92a6361 100644
--- a/src/main/java/net/minecraft/server/RecipeBlasting.java
+++ b/src/main/java/net/minecraft/server/RecipeBlasting.java
@@ -16,7 +16,7 @@ public class RecipeBlasting extends RecipeCooking {
 
     @Override
     public RecipeSerializer<?> getRecipeSerializer() {
-        return RecipeSerializer.q;
+        return RecipeSerializer.p;
     }
 
     // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/RecipeBookServer.java b/src/main/java/net/minecraft/server/RecipeBookServer.java
index 0e66bdda..091c4abb 100644
--- a/src/main/java/net/minecraft/server/RecipeBookServer.java
+++ b/src/main/java/net/minecraft/server/RecipeBookServer.java
@@ -6,7 +6,6 @@ import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Optional;
-import java.util.function.Consumer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
@@ -112,27 +111,27 @@ public class RecipeBookServer extends RecipeBook {
         this.f = nbttagcompound.getBoolean("isFurnaceFilteringCraftable");
         NBTTagList nbttaglist = nbttagcompound.getList("recipes", 8);
 
-        this.a(nbttaglist, this::a);
+        for (int i = 0; i < nbttaglist.size(); ++i) {
+            MinecraftKey minecraftkey = new MinecraftKey(nbttaglist.getString(i));
+            Optional<? extends IRecipe<?>> optional = this.l.a(minecraftkey);
+
+            if (!optional.isPresent()) {
+                RecipeBookServer.LOGGER.error("Tried to load unrecognized recipe: {} removed now.", minecraftkey);
+            } else {
+                this.a((IRecipe) optional.get());
+            }
+        }
+
         NBTTagList nbttaglist1 = nbttagcompound.getList("toBeDisplayed", 8);
 
-        this.a(nbttaglist1, this::f);
-    }
+        for (int j = 0; j < nbttaglist1.size(); ++j) {
+            MinecraftKey minecraftkey1 = new MinecraftKey(nbttaglist1.getString(j));
+            Optional<? extends IRecipe<?>> optional1 = this.l.a(minecraftkey1);
 
-    private void a(NBTTagList nbttaglist, Consumer<IRecipe<?>> consumer) {
-        for (int i = 0; i < nbttaglist.size(); ++i) {
-            String s = nbttaglist.getString(i);
-
-            try {
-                MinecraftKey minecraftkey = new MinecraftKey(s);
-                Optional<? extends IRecipe<?>> optional = this.l.a(minecraftkey);
-
-                if (!optional.isPresent()) {
-                    RecipeBookServer.LOGGER.error("Tried to load unrecognized recipe: {} removed now.", minecraftkey);
-                } else {
-                    consumer.accept(optional.get());
-                }
-            } catch (ResourceKeyInvalidException resourcekeyinvalidexception) {
-                RecipeBookServer.LOGGER.error("Tried to load improperly formatted recipe: {} removed now.", s);
+            if (!optional1.isPresent()) {
+                RecipeBookServer.LOGGER.error("Tried to load unrecognized recipe: {} removed now.", minecraftkey1);
+            } else {
+                this.f((IRecipe) optional1.get());
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/RecipeCampfire.java b/src/main/java/net/minecraft/server/RecipeCampfire.java
index 678f039c..847e078c 100644
--- a/src/main/java/net/minecraft/server/RecipeCampfire.java
+++ b/src/main/java/net/minecraft/server/RecipeCampfire.java
@@ -16,7 +16,7 @@ public class RecipeCampfire extends RecipeCooking {
 
     @Override
     public RecipeSerializer<?> getRecipeSerializer() {
-        return RecipeSerializer.s;
+        return RecipeSerializer.r;
     }
 
     // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/RecipeRepair.java b/src/main/java/net/minecraft/server/RecipeRepair.java
deleted file mode 100644
index a674c53c..00000000
--- a/src/main/java/net/minecraft/server/RecipeRepair.java
+++ /dev/null
@@ -1,92 +0,0 @@
-package net.minecraft.server;
-
-import com.google.common.collect.Lists;
-import java.util.List;
-import java.util.stream.Stream; // CraftBukkit
-
-public class RecipeRepair extends ShapelessRecipes { // CraftBukkit - added extends
-
-    // CraftBukkit start - Delegate to new parent class
-    public RecipeRepair(MinecraftKey minecraftkey) {
-        super(minecraftkey, "", new ItemStack(Items.LEATHER_HELMET), NonNullList.a(RecipeItemStack.a, RecipeItemStack.a(Items.LEATHER_HELMET)));
-    }
-    // CraftBukkit end
-
-    public boolean a(InventoryCrafting inventorycrafting, World world) {
-        List<ItemStack> list = Lists.newArrayList();
-
-        for (int i = 0; i < inventorycrafting.getSize(); ++i) {
-            ItemStack itemstack = inventorycrafting.getItem(i);
-
-            if (!itemstack.isEmpty()) {
-                list.add(itemstack);
-                if (list.size() > 1) {
-                    ItemStack itemstack1 = (ItemStack) list.get(0);
-
-                    if (itemstack.getItem() != itemstack1.getItem() || itemstack1.getCount() != 1 || itemstack.getCount() != 1 || !itemstack1.getItem().usesDurability()) {
-                        return false;
-                    }
-                }
-            }
-        }
-
-        return list.size() == 2;
-    }
-
-    public ItemStack a(InventoryCrafting inventorycrafting) {
-        List<ItemStack> list = Lists.newArrayList();
-
-        ItemStack itemstack;
-
-        for (int i = 0; i < inventorycrafting.getSize(); ++i) {
-            itemstack = inventorycrafting.getItem(i);
-            if (!itemstack.isEmpty()) {
-                list.add(itemstack);
-                if (list.size() > 1) {
-                    ItemStack itemstack1 = (ItemStack) list.get(0);
-
-                    if (itemstack.getItem() != itemstack1.getItem() || itemstack1.getCount() != 1 || itemstack.getCount() != 1 || !itemstack1.getItem().usesDurability()) {
-                        return ItemStack.a;
-                    }
-                }
-            }
-        }
-
-        if (list.size() == 2) {
-            ItemStack itemstack2 = (ItemStack) list.get(0);
-
-            itemstack = (ItemStack) list.get(1);
-            if (itemstack2.getItem() == itemstack.getItem() && itemstack2.getCount() == 1 && itemstack.getCount() == 1 && itemstack2.getItem().usesDurability()) {
-                Item item = itemstack2.getItem();
-                int j = item.getMaxDurability() - itemstack2.getDamage();
-                int k = item.getMaxDurability() - itemstack.getDamage();
-                int l = j + k + item.getMaxDurability() * 5 / 100;
-                int i1 = item.getMaxDurability() - l;
-
-                if (i1 < 0) {
-                    i1 = 0;
-                }
-
-                ItemStack itemstack3 = new ItemStack(itemstack2.getItem());
-
-                itemstack3.setDamage(i1);
-                // CraftBukkit start - Construct a dummy repair recipe
-                NonNullList<RecipeItemStack> ingredients = NonNullList.a();
-                ingredients.add(new RecipeItemStack(Stream.of(new RecipeItemStack.StackProvider(itemstack2.cloneItemStack()))));
-                ingredients.add(new RecipeItemStack(Stream.of(new RecipeItemStack.StackProvider(itemstack.cloneItemStack()))));
-                ShapelessRecipes recipe = new ShapelessRecipes(new MinecraftKey("repairitem"), "", itemstack3.cloneItemStack(), ingredients);
-                inventorycrafting.setCurrentRecipe(recipe);
-                itemstack3 = org.bukkit.craftbukkit.event.CraftEventFactory.callPreCraftEvent(inventorycrafting, inventorycrafting.resultInventory, itemstack3, inventorycrafting.container.getBukkitView(), true);
-                // CraftBukkit end
-                return itemstack3;
-            }
-        }
-
-        return ItemStack.a;
-    }
-
-    @Override
-    public RecipeSerializer<?> getRecipeSerializer() {
-        return RecipeSerializer.o;
-    }
-}
diff --git a/src/main/java/net/minecraft/server/RecipeSmoking.java b/src/main/java/net/minecraft/server/RecipeSmoking.java
index 0e436af1..e930a6de 100644
--- a/src/main/java/net/minecraft/server/RecipeSmoking.java
+++ b/src/main/java/net/minecraft/server/RecipeSmoking.java
@@ -16,7 +16,7 @@ public class RecipeSmoking extends RecipeCooking {
 
     @Override
     public RecipeSerializer<?> getRecipeSerializer() {
-        return RecipeSerializer.r;
+        return RecipeSerializer.q;
     }
 
     // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/RecipeStonecutting.java b/src/main/java/net/minecraft/server/RecipeStonecutting.java
index 2dc0954f..f6e866b8 100644
--- a/src/main/java/net/minecraft/server/RecipeStonecutting.java
+++ b/src/main/java/net/minecraft/server/RecipeStonecutting.java
@@ -11,7 +11,7 @@ import org.bukkit.inventory.Recipe;
 public class RecipeStonecutting extends RecipeSingleItem {
 
     public RecipeStonecutting(MinecraftKey minecraftkey, String s, RecipeItemStack recipeitemstack, ItemStack itemstack) {
-        super(Recipes.STONECUTTING, RecipeSerializer.t, minecraftkey, s, recipeitemstack, itemstack);
+        super(Recipes.STONECUTTING, RecipeSerializer.s, minecraftkey, s, recipeitemstack, itemstack);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/RegionFile.java b/src/main/java/net/minecraft/server/RegionFile.java
index 41f1e15c..2e14d846 100644
--- a/src/main/java/net/minecraft/server/RegionFile.java
+++ b/src/main/java/net/minecraft/server/RegionFile.java
@@ -31,30 +31,6 @@ public class RegionFile implements AutoCloseable {
     private final int[] d = new int[1024];private int[] timestamps = d; // Paper - OBFHELPER
     private final List<Boolean> e; private List<Boolean> getFreeSectors() { return this.e; } // Paper - OBFHELPER
 
-    // Paper start - Cache chunk status
-    private final ChunkStatus[] statuses = new ChunkStatus[32 * 32];
-
-    private boolean closed;
-
-    // invoked on write/read
-    public void setStatus(int x, int z, ChunkStatus status) {
-        if (this.closed) {
-            // We've used an invalid region file.
-            throw new IllegalStateException("RegionFile is closed");
-        }
-        this.statuses[this.getChunkLocation(new ChunkCoordIntPair(x, z))] = status;
-    }
-
-    public ChunkStatus getStatusIfCached(int x, int z) {
-        if (this.closed) {
-            // We've used an invalid region file.
-            throw new IllegalStateException("RegionFile is closed");
-        }
-        final int location = this.getChunkLocation(new ChunkCoordIntPair(x, z));
-        return this.statuses[location];
-    }
-    // Paper end
-
     public RegionFile(File file) throws IOException {
         this.b = new RandomAccessFile(file, "rw");
         this.file = file; // Spigot // Paper - We need this earlier
@@ -292,7 +268,7 @@ public class RegionFile implements AutoCloseable {
                 // Paper end
             }
 
-            // Paper - move this into writeChunkData
+            this.b(chunkcoordintpair, (int) (SystemUtils.getTimeMillis() / 1000L));
         } catch (IOException ioexception) {
             com.destroystokyo.paper.util.SneakyThrow.sneaky(ioexception); // Paper - we want the upper try/catch to retry this
         }
@@ -310,7 +286,6 @@ public class RegionFile implements AutoCloseable {
         return this.c[this.f(chunkcoordintpair)];
     }
 
-    public final boolean chunkExists(ChunkCoordIntPair chunkPos) { return this.d(chunkPos); } // Paper - OBFHELPER
     public boolean d(ChunkCoordIntPair chunkcoordintpair) {
         return this.getOffset(chunkcoordintpair) != 0;
     }
@@ -319,29 +294,24 @@ public class RegionFile implements AutoCloseable {
     private void a(ChunkCoordIntPair chunkcoordintpair, int i) throws IOException {
         int j = this.f(chunkcoordintpair);
 
-        //this.c[j] = i; // Paper - move this to after the write
+        this.c[j] = i;
         this.b.seek((long) (j * 4));
         this.writeInt(i); // Paper - Avoid 3 io write calls
-        this.c[j] = i; // Paper - move this to after the write
     }
 
-    private final int getChunkLocation(ChunkCoordIntPair chunkcoordintpair) { return this.f(chunkcoordintpair); } // Paper - OBFHELPER
     private int f(ChunkCoordIntPair chunkcoordintpair) {
         return chunkcoordintpair.j() + chunkcoordintpair.k() * 32;
     }
 
-    private final void updateChunkTime(ChunkCoordIntPair chunkPos, final int time) throws IOException { this.b(chunkPos, time); } // Paper - OBFHELPER
     private void b(ChunkCoordIntPair chunkcoordintpair, int i) throws IOException {
         int j = this.f(chunkcoordintpair);
 
-        //this.d[j] = i; // Paper - move this to after the write
+        this.d[j] = i;
         this.b.seek((long) (4096 + j * 4));
         this.writeInt(i); // Paper - Avoid 3 io write calls
-        this.d[j] = i; // Paper - move this to after the write
     }
 
     public void close() throws IOException {
-        this.closed = true; // Paper
         this.b.close();
     }
 
@@ -376,7 +346,6 @@ public class RegionFile implements AutoCloseable {
                             final int chunkOffset, final byte[] chunkData, final int chunkDataLength) throws IOException {
         this.writeChunkData(chunkOffset, chunkData, chunkDataLength);
         this.syncRegionFile(); // Sync is required to ensure the previous data is written successfully
-        this.updateChunkTime(chunk, (int)(SystemUtils.getTimeMillis() / 1000L));
         this.updateChunkHeader(chunk, chunkHeaderData);
         this.syncRegionFile(); // Ensure header changes go through
     }
diff --git a/src/main/java/net/minecraft/server/RegionFileCache.java b/src/main/java/net/minecraft/server/RegionFileCache.java
index d2b32894..6f34d8ae 100644
--- a/src/main/java/net/minecraft/server/RegionFileCache.java
+++ b/src/main/java/net/minecraft/server/RegionFileCache.java
@@ -47,12 +47,6 @@ public abstract class RegionFileCache implements AutoCloseable {
         // Paper start
     }
 
-    // Paper start
-    public RegionFile getRegionFileIfLoaded(ChunkCoordIntPair chunkcoordintpair) {
-        return this.cache.getAndMoveToFirst(ChunkCoordIntPair.pair(chunkcoordintpair.getRegionX(), chunkcoordintpair.getRegionZ()));
-    }
-    // Paper end
-
     public RegionFile getRegionFile(ChunkCoordIntPair chunkcoordintpair, boolean existingOnly) throws IOException { return this.a(chunkcoordintpair, existingOnly); } // Paper - OBFHELPER
     private RegionFile a(ChunkCoordIntPair chunkcoordintpair, boolean existingOnly) throws IOException { // CraftBukkit
         long i = ChunkCoordIntPair.pair(chunkcoordintpair.getRegionX(), chunkcoordintpair.getRegionZ());
@@ -116,7 +110,6 @@ public abstract class RegionFileCache implements AutoCloseable {
         try {
             NBTCompressedStreamTools.writeNBT(nbttagcompound, out);
             out.close();
-            regionfile.setStatus(chunk.x, chunk.z, ChunkRegionLoader.getStatus(nbttagcompound)); // Paper - cache status on disk
             regionfile.setOversized(chunkX, chunkZ, false);
         } catch (RegionFile.ChunkTooLargeException ignored) {
             printOversizedLog("ChunkTooLarge! Someone is trying to duplicate.", regionfile.file, chunkX, chunkZ);
@@ -134,7 +127,6 @@ public abstract class RegionFileCache implements AutoCloseable {
                     if (SIZE_THRESHOLD == OVERZEALOUS_THRESHOLD) {
                         resetFilterThresholds();
                     }
-                    regionfile.setStatus(chunk.x, chunk.z, ChunkRegionLoader.getStatus(nbttagcompound)); // Paper - cache status on disk
                 } catch (RegionFile.ChunkTooLargeException e) {
                     printOversizedLog("ChunkTooLarge even after reduction. Trying in overzealous mode.", regionfile.file, chunkX, chunkZ);
                     // Eek, major fail. We have retry logic, so reduce threshholds and fall back
diff --git a/src/main/java/net/minecraft/server/RegionLimitedWorldAccess.java b/src/main/java/net/minecraft/server/RegionLimitedWorldAccess.java
index ac668775..aff3591e 100644
--- a/src/main/java/net/minecraft/server/RegionLimitedWorldAccess.java
+++ b/src/main/java/net/minecraft/server/RegionLimitedWorldAccess.java
@@ -23,10 +23,10 @@ public class RegionLimitedWorldAccess implements GeneratorAccess {
     private final WorldProvider k;
     private final GeneratorSettingsDefault l;
     private final TickList<Block> m = new TickListWorldGen<>((blockposition) -> {
-        return this.w(blockposition).n();
+        return this.x(blockposition).n();
     });
     private final TickList<FluidType> n = new TickListWorldGen<>((blockposition) -> {
-        return this.w(blockposition).o();
+        return this.x(blockposition).o();
     });
 
     public RegionLimitedWorldAccess(WorldServer worldserver, List<IChunkAccess> list) {
@@ -133,7 +133,7 @@ public class RegionLimitedWorldAccess implements GeneratorAccess {
 
     @Override
     public Fluid getFluid(BlockPosition blockposition) {
-        return this.w(blockposition).getFluid(blockposition);
+        return this.x(blockposition).getFluid(blockposition);
     }
 
     @Nullable
@@ -149,7 +149,7 @@ public class RegionLimitedWorldAccess implements GeneratorAccess {
 
     @Override
     public BiomeBase getBiome(BlockPosition blockposition) {
-        BiomeBase biomebase = this.w(blockposition).getBiomeIndex()[blockposition.getX() & 15 | (blockposition.getZ() & 15) << 4];
+        BiomeBase biomebase = this.x(blockposition).getBiomeIndex()[blockposition.getX() & 15 | (blockposition.getZ() & 15) << 4];
 
         if (biomebase == null) {
             throw new RuntimeException(String.format("Biome is null @ %s", blockposition));
@@ -165,7 +165,7 @@ public class RegionLimitedWorldAccess implements GeneratorAccess {
 
     @Override
     public int getLightLevel(BlockPosition blockposition, int i) {
-        return this.w(blockposition).a(blockposition, i, this.getWorldProvider().g());
+        return this.x(blockposition).a(blockposition, i, this.getWorldProvider().g());
     }
 
     @Override
@@ -188,7 +188,7 @@ public class RegionLimitedWorldAccess implements GeneratorAccess {
     @Nullable
     @Override
     public TileEntity getTileEntity(BlockPosition blockposition) {
-        IChunkAccess ichunkaccess = this.w(blockposition);
+        IChunkAccess ichunkaccess = this.x(blockposition);
         TileEntity tileentity = ichunkaccess.getTileEntity(blockposition);
 
         if (tileentity != null) {
@@ -225,7 +225,7 @@ public class RegionLimitedWorldAccess implements GeneratorAccess {
 
     @Override
     public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
-        IChunkAccess ichunkaccess = this.w(blockposition);
+        IChunkAccess ichunkaccess = this.x(blockposition);
         IBlockData iblockdata1 = ichunkaccess.setType(blockposition, iblockdata, false);
 
         if (iblockdata1 != null) {
@@ -258,7 +258,7 @@ public class RegionLimitedWorldAccess implements GeneratorAccess {
     }
 
     private void i(BlockPosition blockposition) {
-        this.w(blockposition).f(blockposition);
+        this.x(blockposition).f(blockposition);
     }
 
     @Override
@@ -356,7 +356,7 @@ public class RegionLimitedWorldAccess implements GeneratorAccess {
     }
 
     @Override
-    public void playSound(@Nullable EntityHuman entityhuman, BlockPosition blockposition, SoundEffect soundeffect, SoundCategory soundcategory, float f, float f1) {}
+    public void a(@Nullable EntityHuman entityhuman, BlockPosition blockposition, SoundEffect soundeffect, SoundCategory soundcategory, float f, float f1) {}
 
     @Override
     public void addParticle(ParticleParam particleparam, double d0, double d1, double d2, double d3, double d4, double d5) {}
diff --git a/src/main/java/net/minecraft/server/RemoteControlCommandListener.java b/src/main/java/net/minecraft/server/RemoteControlCommandListener.java
index e32c475e..278536d0 100644
--- a/src/main/java/net/minecraft/server/RemoteControlCommandListener.java
+++ b/src/main/java/net/minecraft/server/RemoteControlCommandListener.java
@@ -17,7 +17,7 @@ public class RemoteControlCommandListener implements ICommandListener {
         return this.buffer.toString();
     }
 
-    public CommandListenerWrapper getWrapper() {
+    public CommandListenerWrapper f() {
         WorldServer worldserver = this.server.getWorldServer(DimensionManager.OVERWORLD);
 
         return new CommandListenerWrapper(this, new Vec3D(worldserver.getSpawn()), Vec2F.a, worldserver, 4, "Recon", new ChatComponentText("Rcon"), this.server, (Entity) null);
@@ -51,6 +51,6 @@ public class RemoteControlCommandListener implements ICommandListener {
 
     @Override
     public boolean shouldBroadcastCommands() {
-        return this.server.l();
+        return this.server.k();
     }
 }
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index 5bc98e2e..e7ed6af9 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -61,7 +61,7 @@ public class ServerConnection {
             Class oclass;
             LazyInitVar lazyinitvar;
 
-            if (Epoll.isAvailable() && this.e.X()) {
+            if (Epoll.isAvailable() && this.e.W()) {
                 oclass = EpollServerSocketChannel.class;
                 lazyinitvar = ServerConnection.b;
                 ServerConnection.LOGGER.info("Using epoll channel type");
diff --git a/src/main/java/net/minecraft/server/ServerStatisticManager.java b/src/main/java/net/minecraft/server/ServerStatisticManager.java
index 1e911a88..b303700f 100644
--- a/src/main/java/net/minecraft/server/ServerStatisticManager.java
+++ b/src/main/java/net/minecraft/server/ServerStatisticManager.java
@@ -43,7 +43,7 @@ public class ServerStatisticManager extends StatisticManager {
         // Spigot end
         if (file.isFile()) {
             try {
-                this.a(minecraftserver.aB(), org.apache.commons.io.FileUtils.readFileToString(file));
+                this.a(minecraftserver.aA(), org.apache.commons.io.FileUtils.readFileToString(file));
             } catch (IOException ioexception) {
                 ServerStatisticManager.LOGGER.error("Couldn't read statistics file {}", file, ioexception);
             } catch (JsonParseException jsonparseexception) {
@@ -156,7 +156,7 @@ public class ServerStatisticManager extends StatisticManager {
 
     private <T> Optional<Statistic<T>> a(StatisticWrapper<T> statisticwrapper, String s) {
         Optional<MinecraftKey> optional = Optional.ofNullable(MinecraftKey.a(s));
-        IRegistry<T> iregistry = statisticwrapper.getRegistry();
+        IRegistry<T> iregistry = statisticwrapper.a();
 
         iregistry.getClass();
         Optional<T> optional2 = optional.flatMap(iregistry::getOptional);
@@ -194,7 +194,7 @@ public class ServerStatisticManager extends StatisticManager {
             it.unimi.dsi.fastutil.objects.Object2IntMap.Entry<Statistic<?>> it_unimi_dsi_fastutil_objects_object2intmap_entry = (it.unimi.dsi.fastutil.objects.Object2IntMap.Entry) objectiterator.next();
             Statistic<?> statistic = (Statistic) it_unimi_dsi_fastutil_objects_object2intmap_entry.getKey();
 
-            ((JsonObject) map.computeIfAbsent(statistic.getWrapper(), (statisticwrapper) -> {
+            ((JsonObject) map.computeIfAbsent(statistic.a(), (statisticwrapper) -> {
                 return new JsonObject();
             })).addProperty(b(statistic).toString(), it_unimi_dsi_fastutil_objects_object2intmap_entry.getIntValue());
         }
@@ -216,7 +216,7 @@ public class ServerStatisticManager extends StatisticManager {
     }
 
     private static <T> MinecraftKey b(Statistic<T> statistic) {
-        return statistic.getWrapper().getRegistry().getKey(statistic.b());
+        return statistic.a().a().getKey(statistic.b());
     }
 
     public void c() {
@@ -224,7 +224,7 @@ public class ServerStatisticManager extends StatisticManager {
     }
 
     public void a(EntityPlayer entityplayer) {
-        int i = this.c.aj();
+        int i = this.c.ai();
         Object2IntMap<Statistic<?>> object2intmap = new Object2IntOpenHashMap();
 
         if (i - this.f > 300) {
diff --git a/src/main/java/net/minecraft/server/SpawnerCreature.java b/src/main/java/net/minecraft/server/SpawnerCreature.java
index 5e6559df..94d7bca0 100644
--- a/src/main/java/net/minecraft/server/SpawnerCreature.java
+++ b/src/main/java/net/minecraft/server/SpawnerCreature.java
@@ -16,20 +16,13 @@ public final class SpawnerCreature {
 
     private static final Logger LOGGER = LogManager.getLogger();
 
-    // Paper start - add maxSpawns parameter and update counts
     public static void a(EnumCreatureType enumcreaturetype, World world, Chunk chunk, BlockPosition blockposition) {
-        spawnMobs(enumcreaturetype, world, chunk, blockposition, Integer.MAX_VALUE);
-    }
-
-    public static int spawnMobs(EnumCreatureType enumcreaturetype, World world, Chunk chunk, BlockPosition blockposition, int maxSpawns) {
-    // Paper end
         ChunkGenerator<?> chunkgenerator = world.getChunkProvider().getChunkGenerator();
         int i = 0;
         BlockPosition blockposition1 = getRandomPosition(world, chunk);
         int j = blockposition1.getX();
         int k = blockposition1.getY();
         int l = blockposition1.getZ();
-        int amountSpawned = 0; // Paper - keep track of mobs spawned
 
         if (k >= 1) {
             IBlockData iblockdata = world.getTypeIfLoadedAndInBounds(blockposition1);  // Paper - don't load chunks for mob spawn
@@ -50,7 +43,7 @@ public final class SpawnerCreature {
 
                     while (true) {
                         if (j2 < l1) {
-                            label104:
+                            label96:
                             {
                                 j1 += world.random.nextInt(6) - world.random.nextInt(6);
                                 k1 += world.random.nextInt(6) - world.random.nextInt(6);
@@ -59,35 +52,32 @@ public final class SpawnerCreature {
                                 float f1 = (float) k1 + 0.5F;
                                 EntityHuman entityhuman = world.a((double) f, (double) f1, -1.0D);
 
-                                if (entityhuman != null) {
-                                    double d0 = entityhuman.e((double) f, (double) k, (double) f1);
-
-                                    if (d0 > 576.0D && !blockposition.a((IPosition) (new Vec3D((double) f, (double) k, (double) f1)), 24.0D) && world.isLoadedAndInBounds(blockposition_mutableblockposition)) { // Paper - don't load chunks for mob spawn
-                                        ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(blockposition_mutableblockposition);
+                                if (entityhuman != null && entityhuman.e((double) f, (double) k, (double) f1) > 576.0D && !blockposition.a((IPosition) (new Vec3D((double) f, (double) k, (double) f1)), 24.0D) && world.isLoadedAndInBounds(blockposition_mutableblockposition)) { // Paper - don't load chunks for mob spawn
+                                    ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(blockposition_mutableblockposition);
 
-                                        if (Objects.equals(chunkcoordintpair, chunk.getPos()) || world.getChunkProvider().a(chunkcoordintpair)) {
+                                    if (Objects.equals(chunkcoordintpair, chunk.getPos()) || world.getChunkProvider().a(chunkcoordintpair)) {
+                                        if (biomebase_biomemeta == null) {
+                                            biomebase_biomemeta = a(chunkgenerator, enumcreaturetype, world.random, (BlockPosition) blockposition_mutableblockposition);
                                             if (biomebase_biomemeta == null) {
-                                                biomebase_biomemeta = a(chunkgenerator, enumcreaturetype, world.random, (BlockPosition) blockposition_mutableblockposition);
-                                                if (biomebase_biomemeta == null) {
-                                                    break label104;
-                                                }
-
-                                                l1 = biomebase_biomemeta.c + world.random.nextInt(1 + biomebase_biomemeta.d - biomebase_biomemeta.c);
+                                                break label96;
                                             }
 
-                                            if (biomebase_biomemeta.b.e() != EnumCreatureType.MISC && (biomebase_biomemeta.b.d() || d0 <= 16384.0D)) {
-                                                EntityTypes<?> entitytypes = biomebase_biomemeta.b;
+                                            l1 = biomebase_biomemeta.c + world.random.nextInt(1 + biomebase_biomemeta.d - biomebase_biomemeta.c);
+                                        }
+
+                                        if (biomebase_biomemeta.b.d() != EnumCreatureType.MISC) {
+                                            EntityTypes<?> entitytypes = biomebase_biomemeta.b;
 
-                                                if (entitytypes.b() && a(chunkgenerator, enumcreaturetype, biomebase_biomemeta, (BlockPosition) blockposition_mutableblockposition)) {
-                                                    EntityPositionTypes.Surface entitypositiontypes_surface = EntityPositionTypes.a(entitytypes);
+                                            if (entitytypes.b() && a(chunkgenerator, enumcreaturetype, biomebase_biomemeta, (BlockPosition) blockposition_mutableblockposition)) {
+                                                EntityPositionTypes.Surface entitypositiontypes_surface = EntityPositionTypes.a(entitytypes);
 
-                                                    if (a(entitypositiontypes_surface, (IWorldReader) world, (BlockPosition) blockposition_mutableblockposition, entitytypes) && EntityPositionTypes.a(entitytypes, world, EnumMobSpawn.NATURAL, blockposition_mutableblockposition, world.random) && world.c(entitytypes.a((double) f, (double) k, (double) f1))) {
-                                                        EntityInsentient entityinsentient;
+                                                if (entitypositiontypes_surface != null && a(entitypositiontypes_surface, (IWorldReader) world, (BlockPosition) blockposition_mutableblockposition, entitytypes) && world.c(entitytypes.a((double) f, (double) k, (double) f1))) {
+                                                    EntityInsentient entityinsentient;
 
                                                     // Paper start
                                                     com.destroystokyo.paper.event.entity.PreCreatureSpawnEvent event;
                                                     EntityTypes<?> cls = biomebase_biomemeta.b;
-                                                    org.bukkit.entity.EntityType type = org.bukkit.entity.EntityType.fromName(EntityTypes.getName(cls).getKey());
+                                                    org.bukkit.entity.EntityType type = org.bukkit.entity.EntityType.fromName(cls.getKey().getKey());
                                                     if (type != null) {
                                                         event = new com.destroystokyo.paper.event.entity.PreCreatureSpawnEvent(
                                                             MCUtil.toLocation(world, blockposition_mutableblockposition),
@@ -95,7 +85,7 @@ public final class SpawnerCreature {
                                                         );
                                                         if (!event.callEvent()) {
                                                             if (event.shouldAbortSpawn()) {
-                                                                return amountSpawned; // Paper
+                                                                return;
                                                             }
                                                             ++i2;
                                                             continue;
@@ -103,42 +93,35 @@ public final class SpawnerCreature {
                                                     }
                                                     // Paper end
 
-                                                        try {
-                                                            Entity entity = entitytypes.a(world);
-
-                                                            if (!(entity instanceof EntityInsentient)) {
-                                                                throw new IllegalStateException("Trying to spawn a non-mob: " + IRegistry.ENTITY_TYPE.getKey(entitytypes));
-                                                            }
+                                                    try {
+                                                        Entity entity = entitytypes.a(world);
 
-                                                            entityinsentient = (EntityInsentient) entity;
-                                                        } catch (Exception exception) {
-                                                            SpawnerCreature.LOGGER.warn("Failed to create mob", exception);
-                                                            ServerInternalException.reportInternalException(exception); // Paper
-                                                            return amountSpawned; // Paper
+                                                        if (!(entity instanceof EntityInsentient)) {
+                                                            throw new IllegalStateException("Trying to spawn a non-mob: " + IRegistry.ENTITY_TYPE.getKey(entitytypes));
                                                         }
 
-                                                        entityinsentient.setPositionRotation((double) f, (double) k, (double) f1, world.random.nextFloat() * 360.0F, 0.0F);
-                                                        if ((d0 <= 16384.0D || !entityinsentient.isTypeNotPersistent(d0)) && entityinsentient.a((GeneratorAccess) world, EnumMobSpawn.NATURAL) && entityinsentient.a((IWorldReader) world)) {
-                                                            groupdataentity = entityinsentient.prepare(world, world.getDamageScaler(new BlockPosition(entityinsentient)), EnumMobSpawn.NATURAL, groupdataentity, (NBTTagCompound) null);
-                                                            // CraftBukkit start
-                                                            if (world.addEntity(entityinsentient, SpawnReason.NATURAL)) {
-                                                                ++i;
-                                                                ++i2;
-                                                                // Paper start - stop when limit is reached
-                                                                ++amountSpawned;
-                                                            }
-                                                            if (amountSpawned >= maxSpawns) {
-                                                                return amountSpawned;
-                                                            }
-                                                            // Paper end
-                                                            // CraftBukkit end
-                                                            if (i >= entityinsentient.dC()) {
-                                                                return amountSpawned; // Paper
-                                                            }
+                                                        entityinsentient = (EntityInsentient) entity;
+                                                    } catch (Exception exception) {
+                                                        SpawnerCreature.LOGGER.warn("Failed to create mob", exception);
+                                                        ServerInternalException.reportInternalException(exception); // Paper
+                                                        return;
+                                                    }
 
-                                                            if (entityinsentient.c(i2)) {
-                                                                break label104;
-                                                            }
+                                                    entityinsentient.setPositionRotation((double) f, (double) k, (double) f1, world.random.nextFloat() * 360.0F, 0.0F);
+                                                    if ((entityhuman.e((double) f, (double) k, (double) f1) <= 16384.0D || !entityinsentient.isTypeNotPersistent(entityhuman.e((double) f, (double) k, (double) f1))) && entityinsentient.a((GeneratorAccess) world, EnumMobSpawn.NATURAL) && entityinsentient.a((IWorldReader) world)) {
+                                                        groupdataentity = entityinsentient.prepare(world, world.getDamageScaler(new BlockPosition(entityinsentient)), EnumMobSpawn.NATURAL, groupdataentity, (NBTTagCompound) null);
+                                                        // CraftBukkit start
+                                                        if (world.addEntity(entityinsentient, SpawnReason.NATURAL)) {
+                                                            ++i;
+                                                            ++i2;
+                                                        }
+                                                        // CraftBukkit end
+                                                        if (i >= entityinsentient.dC()) {
+                                                            return;
+                                                        }
+
+                                                        if (entityinsentient.c(i2)) {
+                                                            break label96;
                                                         }
                                                     }
                                                 }
@@ -159,7 +142,6 @@ public final class SpawnerCreature {
 
             }
         }
-        return amountSpawned; // Paper
     }
 
     @Nullable
@@ -186,13 +168,11 @@ public final class SpawnerCreature {
     }
 
     public static boolean a(IBlockAccess iblockaccess, BlockPosition blockposition, IBlockData iblockdata, Fluid fluid) {
-        return iblockdata.o(iblockaccess, blockposition) ? false : (iblockdata.isPowerSource() ? false : (!fluid.isEmpty() ? false : !iblockdata.a(TagsBlock.RAILS)));
+        return Block.a(iblockdata.getCollisionShape(iblockaccess, blockposition)) ? false : (iblockdata.isPowerSource() ? false : (!fluid.isEmpty() ? false : !iblockdata.a(TagsBlock.RAILS)));
     }
 
     public static boolean a(EntityPositionTypes.Surface entitypositiontypes_surface, IWorldReader iworldreader, BlockPosition blockposition, @Nullable EntityTypes<?> entitytypes) {
-        if (entitypositiontypes_surface == EntityPositionTypes.Surface.NO_RESTRICTIONS) {
-            return true;
-        } else if (entitytypes != null && iworldreader.getWorldBorder().a(blockposition)) {
+        if (entitytypes != null && iworldreader.getWorldBorder().a(blockposition)) {
             IBlockData iblockdata = iworldreader.getType(blockposition);
             Fluid fluid = iworldreader.getFluid(blockposition);
             BlockPosition blockposition1 = blockposition.up();
@@ -235,11 +215,11 @@ public final class SpawnerCreature {
                         BlockPosition blockposition = a(generatoraccess, biomebase_biomemeta.b, j1, k1);
 
                         if (biomebase_biomemeta.b.b() && a(EntityPositionTypes.Surface.ON_GROUND, (IWorldReader) generatoraccess, blockposition, biomebase_biomemeta.b)) {
-                            float f = biomebase_biomemeta.b.i();
+                            float f = biomebase_biomemeta.b.h();
                             double d0 = MathHelper.a((double) j1, (double) k + (double) f, (double) k + 16.0D - (double) f);
                             double d1 = MathHelper.a((double) k1, (double) l + (double) f, (double) l + 16.0D - (double) f);
 
-                            if (!generatoraccess.c(biomebase_biomemeta.b.a(d0, (double) blockposition.getY(), d1)) || !EntityPositionTypes.a(biomebase_biomemeta.b, generatoraccess, EnumMobSpawn.CHUNK_GENERATION, new BlockPosition(d0, (double) blockposition.getY(), d1), generatoraccess.getRandom())) {
+                            if (!generatoraccess.c(biomebase_biomemeta.b.a(d0, (double) blockposition.getY(), d1))) {
                                 continue;
                             }
 
diff --git a/src/main/java/net/minecraft/server/SystemUtils.java b/src/main/java/net/minecraft/server/SystemUtils.java
index 35594821..6bc576f1 100644
--- a/src/main/java/net/minecraft/server/SystemUtils.java
+++ b/src/main/java/net/minecraft/server/SystemUtils.java
@@ -50,7 +50,7 @@ public class SystemUtils {
     }
 
     public static String a(String s, @Nullable MinecraftKey minecraftkey) {
-        return minecraftkey == null ? s + ".unregistered_sadface" : s + '.' + minecraftkey.getNamespace() + '.' + minecraftkey.getKey().replace('/', '.');
+        return minecraftkey == null ? s + ".unregistered_sadface" : s + '.' + minecraftkey.b() + '.' + minecraftkey.getKey().replace('/', '.');
     }
 
     public static long getMonotonicMillis() {
@@ -130,10 +130,6 @@ public class SystemUtils {
         });
     }
 
-    public static <T> T a(List<T> list) {
-        return list.get(list.size() - 1);
-    }
-
     public static <T> T a(Iterable<T> iterable, @Nullable T t0) {
         Iterator<T> iterator = iterable.iterator();
         T t1 = iterator.next();
diff --git a/src/main/java/net/minecraft/server/TagRegistry.java b/src/main/java/net/minecraft/server/TagRegistry.java
index 36ce76af..0644c01e 100644
--- a/src/main/java/net/minecraft/server/TagRegistry.java
+++ b/src/main/java/net/minecraft/server/TagRegistry.java
@@ -7,76 +7,84 @@ import java.util.concurrent.Executor;
 
 public class TagRegistry implements IReloadListener {
 
-    private final TagsServer<Block> blockTags;
-    private final TagsServer<Item> itemTags;
-    private final TagsServer<FluidType> fluidTags;
-    private final TagsServer<EntityTypes<?>> entityTags;
+    private final TagsServer<Block> a;
+    private final TagsServer<Item> b;
+    private final TagsServer<FluidType> c;
+    private final TagsServer<EntityTypes<?>> d;
 
     public TagRegistry() {
-        this.blockTags = new TagsServer<>(IRegistry.BLOCK, "tags/blocks", "block");
-        this.itemTags = new TagsServer<>(IRegistry.ITEM, "tags/items", "item");
-        this.fluidTags = new TagsServer<>(IRegistry.FLUID, "tags/fluids", "fluid");
-        this.entityTags = new TagsServer<>(IRegistry.ENTITY_TYPE, "tags/entity_types", "entity_type");
+        this.a = new TagsServer<>(IRegistry.BLOCK, "tags/blocks", "block");
+        this.b = new TagsServer<>(IRegistry.ITEM, "tags/items", "item");
+        this.c = new TagsServer<>(IRegistry.FLUID, "tags/fluids", "fluid");
+        this.d = new TagsServer<>(IRegistry.ENTITY_TYPE, "tags/entity_types", "entity_type");
     }
 
-    public TagsServer<Block> getBlockTags() {
-        return this.blockTags;
+    public TagsServer<Block> a() {
+        return this.a;
     }
 
-    public TagsServer<Item> getItemTags() {
-        return this.itemTags;
+    public TagsServer<Item> b() {
+        return this.b;
     }
 
-    public TagsServer<FluidType> getFluidTags() {
-        return this.fluidTags;
+    public TagsServer<FluidType> c() {
+        return this.c;
     }
 
-    public TagsServer<EntityTypes<?>> getEntityTags() {
-        return this.entityTags;
+    public TagsServer<EntityTypes<?>> d() {
+        return this.d;
+    }
+
+    public void e() {
+        this.a.b();
+        this.b.b();
+        this.c.b();
+        this.d.b();
     }
 
     public void a(PacketDataSerializer packetdataserializer) {
-        this.blockTags.a(packetdataserializer);
-        this.itemTags.a(packetdataserializer);
-        this.fluidTags.a(packetdataserializer);
-        this.entityTags.a(packetdataserializer);
+        this.a.a(packetdataserializer);
+        this.b.a(packetdataserializer);
+        this.c.a(packetdataserializer);
+        this.d.a(packetdataserializer);
     }
 
     public static TagRegistry b(PacketDataSerializer packetdataserializer) {
         TagRegistry tagregistry = new TagRegistry();
 
-        tagregistry.getBlockTags().b(packetdataserializer);
-        tagregistry.getItemTags().b(packetdataserializer);
-        tagregistry.getFluidTags().b(packetdataserializer);
-        tagregistry.getEntityTags().b(packetdataserializer);
+        tagregistry.a().b(packetdataserializer);
+        tagregistry.b().b(packetdataserializer);
+        tagregistry.c().b(packetdataserializer);
+        tagregistry.d().b(packetdataserializer);
         return tagregistry;
     }
 
     @Override
     public CompletableFuture<Void> a(IReloadListener.a ireloadlistener_a, IResourceManager iresourcemanager, GameProfilerFiller gameprofilerfiller, GameProfilerFiller gameprofilerfiller1, Executor executor, Executor executor1) {
-        CompletableFuture<Map<MinecraftKey, Tag.a<Block>>> completablefuture = this.blockTags.a(iresourcemanager, executor);
-        CompletableFuture<Map<MinecraftKey, Tag.a<Item>>> completablefuture1 = this.itemTags.a(iresourcemanager, executor);
-        CompletableFuture<Map<MinecraftKey, Tag.a<FluidType>>> completablefuture2 = this.fluidTags.a(iresourcemanager, executor);
-        CompletableFuture<Map<MinecraftKey, Tag.a<EntityTypes<?>>>> completablefuture3 = this.entityTags.a(iresourcemanager, executor);
+        CompletableFuture<Map<MinecraftKey, Tag.a<Block>>> completablefuture = this.a.a(iresourcemanager, executor);
+        CompletableFuture<Map<MinecraftKey, Tag.a<Item>>> completablefuture1 = this.b.a(iresourcemanager, executor);
+        CompletableFuture<Map<MinecraftKey, Tag.a<FluidType>>> completablefuture2 = this.c.a(iresourcemanager, executor);
+        CompletableFuture<Map<MinecraftKey, Tag.a<EntityTypes<?>>>> completablefuture3 = this.d.a(iresourcemanager, executor);
         CompletableFuture<TagRegistry.a> completablefuture4 = completablefuture.thenCombine(completablefuture1, Pair::of).thenCombine(completablefuture2.thenCombine(completablefuture3, Pair::of), (pair, pair1) -> { // CraftBukkit - decompile error
             return new TagRegistry.a((Map) pair.getFirst(), (Map) pair.getSecond(), (Map) pair1.getFirst(), (Map) pair1.getSecond());
         });
 
         ireloadlistener_a.getClass();
         return completablefuture4.thenCompose(ireloadlistener_a::a).thenAcceptAsync((tagregistry_a) -> {
-            this.blockTags.a(tagregistry_a.a);
-            this.itemTags.a(tagregistry_a.b);
-            this.fluidTags.a(tagregistry_a.c);
-            this.entityTags.a(tagregistry_a.d);
-            TagsBlock.a((Tags) this.blockTags);
-            TagsItem.a((Tags) this.itemTags);
-            TagsFluid.a((Tags) this.fluidTags);
-            TagsEntity.a((Tags) this.entityTags);
+            this.e();
+            this.a.a(tagregistry_a.a);
+            this.b.a(tagregistry_a.b);
+            this.c.a(tagregistry_a.c);
+            this.d.a(tagregistry_a.d);
+            TagsBlock.a((Tags) this.a);
+            TagsItem.a((Tags) this.b);
+            TagsFluid.a((Tags) this.c);
+            TagsEntity.a((Tags) this.d);
             // CraftBukkit start
-            this.blockTags.version++;
-            this.itemTags.version++;
-            this.fluidTags.version++;
-            this.entityTags.version++;
+            this.a.version++;
+            this.b.version++;
+            this.c.version++;
+            this.d.version++;
             // CraftBukkit end
         }, executor1);
     }
diff --git a/src/main/java/net/minecraft/server/TagsServer.java b/src/main/java/net/minecraft/server/TagsServer.java
index 7ed9f2cd..402faee3 100644
--- a/src/main/java/net/minecraft/server/TagsServer.java
+++ b/src/main/java/net/minecraft/server/TagsServer.java
@@ -1,8 +1,9 @@
 package net.minecraft.server;
 
-import com.google.common.collect.Maps;
+import com.google.common.collect.Lists;
+import java.util.Collection;
 import java.util.Iterator;
-import java.util.Map;
+import java.util.List;
 import java.util.Map.Entry;
 
 public class TagsServer<T> extends Tags<T> {
@@ -16,10 +17,8 @@ public class TagsServer<T> extends Tags<T> {
     }
 
     public void a(PacketDataSerializer packetdataserializer) {
-        Map<MinecraftKey, Tag<T>> map = this.b();
-
-        packetdataserializer.d(map.size());
-        Iterator iterator = map.entrySet().iterator();
+        packetdataserializer.d(this.c().size());
+        Iterator iterator = this.c().entrySet().iterator();
 
         while (iterator.hasNext()) {
             Entry<MinecraftKey, Tag<T>> entry = (Entry) iterator.next();
@@ -38,21 +37,19 @@ public class TagsServer<T> extends Tags<T> {
     }
 
     public void b(PacketDataSerializer packetdataserializer) {
-        Map<MinecraftKey, Tag<T>> map = Maps.newHashMap();
         int i = packetdataserializer.i();
 
         for (int j = 0; j < i; ++j) {
             MinecraftKey minecraftkey = packetdataserializer.o();
             int k = packetdataserializer.i();
-            Tag.a<T> tag_a = Tag.a.a();
+            List<T> list = Lists.newArrayList();
 
             for (int l = 0; l < k; ++l) {
-                tag_a.a(this.a.fromId(packetdataserializer.i()));
+                list.add(this.a.fromId(packetdataserializer.i()));
             }
 
-            map.put(minecraftkey, tag_a.b(minecraftkey));
+            this.c().put(minecraftkey, (Tag<T>) Tag.a.a().a((Collection) list).b(minecraftkey)); // CraftBukkit - decompile error
         }
 
-        this.b((Map) map);
     }
 }
diff --git a/src/main/java/net/minecraft/server/TickListServer.java b/src/main/java/net/minecraft/server/TickListServer.java
index f533860b..76860385 100644
--- a/src/main/java/net/minecraft/server/TickListServer.java
+++ b/src/main/java/net/minecraft/server/TickListServer.java
@@ -3,13 +3,9 @@ package net.minecraft.server;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Queues;
 import com.google.common.collect.Sets;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Queue;
-import java.util.Set;
-import java.util.TreeSet;
+
+import java.util.*;
+import java.util.concurrent.ConcurrentSkipListSet;
 import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.function.Predicate;
@@ -22,7 +18,9 @@ public class TickListServer<T> implements TickList<T> {
     private final Function<T, MinecraftKey> b;
     private final Function<MinecraftKey, T> c;
     private final Set<NextTickListEntry<T>> nextTickListHash = Sets.newHashSet();
-    private final TreeSet<NextTickListEntry<T>> nextTickList = Sets.newTreeSet(NextTickListEntry.a());
+    // MCMT: Made this set synchronyzed so it doesn't creash the processing thread anymore
+    // TODO: find a better data structure, or find a way to minimize time spent locking.
+    private final SortedSet<NextTickListEntry<T>> nextTickList = new ConcurrentSkipListSet<>(NextTickListEntry.a());
     private final WorldServer f;
     private final Queue<NextTickListEntry<T>> g = Queues.newArrayDeque();
     private final List<NextTickListEntry<T>> h = Lists.newArrayList();
@@ -41,7 +39,11 @@ public class TickListServer<T> implements TickList<T> {
     private final co.aikar.timings.Timing timingTicking; // Paper
     // Paper end
 
-    public void b() {
+    public Set<NextTickListEntry<T>> getNextTickList() {
+        return this.nextTickListHash;
+    }
+
+    public void doTick() {
         int i = this.nextTickList.size();
 
         if (false) { // CraftBukkit
@@ -114,7 +116,7 @@ public class TickListServer<T> implements TickList<T> {
 
     @Override
     public void a(Stream<NextTickListEntry<T>> stream) {
-        stream.forEach(this::a);
+        stream.forEach(this::add);
     }
 
     public List<NextTickListEntry<T>> a(ChunkCoordIntPair chunkcoordintpair, boolean flag, boolean flag1) {
@@ -176,7 +178,7 @@ public class TickListServer<T> implements TickList<T> {
                 BlockPosition blockposition1 = nextticklistentry.a.a((BaseBlockPosition) blockposition);
                 T t0 = nextticklistentry.b();
 
-                this.a(new NextTickListEntry<>(blockposition1, t0, nextticklistentry.b, nextticklistentry.c));
+                this.add(new NextTickListEntry<>(blockposition1, t0, nextticklistentry.b, nextticklistentry.c));
             }
         }
 
@@ -215,21 +217,21 @@ public class TickListServer<T> implements TickList<T> {
 
     @Override
     public void a(BlockPosition blockposition, T t0, int i, TickListPriority ticklistpriority) {
+        if(t0 instanceof BlockBamboo)
+        {
+            System.out.println("Bamboo Update!");
+        }
+
         if (!this.a.test(t0)) {
-            this.a(new NextTickListEntry<>(blockposition, t0, (long) i + this.f.getTime(), ticklistpriority));
+            this.add(new NextTickListEntry<>(blockposition, t0, (long) i + this.f.getTime(), ticklistpriority));
         }
 
     }
 
-    private void a(NextTickListEntry<T> nextticklistentry) {
+    public void add(NextTickListEntry<T> nextticklistentry) {
         if (!this.nextTickListHash.contains(nextticklistentry)) {
             this.nextTickListHash.add(nextticklistentry);
             this.nextTickList.add(nextticklistentry);
         }
-
-    }
-
-    public int a() {
-        return this.nextTickListHash.size();
     }
 }
diff --git a/src/main/java/net/minecraft/server/Ticket.java b/src/main/java/net/minecraft/server/Ticket.java
index badbe6c1..4a1ba0dd 100644
--- a/src/main/java/net/minecraft/server/Ticket.java
+++ b/src/main/java/net/minecraft/server/Ticket.java
@@ -6,13 +6,13 @@ public final class Ticket<T> implements Comparable<Ticket<?>> {
 
     private final TicketType<T> a;
     private final int b;
-    public final T identifier; public final T getObjectReason() { return this.identifier; } // Paper - OBFHELPER
+    private final T c; public final T getObjectReason() { return this.c; } // Paper - OBFHELPER
     private final long d; public final long getCreationTick() { return this.d; } // Paper - OBFHELPER
 
     protected Ticket(TicketType<T> tickettype, int i, T t0, long j) {
         this.a = tickettype;
         this.b = i;
-        this.identifier = t0;
+        this.c = t0;
         this.d = j;
     }
 
@@ -24,7 +24,7 @@ public final class Ticket<T> implements Comparable<Ticket<?>> {
         } else {
             int j = Integer.compare(System.identityHashCode(this.a), System.identityHashCode(ticket.a));
 
-            return j != 0 ? j : this.a.a().compare(this.identifier, (T)ticket.identifier); // Paper - decompile fix
+            return j != 0 ? j : this.a.a().compare(this.c, (T)ticket.c); // Paper - decompile fix
         }
     }
 
@@ -36,16 +36,16 @@ public final class Ticket<T> implements Comparable<Ticket<?>> {
         } else {
             Ticket<?> ticket = (Ticket) object;
 
-            return this.b == ticket.b && Objects.equals(this.a, ticket.a) && Objects.equals(this.identifier, ticket.identifier);
+            return this.b == ticket.b && Objects.equals(this.a, ticket.a) && Objects.equals(this.c, ticket.c);
         }
     }
 
     public int hashCode() {
-        return Objects.hash(new Object[]{this.a, this.b, this.identifier});
+        return Objects.hash(new Object[]{this.a, this.b, this.c});
     }
 
     public String toString() {
-        return "Ticket[" + this.a + " " + this.b + " (" + this.identifier + ")] at " + this.d;
+        return "Ticket[" + this.a + " " + this.b + " (" + this.c + ")] at " + this.d;
     }
 
     public TicketType<T> getTicketType() {
diff --git a/src/main/java/net/minecraft/server/TicketType.java b/src/main/java/net/minecraft/server/TicketType.java
index 9c114d2d..d2bf158a 100644
--- a/src/main/java/net/minecraft/server/TicketType.java
+++ b/src/main/java/net/minecraft/server/TicketType.java
@@ -6,7 +6,7 @@ public class TicketType<T> {
 
     private final String i;
     private final Comparator<T> j;
-    public long loadPeriod;
+    private final long k;
     public static final TicketType<Unit> START = a("start", (unit, unit1) -> {
         return 0;
     });
@@ -20,8 +20,6 @@ public class TicketType<T> {
     public static final TicketType<Integer> POST_TELEPORT = a("post_teleport", Integer::compareTo, 5);
     public static final TicketType<ChunkCoordIntPair> UNKNOWN = a("unknown", Comparator.comparingLong(ChunkCoordIntPair::pair), 1);
     public static final TicketType<Unit> PLUGIN = a("plugin", (a, b) -> 0); // CraftBukkit
-    public static final TicketType<org.bukkit.plugin.Plugin> PLUGIN_TICKET = a("plugin_ticket", (plugin1, plugin2) -> plugin1.getClass().getName().compareTo(plugin2.getClass().getName())); // Craftbukkit
-    public static final TicketType<Integer> ANTIXRAY = a("antixray", Integer::compareTo); // Paper - Anti-Xray
 
     public static <T> TicketType<T> a(String s, Comparator<T> comparator) {
         return new TicketType<>(s, comparator, 0L);
@@ -34,7 +32,7 @@ public class TicketType<T> {
     protected TicketType(String s, Comparator<T> comparator, long i) {
         this.i = s;
         this.j = comparator;
-        this.loadPeriod = i;
+        this.k = i;
     }
 
     public String toString() {
@@ -46,6 +44,6 @@ public class TicketType<T> {
     }
 
     public long b() {
-        return this.loadPeriod;
+        return this.k;
     }
 }
diff --git a/src/main/java/net/minecraft/server/TileEntity.java b/src/main/java/net/minecraft/server/TileEntity.java
index b8ddb99f..5188689f 100644
--- a/src/main/java/net/minecraft/server/TileEntity.java
+++ b/src/main/java/net/minecraft/server/TileEntity.java
@@ -17,7 +17,7 @@ public abstract class TileEntity implements KeyedObject { // Paper
     public Timing tickTimer = MinecraftTimings.getTileEntityTimings(this); // Paper
     // CraftBukkit start - data containers
     private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
-    public CraftPersistentDataContainer persistentDataContainer;
+    public final CraftPersistentDataContainer persistentDataContainer = new CraftPersistentDataContainer(DATA_TYPE_REGISTRY);
     // CraftBukkit end
     private static final Logger LOGGER = LogManager.getLogger();
     boolean isLoadingStructure = false; // Paper
@@ -81,8 +81,6 @@ public abstract class TileEntity implements KeyedObject { // Paper
     public void load(NBTTagCompound nbttagcompound) {
         this.position = new BlockPosition(nbttagcompound.getInt("x"), nbttagcompound.getInt("y"), nbttagcompound.getInt("z"));
         // CraftBukkit start - read container
-        this.persistentDataContainer = new CraftPersistentDataContainer(DATA_TYPE_REGISTRY);
-
         NBTTagCompound persistentDataTag = nbttagcompound.getCompound("PublicBukkitValues");
         if (persistentDataTag != null) {
             this.persistentDataContainer.putAll(persistentDataTag);
@@ -105,7 +103,7 @@ public abstract class TileEntity implements KeyedObject { // Paper
             nbttagcompound.setInt("y", this.position.getY());
             nbttagcompound.setInt("z", this.position.getZ());
             // CraftBukkit start - store container
-            if (this.persistentDataContainer != null && !this.persistentDataContainer.isEmpty()) {
+            if (!this.persistentDataContainer.isEmpty()) {
                 nbttagcompound.set("PublicBukkitValues", this.persistentDataContainer.toTagCompound());
             }
             // CraftBukkit end
@@ -113,8 +111,15 @@ public abstract class TileEntity implements KeyedObject { // Paper
         }
     }
 
+    // CraftBukkit start
     @Nullable
     public static TileEntity create(NBTTagCompound nbttagcompound) {
+        return create(nbttagcompound, null);
+    }
+
+    @Nullable
+    public static TileEntity create(NBTTagCompound nbttagcompound, @Nullable World world) {
+        // CraftBukkit end
         String s = nbttagcompound.getString("id");
 
         return (TileEntity) IRegistry.BLOCK_ENTITY_TYPE.getOptional(new MinecraftKey(s)).map((tileentitytypes) -> {
@@ -126,6 +131,7 @@ public abstract class TileEntity implements KeyedObject { // Paper
             }
         }).map((tileentity) -> {
             try {
+                tileentity.setWorld(world); // CraftBukkit
                 tileentity.load(nbttagcompound);
                 return tileentity;
             } catch (Throwable throwable) {
@@ -175,7 +181,7 @@ public abstract class TileEntity implements KeyedObject { // Paper
         return this.f;
     }
 
-    public void V_() {
+    public void W_() {
         this.f = true;
     }
 
diff --git a/src/main/java/net/minecraft/server/TileEntityBanner.java b/src/main/java/net/minecraft/server/TileEntityBanner.java
index bfc58a77..12264c4d 100644
--- a/src/main/java/net/minecraft/server/TileEntityBanner.java
+++ b/src/main/java/net/minecraft/server/TileEntityBanner.java
@@ -61,7 +61,7 @@ public class TileEntityBanner extends TileEntity implements INamableTileEntity {
         }
 
         if (this.hasWorld()) {
-            this.color = ((BlockBannerAbstract) this.getBlock().getBlock()).getColor();
+            this.color = ((BlockBannerAbstract) this.getBlock().getBlock()).b();
         } else {
             this.color = null;
         }
@@ -113,7 +113,7 @@ public class TileEntityBanner extends TileEntity implements INamableTileEntity {
 
     public EnumColor a(Supplier<IBlockData> supplier) {
         if (this.color == null) {
-            this.color = ((BlockBannerAbstract) ((IBlockData) supplier.get()).getBlock()).getColor();
+            this.color = ((BlockBannerAbstract) ((IBlockData) supplier.get()).getBlock()).b();
         }
 
         return this.color;
diff --git a/src/main/java/net/minecraft/server/TileEntityBarrel.java b/src/main/java/net/minecraft/server/TileEntityBarrel.java
index 5d80ec80..4c71d8e1 100644
--- a/src/main/java/net/minecraft/server/TileEntityBarrel.java
+++ b/src/main/java/net/minecraft/server/TileEntityBarrel.java
@@ -191,7 +191,7 @@ public class TileEntityBarrel extends TileEntityLootable {
             IBlockData iblockdata = this.getBlock();
 
             if (iblockdata.getBlock() != Blocks.BARREL) {
-                this.V_();
+                this.W_();
                 return;
             }
 
@@ -223,6 +223,6 @@ public class TileEntityBarrel extends TileEntityLootable {
         double d1 = (double) this.position.getY() + 0.5D + (double) baseblockposition.getY() / 2.0D;
         double d2 = (double) this.position.getZ() + 0.5D + (double) baseblockposition.getZ() / 2.0D;
 
-        this.world.playSound((EntityHuman) null, d0, d1, d2, soundeffect, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
+        this.world.a((EntityHuman) null, d0, d1, d2, soundeffect, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
     }
 }
diff --git a/src/main/java/net/minecraft/server/TileEntityBeacon.java b/src/main/java/net/minecraft/server/TileEntityBeacon.java
index e510234d..d8612de0 100644
--- a/src/main/java/net/minecraft/server/TileEntityBeacon.java
+++ b/src/main/java/net/minecraft/server/TileEntityBeacon.java
@@ -171,8 +171,6 @@ public class TileEntityBeacon extends TileEntity implements ITileInventory, ITic
 
                         CriterionTriggers.l.a(entityplayer, this);
                     }
-                } else if (flag && !flag1) {
-                    this.a(SoundEffects.BLOCK_BEACON_DEACTIVATE);
                 }
             }
         }
@@ -210,9 +208,9 @@ public class TileEntityBeacon extends TileEntity implements ITileInventory, ITic
     }
 
     @Override
-    public void V_() {
+    public void W_() {
         this.a(SoundEffects.BLOCK_BEACON_DEACTIVATE);
-        super.V_();
+        super.W_();
     }
 
     // CraftBukkit start - split into components
@@ -305,7 +303,7 @@ public class TileEntityBeacon extends TileEntity implements ITileInventory, ITic
     // CraftBukkit end
 
     public void a(SoundEffect soundeffect) {
-        this.world.playSound((EntityHuman) null, this.position, soundeffect, SoundCategory.BLOCKS, 1.0F, 1.0F);
+        this.world.a((EntityHuman) null, this.position, soundeffect, SoundCategory.BLOCKS, 1.0F, 1.0F);
     }
 
     public int h() {
@@ -336,7 +334,6 @@ public class TileEntityBeacon extends TileEntity implements ITileInventory, ITic
         // Craftbukkit start - persist manually set non-default beacon effects (SPIGOT-3598)
         this.primaryEffect = MobEffectList.fromId(nbttagcompound.getInt("Primary"));
         this.secondaryEffect = MobEffectList.fromId(nbttagcompound.getInt("Secondary"));
-        this.levels = nbttagcompound.getInt("Levels"); // SPIGOT-5053, use where available
         // Craftbukkit end
         if (nbttagcompound.hasKeyOfType("CustomName", 8)) {
             this.customName = IChatBaseComponent.ChatSerializer.a(nbttagcompound.getString("CustomName"));
diff --git a/src/main/java/net/minecraft/server/TileEntityChest.java b/src/main/java/net/minecraft/server/TileEntityChest.java
index 6c10f0eb..efc153de 100644
--- a/src/main/java/net/minecraft/server/TileEntityChest.java
+++ b/src/main/java/net/minecraft/server/TileEntityChest.java
@@ -199,7 +199,7 @@ public class TileEntityChest extends TileEntityLootable { // Paper - Remove ITic
                 d2 += (double) enumdirection.getAdjacentZ() * 0.5D;
             }
 
-            this.world.playSound((EntityHuman) null, d0, d1, d2, soundeffect, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
+            this.world.a((EntityHuman) null, d0, d1, d2, soundeffect, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/TileEntityConduit.java b/src/main/java/net/minecraft/server/TileEntityConduit.java
index d5011ec9..f6b899e2 100644
--- a/src/main/java/net/minecraft/server/TileEntityConduit.java
+++ b/src/main/java/net/minecraft/server/TileEntityConduit.java
@@ -110,7 +110,7 @@ public class TileEntityConduit extends TileEntity implements ITickable {
                 for (k = -1; k <= 1; ++k) {
                     BlockPosition blockposition = this.position.b(i, j, k);
 
-                    if (!this.world.x(blockposition)) {
+                    if (!this.world.y(blockposition)) {
                         return false;
                     }
                 }
@@ -194,7 +194,7 @@ public class TileEntityConduit extends TileEntity implements ITickable {
             // CraftBukkit start
             CraftEventFactory.blockDamage = CraftBlock.at(this.world, this.position);
             if (this.target.damageEntity(DamageSource.MAGIC, 4.0F)) {
-                this.world.playSound((EntityHuman) null, this.target.locX, this.target.locY, this.target.locZ, SoundEffects.BLOCK_CONDUIT_ATTACK_TARGET, SoundCategory.BLOCKS, 1.0F, 1.0F);
+                this.world.a((EntityHuman) null, this.target.locX, this.target.locY, this.target.locZ, SoundEffects.BLOCK_CONDUIT_ATTACK_TARGET, SoundCategory.BLOCKS, 1.0F, 1.0F);
             }
             CraftEventFactory.blockDamage = null;
             // CraftBukkit end
@@ -292,6 +292,6 @@ public class TileEntityConduit extends TileEntity implements ITickable {
     }
 
     public void a(SoundEffect soundeffect) {
-        this.world.playSound((EntityHuman) null, this.position, soundeffect, SoundCategory.BLOCKS, 1.0F, 1.0F);
+        this.world.a((EntityHuman) null, this.position, soundeffect, SoundCategory.BLOCKS, 1.0F, 1.0F);
     }
 }
diff --git a/src/main/java/net/minecraft/server/TileEntityEndGateway.java b/src/main/java/net/minecraft/server/TileEntityEndGateway.java
index 15dccc90..e28461f1 100644
--- a/src/main/java/net/minecraft/server/TileEntityEndGateway.java
+++ b/src/main/java/net/minecraft/server/TileEntityEndGateway.java
@@ -213,7 +213,7 @@ public class TileEntityEndGateway extends TileEntityEnderPortal implements ITick
                         BlockPosition blockposition2 = new BlockPosition(blockposition.getX() + j, l, blockposition.getZ() + k);
                         IBlockData iblockdata = iblockaccess.getType(blockposition2);
 
-                        if (iblockdata.o(iblockaccess, blockposition2) && (flag || iblockdata.getBlock() != Blocks.BEDROCK)) {
+                        if (Block.a(iblockdata.getCollisionShape(iblockaccess, blockposition2)) && (flag || iblockdata.getBlock() != Blocks.BEDROCK)) {
                             blockposition1 = blockposition2;
                             break;
                         }
@@ -245,7 +245,7 @@ public class TileEntityEndGateway extends TileEntityEnderPortal implements ITick
             BlockPosition blockposition4 = blockposition3.up();
             BlockPosition blockposition5 = blockposition3.up(2);
 
-            if (iblockdata.getBlock() == Blocks.END_STONE && !chunk.getType(blockposition4).o(chunk, blockposition4) && !chunk.getType(blockposition5).o(chunk, blockposition5)) {
+            if (iblockdata.getBlock() == Blocks.END_STONE && !Block.a(chunk.getType(blockposition4).getCollisionShape(chunk, blockposition4)) && !Block.a(chunk.getType(blockposition5).getCollisionShape(chunk, blockposition5))) {
                 double d1 = blockposition3.distanceSquared(0.0D, 0.0D, 0.0D, true);
 
                 if (blockposition2 == null || d1 < d0) {
diff --git a/src/main/java/net/minecraft/server/TileEntityEnderChest.java b/src/main/java/net/minecraft/server/TileEntityEnderChest.java
index ae6784b6..422b124a 100644
--- a/src/main/java/net/minecraft/server/TileEntityEnderChest.java
+++ b/src/main/java/net/minecraft/server/TileEntityEnderChest.java
@@ -38,7 +38,7 @@ public class TileEntityEnderChest extends TileEntity { // Paper - Remove ITickab
             double d1 = (double) i + 0.5D;
 
             d0 = (double) k + 0.5D;
-            this.world.playSound((EntityHuman) null, d1, (double) j + 0.5D, d0, SoundEffects.BLOCK_ENDER_CHEST_OPEN, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
+            this.world.a((EntityHuman) null, d1, (double) j + 0.5D, d0, SoundEffects.BLOCK_ENDER_CHEST_OPEN, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
         }
         // Paper start
     }
@@ -48,9 +48,8 @@ public class TileEntityEnderChest extends TileEntity { // Paper - Remove ITickab
         int j = this.position.getY();
         int k = this.position.getZ();
         double d0;
-
-        if (this.c == 0) { /* && this.a > 0.0F || this.c > 0 && this.a < 1.0F) {
         // Paper end
+        if (this.c == 0 && this.a > 0.0F || this.c > 0 && this.a < 1.0F) {
             float f1 = this.a;
 
             if (this.c > 0) {
@@ -66,14 +65,11 @@ public class TileEntityEnderChest extends TileEntity { // Paper - Remove ITickab
             float f2 = 0.5F;
 
             if (this.a < 0.5F && f1 >= 0.5F) {
-            // Paper start
-            */
                 d0 = (double) i + 0.5D;
                 double d2 = (double) k + 0.5D;
 
-            MCUtil.scheduleTask(10, () -> {
-                this.world.playSound((EntityHuman) null, d0, (double) j + 0.5D, d2, SoundEffects.BLOCK_ENDER_CHEST_CLOSE, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
-            });
+                this.world.a((EntityHuman) null, d0, (double) j + 0.5D, d2, SoundEffects.BLOCK_ENDER_CHEST_CLOSE, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
+            }
 
             if (this.a < 0.0F) {
                 this.a = 0.0F;
@@ -93,9 +89,9 @@ public class TileEntityEnderChest extends TileEntity { // Paper - Remove ITickab
     }
 
     @Override
-    public void V_() {
+    public void W_() {
         this.invalidateBlockCache();
-        super.V_();
+        super.W_();
     }
 
     public void d() {
diff --git a/src/main/java/net/minecraft/server/TileEntityFurnace.java b/src/main/java/net/minecraft/server/TileEntityFurnace.java
index 55b56461..c983d260 100644
--- a/src/main/java/net/minecraft/server/TileEntityFurnace.java
+++ b/src/main/java/net/minecraft/server/TileEntityFurnace.java
@@ -513,7 +513,7 @@ public abstract class TileEntityFurnace extends TileEntityContainer implements I
 
     @Nullable
     @Override
-    public IRecipe<?> U_() {
+    public IRecipe<?> V_() {
         return null;
     }
 
diff --git a/src/main/java/net/minecraft/server/TileEntityHopper.java b/src/main/java/net/minecraft/server/TileEntityHopper.java
index 6f6519f6..72b4b19d 100644
--- a/src/main/java/net/minecraft/server/TileEntityHopper.java
+++ b/src/main/java/net/minecraft/server/TileEntityHopper.java
@@ -593,7 +593,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
     }
 
     public static List<EntityItem> c(IHopper ihopper) {
-        return (List) ihopper.N_().d().stream().flatMap((axisalignedbb) -> {
+        return (List) ihopper.O_().d().stream().flatMap((axisalignedbb) -> {
             return ihopper.getWorld().a(EntityItem.class, axisalignedbb.d(ihopper.z() - 0.5D, ihopper.A() - 0.5D, ihopper.B() - 0.5D), IEntitySelector.a).stream();
         }).collect(Collectors.toList());
     }
@@ -680,7 +680,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
         if (entity instanceof EntityItem) {
             BlockPosition blockposition = this.getPosition();
 
-            if (VoxelShapes.c(VoxelShapes.a(entity.getBoundingBox().d((double) (-blockposition.getX()), (double) (-blockposition.getY()), (double) (-blockposition.getZ()))), this.N_(), OperatorBoolean.AND)) {
+            if (VoxelShapes.c(VoxelShapes.a(entity.getBoundingBox().d((double) (-blockposition.getX()), (double) (-blockposition.getY()), (double) (-blockposition.getZ()))), this.O_(), OperatorBoolean.AND)) {
                 this.a(() -> {
                     return a((IInventory) this, (EntityItem) entity);
                 });
diff --git a/src/main/java/net/minecraft/server/TileEntityLectern.java b/src/main/java/net/minecraft/server/TileEntityLectern.java
index 221de42e..6e144ca0 100644
--- a/src/main/java/net/minecraft/server/TileEntityLectern.java
+++ b/src/main/java/net/minecraft/server/TileEntityLectern.java
@@ -54,7 +54,7 @@ public class TileEntityLectern extends TileEntity implements Clearable, ITileInv
 
         @Override
         public InventoryHolder getOwner() {
-            return (Lectern) TileEntityLectern.this.getOwner();
+            return (Lectern) CraftBlock.at(world, position).getState();
         }
         // CraftBukkit end
 
@@ -106,9 +106,7 @@ public class TileEntityLectern extends TileEntity implements Clearable, ITileInv
         public void setItem(int i, ItemStack itemstack) {
             if (i == 0) {
                 TileEntityLectern.this.setBook(itemstack);
-                if (TileEntityLectern.this.getWorld() != null) {
-                    BlockLectern.setHasBook(TileEntityLectern.this.getWorld(), TileEntityLectern.this.getPosition(), TileEntityLectern.this.getBlock(), TileEntityLectern.this.hasBook());
-                }
+                BlockLectern.setHasBook(TileEntityLectern.this.getWorld(), TileEntityLectern.this.getPosition(), TileEntityLectern.this.getBlock(), TileEntityLectern.this.hasBook());
             }
         }
         // CraftBukkit end
@@ -264,11 +262,6 @@ public class TileEntityLectern extends TileEntity implements Clearable, ITileInv
         return new CommandListenerWrapper(this, vec3d, Vec2F.a, (WorldServer) this.world, 2, s, (IChatBaseComponent) object, this.world.getMinecraftServer(), entityhuman);
     }
 
-    @Override
-    public boolean isFilteredNBT() {
-        return true;
-    }
-
     @Override
     public void load(NBTTagCompound nbttagcompound) {
         super.load(nbttagcompound);
diff --git a/src/main/java/net/minecraft/server/TileEntityShulkerBox.java b/src/main/java/net/minecraft/server/TileEntityShulkerBox.java
index fe64a99b..56709ff8 100644
--- a/src/main/java/net/minecraft/server/TileEntityShulkerBox.java
+++ b/src/main/java/net/minecraft/server/TileEntityShulkerBox.java
@@ -214,7 +214,7 @@ public class TileEntityShulkerBox extends TileEntityLootable implements IWorldIn
             ++this.c;
             this.world.playBlockAction(this.position, this.getBlock().getBlock(), 1, this.c);
             if (this.c == 1) {
-                this.world.playSound((EntityHuman) null, this.position, SoundEffects.BLOCK_SHULKER_BOX_OPEN, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
+                this.world.a((EntityHuman) null, this.position, SoundEffects.BLOCK_SHULKER_BOX_OPEN, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
             }
         }
 
@@ -226,7 +226,7 @@ public class TileEntityShulkerBox extends TileEntityLootable implements IWorldIn
             --this.c;
             this.world.playBlockAction(this.position, this.getBlock().getBlock(), 1, this.c);
             if (this.c <= 0) {
-                this.world.playSound((EntityHuman) null, this.position, SoundEffects.BLOCK_SHULKER_BOX_CLOSE, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
+                this.world.a((EntityHuman) null, this.position, SoundEffects.BLOCK_SHULKER_BOX_CLOSE, SoundCategory.BLOCKS, 0.5F, this.world.random.nextFloat() * 0.1F + 0.9F);
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/TileEntitySign.java b/src/main/java/net/minecraft/server/TileEntitySign.java
index 0a8d9b52..dd7889a4 100644
--- a/src/main/java/net/minecraft/server/TileEntitySign.java
+++ b/src/main/java/net/minecraft/server/TileEntitySign.java
@@ -161,8 +161,8 @@ public class TileEntitySign extends TileEntity implements ICommandListener { //
             IChatBaseComponent ichatbasecomponent = aichatbasecomponent[j];
             ChatModifier chatmodifier = ichatbasecomponent == null ? null : ichatbasecomponent.getChatModifier();
 
-            if (chatmodifier != null && chatmodifier.getClickEvent() != null) {
-                ChatClickable chatclickable = chatmodifier.getClickEvent();
+            if (chatmodifier != null && chatmodifier.h() != null) {
+                ChatClickable chatclickable = chatmodifier.h();
 
                 if (chatclickable.a() == ChatClickable.EnumClickAction.RUN_COMMAND) {
                     entityhuman.getMinecraftServer().getCommandDispatcher().a(this.a((EntityPlayer) entityhuman), chatclickable.b());
@@ -214,7 +214,7 @@ public class TileEntitySign extends TileEntity implements ICommandListener { //
         if (enumcolor != this.getColor()) {
             this.color = enumcolor;
             this.update();
-            if (this.world != null) this.world.notify(this.getPosition(), this.getBlock(), this.getBlock(), 3); // CraftBukkit - skip notify if world is null (SPIGOT-5122)
+            this.world.notify(this.getPosition(), this.getBlock(), this.getBlock(), 3);
             return true;
         } else {
             return false;
diff --git a/src/main/java/net/minecraft/server/VillageSiege.java b/src/main/java/net/minecraft/server/VillageSiege.java
index 6e4c5d4d..bb3aa4a3 100644
--- a/src/main/java/net/minecraft/server/VillageSiege.java
+++ b/src/main/java/net/minecraft/server/VillageSiege.java
@@ -7,83 +7,81 @@ import javax.annotation.Nullable;
 
 public class VillageSiege {
 
-    private boolean a;
-    private VillageSiege.State b;
-    private int c;
+    private final WorldServer a;
+    private boolean b;
+    private VillageSiege.State c;
     private int d;
     private int e;
     private int f;
     private int g;
+    private int h;
 
-    public VillageSiege() {
-        this.b = VillageSiege.State.SIEGE_DONE;
+    public VillageSiege(WorldServer worldserver) {
+        this.c = VillageSiege.State.SIEGE_DONE;
+        this.a = worldserver;
     }
 
-    public int a(WorldServer worldserver, boolean flag, boolean flag1) {
-        if (!worldserver.J() && flag) {
-            float f = worldserver.j(0.0F);
+    public void a() {
+        if (this.a.J()) {
+            this.c = VillageSiege.State.SIEGE_DONE;
+            this.b = false;
+        } else {
+            float f = this.a.j(0.0F);
 
             if ((double) f == 0.5D) {
-                this.b = worldserver.random.nextInt(10) == 0 ? VillageSiege.State.SIEGE_TONIGHT : VillageSiege.State.SIEGE_DONE;
+                this.c = this.a.random.nextInt(10) == 0 ? VillageSiege.State.SIEGE_TONIGHT : VillageSiege.State.SIEGE_DONE;
             }
 
-            if (this.b == VillageSiege.State.SIEGE_DONE) {
-                return 0;
-            } else {
-                if (!this.a) {
-                    if (!this.a(worldserver)) {
-                        return 0;
+            if (this.c != VillageSiege.State.SIEGE_DONE) {
+                if (!this.b) {
+                    if (!this.b()) {
+                        return;
                     }
 
-                    this.a = true;
+                    this.b = true;
                 }
 
-                if (this.d > 0) {
-                    --this.d;
-                    return 0;
+                if (this.e > 0) {
+                    --this.e;
                 } else {
-                    this.d = 2;
-                    if (this.c > 0) {
-                        this.b(worldserver);
-                        --this.c;
+                    this.e = 2;
+                    if (this.d > 0) {
+                        this.c();
+                        --this.d;
                     } else {
-                        this.b = VillageSiege.State.SIEGE_DONE;
+                        this.c = VillageSiege.State.SIEGE_DONE;
                     }
 
-                    return 1;
                 }
             }
-        } else {
-            this.b = VillageSiege.State.SIEGE_DONE;
-            this.a = false;
-            return 0;
         }
     }
 
-    private boolean a(WorldServer worldserver) {
-        Iterator iterator = worldserver.getPlayers().iterator();
+    private boolean b() {
+        Iterator iterator = this.a.getPlayers().iterator();
 
         while (iterator.hasNext()) {
             EntityHuman entityhuman = (EntityHuman) iterator.next();
 
             if (!entityhuman.isSpectator()) {
-                BlockPosition blockposition = entityhuman.getChunkCoordinates();
+                BlockPosition blockposition = new BlockPosition(entityhuman);
 
-                if (worldserver.b_(blockposition) && worldserver.getBiome(blockposition).o() != BiomeBase.Geography.MUSHROOM) {
+                if (this.a.b_(blockposition)) {
                     for (int i = 0; i < 10; ++i) {
-                        float f = worldserver.random.nextFloat() * 6.2831855F;
-
-                        this.e = blockposition.getX() + MathHelper.d(MathHelper.cos(f) * 32.0F);
-                        this.f = blockposition.getY();
-                        this.g = blockposition.getZ() + MathHelper.d(MathHelper.sin(f) * 32.0F);
-                        if (this.a(worldserver, new BlockPosition(this.e, this.f, this.g)) != null) {
-                            this.d = 0;
-                            this.c = 20;
-                            break;
-                        }
+                        float f = this.a.random.nextFloat() * 6.2831855F;
+
+                        this.f = blockposition.getX() + MathHelper.d(MathHelper.cos(f) * 32.0F);
+                        this.g = blockposition.getY();
+                        this.h = blockposition.getZ() + MathHelper.d(MathHelper.sin(f) * 32.0F);
                     }
 
-                    return true;
+                    Vec3D vec3d = this.a(new BlockPosition(this.f, this.g, this.h));
+
+                    if (vec3d != null) {
+                        this.e = 0;
+                        this.d = 20;
+                        return true;
+                    }
                 }
             }
         }
@@ -91,36 +89,33 @@ public class VillageSiege {
         return false;
     }
 
-    private void b(WorldServer worldserver) {
-        Vec3D vec3d = this.a(worldserver, new BlockPosition(this.e, this.f, this.g));
+    private void c() {
+        Vec3D vec3d = this.a(new BlockPosition(this.f, this.g, this.h));
 
         if (vec3d != null) {
             EntityZombie entityzombie;
 
             try {
-                entityzombie = new EntityZombie(worldserver);
-                entityzombie.prepare(worldserver, worldserver.getDamageScaler(new BlockPosition(entityzombie)), EnumMobSpawn.EVENT, (GroupDataEntity) null, (NBTTagCompound) null);
+                entityzombie = new EntityZombie(this.a);
+                entityzombie.prepare(this.a, this.a.getDamageScaler(new BlockPosition(entityzombie)), EnumMobSpawn.EVENT, (GroupDataEntity) null, (NBTTagCompound) null);
             } catch (Exception exception) {
                 exception.printStackTrace();
                 ServerInternalException.reportInternalException(exception); // Paper
                 return;
             }
 
-            entityzombie.setPositionRotation(vec3d.x, vec3d.y, vec3d.z, worldserver.random.nextFloat() * 360.0F, 0.0F);
-            worldserver.addEntity(entityzombie, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.VILLAGE_INVASION); // CraftBukkit
+            entityzombie.setPositionRotation(vec3d.x, vec3d.y, vec3d.z, this.a.random.nextFloat() * 360.0F, 0.0F);
+            this.a.addEntity(entityzombie, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.VILLAGE_INVASION); // CraftBukkit
         }
     }
 
     @Nullable
-    private Vec3D a(WorldServer worldserver, BlockPosition blockposition) {
+    private Vec3D a(BlockPosition blockposition) {
         for (int i = 0; i < 10; ++i) {
-            int j = blockposition.getX() + worldserver.random.nextInt(16) - 8;
-            int k = blockposition.getZ() + worldserver.random.nextInt(16) - 8;
-            int l = worldserver.a(HeightMap.Type.WORLD_SURFACE, j, k);
-            BlockPosition blockposition1 = new BlockPosition(j, l, k);
+            BlockPosition blockposition1 = blockposition.b(this.a.random.nextInt(16) - 8, this.a.random.nextInt(6) - 3, this.a.random.nextInt(16) - 8);
 
-            if (worldserver.b_(blockposition1) && EntityMonster.c(EntityTypes.ZOMBIE, worldserver, EnumMobSpawn.EVENT, blockposition1, worldserver.random)) {
-                return new Vec3D((double) blockposition1.getX() + 0.5D, (double) blockposition1.getY(), (double) blockposition1.getZ() + 0.5D);
+            if (this.a.b_(blockposition1) && SpawnerCreature.a(EntityPositionTypes.Surface.ON_GROUND, (IWorldReader) this.a, blockposition1, (EntityTypes) null)) {
+                return new Vec3D((double) blockposition1.getX(), (double) blockposition1.getY(), (double) blockposition1.getZ());
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/VillagerTrades.java b/src/main/java/net/minecraft/server/VillagerTrades.java
index 819e0efd..0b663236 100644
--- a/src/main/java/net/minecraft/server/VillagerTrades.java
+++ b/src/main/java/net/minecraft/server/VillagerTrades.java
@@ -16,19 +16,19 @@ import javax.annotation.Nullable;
 public class VillagerTrades {
 
     public static final Map<VillagerProfession, Int2ObjectMap<VillagerTrades.IMerchantRecipeOption[]>> a = SystemUtils.a(Maps.newHashMap(), (hashmap) -> { // Paper - decompile fix
-        hashmap.put(VillagerProfession.FARMER, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.WHEAT, 20, 16, 2), new VillagerTrades.b(Items.POTATO, 26, 16, 2), new VillagerTrades.b(Items.CARROT, 22, 16, 2), new VillagerTrades.b(Items.BEETROOT, 15, 16, 2), new VillagerTrades.h(Items.BREAD, 1, 6, 16, 1)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Blocks.PUMPKIN, 6, 12, 10), new VillagerTrades.h(Items.PUMPKIN_PIE, 1, 4, 5), new VillagerTrades.h(Items.APPLE, 1, 4, 16, 5)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(Items.COOKIE, 3, 18, 10), new VillagerTrades.b(Blocks.MELON, 4, 12, 20)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(Blocks.CAKE, 1, 1, 12, 15), new VillagerTrades.i(MobEffects.NIGHT_VISION, 100, 15), new VillagerTrades.i(MobEffects.JUMP, 160, 15), new VillagerTrades.i(MobEffects.WEAKNESS, 140, 15), new VillagerTrades.i(MobEffects.BLINDNESS, 120, 15), new VillagerTrades.i(MobEffects.POISON, 280, 15), new VillagerTrades.i(MobEffects.SATURATION, 7, 15)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(Items.GOLDEN_CARROT, 3, 3, 30), new VillagerTrades.h(Items.GLISTERING_MELON_SLICE, 4, 3, 30)})));
-        hashmap.put(VillagerProfession.FISHERMAN, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.STRING, 20, 16, 2), new VillagerTrades.b(Items.COAL, 10, 16, 2), new VillagerTrades.g(Items.COD, 6, Items.COOKED_COD, 6, 16, 1), new VillagerTrades.h(Items.COD_BUCKET, 3, 1, 16, 1)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.COD, 15, 16, 10), new VillagerTrades.g(Items.SALMON, 6, Items.COOKED_SALMON, 6, 16, 5), new VillagerTrades.h(Items.pS, 2, 1, 5)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.SALMON, 13, 16, 20), new VillagerTrades.e(Items.FISHING_ROD, 3, 3, 10, 0.2F)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.TROPICAL_FISH, 6, 12, 30)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.PUFFERFISH, 4, 12, 30), new VillagerTrades.c(1, 12, 30, ImmutableMap.<VillagerType, Item>builder().put(VillagerType.PLAINS, Items.OAK_BOAT).put(VillagerType.TAIGA, Items.SPRUCE_BOAT).put(VillagerType.SNOW, Items.SPRUCE_BOAT).put(VillagerType.DESERT, Items.JUNGLE_BOAT).put(VillagerType.JUNGLE, Items.JUNGLE_BOAT).put(VillagerType.SAVANNA, Items.ACACIA_BOAT).put(VillagerType.SWAMP, Items.DARK_OAK_BOAT).build())}))); // Paper - decompile fix
-        hashmap.put(VillagerProfession.SHEPHERD, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Blocks.WHITE_WOOL, 18, 16, 2), new VillagerTrades.b(Blocks.BROWN_WOOL, 18, 16, 2), new VillagerTrades.b(Blocks.BLACK_WOOL, 18, 16, 2), new VillagerTrades.b(Blocks.GRAY_WOOL, 18, 16, 2), new VillagerTrades.h(Items.SHEARS, 2, 1, 1)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.WHITE_DYE, 12, 16, 10), new VillagerTrades.b(Items.GRAY_DYE, 12, 16, 10), new VillagerTrades.b(Items.BLACK_DYE, 12, 16, 10), new VillagerTrades.b(Items.LIGHT_BLUE_DYE, 12, 16, 10), new VillagerTrades.b(Items.LIME_DYE, 12, 16, 10), new VillagerTrades.h(Blocks.WHITE_WOOL, 1, 1, 16, 5), new VillagerTrades.h(Blocks.ORANGE_WOOL, 1, 1, 16, 5), new VillagerTrades.h(Blocks.MAGENTA_WOOL, 1, 1, 16, 5), new VillagerTrades.h(Blocks.LIGHT_BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.h(Blocks.YELLOW_WOOL, 1, 1, 16, 5), new VillagerTrades.h(Blocks.LIME_WOOL, 1, 1, 16, 5), new VillagerTrades.h(Blocks.PINK_WOOL, 1, 1, 16, 5), new VillagerTrades.h(Blocks.GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.h(Blocks.LIGHT_GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.h(Blocks.CYAN_WOOL, 1, 1, 16, 5), new VillagerTrades.h(Blocks.PURPLE_WOOL, 1, 1, 16, 5), new VillagerTrades.h(Blocks.BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.h(Blocks.BROWN_WOOL, 1, 1, 16, 5), new VillagerTrades.h(Blocks.GREEN_WOOL, 1, 1, 16, 5), new VillagerTrades.h(Blocks.RED_WOOL, 1, 1, 16, 5), new VillagerTrades.h(Blocks.BLACK_WOOL, 1, 1, 16, 5), new VillagerTrades.h(Blocks.WHITE_CARPET, 1, 4, 16, 5), new VillagerTrades.h(Blocks.ORANGE_CARPET, 1, 4, 16, 5), new VillagerTrades.h(Blocks.MAGENTA_CARPET, 1, 4, 16, 5), new VillagerTrades.h(Blocks.LIGHT_BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.h(Blocks.YELLOW_CARPET, 1, 4, 16, 5), new VillagerTrades.h(Blocks.LIME_CARPET, 1, 4, 16, 5), new VillagerTrades.h(Blocks.PINK_CARPET, 1, 4, 16, 5), new VillagerTrades.h(Blocks.GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.h(Blocks.LIGHT_GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.h(Blocks.CYAN_CARPET, 1, 4, 16, 5), new VillagerTrades.h(Blocks.PURPLE_CARPET, 1, 4, 16, 5), new VillagerTrades.h(Blocks.BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.h(Blocks.BROWN_CARPET, 1, 4, 16, 5), new VillagerTrades.h(Blocks.GREEN_CARPET, 1, 4, 16, 5), new VillagerTrades.h(Blocks.RED_CARPET, 1, 4, 16, 5), new VillagerTrades.h(Blocks.BLACK_CARPET, 1, 4, 16, 5)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.YELLOW_DYE, 12, 16, 20), new VillagerTrades.b(Items.LIGHT_GRAY_DYE, 12, 16, 20), new VillagerTrades.b(Items.ORANGE_DYE, 12, 16, 20), new VillagerTrades.b(Items.RED_DYE, 12, 16, 20), new VillagerTrades.b(Items.PINK_DYE, 12, 16, 20), new VillagerTrades.h(Blocks.WHITE_BED, 3, 1, 12, 10), new VillagerTrades.h(Blocks.YELLOW_BED, 3, 1, 12, 10), new VillagerTrades.h(Blocks.RED_BED, 3, 1, 12, 10), new VillagerTrades.h(Blocks.BLACK_BED, 3, 1, 12, 10), new VillagerTrades.h(Blocks.BLUE_BED, 3, 1, 12, 10), new VillagerTrades.h(Blocks.BROWN_BED, 3, 1, 12, 10), new VillagerTrades.h(Blocks.CYAN_BED, 3, 1, 12, 10), new VillagerTrades.h(Blocks.GRAY_BED, 3, 1, 12, 10), new VillagerTrades.h(Blocks.GREEN_BED, 3, 1, 12, 10), new VillagerTrades.h(Blocks.LIGHT_BLUE_BED, 3, 1, 12, 10), new VillagerTrades.h(Blocks.LIGHT_GRAY_BED, 3, 1, 12, 10), new VillagerTrades.h(Blocks.LIME_BED, 3, 1, 12, 10), new VillagerTrades.h(Blocks.MAGENTA_BED, 3, 1, 12, 10), new VillagerTrades.h(Blocks.ORANGE_BED, 3, 1, 12, 10), new VillagerTrades.h(Blocks.PINK_BED, 3, 1, 12, 10), new VillagerTrades.h(Blocks.PURPLE_BED, 3, 1, 12, 10)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.BROWN_DYE, 12, 16, 30), new VillagerTrades.b(Items.PURPLE_DYE, 12, 16, 30), new VillagerTrades.b(Items.BLUE_DYE, 12, 16, 30), new VillagerTrades.b(Items.GREEN_DYE, 12, 16, 30), new VillagerTrades.b(Items.MAGENTA_DYE, 12, 16, 30), new VillagerTrades.b(Items.CYAN_DYE, 12, 16, 30), new VillagerTrades.h(Items.WHITE_BANNER, 3, 1, 12, 15), new VillagerTrades.h(Items.BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.h(Items.LIGHT_BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.h(Items.RED_BANNER, 3, 1, 12, 15), new VillagerTrades.h(Items.PINK_BANNER, 3, 1, 12, 15), new VillagerTrades.h(Items.GREEN_BANNER, 3, 1, 12, 15), new VillagerTrades.h(Items.LIME_BANNER, 3, 1, 12, 15), new VillagerTrades.h(Items.GRAY_BANNER, 3, 1, 12, 15), new VillagerTrades.h(Items.BLACK_BANNER, 3, 1, 12, 15), new VillagerTrades.h(Items.PURPLE_BANNER, 3, 1, 12, 15), new VillagerTrades.h(Items.MAGENTA_BANNER, 3, 1, 12, 15), new VillagerTrades.h(Items.CYAN_BANNER, 3, 1, 12, 15), new VillagerTrades.h(Items.BROWN_BANNER, 3, 1, 12, 15), new VillagerTrades.h(Items.YELLOW_BANNER, 3, 1, 12, 15), new VillagerTrades.h(Items.ORANGE_BANNER, 3, 1, 12, 15), new VillagerTrades.h(Items.LIGHT_GRAY_BANNER, 3, 1, 12, 15)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(Items.PAINTING, 2, 3, 30)})));
-        hashmap.put(VillagerProfession.FLETCHER, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.STICK, 32, 16, 2), new VillagerTrades.h(Items.ARROW, 1, 16, 1), new VillagerTrades.g(Blocks.GRAVEL, 10, Items.FLINT, 10, 12, 1)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.FLINT, 26, 12, 10), new VillagerTrades.h(Items.BOW, 2, 1, 5)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.STRING, 14, 16, 20), new VillagerTrades.h(Items.CROSSBOW, 3, 1, 10)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.FEATHER, 24, 16, 30), new VillagerTrades.e(Items.BOW, 2, 3, 15)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.dE, 8, 12, 30), new VillagerTrades.e(Items.CROSSBOW, 3, 3, 15), new VillagerTrades.j(Items.ARROW, 5, Items.TIPPED_ARROW, 5, 2, 12, 30)})));
-        hashmap.put(VillagerProfession.LIBRARIAN, a(ImmutableMap.<Integer, VillagerTrades.IMerchantRecipeOption[]>builder().put(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.PAPER, 24, 16, 2), new VillagerTrades.d(1), new VillagerTrades.h(Blocks.BOOKSHELF, 6, 3, 12, 1)}).put(2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.BOOK, 4, 12, 10), new VillagerTrades.d(5), new VillagerTrades.h(Items.pQ, 1, 1, 5)}).put(3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.INK_SAC, 5, 12, 20), new VillagerTrades.d(10), new VillagerTrades.h(Items.am, 1, 4, 10)}).put(4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.WRITABLE_BOOK, 2, 12, 30), new VillagerTrades.d(15), new VillagerTrades.h(Items.CLOCK, 5, 1, 15), new VillagerTrades.h(Items.COMPASS, 4, 1, 15)}).put(5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(Items.NAME_TAG, 20, 1, 30)}).build())); // Paper - decompile fix
-        hashmap.put(VillagerProfession.CARTOGRAPHER, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.PAPER, 24, 16, 2), new VillagerTrades.h(Items.MAP, 7, 1, 1)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.df, 11, 16, 10), new VillagerTrades.k(13, "Monument", MapIcon.Type.MONUMENT, 12, 5)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.COMPASS, 1, 12, 20), new VillagerTrades.k(14, "Mansion", MapIcon.Type.MANSION, 12, 10)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(Items.ITEM_FRAME, 7, 1, 15), new VillagerTrades.h(Items.WHITE_BANNER, 3, 1, 15), new VillagerTrades.h(Items.BLUE_BANNER, 3, 1, 15), new VillagerTrades.h(Items.LIGHT_BLUE_BANNER, 3, 1, 15), new VillagerTrades.h(Items.RED_BANNER, 3, 1, 15), new VillagerTrades.h(Items.PINK_BANNER, 3, 1, 15), new VillagerTrades.h(Items.GREEN_BANNER, 3, 1, 15), new VillagerTrades.h(Items.LIME_BANNER, 3, 1, 15), new VillagerTrades.h(Items.GRAY_BANNER, 3, 1, 15), new VillagerTrades.h(Items.BLACK_BANNER, 3, 1, 15), new VillagerTrades.h(Items.PURPLE_BANNER, 3, 1, 15), new VillagerTrades.h(Items.MAGENTA_BANNER, 3, 1, 15), new VillagerTrades.h(Items.CYAN_BANNER, 3, 1, 15), new VillagerTrades.h(Items.BROWN_BANNER, 3, 1, 15), new VillagerTrades.h(Items.YELLOW_BANNER, 3, 1, 15), new VillagerTrades.h(Items.ORANGE_BANNER, 3, 1, 15), new VillagerTrades.h(Items.LIGHT_GRAY_BANNER, 3, 1, 15)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(Items.GLOBE_BANNER_PATTERN, 8, 1, 30)})));
-        hashmap.put(VillagerProfession.CLERIC, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.ROTTEN_FLESH, 32, 16, 2), new VillagerTrades.h(Items.REDSTONE, 1, 2, 1)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.GOLD_INGOT, 3, 12, 10), new VillagerTrades.h(Items.LAPIS_LAZULI, 1, 1, 5)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.RABBIT_FOOT, 2, 12, 20), new VillagerTrades.h(Blocks.GLOWSTONE, 4, 1, 12, 10)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.SCUTE, 4, 12, 30), new VillagerTrades.b(Items.GLASS_BOTTLE, 9, 12, 30), new VillagerTrades.h(Items.ENDER_PEARL, 5, 1, 15)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.NETHER_WART, 22, 12, 30), new VillagerTrades.h(Items.EXPERIENCE_BOTTLE, 3, 1, 30)})));
-        hashmap.put(VillagerProfession.ARMORER, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.COAL, 15, 16, 2), new VillagerTrades.h(new ItemStack(Items.IRON_LEGGINGS), 7, 1, 12, 1, 0.2F), new VillagerTrades.h(new ItemStack(Items.IRON_BOOTS), 4, 1, 12, 1, 0.2F), new VillagerTrades.h(new ItemStack(Items.IRON_HELMET), 5, 1, 12, 1, 0.2F), new VillagerTrades.h(new ItemStack(Items.IRON_CHESTPLATE), 9, 1, 12, 1, 0.2F)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.IRON_INGOT, 4, 12, 10), new VillagerTrades.h(new ItemStack(Items.pP), 36, 1, 12, 5, 0.2F), new VillagerTrades.h(new ItemStack(Items.CHAINMAIL_BOOTS), 1, 1, 12, 5, 0.2F), new VillagerTrades.h(new ItemStack(Items.CHAINMAIL_LEGGINGS), 3, 1, 12, 5, 0.2F)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.LAVA_BUCKET, 1, 12, 20), new VillagerTrades.b(Items.DIAMOND, 1, 12, 20), new VillagerTrades.h(new ItemStack(Items.CHAINMAIL_HELMET), 1, 1, 12, 10, 0.2F), new VillagerTrades.h(new ItemStack(Items.CHAINMAIL_CHESTPLATE), 4, 1, 12, 10, 0.2F), new VillagerTrades.h(new ItemStack(Items.SHIELD), 5, 1, 12, 10, 0.2F)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.e(Items.DIAMOND_LEGGINGS, 14, 3, 15, 0.2F), new VillagerTrades.e(Items.DIAMOND_BOOTS, 8, 3, 15, 0.2F)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.e(Items.DIAMOND_HELMET, 8, 3, 30, 0.2F), new VillagerTrades.e(Items.DIAMOND_CHESTPLATE, 16, 3, 30, 0.2F)})));
-        hashmap.put(VillagerProfession.WEAPONSMITH, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.COAL, 15, 16, 2), new VillagerTrades.h(new ItemStack(Items.IRON_AXE), 3, 1, 12, 1, 0.2F), new VillagerTrades.e(Items.IRON_SWORD, 2, 3, 1)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.IRON_INGOT, 4, 12, 10), new VillagerTrades.h(new ItemStack(Items.pP), 36, 1, 12, 5, 0.2F)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.FLINT, 24, 12, 20)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.DIAMOND, 1, 12, 30), new VillagerTrades.e(Items.DIAMOND_AXE, 12, 3, 15, 0.2F)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.e(Items.DIAMOND_SWORD, 8, 3, 30, 0.2F)})));
-        hashmap.put(VillagerProfession.TOOLSMITH, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.COAL, 15, 16, 2), new VillagerTrades.h(new ItemStack(Items.STONE_AXE), 1, 1, 12, 1, 0.2F), new VillagerTrades.h(new ItemStack(Items.STONE_SHOVEL), 1, 1, 12, 1, 0.2F), new VillagerTrades.h(new ItemStack(Items.STONE_PICKAXE), 1, 1, 12, 1, 0.2F), new VillagerTrades.h(new ItemStack(Items.STONE_HOE), 1, 1, 12, 1, 0.2F)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.IRON_INGOT, 4, 12, 10), new VillagerTrades.h(new ItemStack(Items.pP), 36, 1, 12, 5, 0.2F)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.FLINT, 30, 12, 20), new VillagerTrades.e(Items.IRON_AXE, 1, 3, 10, 0.2F), new VillagerTrades.e(Items.IRON_SHOVEL, 2, 3, 10, 0.2F), new VillagerTrades.e(Items.IRON_PICKAXE, 3, 3, 10, 0.2F), new VillagerTrades.h(new ItemStack(Items.DIAMOND_HOE), 4, 1, 3, 10, 0.2F)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.DIAMOND, 1, 12, 30), new VillagerTrades.e(Items.DIAMOND_AXE, 12, 3, 15, 0.2F), new VillagerTrades.e(Items.DIAMOND_SHOVEL, 5, 3, 15, 0.2F)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.e(Items.DIAMOND_PICKAXE, 13, 3, 30, 0.2F)})));
-        hashmap.put(VillagerProfession.BUTCHER, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.CHICKEN, 14, 16, 2), new VillagerTrades.b(Items.PORKCHOP, 7, 16, 2), new VillagerTrades.b(Items.RABBIT, 4, 16, 2), new VillagerTrades.h(Items.RABBIT_STEW, 1, 1, 1)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.COAL, 15, 16, 2), new VillagerTrades.h(Items.COOKED_PORKCHOP, 1, 5, 16, 5), new VillagerTrades.h(Items.COOKED_CHICKEN, 1, 8, 16, 5)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.MUTTON, 7, 16, 20), new VillagerTrades.b(Items.BEEF, 10, 16, 20)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.kP, 10, 12, 30)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.SWEET_BERRIES, 10, 12, 30)})));
-        hashmap.put(VillagerProfession.LEATHERWORKER, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.LEATHER, 6, 16, 2), new VillagerTrades.a(Items.LEATHER_LEGGINGS, 3), new VillagerTrades.a(Items.LEATHER_CHESTPLATE, 7)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.FLINT, 26, 12, 10), new VillagerTrades.a(Items.LEATHER_HELMET, 5, 12, 5), new VillagerTrades.a(Items.LEATHER_BOOTS, 4, 12, 5)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.RABBIT_HIDE, 9, 12, 20), new VillagerTrades.a(Items.LEATHER_CHESTPLATE, 7)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.SCUTE, 4, 12, 30), new VillagerTrades.a(Items.LEATHER_HORSE_ARMOR, 6, 12, 15)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(new ItemStack(Items.SADDLE), 6, 1, 12, 30, 0.2F), new VillagerTrades.a(Items.LEATHER_HELMET, 5, 12, 30)})));
-        hashmap.put(VillagerProfession.MASON, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.CLAY_BALL, 10, 16, 2), new VillagerTrades.h(Items.BRICK, 1, 10, 16, 1)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Blocks.STONE, 20, 16, 10), new VillagerTrades.h(Blocks.CHISELED_STONE_BRICKS, 1, 4, 16, 5)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Blocks.GRANITE, 16, 16, 20), new VillagerTrades.b(Blocks.ANDESITE, 16, 16, 20), new VillagerTrades.b(Blocks.DIORITE, 16, 16, 20), new VillagerTrades.h(Blocks.POLISHED_ANDESITE, 1, 4, 16, 10), new VillagerTrades.h(Blocks.POLISHED_DIORITE, 1, 4, 16, 10), new VillagerTrades.h(Blocks.POLISHED_GRANITE, 1, 4, 16, 10)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.QUARTZ, 12, 12, 30), new VillagerTrades.h(Blocks.ORANGE_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.WHITE_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.BLUE_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.LIGHT_BLUE_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.GRAY_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.LIGHT_GRAY_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.BLACK_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.RED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.PINK_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.MAGENTA_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.LIME_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.GREEN_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.CYAN_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.PURPLE_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.YELLOW_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.BROWN_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.ORANGE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.WHITE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.BLUE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.GRAY_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.BLACK_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.RED_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.PINK_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.MAGENTA_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.LIME_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.GREEN_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.CYAN_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.PURPLE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.YELLOW_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.h(Blocks.BROWN_GLAZED_TERRACOTTA, 1, 1, 12, 15)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(Blocks.QUARTZ_PILLAR, 1, 1, 12, 30), new VillagerTrades.h(Blocks.QUARTZ_BLOCK, 1, 1, 12, 30)})));
+        hashmap.put(VillagerProfession.FARMER, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.WHEAT, 20, 8, 2), new VillagerTrades.b(Items.POTATO, 26, 8, 2), new VillagerTrades.b(Items.CARROT, 22, 8, 2), new VillagerTrades.b(Items.BEETROOT, 15, 8, 2), new VillagerTrades.h(Items.BREAD, 1, 6, 8, 1)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Blocks.PUMPKIN, 6, 6, 10), new VillagerTrades.h(Items.PUMPKIN_PIE, 1, 4, 5), new VillagerTrades.h(Items.APPLE, 1, 4, 8, 5)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(Items.COOKIE, 3, 18, 10), new VillagerTrades.b(Blocks.MELON, 4, 6, 20)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(Blocks.CAKE, 1, 1, 6, 15), new VillagerTrades.i(MobEffects.FASTER_MOVEMENT, 160, 15), new VillagerTrades.i(MobEffects.JUMP, 160, 15), new VillagerTrades.i(MobEffects.WEAKNESS, 140, 15), new VillagerTrades.i(MobEffects.BLINDNESS, 120, 15), new VillagerTrades.i(MobEffects.POISON, 280, 15), new VillagerTrades.i(MobEffects.SATURATION, 7, 15)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(Items.GOLDEN_CARROT, 3, 3, 30), new VillagerTrades.h(Items.GLISTERING_MELON_SLICE, 4, 3, 30)})));
+        hashmap.put(VillagerProfession.FISHERMAN, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.STRING, 20, 8, 2), new VillagerTrades.b(Items.COAL, 10, 8, 2), new VillagerTrades.g(Items.COD, 6, Items.COOKED_COD, 6, 8, 1), new VillagerTrades.h(Items.COD_BUCKET, 3, 1, 8, 1)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.COD, 15, 8, 10), new VillagerTrades.g(Items.SALMON, 6, Items.COOKED_SALMON, 6, 8, 5), new VillagerTrades.h(Items.pS, 2, 1, 5)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.SALMON, 13, 8, 20), new VillagerTrades.e(Items.FISHING_ROD, 3, 2, 10, 0.2F)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.TROPICAL_FISH, 6, 6, 30)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.PUFFERFISH, 4, 6, 30), new VillagerTrades.c(1, 6, 30, ImmutableMap.<VillagerType, Item>builder().put(VillagerType.PLAINS, Items.OAK_BOAT).put(VillagerType.TAIGA, Items.SPRUCE_BOAT).put(VillagerType.SNOW, Items.SPRUCE_BOAT).put(VillagerType.DESERT, Items.JUNGLE_BOAT).put(VillagerType.JUNGLE, Items.JUNGLE_BOAT).put(VillagerType.SAVANNA, Items.ACACIA_BOAT).put(VillagerType.SWAMP, Items.DARK_OAK_BOAT).build())}))); // Paper - decompile fix
+        hashmap.put(VillagerProfession.SHEPHERD, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Blocks.WHITE_WOOL, 18, 8, 2), new VillagerTrades.b(Blocks.BROWN_WOOL, 18, 8, 2), new VillagerTrades.b(Blocks.BLACK_WOOL, 18, 8, 2), new VillagerTrades.b(Blocks.GRAY_WOOL, 18, 8, 2), new VillagerTrades.h(Items.SHEARS, 2, 1, 1)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.WHITE_DYE, 12, 8, 10), new VillagerTrades.b(Items.GRAY_DYE, 12, 8, 10), new VillagerTrades.b(Items.BLACK_DYE, 12, 8, 10), new VillagerTrades.b(Items.LIGHT_BLUE_DYE, 12, 8, 10), new VillagerTrades.b(Items.LIME_DYE, 12, 8, 10), new VillagerTrades.h(Blocks.WHITE_WOOL, 1, 1, 8, 5), new VillagerTrades.h(Blocks.ORANGE_WOOL, 1, 1, 8, 5), new VillagerTrades.h(Blocks.MAGENTA_WOOL, 1, 1, 8, 5), new VillagerTrades.h(Blocks.LIGHT_BLUE_WOOL, 1, 1, 8, 5), new VillagerTrades.h(Blocks.YELLOW_WOOL, 1, 1, 8, 5), new VillagerTrades.h(Blocks.LIME_WOOL, 1, 1, 8, 5), new VillagerTrades.h(Blocks.PINK_WOOL, 1, 1, 8, 5), new VillagerTrades.h(Blocks.GRAY_WOOL, 1, 1, 8, 5), new VillagerTrades.h(Blocks.LIGHT_GRAY_WOOL, 1, 1, 8, 5), new VillagerTrades.h(Blocks.CYAN_WOOL, 1, 1, 8, 5), new VillagerTrades.h(Blocks.PURPLE_WOOL, 1, 1, 8, 5), new VillagerTrades.h(Blocks.BLUE_WOOL, 1, 1, 8, 5), new VillagerTrades.h(Blocks.BROWN_WOOL, 1, 1, 8, 5), new VillagerTrades.h(Blocks.GREEN_WOOL, 1, 1, 8, 5), new VillagerTrades.h(Blocks.RED_WOOL, 1, 1, 8, 5), new VillagerTrades.h(Blocks.BLACK_WOOL, 1, 1, 8, 5), new VillagerTrades.h(Blocks.WHITE_CARPET, 1, 4, 8, 5), new VillagerTrades.h(Blocks.ORANGE_CARPET, 1, 4, 8, 5), new VillagerTrades.h(Blocks.MAGENTA_CARPET, 1, 4, 8, 5), new VillagerTrades.h(Blocks.LIGHT_BLUE_CARPET, 1, 4, 8, 5), new VillagerTrades.h(Blocks.YELLOW_CARPET, 1, 4, 8, 5), new VillagerTrades.h(Blocks.LIME_CARPET, 1, 4, 8, 5), new VillagerTrades.h(Blocks.PINK_CARPET, 1, 4, 8, 5), new VillagerTrades.h(Blocks.GRAY_CARPET, 1, 4, 8, 5), new VillagerTrades.h(Blocks.LIGHT_GRAY_CARPET, 1, 4, 8, 5), new VillagerTrades.h(Blocks.CYAN_CARPET, 1, 4, 8, 5), new VillagerTrades.h(Blocks.PURPLE_CARPET, 1, 4, 8, 5), new VillagerTrades.h(Blocks.BLUE_CARPET, 1, 4, 8, 5), new VillagerTrades.h(Blocks.BROWN_CARPET, 1, 4, 8, 5), new VillagerTrades.h(Blocks.GREEN_CARPET, 1, 4, 8, 5), new VillagerTrades.h(Blocks.RED_CARPET, 1, 4, 8, 5), new VillagerTrades.h(Blocks.BLACK_CARPET, 1, 4, 8, 5)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.YELLOW_DYE, 12, 8, 20), new VillagerTrades.b(Items.LIGHT_GRAY_DYE, 12, 8, 20), new VillagerTrades.b(Items.ORANGE_DYE, 12, 8, 20), new VillagerTrades.b(Items.RED_DYE, 12, 8, 20), new VillagerTrades.b(Items.PINK_DYE, 12, 8, 20), new VillagerTrades.h(Blocks.WHITE_BED, 3, 1, 6, 10), new VillagerTrades.h(Blocks.YELLOW_BED, 3, 1, 6, 10), new VillagerTrades.h(Blocks.RED_BED, 3, 1, 6, 10), new VillagerTrades.h(Blocks.BLACK_BED, 3, 1, 6, 10), new VillagerTrades.h(Blocks.BLUE_BED, 3, 1, 6, 10), new VillagerTrades.h(Blocks.BROWN_BED, 3, 1, 6, 10), new VillagerTrades.h(Blocks.CYAN_BED, 3, 1, 6, 10), new VillagerTrades.h(Blocks.GRAY_BED, 3, 1, 6, 10), new VillagerTrades.h(Blocks.GREEN_BED, 3, 1, 6, 10), new VillagerTrades.h(Blocks.LIGHT_BLUE_BED, 3, 1, 6, 10), new VillagerTrades.h(Blocks.LIGHT_GRAY_BED, 3, 1, 6, 10), new VillagerTrades.h(Blocks.LIME_BED, 3, 1, 6, 10), new VillagerTrades.h(Blocks.MAGENTA_BED, 3, 1, 6, 10), new VillagerTrades.h(Blocks.ORANGE_BED, 3, 1, 6, 10), new VillagerTrades.h(Blocks.PINK_BED, 3, 1, 6, 10), new VillagerTrades.h(Blocks.PURPLE_BED, 3, 1, 6, 10)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.BROWN_DYE, 12, 8, 30), new VillagerTrades.b(Items.PURPLE_DYE, 12, 8, 30), new VillagerTrades.b(Items.BLUE_DYE, 12, 8, 30), new VillagerTrades.b(Items.GREEN_DYE, 12, 8, 30), new VillagerTrades.b(Items.MAGENTA_DYE, 12, 8, 30), new VillagerTrades.b(Items.CYAN_DYE, 12, 8, 30), new VillagerTrades.h(Items.WHITE_BANNER, 3, 1, 6, 15), new VillagerTrades.h(Items.BLUE_BANNER, 3, 1, 6, 15), new VillagerTrades.h(Items.LIGHT_BLUE_BANNER, 3, 1, 6, 15), new VillagerTrades.h(Items.RED_BANNER, 3, 1, 6, 15), new VillagerTrades.h(Items.PINK_BANNER, 3, 1, 6, 15), new VillagerTrades.h(Items.GREEN_BANNER, 3, 1, 6, 15), new VillagerTrades.h(Items.LIME_BANNER, 3, 1, 6, 15), new VillagerTrades.h(Items.GRAY_BANNER, 3, 1, 6, 15), new VillagerTrades.h(Items.BLACK_BANNER, 3, 1, 6, 15), new VillagerTrades.h(Items.PURPLE_BANNER, 3, 1, 6, 15), new VillagerTrades.h(Items.MAGENTA_BANNER, 3, 1, 6, 15), new VillagerTrades.h(Items.CYAN_BANNER, 3, 1, 6, 15), new VillagerTrades.h(Items.BROWN_BANNER, 3, 1, 6, 15), new VillagerTrades.h(Items.YELLOW_BANNER, 3, 1, 6, 15), new VillagerTrades.h(Items.ORANGE_BANNER, 3, 1, 6, 15), new VillagerTrades.h(Items.LIGHT_GRAY_BANNER, 3, 1, 6, 15)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(Items.PAINTING, 2, 3, 30)})));
+        hashmap.put(VillagerProfession.FLETCHER, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.STICK, 32, 8, 2), new VillagerTrades.h(Items.ARROW, 1, 16, 1), new VillagerTrades.g(Blocks.GRAVEL, 10, Items.FLINT, 10, 6, 1)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.FLINT, 26, 6, 10), new VillagerTrades.h(Items.BOW, 2, 1, 5)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.STRING, 14, 8, 20), new VillagerTrades.h(Items.CROSSBOW, 3, 1, 10)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.FEATHER, 24, 8, 30), new VillagerTrades.e(Items.BOW, 2, 2, 15)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.dE, 8, 6, 30), new VillagerTrades.e(Items.CROSSBOW, 3, 2, 15), new VillagerTrades.j(Items.ARROW, 5, Items.TIPPED_ARROW, 5, 2, 6, 30)})));
+        hashmap.put(VillagerProfession.LIBRARIAN, a(ImmutableMap.<Integer, VillagerTrades.IMerchantRecipeOption[]>builder().put(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.PAPER, 24, 8, 2), new VillagerTrades.d(1), new VillagerTrades.h(Blocks.BOOKSHELF, 6, 3, 6, 1)}).put(2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.BOOK, 4, 6, 10), new VillagerTrades.d(5), new VillagerTrades.h(Items.pQ, 1, 1, 5)}).put(3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.INK_SAC, 5, 6, 20), new VillagerTrades.d(10), new VillagerTrades.h(Items.am, 1, 4, 10)}).put(4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.WRITABLE_BOOK, 2, 6, 30), new VillagerTrades.d(15), new VillagerTrades.h(Items.CLOCK, 5, 1, 15), new VillagerTrades.h(Items.COMPASS, 4, 1, 15)}).put(5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(Items.NAME_TAG, 20, 1, 30)}).build())); // Paper - decompile fix
+        hashmap.put(VillagerProfession.CARTOGRAPHER, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.PAPER, 24, 8, 2), new VillagerTrades.h(Items.MAP, 7, 1, 1)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.df, 11, 8, 10), new VillagerTrades.k(13, "Monument", MapIcon.Type.MONUMENT, 6, 5)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.COMPASS, 1, 6, 20), new VillagerTrades.k(14, "Mansion", MapIcon.Type.MANSION, 6, 10)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(Items.ITEM_FRAME, 7, 1, 15), new VillagerTrades.h(Items.WHITE_BANNER, 3, 1, 15), new VillagerTrades.h(Items.BLUE_BANNER, 3, 1, 15), new VillagerTrades.h(Items.LIGHT_BLUE_BANNER, 3, 1, 15), new VillagerTrades.h(Items.RED_BANNER, 3, 1, 15), new VillagerTrades.h(Items.PINK_BANNER, 3, 1, 15), new VillagerTrades.h(Items.GREEN_BANNER, 3, 1, 15), new VillagerTrades.h(Items.LIME_BANNER, 3, 1, 15), new VillagerTrades.h(Items.GRAY_BANNER, 3, 1, 15), new VillagerTrades.h(Items.BLACK_BANNER, 3, 1, 15), new VillagerTrades.h(Items.PURPLE_BANNER, 3, 1, 15), new VillagerTrades.h(Items.MAGENTA_BANNER, 3, 1, 15), new VillagerTrades.h(Items.CYAN_BANNER, 3, 1, 15), new VillagerTrades.h(Items.BROWN_BANNER, 3, 1, 15), new VillagerTrades.h(Items.YELLOW_BANNER, 3, 1, 15), new VillagerTrades.h(Items.ORANGE_BANNER, 3, 1, 15), new VillagerTrades.h(Items.LIGHT_GRAY_BANNER, 3, 1, 15)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(Items.GLOBE_BANNER_PATTERN, 8, 1, 30)})));
+        hashmap.put(VillagerProfession.CLERIC, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.ROTTEN_FLESH, 32, 8, 2), new VillagerTrades.h(Items.REDSTONE, 1, 2, 1)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.GOLD_INGOT, 3, 6, 10), new VillagerTrades.h(Items.LAPIS_LAZULI, 1, 1, 5)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.RABBIT_FOOT, 2, 6, 20), new VillagerTrades.h(Blocks.GLOWSTONE, 4, 1, 6, 10)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.SCUTE, 4, 6, 30), new VillagerTrades.b(Items.GLASS_BOTTLE, 9, 6, 30), new VillagerTrades.h(Items.ENDER_PEARL, 5, 1, 15)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.NETHER_WART, 22, 6, 30), new VillagerTrades.h(Items.EXPERIENCE_BOTTLE, 3, 1, 30)})));
+        hashmap.put(VillagerProfession.ARMORER, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.COAL, 15, 8, 2), new VillagerTrades.h(new ItemStack(Items.IRON_LEGGINGS), 7, 1, 6, 1, 0.2F), new VillagerTrades.h(new ItemStack(Items.IRON_BOOTS), 4, 1, 6, 1, 0.2F), new VillagerTrades.h(new ItemStack(Items.IRON_HELMET), 5, 1, 6, 1, 0.2F), new VillagerTrades.h(new ItemStack(Items.IRON_CHESTPLATE), 9, 1, 6, 1, 0.2F)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.IRON_INGOT, 4, 6, 10), new VillagerTrades.h(new ItemStack(Items.pP), 36, 1, 6, 5, 0.2F), new VillagerTrades.h(new ItemStack(Items.CHAINMAIL_BOOTS), 1, 1, 6, 5, 0.2F), new VillagerTrades.h(new ItemStack(Items.CHAINMAIL_LEGGINGS), 3, 1, 6, 5, 0.2F)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.LAVA_BUCKET, 1, 6, 20), new VillagerTrades.b(Items.DIAMOND, 1, 6, 20), new VillagerTrades.h(new ItemStack(Items.CHAINMAIL_HELMET), 1, 1, 6, 10, 0.2F), new VillagerTrades.h(new ItemStack(Items.CHAINMAIL_CHESTPLATE), 4, 1, 6, 10, 0.2F), new VillagerTrades.h(new ItemStack(Items.SHIELD), 5, 1, 6, 10, 0.2F)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.e(Items.DIAMOND_LEGGINGS, 14, 2, 15, 0.2F), new VillagerTrades.e(Items.DIAMOND_BOOTS, 8, 2, 15, 0.2F)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.e(Items.DIAMOND_HELMET, 8, 2, 30, 0.2F), new VillagerTrades.e(Items.DIAMOND_CHESTPLATE, 16, 2, 30, 0.2F)})));
+        hashmap.put(VillagerProfession.WEAPONSMITH, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.COAL, 15, 8, 2), new VillagerTrades.h(new ItemStack(Items.IRON_AXE), 3, 1, 6, 1, 0.2F), new VillagerTrades.e(Items.IRON_SWORD, 2, 2, 1)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.IRON_INGOT, 4, 6, 10), new VillagerTrades.h(new ItemStack(Items.pP), 36, 1, 6, 5, 0.2F)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.FLINT, 24, 6, 20)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.DIAMOND, 1, 6, 30), new VillagerTrades.e(Items.DIAMOND_AXE, 12, 2, 15, 0.2F)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.e(Items.DIAMOND_SWORD, 8, 2, 30, 0.2F)})));
+        hashmap.put(VillagerProfession.TOOLSMITH, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.COAL, 15, 8, 2), new VillagerTrades.h(new ItemStack(Items.STONE_AXE), 1, 1, 6, 1, 0.2F), new VillagerTrades.h(new ItemStack(Items.STONE_SHOVEL), 1, 1, 6, 1, 0.2F), new VillagerTrades.h(new ItemStack(Items.STONE_PICKAXE), 1, 1, 6, 1, 0.2F), new VillagerTrades.h(new ItemStack(Items.STONE_HOE), 1, 1, 6, 1, 0.2F)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.IRON_INGOT, 4, 6, 10), new VillagerTrades.h(new ItemStack(Items.pP), 36, 1, 6, 5, 0.2F)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.FLINT, 30, 6, 20), new VillagerTrades.e(Items.IRON_AXE, 1, 2, 10, 0.2F), new VillagerTrades.e(Items.IRON_SHOVEL, 2, 2, 10, 0.2F), new VillagerTrades.e(Items.IRON_PICKAXE, 3, 2, 10, 0.2F), new VillagerTrades.h(new ItemStack(Items.DIAMOND_HOE), 4, 1, 2, 10, 0.2F)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.DIAMOND, 1, 6, 30), new VillagerTrades.e(Items.DIAMOND_AXE, 12, 2, 15, 0.2F), new VillagerTrades.e(Items.DIAMOND_SHOVEL, 5, 2, 15, 0.2F)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.e(Items.DIAMOND_PICKAXE, 13, 2, 30, 0.2F)})));
+        hashmap.put(VillagerProfession.BUTCHER, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.CHICKEN, 14, 8, 2), new VillagerTrades.b(Items.PORKCHOP, 7, 8, 2), new VillagerTrades.b(Items.RABBIT, 4, 8, 2), new VillagerTrades.h(Items.RABBIT_STEW, 1, 1, 1)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.COAL, 15, 8, 2), new VillagerTrades.h(Items.COOKED_PORKCHOP, 1, 5, 8, 5), new VillagerTrades.h(Items.COOKED_CHICKEN, 1, 8, 8, 5)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.MUTTON, 7, 8, 20), new VillagerTrades.b(Items.BEEF, 10, 8, 20)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.kP, 10, 6, 30)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.SWEET_BERRIES, 10, 6, 30)})));
+        hashmap.put(VillagerProfession.LEATHERWORKER, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.LEATHER, 6, 8, 2), new VillagerTrades.a(Items.LEATHER_LEGGINGS, 3), new VillagerTrades.a(Items.LEATHER_CHESTPLATE, 7)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.FLINT, 26, 6, 10), new VillagerTrades.a(Items.LEATHER_HELMET, 5, 6, 5), new VillagerTrades.a(Items.LEATHER_BOOTS, 4, 6, 5)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.RABBIT_HIDE, 9, 6, 20), new VillagerTrades.a(Items.LEATHER_CHESTPLATE, 7)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.SCUTE, 4, 6, 30), new VillagerTrades.a(Items.LEATHER_HORSE_ARMOR, 6, 6, 15)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(new ItemStack(Items.SADDLE), 6, 1, 6, 30, 0.2F), new VillagerTrades.a(Items.LEATHER_HELMET, 5, 6, 30)})));
+        hashmap.put(VillagerProfession.MASON, a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.CLAY_BALL, 10, 8, 2), new VillagerTrades.h(Items.BRICK, 1, 10, 8, 1)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Blocks.STONE, 20, 8, 10), new VillagerTrades.h(Blocks.CHISELED_STONE_BRICKS, 1, 4, 8, 5)}, 3, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Blocks.GRANITE, 16, 8, 20), new VillagerTrades.b(Blocks.ANDESITE, 16, 8, 20), new VillagerTrades.b(Blocks.DIORITE, 16, 8, 20), new VillagerTrades.h(Blocks.POLISHED_ANDESITE, 1, 4, 8, 10), new VillagerTrades.h(Blocks.POLISHED_DIORITE, 1, 4, 8, 10), new VillagerTrades.h(Blocks.POLISHED_GRANITE, 1, 4, 8, 10)}, 4, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.b(Items.QUARTZ, 12, 6, 30), new VillagerTrades.h(Blocks.ORANGE_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.WHITE_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.BLUE_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.LIGHT_BLUE_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.GRAY_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.LIGHT_GRAY_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.BLACK_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.RED_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.PINK_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.MAGENTA_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.LIME_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.GREEN_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.CYAN_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.PURPLE_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.YELLOW_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.BROWN_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.ORANGE_GLAZED_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.WHITE_GLAZED_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.BLUE_GLAZED_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.GRAY_GLAZED_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.BLACK_GLAZED_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.RED_GLAZED_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.PINK_GLAZED_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.MAGENTA_GLAZED_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.LIME_GLAZED_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.GREEN_GLAZED_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.CYAN_GLAZED_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.PURPLE_GLAZED_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.YELLOW_GLAZED_TERRACOTTA, 1, 1, 6, 15), new VillagerTrades.h(Blocks.BROWN_GLAZED_TERRACOTTA, 1, 1, 6, 15)}, 5, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(Blocks.QUARTZ_PILLAR, 1, 1, 6, 30), new VillagerTrades.h(Blocks.QUARTZ_BLOCK, 1, 1, 6, 30)})));
     });
     public static final Int2ObjectMap<VillagerTrades.IMerchantRecipeOption[]> b = a(ImmutableMap.of(1, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(Items.aC, 2, 1, 5, 1), new VillagerTrades.h(Items.SLIME_BALL, 4, 1, 5, 1), new VillagerTrades.h(Items.cJ, 2, 1, 5, 1), new VillagerTrades.h(Items.NAUTILUS_SHELL, 5, 1, 5, 1), new VillagerTrades.h(Items.az, 1, 1, 12, 1), new VillagerTrades.h(Items.kN, 1, 1, 8, 1), new VillagerTrades.h(Items.cF, 1, 1, 4, 1), new VillagerTrades.h(Items.kO, 3, 1, 12, 1), new VillagerTrades.h(Items.cw, 3, 1, 8, 1), new VillagerTrades.h(Items.aU, 1, 1, 12, 1), new VillagerTrades.h(Items.aV, 1, 1, 12, 1), new VillagerTrades.h(Items.aW, 1, 1, 8, 1), new VillagerTrades.h(Items.aX, 1, 1, 12, 1), new VillagerTrades.h(Items.aY, 1, 1, 12, 1), new VillagerTrades.h(Items.aZ, 1, 1, 12, 1), new VillagerTrades.h(Items.ba, 1, 1, 12, 1), new VillagerTrades.h(Items.bb, 1, 1, 12, 1), new VillagerTrades.h(Items.bc, 1, 1, 12, 1), new VillagerTrades.h(Items.bd, 1, 1, 12, 1), new VillagerTrades.h(Items.be, 1, 1, 12, 1), new VillagerTrades.h(Items.bf, 1, 1, 7, 1), new VillagerTrades.h(Items.WHEAT_SEEDS, 1, 1, 12, 1), new VillagerTrades.h(Items.BEETROOT_SEEDS, 1, 1, 12, 1), new VillagerTrades.h(Items.PUMPKIN_SEEDS, 1, 1, 12, 1), new VillagerTrades.h(Items.MELON_SEEDS, 1, 1, 12, 1), new VillagerTrades.h(Items.x, 5, 1, 8, 1), new VillagerTrades.h(Items.v, 5, 1, 8, 1), new VillagerTrades.h(Items.y, 5, 1, 8, 1), new VillagerTrades.h(Items.w, 5, 1, 8, 1), new VillagerTrades.h(Items.t, 5, 1, 8, 1), new VillagerTrades.h(Items.u, 5, 1, 8, 1), new VillagerTrades.h(Items.RED_DYE, 1, 3, 12, 1), new VillagerTrades.h(Items.WHITE_DYE, 1, 3, 12, 1), new VillagerTrades.h(Items.BLUE_DYE, 1, 3, 12, 1), new VillagerTrades.h(Items.PINK_DYE, 1, 3, 12, 1), new VillagerTrades.h(Items.BLACK_DYE, 1, 3, 12, 1), new VillagerTrades.h(Items.GREEN_DYE, 1, 3, 12, 1), new VillagerTrades.h(Items.LIGHT_GRAY_DYE, 1, 3, 12, 1), new VillagerTrades.h(Items.MAGENTA_DYE, 1, 3, 12, 1), new VillagerTrades.h(Items.YELLOW_DYE, 1, 3, 12, 1), new VillagerTrades.h(Items.GRAY_DYE, 1, 3, 12, 1), new VillagerTrades.h(Items.PURPLE_DYE, 1, 3, 12, 1), new VillagerTrades.h(Items.LIGHT_BLUE_DYE, 1, 3, 12, 1), new VillagerTrades.h(Items.LIME_DYE, 1, 3, 12, 1), new VillagerTrades.h(Items.ORANGE_DYE, 1, 3, 12, 1), new VillagerTrades.h(Items.BROWN_DYE, 1, 3, 12, 1), new VillagerTrades.h(Items.CYAN_DYE, 1, 3, 12, 1), new VillagerTrades.h(Items.hK, 3, 1, 8, 1), new VillagerTrades.h(Items.hL, 3, 1, 8, 1), new VillagerTrades.h(Items.hM, 3, 1, 8, 1), new VillagerTrades.h(Items.hN, 3, 1, 8, 1), new VillagerTrades.h(Items.hJ, 3, 1, 8, 1), new VillagerTrades.h(Items.dh, 1, 1, 12, 1), new VillagerTrades.h(Items.bh, 1, 1, 12, 1), new VillagerTrades.h(Items.bi, 1, 1, 12, 1), new VillagerTrades.h(Items.dr, 1, 2, 5, 1), new VillagerTrades.h(Items.A, 1, 8, 8, 1), new VillagerTrades.h(Items.B, 1, 4, 6, 1)}, 2, new VillagerTrades.IMerchantRecipeOption[]{new VillagerTrades.h(Items.TROPICAL_FISH_BUCKET, 5, 1, 4, 1), new VillagerTrades.h(Items.PUFFERFISH_BUCKET, 5, 1, 4, 1), new VillagerTrades.h(Items.fg, 3, 1, 6, 1), new VillagerTrades.h(Items.ii, 6, 1, 6, 1), new VillagerTrades.h(Items.GUNPOWDER, 1, 1, 8, 1), new VillagerTrades.h(Items.l, 3, 3, 6, 1)}));
 
@@ -128,7 +128,7 @@ public class VillagerTrades {
                 j = 64;
             }
 
-            return new MerchantRecipe(new ItemStack(Items.EMERALD, j), new ItemStack(Items.BOOK), itemstack, 12, this.a, 0.2F);
+            return new MerchantRecipe(new ItemStack(Items.EMERALD, j), new ItemStack(Items.BOOK), itemstack, 6, this.a, 0.2F);
         }
     }
 
@@ -140,7 +140,7 @@ public class VillagerTrades {
         private final int d;
 
         public a(Item item, int i) {
-            this(item, i, 12, 1);
+            this(item, i, 6, 1);
         }
 
         public a(Item item, int i, int j, int k) {
@@ -264,7 +264,7 @@ public class VillagerTrades {
             ItemStack itemstack = new ItemStack(Items.SUSPICIOUS_STEW, 1);
 
             ItemSuspiciousStew.a(itemstack, this.a, this.b);
-            return new MerchantRecipe(new ItemStack(Items.EMERALD, 1), itemstack, 12, this.c, this.d);
+            return new MerchantRecipe(new ItemStack(Items.EMERALD, 1), itemstack, 6, this.c, this.d);
         }
     }
 
@@ -282,7 +282,7 @@ public class VillagerTrades {
         }
 
         public h(Item item, int i, int j, int k) {
-            this(new ItemStack(item), i, j, 12, k);
+            this(new ItemStack(item), i, j, 6, k);
         }
 
         public h(Item item, int i, int j, int k, int l) {
diff --git a/src/main/java/net/minecraft/server/VoxelShape.java b/src/main/java/net/minecraft/server/VoxelShape.java
deleted file mode 100644
index 092f02cc..00000000
--- a/src/main/java/net/minecraft/server/VoxelShape.java
+++ /dev/null
@@ -1,211 +0,0 @@
-package net.minecraft.server;
-
-import com.google.common.collect.Lists;
-import com.google.common.math.DoubleMath;
-import it.unimi.dsi.fastutil.doubles.DoubleList;
-import java.util.List;
-import javax.annotation.Nullable;
-
-public abstract class VoxelShape {
-
-    protected final VoxelShapeDiscrete a;
-    @Nullable
-    private VoxelShape[] b;
-
-    VoxelShape(VoxelShapeDiscrete voxelshapediscrete) {
-        this.a = voxelshapediscrete;
-    }
-
-    public double b(EnumDirection.EnumAxis enumdirection_enumaxis) {
-        int i = this.a.a(enumdirection_enumaxis);
-
-        return i >= this.a.c(enumdirection_enumaxis) ? Double.POSITIVE_INFINITY : this.a(enumdirection_enumaxis, i);
-    }
-
-    public double c(EnumDirection.EnumAxis enumdirection_enumaxis) {
-        int i = this.a.b(enumdirection_enumaxis);
-
-        return i <= 0 ? Double.NEGATIVE_INFINITY : this.a(enumdirection_enumaxis, i);
-    }
-
-    public AxisAlignedBB getBoundingBox() {
-        if (this.isEmpty()) {
-            throw new UnsupportedOperationException("No bounds for empty shape.");
-        } else {
-            return new AxisAlignedBB(this.b(EnumDirection.EnumAxis.X), this.b(EnumDirection.EnumAxis.Y), this.b(EnumDirection.EnumAxis.Z), this.c(EnumDirection.EnumAxis.X), this.c(EnumDirection.EnumAxis.Y), this.c(EnumDirection.EnumAxis.Z));
-        }
-    }
-
-    protected double a(EnumDirection.EnumAxis enumdirection_enumaxis, int i) {
-        return this.a(enumdirection_enumaxis).getDouble(i);
-    }
-
-    protected abstract DoubleList a(EnumDirection.EnumAxis enumdirection_enumaxis);
-
-    public boolean isEmpty() {
-        return this.a.a();
-    }
-
-    public final VoxelShape offset(double x, double y, double z) { return this.a(x, y, z); } // Paper - OBFHELPER
-    public VoxelShape a(double d0, double d1, double d2) {
-        return (VoxelShape) (this.isEmpty() ? VoxelShapes.a() : new VoxelShapeArray(this.a, new DoubleListOffset(this.a(EnumDirection.EnumAxis.X), d0), new DoubleListOffset(this.a(EnumDirection.EnumAxis.Y), d1), new DoubleListOffset(this.a(EnumDirection.EnumAxis.Z), d2)));
-    }
-
-    public VoxelShape c() {
-        VoxelShape[] avoxelshape = new VoxelShape[]{VoxelShapes.a()};
-
-        this.b((d0, d1, d2, d3, d4, d5) -> {
-            avoxelshape[0] = VoxelShapes.b(avoxelshape[0], VoxelShapes.create(d0, d1, d2, d3, d4, d5), OperatorBoolean.OR);
-        });
-        return avoxelshape[0];
-    }
-
-    public void b(VoxelShapes.a voxelshapes_a) {
-        DoubleList doublelist = this.a(EnumDirection.EnumAxis.X);
-        DoubleList doublelist1 = this.a(EnumDirection.EnumAxis.Y);
-        DoubleList doublelist2 = this.a(EnumDirection.EnumAxis.Z);
-
-        this.a.b((i, j, k, l, i1, j1) -> {
-            voxelshapes_a.consume(doublelist.getDouble(i), doublelist1.getDouble(j), doublelist2.getDouble(k), doublelist.getDouble(l), doublelist1.getDouble(i1), doublelist2.getDouble(j1));
-        }, true);
-    }
-
-    public List<AxisAlignedBB> d() {
-        List<AxisAlignedBB> list = Lists.newArrayList();
-
-        this.b((d0, d1, d2, d3, d4, d5) -> {
-            list.add(new AxisAlignedBB(d0, d1, d2, d3, d4, d5));
-        });
-        return list;
-    }
-
-    protected int a(EnumDirection.EnumAxis enumdirection_enumaxis, double d0) {
-        return MathHelper.a(0, this.a.c(enumdirection_enumaxis) + 1, (i) -> {
-            return i < 0 ? false : (i > this.a.c(enumdirection_enumaxis) ? true : d0 < this.a(enumdirection_enumaxis, i));
-        }) - 1;
-    }
-
-    protected boolean b(double d0, double d1, double d2) {
-        return this.a.c(this.a(EnumDirection.EnumAxis.X, d0), this.a(EnumDirection.EnumAxis.Y, d1), this.a(EnumDirection.EnumAxis.Z, d2));
-    }
-
-    @Nullable
-    public MovingObjectPositionBlock rayTrace(Vec3D vec3d, Vec3D vec3d1, BlockPosition blockposition) {
-        if (this.isEmpty()) {
-            return null;
-        } else {
-            Vec3D vec3d2 = vec3d1.d(vec3d);
-
-            if (vec3d2.g() < 1.0E-7D) {
-                return null;
-            } else {
-                Vec3D vec3d3 = vec3d.e(vec3d2.a(0.001D));
-
-                return this.b(vec3d3.x - (double) blockposition.getX(), vec3d3.y - (double) blockposition.getY(), vec3d3.z - (double) blockposition.getZ()) ? new MovingObjectPositionBlock(vec3d3, EnumDirection.a(vec3d2.x, vec3d2.y, vec3d2.z).opposite(), blockposition, true) : AxisAlignedBB.a(this.d(), vec3d, vec3d1, blockposition);
-            }
-        }
-    }
-
-    public VoxelShape a(EnumDirection enumdirection) {
-        if (!this.isEmpty() && this != VoxelShapes.b()) {
-            VoxelShape voxelshape;
-
-            if (this.b != null) {
-                voxelshape = this.b[enumdirection.ordinal()];
-                if (voxelshape != null) {
-                    return voxelshape;
-                }
-            } else {
-                this.b = new VoxelShape[6];
-            }
-
-            voxelshape = this.b(enumdirection);
-            this.b[enumdirection.ordinal()] = voxelshape;
-            return voxelshape;
-        } else {
-            return this;
-        }
-    }
-
-    private VoxelShape b(EnumDirection enumdirection) {
-        EnumDirection.EnumAxis enumdirection_enumaxis = enumdirection.k();
-        EnumDirection.EnumAxisDirection enumdirection_enumaxisdirection = enumdirection.c();
-        DoubleList doublelist = this.a(enumdirection_enumaxis);
-
-        if (doublelist.size() == 2 && DoubleMath.fuzzyEquals(doublelist.getDouble(0), 0.0D, 1.0E-7D) && DoubleMath.fuzzyEquals(doublelist.getDouble(1), 1.0D, 1.0E-7D)) {
-            return this;
-        } else {
-            int i = this.a(enumdirection_enumaxis, enumdirection_enumaxisdirection == EnumDirection.EnumAxisDirection.POSITIVE ? 0.9999999D : 1.0E-7D);
-
-            return new VoxelShapeSlice(this, enumdirection_enumaxis, i);
-        }
-    }
-
-    public double a(EnumDirection.EnumAxis enumdirection_enumaxis, AxisAlignedBB axisalignedbb, double d0) {
-        return this.a(EnumAxisCycle.a(enumdirection_enumaxis, EnumDirection.EnumAxis.X), axisalignedbb, d0);
-    }
-
-    protected double a(EnumAxisCycle enumaxiscycle, AxisAlignedBB axisalignedbb, double d0) {
-        if (this.isEmpty()) {
-            return d0;
-        } else if (Math.abs(d0) < 1.0E-7D) {
-            return 0.0D;
-        } else {
-            EnumAxisCycle enumaxiscycle1 = enumaxiscycle.a();
-            EnumDirection.EnumAxis enumdirection_enumaxis = enumaxiscycle1.a(EnumDirection.EnumAxis.X);
-            EnumDirection.EnumAxis enumdirection_enumaxis1 = enumaxiscycle1.a(EnumDirection.EnumAxis.Y);
-            EnumDirection.EnumAxis enumdirection_enumaxis2 = enumaxiscycle1.a(EnumDirection.EnumAxis.Z);
-            double d1 = axisalignedbb.b(enumdirection_enumaxis);
-            double d2 = axisalignedbb.a(enumdirection_enumaxis);
-            int i = this.a(enumdirection_enumaxis, d2 + 1.0E-7D);
-            int j = this.a(enumdirection_enumaxis, d1 - 1.0E-7D);
-            int k = Math.max(0, this.a(enumdirection_enumaxis1, axisalignedbb.a(enumdirection_enumaxis1) + 1.0E-7D));
-            int l = Math.min(this.a.c(enumdirection_enumaxis1), this.a(enumdirection_enumaxis1, axisalignedbb.b(enumdirection_enumaxis1) - 1.0E-7D) + 1);
-            int i1 = Math.max(0, this.a(enumdirection_enumaxis2, axisalignedbb.a(enumdirection_enumaxis2) + 1.0E-7D));
-            int j1 = Math.min(this.a.c(enumdirection_enumaxis2), this.a(enumdirection_enumaxis2, axisalignedbb.b(enumdirection_enumaxis2) - 1.0E-7D) + 1);
-            int k1 = this.a.c(enumdirection_enumaxis);
-            double d3;
-            int l1;
-            int i2;
-            int j2;
-
-            if (d0 > 0.0D) {
-                for (l1 = j + 1; l1 < k1; ++l1) {
-                    for (i2 = k; i2 < l; ++i2) {
-                        for (j2 = i1; j2 < j1; ++j2) {
-                            if (this.a.a(enumaxiscycle1, l1, i2, j2)) {
-                                d3 = this.a(enumdirection_enumaxis, l1) - d1;
-                                if (d3 >= -1.0E-7D) {
-                                    d0 = Math.min(d0, d3);
-                                }
-
-                                return d0;
-                            }
-                        }
-                    }
-                }
-            } else if (d0 < 0.0D) {
-                for (l1 = i - 1; l1 >= 0; --l1) {
-                    for (i2 = k; i2 < l; ++i2) {
-                        for (j2 = i1; j2 < j1; ++j2) {
-                            if (this.a.a(enumaxiscycle1, l1, i2, j2)) {
-                                d3 = this.a(enumdirection_enumaxis, l1 + 1) - d2;
-                                if (d3 <= 1.0E-7D) {
-                                    d0 = Math.max(d0, d3);
-                                }
-
-                                return d0;
-                            }
-                        }
-                    }
-                }
-            }
-
-            return d0;
-        }
-    }
-
-    public String toString() {
-        return this.isEmpty() ? "EMPTY" : "VoxelShape[" + this.getBoundingBox() + "]";
-    }
-}
diff --git a/src/main/java/net/minecraft/server/VoxelShapes.java b/src/main/java/net/minecraft/server/VoxelShapes.java
deleted file mode 100644
index c8bd4b70..00000000
--- a/src/main/java/net/minecraft/server/VoxelShapes.java
+++ /dev/null
@@ -1,338 +0,0 @@
-package net.minecraft.server;
-
-import com.google.common.annotations.VisibleForTesting;
-import com.google.common.math.DoubleMath;
-import com.google.common.math.IntMath;
-import it.unimi.dsi.fastutil.doubles.DoubleArrayList;
-import it.unimi.dsi.fastutil.doubles.DoubleList;
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.Objects;
-import java.util.stream.Stream;
-
-public final class VoxelShapes {
-
-    private static final VoxelShape b = (VoxelShape) SystemUtils.a(() -> {
-        VoxelShapeBitSet voxelshapebitset = new VoxelShapeBitSet(1, 1, 1);
-
-        voxelshapebitset.a(0, 0, 0, true, true);
-        return new VoxelShapeCube(voxelshapebitset);
-    });
-    public static final VoxelShape a = create(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
-    private static final VoxelShape c = new VoxelShapeArray(new VoxelShapeBitSet(0, 0, 0), new DoubleArrayList(new double[]{0.0D}), new DoubleArrayList(new double[]{0.0D}), new DoubleArrayList(new double[]{0.0D}));
-
-    public static VoxelShape a() {
-        return VoxelShapes.c;
-    }
-
-    public static VoxelShape b() {
-        return VoxelShapes.b;
-    }
-
-    public static VoxelShape create(double d0, double d1, double d2, double d3, double d4, double d5) {
-        return a(new AxisAlignedBB(d0, d1, d2, d3, d4, d5));
-    }
-
-    public static final VoxelShape of(AxisAlignedBB axisAlignedbb) { return VoxelShapes.a(axisAlignedbb); } // Paper - OBFHELPER
-    public static VoxelShape a(AxisAlignedBB axisalignedbb) {
-        int i = a(axisalignedbb.minX, axisalignedbb.maxX);
-        int j = a(axisalignedbb.minY, axisalignedbb.maxY);
-        int k = a(axisalignedbb.minZ, axisalignedbb.maxZ);
-
-        if (i >= 0 && j >= 0 && k >= 0) {
-            if (i == 0 && j == 0 && k == 0) {
-                return axisalignedbb.e(0.5D, 0.5D, 0.5D) ? b() : a();
-            } else {
-                int l = 1 << i;
-                int i1 = 1 << j;
-                int j1 = 1 << k;
-                int k1 = (int) Math.round(axisalignedbb.minX * (double) l);
-                int l1 = (int) Math.round(axisalignedbb.maxX * (double) l);
-                int i2 = (int) Math.round(axisalignedbb.minY * (double) i1);
-                int j2 = (int) Math.round(axisalignedbb.maxY * (double) i1);
-                int k2 = (int) Math.round(axisalignedbb.minZ * (double) j1);
-                int l2 = (int) Math.round(axisalignedbb.maxZ * (double) j1);
-                VoxelShapeBitSet voxelshapebitset = new VoxelShapeBitSet(l, i1, j1, k1, i2, k2, l1, j2, l2);
-
-                for (long i3 = (long) k1; i3 < (long) l1; ++i3) {
-                    for (long j3 = (long) i2; j3 < (long) j2; ++j3) {
-                        for (long k3 = (long) k2; k3 < (long) l2; ++k3) {
-                            voxelshapebitset.a((int) i3, (int) j3, (int) k3, false, true);
-                        }
-                    }
-                }
-
-                return new VoxelShapeCube(voxelshapebitset);
-            }
-        } else {
-            return new VoxelShapeArray(VoxelShapes.b.a, new double[]{axisalignedbb.minX, axisalignedbb.maxX}, new double[]{axisalignedbb.minY, axisalignedbb.maxY}, new double[]{axisalignedbb.minZ, axisalignedbb.maxZ});
-        }
-    }
-
-    private static int a(double d0, double d1) {
-        if (d0 >= -1.0E-7D && d1 <= 1.0000001D) {
-            for (int i = 0; i <= 3; ++i) {
-                double d2 = d0 * (double) (1 << i);
-                double d3 = d1 * (double) (1 << i);
-                boolean flag = Math.abs(d2 - Math.floor(d2)) < 1.0E-7D;
-                boolean flag1 = Math.abs(d3 - Math.floor(d3)) < 1.0E-7D;
-
-                if (flag && flag1) {
-                    return i;
-                }
-            }
-
-            return -1;
-        } else {
-            return -1;
-        }
-    }
-
-    protected static long a(int i, int j) {
-        return (long) i * (long) (j / IntMath.gcd(i, j));
-    }
-
-    public static VoxelShape a(VoxelShape voxelshape, VoxelShape voxelshape1) {
-        return a(voxelshape, voxelshape1, OperatorBoolean.OR);
-    }
-
-    public static VoxelShape a(VoxelShape voxelshape, VoxelShape... avoxelshape) {
-        return (VoxelShape) Arrays.stream(avoxelshape).reduce(voxelshape, VoxelShapes::a);
-    }
-
-    public static VoxelShape a(VoxelShape voxelshape, VoxelShape voxelshape1, OperatorBoolean operatorboolean) {
-        return b(voxelshape, voxelshape1, operatorboolean).c();
-    }
-
-    public static VoxelShape b(VoxelShape voxelshape, VoxelShape voxelshape1, OperatorBoolean operatorboolean) {
-        if (operatorboolean.apply(false, false)) {
-            throw new IllegalArgumentException();
-        } else if (voxelshape == voxelshape1) {
-            return operatorboolean.apply(true, true) ? voxelshape : a();
-        } else {
-            boolean flag = operatorboolean.apply(true, false);
-            boolean flag1 = operatorboolean.apply(false, true);
-
-            if (voxelshape.isEmpty()) {
-                return flag1 ? voxelshape1 : a();
-            } else if (voxelshape1.isEmpty()) {
-                return flag ? voxelshape : a();
-            } else {
-                VoxelShapeMerger voxelshapemerger = a(1, voxelshape.a(EnumDirection.EnumAxis.X), voxelshape1.a(EnumDirection.EnumAxis.X), flag, flag1);
-                VoxelShapeMerger voxelshapemerger1 = a(voxelshapemerger.a().size() - 1, voxelshape.a(EnumDirection.EnumAxis.Y), voxelshape1.a(EnumDirection.EnumAxis.Y), flag, flag1);
-                VoxelShapeMerger voxelshapemerger2 = a((voxelshapemerger.a().size() - 1) * (voxelshapemerger1.a().size() - 1), voxelshape.a(EnumDirection.EnumAxis.Z), voxelshape1.a(EnumDirection.EnumAxis.Z), flag, flag1);
-                VoxelShapeBitSet voxelshapebitset = VoxelShapeBitSet.a(voxelshape.a, voxelshape1.a, voxelshapemerger, voxelshapemerger1, voxelshapemerger2, operatorboolean);
-
-                return (VoxelShape) (voxelshapemerger instanceof VoxelShapeCubeMerger && voxelshapemerger1 instanceof VoxelShapeCubeMerger && voxelshapemerger2 instanceof VoxelShapeCubeMerger ? new VoxelShapeCube(voxelshapebitset) : new VoxelShapeArray(voxelshapebitset, voxelshapemerger.a(), voxelshapemerger1.a(), voxelshapemerger2.a()));
-            }
-        }
-    }
-
-    public static final boolean applyOperation(VoxelShape voxelshape, VoxelShape voxelshape1, OperatorBoolean operatorboolean) { return VoxelShapes.c(voxelshape, voxelshape1, operatorboolean); } // Paper - OBFHELPER
-    public static boolean c(VoxelShape voxelshape, VoxelShape voxelshape1, OperatorBoolean operatorboolean) {
-        if (operatorboolean.apply(false, false)) {
-            throw new IllegalArgumentException();
-        } else if (voxelshape == voxelshape1) {
-            return operatorboolean.apply(true, true);
-        } else if (voxelshape.isEmpty()) {
-            return operatorboolean.apply(false, !voxelshape1.isEmpty());
-        } else if (voxelshape1.isEmpty()) {
-            return operatorboolean.apply(!voxelshape.isEmpty(), false);
-        } else {
-            boolean flag = operatorboolean.apply(true, false);
-            boolean flag1 = operatorboolean.apply(false, true);
-            EnumDirection.EnumAxis[] aenumdirection_enumaxis = EnumAxisCycle.d;
-            int i = aenumdirection_enumaxis.length;
-
-            for (int j = 0; j < i; ++j) {
-                EnumDirection.EnumAxis enumdirection_enumaxis = aenumdirection_enumaxis[j];
-
-                if (voxelshape.c(enumdirection_enumaxis) < voxelshape1.b(enumdirection_enumaxis) - 1.0E-7D) {
-                    return flag || flag1;
-                }
-
-                if (voxelshape1.c(enumdirection_enumaxis) < voxelshape.b(enumdirection_enumaxis) - 1.0E-7D) {
-                    return flag || flag1;
-                }
-            }
-
-            VoxelShapeMerger voxelshapemerger = a(1, voxelshape.a(EnumDirection.EnumAxis.X), voxelshape1.a(EnumDirection.EnumAxis.X), flag, flag1);
-            VoxelShapeMerger voxelshapemerger1 = a(voxelshapemerger.a().size() - 1, voxelshape.a(EnumDirection.EnumAxis.Y), voxelshape1.a(EnumDirection.EnumAxis.Y), flag, flag1);
-            VoxelShapeMerger voxelshapemerger2 = a((voxelshapemerger.a().size() - 1) * (voxelshapemerger1.a().size() - 1), voxelshape.a(EnumDirection.EnumAxis.Z), voxelshape1.a(EnumDirection.EnumAxis.Z), flag, flag1);
-
-            return a(voxelshapemerger, voxelshapemerger1, voxelshapemerger2, voxelshape.a, voxelshape1.a, operatorboolean);
-        }
-    }
-
-    private static boolean a(VoxelShapeMerger voxelshapemerger, VoxelShapeMerger voxelshapemerger1, VoxelShapeMerger voxelshapemerger2, VoxelShapeDiscrete voxelshapediscrete, VoxelShapeDiscrete voxelshapediscrete1, OperatorBoolean operatorboolean) {
-        return !voxelshapemerger.a((i, j, k) -> {
-            return voxelshapemerger1.a((l, i1, j1) -> {
-                return voxelshapemerger2.a((k1, l1, i2) -> {
-                    return !operatorboolean.apply(voxelshapediscrete.c(i, l, k1), voxelshapediscrete1.c(j, i1, l1));
-                });
-            });
-        });
-    }
-
-    public static double a(EnumDirection.EnumAxis enumdirection_enumaxis, AxisAlignedBB axisalignedbb, Stream<VoxelShape> stream, double d0) {
-        for (Iterator iterator = stream.iterator(); iterator.hasNext(); d0 = ((VoxelShape) iterator.next()).a(enumdirection_enumaxis, axisalignedbb, d0)) {
-            if (Math.abs(d0) < 1.0E-7D) {
-                return 0.0D;
-            }
-        }
-
-        return d0;
-    }
-
-    public static double a(EnumDirection.EnumAxis enumdirection_enumaxis, AxisAlignedBB axisalignedbb, IWorldReader iworldreader, double d0, VoxelShapeCollision voxelshapecollision, Stream<VoxelShape> stream) {
-        return a(axisalignedbb, iworldreader, d0, voxelshapecollision, EnumAxisCycle.a(enumdirection_enumaxis, EnumDirection.EnumAxis.Z), stream);
-    }
-
-    private static double a(AxisAlignedBB axisalignedbb, IWorldReader iworldreader, double d0, VoxelShapeCollision voxelshapecollision, EnumAxisCycle enumaxiscycle, Stream<VoxelShape> stream) {
-        if (axisalignedbb.b() >= 1.0E-6D && axisalignedbb.c() >= 1.0E-6D && axisalignedbb.d() >= 1.0E-6D) {
-            if (Math.abs(d0) < 1.0E-7D) {
-                return 0.0D;
-            } else {
-                EnumAxisCycle enumaxiscycle1 = enumaxiscycle.a();
-                EnumDirection.EnumAxis enumdirection_enumaxis = enumaxiscycle1.a(EnumDirection.EnumAxis.X);
-                EnumDirection.EnumAxis enumdirection_enumaxis1 = enumaxiscycle1.a(EnumDirection.EnumAxis.Y);
-                EnumDirection.EnumAxis enumdirection_enumaxis2 = enumaxiscycle1.a(EnumDirection.EnumAxis.Z);
-                BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
-                int i = MathHelper.floor(axisalignedbb.a(enumdirection_enumaxis) - 1.0E-7D) - 1;
-                int j = MathHelper.floor(axisalignedbb.b(enumdirection_enumaxis) + 1.0E-7D) + 1;
-                int k = MathHelper.floor(axisalignedbb.a(enumdirection_enumaxis1) - 1.0E-7D) - 1;
-                int l = MathHelper.floor(axisalignedbb.b(enumdirection_enumaxis1) + 1.0E-7D) + 1;
-                double d1 = axisalignedbb.a(enumdirection_enumaxis2) - 1.0E-7D;
-                double d2 = axisalignedbb.b(enumdirection_enumaxis2) + 1.0E-7D;
-                boolean flag = d0 > 0.0D;
-                int i1 = flag ? MathHelper.floor(axisalignedbb.b(enumdirection_enumaxis2) - 1.0E-7D) - 1 : MathHelper.floor(axisalignedbb.a(enumdirection_enumaxis2) + 1.0E-7D) + 1;
-                int j1 = a(d0, d1, d2);
-                int k1 = flag ? 1 : -1;
-                int l1 = i1;
-
-                while (true) {
-                    if (flag) {
-                        if (l1 > j1) {
-                            break;
-                        }
-                    } else if (l1 < j1) {
-                        break;
-                    }
-
-                    for (int i2 = i; i2 <= j; ++i2) {
-                        for (int j2 = k; j2 <= l; ++j2) {
-                            int k2 = 0;
-
-                            if (i2 == i || i2 == j) {
-                                ++k2;
-                            }
-
-                            if (j2 == k || j2 == l) {
-                                ++k2;
-                            }
-
-                            if (l1 == i1 || l1 == j1) {
-                                ++k2;
-                            }
-
-                            if (k2 < 3) {
-                                blockposition_mutableblockposition.a(enumaxiscycle1, i2, j2, l1);
-                                IBlockData iblockdata = iworldreader.getType(blockposition_mutableblockposition);
-
-                                if ((k2 != 1 || iblockdata.f()) && (k2 != 2 || iblockdata.getBlock() == Blocks.MOVING_PISTON)) {
-                                    d0 = iblockdata.b((IBlockAccess) iworldreader, blockposition_mutableblockposition, voxelshapecollision).a(enumdirection_enumaxis2, axisalignedbb.d((double) (-blockposition_mutableblockposition.getX()), (double) (-blockposition_mutableblockposition.getY()), (double) (-blockposition_mutableblockposition.getZ())), d0);
-                                    if (Math.abs(d0) < 1.0E-7D) {
-                                        return 0.0D;
-                                    }
-
-                                    j1 = a(d0, d1, d2);
-                                }
-                            }
-                        }
-                    }
-
-                    l1 += k1;
-                }
-
-                double[] adouble = new double[]{d0};
-
-                stream.forEach((voxelshape) -> {
-                    adouble[0] = voxelshape.a(enumdirection_enumaxis2, axisalignedbb, adouble[0]);
-                });
-                return adouble[0];
-            }
-        } else {
-            return d0;
-        }
-    }
-
-    private static int a(double d0, double d1, double d2) {
-        return d0 > 0.0D ? MathHelper.floor(d2 + d0) + 1 : MathHelper.floor(d1 + d0) - 1;
-    }
-
-    public static VoxelShape a(VoxelShape voxelshape, EnumDirection enumdirection) {
-        if (voxelshape == b()) {
-            return b();
-        } else {
-            EnumDirection.EnumAxis enumdirection_enumaxis = enumdirection.k();
-            boolean flag;
-            int i;
-
-            if (enumdirection.c() == EnumDirection.EnumAxisDirection.POSITIVE) {
-                flag = DoubleMath.fuzzyEquals(voxelshape.c(enumdirection_enumaxis), 1.0D, 1.0E-7D);
-                i = voxelshape.a.c(enumdirection_enumaxis) - 1;
-            } else {
-                flag = DoubleMath.fuzzyEquals(voxelshape.b(enumdirection_enumaxis), 0.0D, 1.0E-7D);
-                i = 0;
-            }
-
-            return (VoxelShape) (!flag ? a() : new VoxelShapeSlice(voxelshape, enumdirection_enumaxis, i));
-        }
-    }
-
-    public static boolean b(VoxelShape voxelshape, VoxelShape voxelshape1, EnumDirection enumdirection) {
-        if (voxelshape != b() && voxelshape1 != b()) {
-            EnumDirection.EnumAxis enumdirection_enumaxis = enumdirection.k();
-            EnumDirection.EnumAxisDirection enumdirection_enumaxisdirection = enumdirection.c();
-            VoxelShape voxelshape2 = enumdirection_enumaxisdirection == EnumDirection.EnumAxisDirection.POSITIVE ? voxelshape : voxelshape1;
-            VoxelShape voxelshape3 = enumdirection_enumaxisdirection == EnumDirection.EnumAxisDirection.POSITIVE ? voxelshape1 : voxelshape;
-
-            if (!DoubleMath.fuzzyEquals(voxelshape2.c(enumdirection_enumaxis), 1.0D, 1.0E-7D)) {
-                voxelshape2 = a();
-            }
-
-            if (!DoubleMath.fuzzyEquals(voxelshape3.b(enumdirection_enumaxis), 0.0D, 1.0E-7D)) {
-                voxelshape3 = a();
-            }
-
-            return !c(b(), b(new VoxelShapeSlice(voxelshape2, enumdirection_enumaxis, voxelshape2.a.c(enumdirection_enumaxis) - 1), new VoxelShapeSlice(voxelshape3, enumdirection_enumaxis, 0), OperatorBoolean.OR), OperatorBoolean.ONLY_FIRST);
-        } else {
-            return true;
-        }
-    }
-
-    public static boolean b(VoxelShape voxelshape, VoxelShape voxelshape1) {
-        return voxelshape != b() && voxelshape1 != b() ? (voxelshape.isEmpty() && voxelshape1.isEmpty() ? false : !c(b(), b(voxelshape, voxelshape1, OperatorBoolean.OR), OperatorBoolean.ONLY_FIRST)) : true;
-    }
-
-    @VisibleForTesting
-    protected static VoxelShapeMerger a(int i, DoubleList doublelist, DoubleList doublelist1, boolean flag, boolean flag1) {
-        int j = doublelist.size() - 1;
-        int k = doublelist1.size() - 1;
-
-        if (doublelist instanceof VoxelShapeCubePoint && doublelist1 instanceof VoxelShapeCubePoint) {
-            long l = a(j, k);
-
-            if ((long) i * l <= 256L) {
-                return new VoxelShapeCubeMerger(j, k);
-            }
-        }
-
-        return (VoxelShapeMerger) (doublelist.getDouble(j) < doublelist1.getDouble(0) - 1.0E-7D ? new VoxelShapeMergerDisjoint(doublelist, doublelist1, false) : (doublelist1.getDouble(k) < doublelist.getDouble(0) - 1.0E-7D ? new VoxelShapeMergerDisjoint(doublelist1, doublelist, true) : (j == k && Objects.equals(doublelist, doublelist1) ? (doublelist instanceof VoxelShapeMergerIdentical ? (VoxelShapeMerger) doublelist : (doublelist1 instanceof VoxelShapeMergerIdentical ? (VoxelShapeMerger) doublelist1 : new VoxelShapeMergerIdentical(doublelist))) : new VoxelShapeMergerList(doublelist, doublelist1, flag, flag1))));
-    }
-
-    public interface a {
-
-        void consume(double d0, double d1, double d2, double d3, double d4, double d5);
-    }
-}
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index b81b3744..84c1a8d0 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1,12 +1,7 @@
 package net.minecraft.server;
 
-import co.aikar.timings.Timing;
-import co.aikar.timings.Timings;
-import com.destroystokyo.paper.antixray.ChunkPacketBlockController; // Paper - Anti-Xray
-import com.destroystokyo.paper.antixray.ChunkPacketBlockControllerAntiXray; // Paper - Anti-Xray
 import com.destroystokyo.paper.event.server.ServerExceptionEvent;
 import com.destroystokyo.paper.exception.ServerInternalException;
-import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import java.io.IOException;
 import java.util.Collection;
@@ -32,10 +27,7 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.block.CraftBlockState;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
-import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.event.block.BlockPhysicsEvent;
-import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
-import org.bukkit.event.weather.LightningStrikeEvent;
 // CraftBukkit end
 
 public abstract class World implements IIBlockAccess, GeneratorAccess, AutoCloseable {
@@ -48,9 +40,9 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
     protected final java.util.Set<TileEntity> tileEntityListUnload = com.google.common.collect.Sets.newHashSet(); // Paper
     private final long b = 16777215L;
     private final Thread serverThread;
-    private int u; public int getSkylightSubtracted() { return this.u; } public void setSkylightSubtracted(int value) { this.u = value;} // Paper - OBFHELPER
-    protected int i = (new Random()).nextInt();
-    protected final int j = 1013904223;
+    private int d; public int getSkylightSubtracted() { return this.d; } public void setSkylightSubtracted(int value) { this.d = value;} // Paper - OBFHELPER
+    protected int j = (new Random()).nextInt();
+    protected final int k = 1013904223;
     protected float lastRainLevel;
     protected float rainLevel;
     protected float lastThunderLevel;
@@ -95,7 +87,6 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
     public final org.spigotmc.SpigotWorldConfig spigotConfig; // Spigot
 
     public final com.destroystokyo.paper.PaperWorldConfig paperConfig; // Paper
-    public final ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
 
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPosition lastPhysicsProblem; // Spigot
@@ -131,13 +122,12 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
     }
 
     public Chunk getChunkIfLoaded(int x, int z) {
-        return ((ChunkProviderServer) this.chunkProvider).getChunkAtIfLoadedImmediately(x, z); // Paper
+        return ((ChunkProviderServer) this.chunkProvider).getChunkAt(x, z, false);
     }
 
     protected World(WorldData worlddata, DimensionManager dimensionmanager, BiFunction<World, WorldProvider, IChunkProvider> bifunction, GameProfilerFiller gameprofilerfiller, boolean flag, org.bukkit.generator.ChunkGenerator gen, org.bukkit.World.Environment env) {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig( worlddata.getName() ); // Spigot
         this.paperConfig = new com.destroystokyo.paper.PaperWorldConfig(worlddata.getName(), this.spigotConfig); // Paper
-        this.chunkPacketBlockController = this.paperConfig.antiXray ? new ChunkPacketBlockControllerAntiXray(this.paperConfig) : ChunkPacketBlockController.NO_OPERATION_INSTANCE; // Paper - Anti-Xray
         this.generator = gen;
         this.world = new CraftWorld((WorldServer) this, gen, env);
         this.ticksPerAnimalSpawns = this.getServer().getTicksPerAnimalSpawns(); // CraftBukkit
@@ -183,49 +173,10 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
         this.keepSpawnInMemory = this.paperConfig.keepSpawnInMemory; // Paper
         this.entityLimiter = new org.spigotmc.TickLimiter(spigotConfig.entityMaxTickTime);
         this.tileLimiter = new org.spigotmc.TickLimiter(spigotConfig.tileMaxTickTime);
-    }
-
-    // Paper start
-    // ret true if no collision
-    public final boolean checkEntityCollision(IBlockData data, Entity source, VoxelShapeCollision voxelshapedcollision,
-                                        BlockPosition position, boolean checkCanSee) {
-        // Copied from IWorldReader#a(IBlockData, BlockPosition, VoxelShapeCollision) & EntityAccess#a(Entity, VoxelShape)
-        VoxelShape voxelshape = data.getCollisionShape(this, position, voxelshapedcollision);
-        if (voxelshape.isEmpty()) {
-            return true;
-        }
-
-        voxelshape = voxelshape.offset((double) position.getX(), (double) position.getY(), (double) position.getZ());
-
-        if (voxelshape.isEmpty()) {
-            return true;
-        }
-
-        List<Entity> entities = this.getEntities(null, voxelshape.getBoundingBox());
-
-        for (int i = 0, len = entities.size(); i < len; ++i) {
-            Entity entity = entities.get(i);
-
-            if (checkCanSee && source instanceof EntityPlayer && entity instanceof EntityPlayer
-                && !((EntityPlayer)source).getBukkitEntity().canSee(((EntityPlayer)entity).getBukkitEntity())) {
-                continue;
-            }
 
-            // !entity1.dead && entity1.i && (entity == null || !entity1.x(entity));
-            // elide the last check since vanilla calls with entity = null
-            // only we care about the source for the canSee check
-            if (entity.dead || !entity.blocksEntitySpawning()) {
-                continue;
-            }
-
-            if (VoxelShapes.applyOperation(voxelshape, VoxelShapes.of(entity.getBoundingBox()), OperatorBoolean.AND)) {
-                return false;
-            }
-        }
-
-        return true;
     }
-    // Paper end
+	
+
 
     @Override
     public BiomeBase getBiome(BlockPosition blockposition) {
@@ -274,12 +225,12 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
     }
 
     public boolean isLoaded(BlockPosition blockposition) {
-        return getChunkIfLoadedImmediately(blockposition.getX() >> 4, blockposition.getZ() >> 4) != null; // Paper
+        return getChunkIfLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4) != null; // Paper
     }
 
     // Paper start
     public boolean isLoadedAndInBounds(BlockPosition blockposition) {
-        return getWorldBorder().isInBounds(blockposition) && getChunkIfLoadedImmediately(blockposition.getX() >> 4, blockposition.getZ() >> 4) != null;
+        return getWorldBorder().isInBounds(blockposition) && getChunkIfLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4) != null;
     }
     public Chunk getChunkIfLoaded(BlockPosition blockposition) {
         return getChunkIfLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4);
@@ -338,7 +289,11 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
     @Nullable
     @Override
     public IChunkAccess getChunkIfLoadedImmediately(int x, int z) {
-        return ((ChunkProviderServer)this.chunkProvider).getChunkAtIfLoadedImmediately(x, z);
+        if (!((ChunkProviderServer)this.chunkProvider).isLoaded(x, z)) {
+            return null;
+        }
+
+        return this.chunkProvider.getChunkAt(x, z, ChunkStatus.FULL, true);
     }
 
     @Override
@@ -418,7 +373,6 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
             // CraftBukkit end
 
             IBlockData iblockdata1 = chunk.setType(blockposition, iblockdata, (i & 64) != 0, (i & 1024) == 0); // CraftBukkit custom NO_PLACE flag
-            this.chunkPacketBlockController.onBlockChange(this, blockposition, iblockdata, iblockdata1, i); // Paper - Anti-Xray
 
             if (iblockdata1 == null) {
                 // CraftBukkit start - remove blockstate if failed
@@ -439,7 +393,7 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
                 /*
                 if (iblockdata2 == iblockdata) {
                     if (iblockdata1 != iblockdata2) {
-                        this.b(blockposition, iblockdata1, iblockdata2);
+                        this.m(blockposition);
                     }
 
                     if ((i & 2) != 0 && (!this.isClientSide || (i & 4) == 0) && (this.isClientSide || chunk.getState() != null && chunk.getState().isAtLeast(PlayerChunk.State.TICKING))) {
@@ -490,7 +444,7 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
         IBlockData iblockdata2 = actualBlock;
         if (iblockdata2 == iblockdata) {
             if (iblockdata1 != iblockdata2) {
-                this.b(blockposition, iblockdata1, iblockdata2);
+                this.m(blockposition);
             }
 
             if ((i & 2) != 0 && (!this.isClientSide || (i & 4) == 0) && (this.isClientSide || chunk == null || (chunk.getState() != null && chunk.getState().isAtLeast(PlayerChunk.State.TICKING)))) { // allow chunk to be null here as chunk.isReady() is false when we send our notification during block placement
@@ -589,7 +543,7 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
 
     }
 
-    public void b(BlockPosition blockposition, IBlockData iblockdata, IBlockData iblockdata1) {}
+    public void m(BlockPosition blockposition) {}
 
     public void applyPhysics(BlockPosition blockposition, Block block) {
         if (captureBlockStates) { return; } // Paper - Cancel all physics during placement
@@ -742,22 +696,21 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
 
     public boolean isDayTime() { return J(); } // Paper - OBFHELPER
     public boolean J() {
-        return this.u < 4;
+        return this.d < 4;
     }
 
     @Override
-    public void playSound(@Nullable EntityHuman entityhuman, BlockPosition blockposition, SoundEffect soundeffect, SoundCategory soundcategory, float f, float f1) {
-        this.playSound(entityhuman, (double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D, soundeffect, soundcategory, f, f1);
+    public void a(@Nullable EntityHuman entityhuman, BlockPosition blockposition, SoundEffect soundeffect, SoundCategory soundcategory, float f, float f1) {
+        this.a(entityhuman, (double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D, soundeffect, soundcategory, f, f1);
     }
 
     // Paper start - OBFHELPER
     public final void sendSoundEffect(@Nullable EntityHuman fromEntity, double x, double y, double z, SoundEffect soundeffect, SoundCategory soundcategory, float volume, float pitch) {
-        this.playSound(fromEntity, x, y, z, soundeffect, soundcategory, volume, pitch);
+        this.a(fromEntity, x, y, z, soundeffect, soundcategory, volume, pitch);
     }
-    // Paper end
-    public abstract void playSound(@Nullable EntityHuman entityhuman, double d0, double d1, double d2, SoundEffect soundeffect, SoundCategory soundcategory, float f, float f1);
+    public abstract void a(@Nullable EntityHuman entityhuman, double d0, double d1, double d2, SoundEffect soundeffect, SoundCategory soundcategory, float f, float f1);
 
-    public abstract void playSound(@Nullable EntityHuman entityhuman, Entity entity, SoundEffect soundeffect, SoundCategory soundcategory, float f, float f1);
+    public abstract void a(@Nullable EntityHuman entityhuman, Entity entity, SoundEffect soundeffect, SoundCategory soundcategory, float f, float f1);
 
     public void a(double d0, double d1, double d2, SoundEffect soundeffect, SoundCategory soundcategory, float f, float f1, boolean flag) {}
 
@@ -933,6 +886,9 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
 
     public void a(Consumer<Entity> consumer, Entity entity) {
         try {
+            timings.tickEntities.startTiming();
+            entity.tickTimer.startTiming();
+            // Spigot end
             consumer.accept(entity);
         } catch (Throwable throwable) {
             // Paper start - Prevent tile entity and entity crashes
@@ -943,6 +899,9 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
             entity.dead = true;
             return;
             // Paper end
+        } finally {
+            entity.tickTimer.stopTiming();
+            timings.tickEntities.stopTiming();
         }
     }
 
@@ -1113,7 +1072,7 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
             //TileEntity tileentity = null; // Paper - move up
 
             if (this.tickingTileEntities) {
-                tileentity = this.A(blockposition);
+                tileentity = this.B(blockposition);
             }
 
             if (tileentity == null) {
@@ -1121,7 +1080,7 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
             }
 
             if (tileentity == null) {
-                tileentity = this.A(blockposition);
+                tileentity = this.B(blockposition);
             }
 
             return tileentity;
@@ -1129,7 +1088,7 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
     }
 
     @Nullable
-    private TileEntity A(BlockPosition blockposition) {
+    private TileEntity B(BlockPosition blockposition) {
         for (int i = 0; i < this.tileEntityListPending.size(); ++i) {
             TileEntity tileentity = (TileEntity) this.tileEntityListPending.get(i);
 
@@ -1160,7 +1119,7 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
                         TileEntity tileentity1 = (TileEntity) iterator.next();
 
                         if (tileentity1.getPosition().equals(blockposition)) {
-                            tileentity1.V_();
+                            tileentity1.W_();
                             iterator.remove();
                         }
                     }
@@ -1180,7 +1139,7 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
         TileEntity tileentity = this.getTileEntity(blockposition);
 
         if (tileentity != null && this.tickingTileEntities) {
-            tileentity.V_();
+            tileentity.W_();
             this.tileEntityListPending.remove(tileentity);
         } else {
             if (tileentity != null) {
@@ -1194,8 +1153,8 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
 
     }
 
-    public boolean n(BlockPosition blockposition) {
-        return isOutsideWorld(blockposition) ? false : this.chunkProvider.b(blockposition.getX() >> 4, blockposition.getZ() >> 4);
+    public boolean o(BlockPosition blockposition) {
+        return isOutsideWorld(blockposition) ? false : this.chunkProvider.a(blockposition.getX() >> 4, blockposition.getZ() >> 4);
     }
 
     public boolean a(BlockPosition blockposition, Entity entity) {
@@ -1213,7 +1172,7 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
         double d1 = 1.0D - (double) (this.f(1.0F) * 5.0F) / 16.0D;
         double d2 = 0.5D + 2.0D * MathHelper.a((double) MathHelper.cos(this.j(1.0F) * 6.2831855F), -0.25D, 0.25D);
 
-        this.u = (int) ((1.0D - d2 * d0 * d1) * 11.0D);
+        this.d = (int) ((1.0D - d2 * d0 * d1) * 11.0D);
     }
 
     public void setSpawnFlags(boolean flag, boolean flag1) {
@@ -1287,33 +1246,10 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
         int k = MathHelper.floor((axisalignedbb.minZ - 2.0D) / 16.0D);
         int l = MathHelper.f((axisalignedbb.maxZ + 2.0D) / 16.0D);
         List<T> list = Lists.newArrayList();
-        IChunkProvider ichunkprovider = this.getChunkProvider();
-
-        for (int i1 = i; i1 < j; ++i1) {
-            for (int j1 = k; j1 < l; ++j1) {
-                Chunk chunk = ichunkprovider.getChunkAt(i1, j1, false);
-
-                if (chunk != null) {
-                    chunk.a(oclass, axisalignedbb, list, predicate);
-                }
-            }
-        }
-
-        return list;
-    }
-
-    @Override
-    public <T extends Entity> List<T> b(Class<? extends T> oclass, AxisAlignedBB axisalignedbb, @Nullable Predicate<? super T> predicate) {
-        int i = MathHelper.floor((axisalignedbb.minX - 2.0D) / 16.0D);
-        int j = MathHelper.f((axisalignedbb.maxX + 2.0D) / 16.0D);
-        int k = MathHelper.floor((axisalignedbb.minZ - 2.0D) / 16.0D);
-        int l = MathHelper.f((axisalignedbb.maxZ + 2.0D) / 16.0D);
-        List<T> list = Lists.newArrayList();
-        IChunkProvider ichunkprovider = this.getChunkProvider();
 
         for (int i1 = i; i1 < j; ++i1) {
             for (int j1 = k; j1 < l; ++j1) {
-                Chunk chunk = ichunkprovider.a(i1, j1);
+                Chunk chunk = this.getChunkProvider().getChunkAt(i1, j1, false);
 
                 if (chunk != null) {
                     chunk.a(oclass, axisalignedbb, list, predicate);
@@ -1394,8 +1330,8 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
         return this.getBlockFacePower(blockposition.down(), EnumDirection.DOWN) > 0 ? true : (this.getBlockFacePower(blockposition.up(), EnumDirection.UP) > 0 ? true : (this.getBlockFacePower(blockposition.north(), EnumDirection.NORTH) > 0 ? true : (this.getBlockFacePower(blockposition.south(), EnumDirection.SOUTH) > 0 ? true : (this.getBlockFacePower(blockposition.west(), EnumDirection.WEST) > 0 ? true : this.getBlockFacePower(blockposition.east(), EnumDirection.EAST) > 0))));
     }
 
-    public int isBlockIndirectlyGettingPowered(BlockPosition pos) { return this.q(pos); } // Paper - OBFHELPER
-    public int q(BlockPosition blockposition) {
+    public int isBlockIndirectlyGettingPowered(BlockPosition pos) { return r(pos); } // Paper - OBFHELPER
+    public int r(BlockPosition blockposition) {
         int i = 0;
         EnumDirection[] aenumdirection = World.a;
         int j = aenumdirection.length;
@@ -1439,7 +1375,7 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
 
     protected void a() {
         this.a(this.worldData.getTime() + 1L);
-        if (this.worldData.v().getBoolean(GameRules.DO_DAYLIGHT_CYCLE)) {
+        if (this.worldData.w().getBoolean("doDaylightCycle")) {
             this.setDayTime(this.worldData.getDayTime() + 1L);
         }
 
@@ -1480,7 +1416,7 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
     }
 
     public GameRules getGameRules() {
-        return this.worldData.v();
+        return this.worldData.w();
     }
 
     public float f(float f) {
@@ -1503,7 +1439,7 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
         return !this.isRaining() ? false : (!this.f(blockposition) ? false : (this.getHighestBlockYAt(HeightMap.Type.MOTION_BLOCKING, blockposition).getY() > blockposition.getY() ? false : this.getBiome(blockposition).b() == BiomeBase.Precipitation.RAIN));
     }
 
-    public boolean s(BlockPosition blockposition) {
+    public boolean t(BlockPosition blockposition) {
         BiomeBase biomebase = this.getBiome(blockposition);
 
         return biomebase.c();
@@ -1525,6 +1461,7 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
     public CrashReportSystemDetails a(CrashReport crashreport) {
         CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Affected level", 1);
 
+        crashreportsystemdetails.a("Level name", (Object) (this.worldData == null ? "????" : this.worldData.getName()));
         crashreportsystemdetails.a("All players", () -> {
             return this.getPlayers().size() + " total; " + this.getPlayers();
         });
@@ -1532,9 +1469,6 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
 
         this.chunkProvider.getClass();
         crashreportsystemdetails.a("Chunk stats", ichunkprovider::getName);
-        crashreportsystemdetails.a("Level dimension", () -> {
-            return this.worldProvider.getDimensionManager().toString();
-        });
 
         try {
             this.worldData.a(crashreportsystemdetails);
@@ -1588,7 +1522,7 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
 
     @Override
     public int c() {
-        return this.u;
+        return this.d;
     }
 
     public void c(int i) {
@@ -1629,8 +1563,8 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
     public abstract TagRegistry t();
 
     public BlockPosition a(int i, int j, int k, int l) {
-        this.i = this.i * 3 + 1013904223;
-        int i1 = this.i >> 2;
+        this.j = this.j * 3 + 1013904223;
+        int i1 = this.j >> 2;
 
         return new BlockPosition(i + (i1 & 15), j + (i1 >> 16 & l), k + (i1 >> 8 & 15));
     }
diff --git a/src/main/java/net/minecraft/server/WorldBorder.java b/src/main/java/net/minecraft/server/WorldBorder.java
index 89025813..1e622a04 100644
--- a/src/main/java/net/minecraft/server/WorldBorder.java
+++ b/src/main/java/net/minecraft/server/WorldBorder.java
@@ -236,15 +236,15 @@ public class WorldBorder {
     }
 
     public void b(WorldData worlddata) {
-        this.setCenter(worlddata.B(), worlddata.C());
-        this.setDamageAmount(worlddata.H());
-        this.setDamageBuffer(worlddata.G());
-        this.setWarningDistance(worlddata.I());
-        this.setWarningTime(worlddata.J());
-        if (worlddata.E() > 0L) {
-            this.transitionSizeBetween(worlddata.D(), worlddata.F(), worlddata.E());
+        this.setCenter(worlddata.C(), worlddata.D());
+        this.setDamageAmount(worlddata.I());
+        this.setDamageBuffer(worlddata.H());
+        this.setWarningDistance(worlddata.J());
+        this.setWarningTime(worlddata.K());
+        if (worlddata.F() > 0L) {
+            this.transitionSizeBetween(worlddata.E(), worlddata.G(), worlddata.F());
         } else {
-            this.setSize(worlddata.D());
+            this.setSize(worlddata.E());
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/WorldData.java b/src/main/java/net/minecraft/server/WorldData.java
index ca4c3145..d4b0cca2 100644
--- a/src/main/java/net/minecraft/server/WorldData.java
+++ b/src/main/java/net/minecraft/server/WorldData.java
@@ -40,53 +40,54 @@ public class WorldData {
     private final int q;
     private boolean r;
     private NBTTagCompound s;
+    private int t;
     private String levelName;
-    private int u;
+    private int v;
     private int clearWeatherTime;
     private boolean raining;
     private int rainTime;
     private boolean thundering;
     private int thunderTime;
-    private EnumGamemode A;
-    private boolean B;
+    private EnumGamemode B;
     private boolean C;
     private boolean D;
     private boolean E;
-    private EnumDifficulty F;
-    private boolean G;
-    private double H;
+    private boolean F;
+    private EnumDifficulty G;
+    private boolean H;
     private double I;
     private double J;
-    private long K;
-    private double L;
+    private double K;
+    private long L;
     private double M;
     private double N;
-    private int O;
+    private double O;
     private int P;
-    private final Set<String> Q;
+    private int Q;
     private final Set<String> R;
-    private final Map<DimensionManager, NBTTagCompound> S;
-    private NBTTagCompound T;
-    private int U;
+    private final Set<String> S;
+    private final Map<DimensionManager, NBTTagCompound> T;
+    private NBTTagCompound U;
     private int V;
-    private UUID W;
-    private final GameRules X;
-    private final CustomFunctionCallbackTimerQueue<MinecraftServer> Y;
+    private int W;
+    private UUID X;
+    private final GameRules Y;
+    private final CustomFunctionCallbackTimerQueue<MinecraftServer> Z;
     public WorldServer world; // CraftBukkit
 
     protected WorldData() {
         this.f = WorldType.NORMAL;
         this.g = new NBTTagCompound();
-        this.J = 6.0E7D;
-        this.M = 5.0D;
-        this.N = 0.2D;
-        this.O = 5;
-        this.P = 15;
-        this.Q = Sets.newHashSet();
-        this.R = Sets.newLinkedHashSet();
-        this.S = Maps.newIdentityHashMap();
-        this.X = new GameRules();
-        this.Y = new CustomFunctionCallbackTimerQueue<>(CustomFunctionCallbackTimers.a);
+        this.K = 6.0E7D;
+        this.N = 5.0D;
+        this.O = 0.2D;
+        this.P = 5;
+        this.Q = 15;
+        this.R = Sets.newHashSet();
+        this.S = Sets.newLinkedHashSet();
+        this.T = Maps.newIdentityHashMap();
+        this.Y = new GameRules();
+        this.Z = new CustomFunctionCallbackTimerQueue<>(CustomFunctionCallbackTimers.a);
         this.p = null;
         this.q = SharedConstants.a().getWorldVersion();
         this.b(new NBTTagCompound());
@@ -95,16 +96,16 @@ public class WorldData {
     public WorldData(NBTTagCompound nbttagcompound, DataFixer datafixer, int i, @Nullable NBTTagCompound nbttagcompound1) {
         this.f = WorldType.NORMAL;
         this.g = new NBTTagCompound();
-        this.J = 6.0E7D;
-        this.M = 5.0D;
-        this.N = 0.2D;
-        this.O = 5;
-        this.P = 15;
-        this.Q = Sets.newHashSet();
-        this.R = Sets.newLinkedHashSet();
-        this.S = Maps.newIdentityHashMap();
-        this.X = new GameRules();
-        this.Y = new CustomFunctionCallbackTimerQueue<>(CustomFunctionCallbackTimers.a);
+        this.K = 6.0E7D;
+        this.N = 5.0D;
+        this.O = 0.2D;
+        this.P = 5;
+        this.Q = 15;
+        this.R = Sets.newHashSet();
+        this.S = Sets.newLinkedHashSet();
+        this.T = Maps.newIdentityHashMap();
+        this.Y = new GameRules();
+        this.Z = new CustomFunctionCallbackTimerQueue<>(CustomFunctionCallbackTimers.a);
         this.p = datafixer;
         NBTTagCompound nbttagcompound2;
 
@@ -137,15 +138,15 @@ public class WorldData {
             this.b(nbttagcompound.getCompound("generatorOptions"));
         }
 
-        this.A = EnumGamemode.getById(nbttagcompound.getInt("GameType"));
+        this.B = EnumGamemode.getById(nbttagcompound.getInt("GameType"));
         if (nbttagcompound.hasKeyOfType("legacy_custom_options", 8)) {
             this.h = nbttagcompound.getString("legacy_custom_options");
         }
 
         if (nbttagcompound.hasKeyOfType("MapFeatures", 99)) {
-            this.B = nbttagcompound.getBoolean("MapFeatures");
+            this.C = nbttagcompound.getBoolean("MapFeatures");
         } else {
-            this.B = true;
+            this.C = true;
         }
 
         this.i = nbttagcompound.getInt("SpawnX");
@@ -161,23 +162,23 @@ public class WorldData {
         this.n = nbttagcompound.getLong("LastPlayed");
         this.o = nbttagcompound.getLong("SizeOnDisk");
         this.levelName = nbttagcompound.getString("LevelName");
-        this.u = nbttagcompound.getInt("version");
+        this.v = nbttagcompound.getInt("version");
         this.clearWeatherTime = nbttagcompound.getInt("clearWeatherTime");
         this.rainTime = nbttagcompound.getInt("rainTime");
         this.raining = nbttagcompound.getBoolean("raining");
         this.thunderTime = nbttagcompound.getInt("thunderTime");
         this.thundering = nbttagcompound.getBoolean("thundering");
-        this.C = nbttagcompound.getBoolean("hardcore");
+        this.D = nbttagcompound.getBoolean("hardcore");
         if (nbttagcompound.hasKeyOfType("initialized", 99)) {
-            this.E = nbttagcompound.getBoolean("initialized");
+            this.F = nbttagcompound.getBoolean("initialized");
         } else {
-            this.E = true;
+            this.F = true;
         }
 
         if (nbttagcompound.hasKeyOfType("allowCommands", 99)) {
-            this.D = nbttagcompound.getBoolean("allowCommands");
+            this.E = nbttagcompound.getBoolean("allowCommands");
         } else {
-            this.D = this.A == EnumGamemode.CREATIVE;
+            this.E = this.B == EnumGamemode.CREATIVE;
         }
 
         this.q = i;
@@ -186,51 +187,51 @@ public class WorldData {
         }
 
         if (nbttagcompound.hasKeyOfType("GameRules", 10)) {
-            this.X.a(nbttagcompound.getCompound("GameRules"));
+            this.Y.a(nbttagcompound.getCompound("GameRules"));
         }
 
         if (nbttagcompound.hasKeyOfType("Difficulty", 99)) {
-            this.F = EnumDifficulty.getById(nbttagcompound.getByte("Difficulty"));
+            this.G = EnumDifficulty.getById(nbttagcompound.getByte("Difficulty"));
         }
 
         if (nbttagcompound.hasKeyOfType("DifficultyLocked", 1)) {
-            this.G = nbttagcompound.getBoolean("DifficultyLocked");
+            this.H = nbttagcompound.getBoolean("DifficultyLocked");
         }
 
         if (nbttagcompound.hasKeyOfType("BorderCenterX", 99)) {
-            this.H = nbttagcompound.getDouble("BorderCenterX");
+            this.I = nbttagcompound.getDouble("BorderCenterX");
         }
 
         if (nbttagcompound.hasKeyOfType("BorderCenterZ", 99)) {
-            this.I = nbttagcompound.getDouble("BorderCenterZ");
+            this.J = nbttagcompound.getDouble("BorderCenterZ");
         }
 
         if (nbttagcompound.hasKeyOfType("BorderSize", 99)) {
-            this.J = nbttagcompound.getDouble("BorderSize");
+            this.K = nbttagcompound.getDouble("BorderSize");
         }
 
         if (nbttagcompound.hasKeyOfType("BorderSizeLerpTime", 99)) {
-            this.K = nbttagcompound.getLong("BorderSizeLerpTime");
+            this.L = nbttagcompound.getLong("BorderSizeLerpTime");
         }
 
         if (nbttagcompound.hasKeyOfType("BorderSizeLerpTarget", 99)) {
-            this.L = nbttagcompound.getDouble("BorderSizeLerpTarget");
+            this.M = nbttagcompound.getDouble("BorderSizeLerpTarget");
         }
 
         if (nbttagcompound.hasKeyOfType("BorderSafeZone", 99)) {
-            this.M = nbttagcompound.getDouble("BorderSafeZone");
+            this.N = nbttagcompound.getDouble("BorderSafeZone");
         }
 
         if (nbttagcompound.hasKeyOfType("BorderDamagePerBlock", 99)) {
-            this.N = nbttagcompound.getDouble("BorderDamagePerBlock");
+            this.O = nbttagcompound.getDouble("BorderDamagePerBlock");
         }
 
         if (nbttagcompound.hasKeyOfType("BorderWarningBlocks", 99)) {
-            this.O = nbttagcompound.getInt("BorderWarningBlocks");
+            this.P = nbttagcompound.getInt("BorderWarningBlocks");
         }
 
         if (nbttagcompound.hasKeyOfType("BorderWarningTime", 99)) {
-            this.P = nbttagcompound.getInt("BorderWarningTime");
+            this.Q = nbttagcompound.getInt("BorderWarningTime");
         }
 
         if (nbttagcompound.hasKeyOfType("DimensionData", 10)) {
@@ -240,7 +241,7 @@ public class WorldData {
             while (iterator.hasNext()) {
                 String s1 = (String) iterator.next();
 
-                this.S.put(DimensionManager.a(Integer.parseInt(s1)), nbttagcompound2.getCompound(s1));
+                this.T.put(DimensionManager.a(Integer.parseInt(s1)), nbttagcompound2.getCompound(s1));
             }
         }
 
@@ -249,34 +250,34 @@ public class WorldData {
             NBTTagList nbttaglist = nbttagcompound2.getList("Disabled", 8);
 
             for (int k = 0; k < nbttaglist.size(); ++k) {
-                this.Q.add(nbttaglist.getString(k));
+                this.R.add(nbttaglist.getString(k));
             }
 
             NBTTagList nbttaglist1 = nbttagcompound2.getList("Enabled", 8);
 
             for (int l = 0; l < nbttaglist1.size(); ++l) {
-                this.R.add(nbttaglist1.getString(l));
+                this.S.add(nbttaglist1.getString(l));
             }
         }
 
         if (nbttagcompound.hasKeyOfType("CustomBossEvents", 10)) {
-            this.T = nbttagcompound.getCompound("CustomBossEvents");
+            this.U = nbttagcompound.getCompound("CustomBossEvents");
         }
 
         if (nbttagcompound.hasKeyOfType("ScheduledEvents", 9)) {
-            this.Y.a(nbttagcompound.getList("ScheduledEvents", 10));
+            this.Z.a(nbttagcompound.getList("ScheduledEvents", 10));
         }
 
         if (nbttagcompound.hasKeyOfType("WanderingTraderSpawnDelay", 99)) {
-            this.U = nbttagcompound.getInt("WanderingTraderSpawnDelay");
+            this.V = nbttagcompound.getInt("WanderingTraderSpawnDelay");
         }
 
         if (nbttagcompound.hasKeyOfType("WanderingTraderSpawnChance", 99)) {
-            this.V = nbttagcompound.getInt("WanderingTraderSpawnChance");
+            this.W = nbttagcompound.getInt("WanderingTraderSpawnChance");
         }
 
         if (nbttagcompound.hasKeyOfType("WanderingTraderId", 8)) {
-            this.W = UUID.fromString(nbttagcompound.getString("WanderingTraderId"));
+            this.X = UUID.fromString(nbttagcompound.getString("WanderingTraderId"));
         }
 
     }
@@ -284,36 +285,36 @@ public class WorldData {
     public WorldData(WorldSettings worldsettings, String s) {
         this.f = WorldType.NORMAL;
         this.g = new NBTTagCompound();
-        this.J = 6.0E7D;
-        this.M = 5.0D;
-        this.N = 0.2D;
-        this.O = 5;
-        this.P = 15;
-        this.Q = Sets.newHashSet();
-        this.R = Sets.newLinkedHashSet();
-        this.S = Maps.newIdentityHashMap();
-        this.X = new GameRules();
-        this.Y = new CustomFunctionCallbackTimerQueue<>(CustomFunctionCallbackTimers.a);
+        this.K = 6.0E7D;
+        this.N = 5.0D;
+        this.O = 0.2D;
+        this.P = 5;
+        this.Q = 15;
+        this.R = Sets.newHashSet();
+        this.S = Sets.newLinkedHashSet();
+        this.T = Maps.newIdentityHashMap();
+        this.Y = new GameRules();
+        this.Z = new CustomFunctionCallbackTimerQueue<>(CustomFunctionCallbackTimers.a);
         this.p = null;
         this.q = SharedConstants.a().getWorldVersion();
         this.a(worldsettings);
         this.levelName = s;
-        this.F = WorldData.a;
-        this.E = false;
+        this.G = WorldData.a;
+        this.F = false;
     }
 
     public void a(WorldSettings worldsettings) {
         this.e = worldsettings.d();
-        this.A = worldsettings.e();
-        this.B = worldsettings.g();
-        this.C = worldsettings.f();
+        this.B = worldsettings.e();
+        this.C = worldsettings.g();
+        this.D = worldsettings.f();
         this.f = worldsettings.h();
         this.b((NBTTagCompound) Dynamic.convert(JsonOps.INSTANCE, DynamicOpsNBT.a, worldsettings.j()));
-        this.D = worldsettings.i();
+        this.E = worldsettings.i();
     }
 
     public NBTTagCompound a(@Nullable NBTTagCompound nbttagcompound) {
-        this.T();
+        this.U();
         if (nbttagcompound == null) {
             nbttagcompound = this.s;
         }
@@ -343,8 +344,8 @@ public class WorldData {
             nbttagcompound.setString("legacy_custom_options", this.h);
         }
 
-        nbttagcompound.setInt("GameType", this.A.getId());
-        nbttagcompound.setBoolean("MapFeatures", this.B);
+        nbttagcompound.setInt("GameType", this.B.getId());
+        nbttagcompound.setBoolean("MapFeatures", this.C);
         nbttagcompound.setInt("SpawnX", this.i);
         nbttagcompound.setInt("SpawnY", this.j);
         nbttagcompound.setInt("SpawnZ", this.k);
@@ -353,32 +354,32 @@ public class WorldData {
         nbttagcompound.setLong("SizeOnDisk", this.o);
         nbttagcompound.setLong("LastPlayed", SystemUtils.getTimeMillis());
         nbttagcompound.setString("LevelName", this.levelName);
-        nbttagcompound.setInt("version", this.u);
+        nbttagcompound.setInt("version", this.v);
         nbttagcompound.setInt("clearWeatherTime", this.clearWeatherTime);
         nbttagcompound.setInt("rainTime", this.rainTime);
         nbttagcompound.setBoolean("raining", this.raining);
         nbttagcompound.setInt("thunderTime", this.thunderTime);
         nbttagcompound.setBoolean("thundering", this.thundering);
-        nbttagcompound.setBoolean("hardcore", this.C);
-        nbttagcompound.setBoolean("allowCommands", this.D);
-        nbttagcompound.setBoolean("initialized", this.E);
-        nbttagcompound.setDouble("BorderCenterX", this.H);
-        nbttagcompound.setDouble("BorderCenterZ", this.I);
-        nbttagcompound.setDouble("BorderSize", this.J);
-        nbttagcompound.setLong("BorderSizeLerpTime", this.K);
-        nbttagcompound.setDouble("BorderSafeZone", this.M);
-        nbttagcompound.setDouble("BorderDamagePerBlock", this.N);
-        nbttagcompound.setDouble("BorderSizeLerpTarget", this.L);
-        nbttagcompound.setDouble("BorderWarningBlocks", (double) this.O);
-        nbttagcompound.setDouble("BorderWarningTime", (double) this.P);
-        if (this.F != null) {
-            nbttagcompound.setByte("Difficulty", (byte) this.F.a());
-        }
-
-        nbttagcompound.setBoolean("DifficultyLocked", this.G);
-        nbttagcompound.set("GameRules", this.X.a());
+        nbttagcompound.setBoolean("hardcore", this.D);
+        nbttagcompound.setBoolean("allowCommands", this.E);
+        nbttagcompound.setBoolean("initialized", this.F);
+        nbttagcompound.setDouble("BorderCenterX", this.I);
+        nbttagcompound.setDouble("BorderCenterZ", this.J);
+        nbttagcompound.setDouble("BorderSize", this.K);
+        nbttagcompound.setLong("BorderSizeLerpTime", this.L);
+        nbttagcompound.setDouble("BorderSafeZone", this.N);
+        nbttagcompound.setDouble("BorderDamagePerBlock", this.O);
+        nbttagcompound.setDouble("BorderSizeLerpTarget", this.M);
+        nbttagcompound.setDouble("BorderWarningBlocks", (double) this.P);
+        nbttagcompound.setDouble("BorderWarningTime", (double) this.Q);
+        if (this.G != null) {
+            nbttagcompound.setByte("Difficulty", (byte) this.G.a());
+        }
+
+        nbttagcompound.setBoolean("DifficultyLocked", this.H);
+        nbttagcompound.set("GameRules", this.Y.a());
         NBTTagCompound nbttagcompound3 = new NBTTagCompound();
-        Iterator iterator = this.S.entrySet().iterator();
+        Iterator iterator = this.T.entrySet().iterator();
 
         while (iterator.hasNext()) {
             Entry<DimensionManager, NBTTagCompound> entry = (Entry) iterator.next();
@@ -393,7 +394,7 @@ public class WorldData {
 
         NBTTagCompound nbttagcompound4 = new NBTTagCompound();
         NBTTagList nbttaglist = new NBTTagList();
-        Iterator iterator1 = this.R.iterator();
+        Iterator iterator1 = this.S.iterator();
 
         while (iterator1.hasNext()) {
             String s = (String) iterator1.next();
@@ -403,7 +404,7 @@ public class WorldData {
 
         nbttagcompound4.set("Enabled", nbttaglist);
         NBTTagList nbttaglist1 = new NBTTagList();
-        Iterator iterator2 = this.Q.iterator();
+        Iterator iterator2 = this.R.iterator();
 
         while (iterator2.hasNext()) {
             String s1 = (String) iterator2.next();
@@ -413,15 +414,15 @@ public class WorldData {
 
         nbttagcompound4.set("Disabled", nbttaglist1);
         nbttagcompound.set("DataPacks", nbttagcompound4);
-        if (this.T != null) {
-            nbttagcompound.set("CustomBossEvents", this.T);
+        if (this.U != null) {
+            nbttagcompound.set("CustomBossEvents", this.U);
         }
 
-        nbttagcompound.set("ScheduledEvents", this.Y.b());
-        nbttagcompound.setInt("WanderingTraderSpawnDelay", this.U);
-        nbttagcompound.setInt("WanderingTraderSpawnChance", this.V);
-        if (this.W != null) {
-            nbttagcompound.setString("WanderingTraderId", this.W.toString());
+        nbttagcompound.set("ScheduledEvents", this.Z.b());
+        nbttagcompound.setInt("WanderingTraderSpawnDelay", this.V);
+        nbttagcompound.setInt("WanderingTraderSpawnChance", this.W);
+        if (this.X != null) {
+            nbttagcompound.setString("WanderingTraderId", this.X.toString());
         }
 
         nbttagcompound.setString("Bukkit.Version", Bukkit.getName() + "/" + Bukkit.getVersion() + "/" + Bukkit.getBukkitVersion()); // CraftBukkit
@@ -451,7 +452,7 @@ public class WorldData {
         return this.m;
     }
 
-    private void T() {
+    private void U() {
         if (!this.r && this.s != null) {
             if (this.q < SharedConstants.a().getWorldVersion()) {
                 if (this.p == null) {
@@ -461,12 +462,13 @@ public class WorldData {
                 this.s = GameProfileSerializer.a(this.p, DataFixTypes.PLAYER, this.s, this.q);
             }
 
+            this.t = this.s.getInt("Dimension");
             this.r = true;
         }
     }
 
     public NBTTagCompound h() {
-        this.T();
+        this.U();
         return this.s;
     }
 
@@ -492,15 +494,15 @@ public class WorldData {
         this.levelName = s;
     }
 
-    public int j() {
-        return this.u;
+    public int k() {
+        return this.v;
     }
 
     public void d(int i) {
-        this.u = i;
+        this.v = i;
     }
 
-    public int z() {
+    public int A() {
         return this.clearWeatherTime;
     }
 
@@ -569,27 +571,27 @@ public class WorldData {
     }
 
     public EnumGamemode getGameType() {
-        return this.A;
+        return this.B;
     }
 
     public boolean shouldGenerateMapFeatures() {
-        return this.B;
+        return this.C;
     }
 
     public void f(boolean flag) {
-        this.B = flag;
+        this.C = flag;
     }
 
     public void setGameType(EnumGamemode enumgamemode) {
-        this.A = enumgamemode;
+        this.B = enumgamemode;
     }
 
     public boolean isHardcore() {
-        return this.C;
+        return this.D;
     }
 
     public void g(boolean flag) {
-        this.C = flag;
+        this.D = flag;
     }
 
     public WorldType getType() {
@@ -608,28 +610,24 @@ public class WorldData {
         this.g = nbttagcompound;
     }
 
-    public boolean t() {
-        return this.D;
+    public boolean u() {
+        return this.E;
     }
 
     public void c(boolean flag) {
-        this.D = flag;
+        this.E = flag;
     }
 
-    public boolean u() {
-        return this.E;
+    public boolean v() {
+        return this.F;
     }
 
     public void d(boolean flag) {
-        this.E = flag;
-    }
-
-    public GameRules v() {
-        return this.X;
+        this.F = flag;
     }
 
-    public double B() {
-        return this.H;
+    public GameRules w() {
+        return this.Y;
     }
 
     public double C() {
@@ -640,72 +638,76 @@ public class WorldData {
         return this.J;
     }
 
+    public double E() {
+        return this.K;
+    }
+
     public void a(double d0) {
-        this.J = d0;
+        this.K = d0;
     }
 
-    public long E() {
-        return this.K;
+    public long F() {
+        return this.L;
     }
 
     public void c(long i) {
-        this.K = i;
+        this.L = i;
     }
 
-    public double F() {
-        return this.L;
+    public double G() {
+        return this.M;
     }
 
     public void b(double d0) {
-        this.L = d0;
+        this.M = d0;
     }
 
     public void c(double d0) {
-        this.I = d0;
+        this.J = d0;
     }
 
     public void d(double d0) {
-        this.H = d0;
-    }
-
-    public double G() {
-        return this.M;
-    }
-
-    public void e(double d0) {
-        this.M = d0;
+        this.I = d0;
     }
 
     public double H() {
         return this.N;
     }
 
-    public void f(double d0) {
+    public void e(double d0) {
         this.N = d0;
     }
 
-    public int I() {
+    public double I() {
         return this.O;
     }
 
+    public void f(double d0) {
+        this.O = d0;
+    }
+
     public int J() {
         return this.P;
     }
 
+    public int K() {
+        return this.Q;
+    }
+
     public void h(int i) {
-        this.O = i;
+        this.P = i;
     }
 
     public void i(int i) {
-        this.P = i;
+        this.Q = i;
     }
 
     public EnumDifficulty getDifficulty() {
-        return this.F;
+        return this.G;
     }
 
     public void setDifficulty(EnumDifficulty enumdifficulty) {
-        this.F = enumdifficulty;
+        this.G = enumdifficulty;
         // CraftBukkit start
         PacketPlayOutServerDifficulty packet = new PacketPlayOutServerDifficulty(this.getDifficulty(), this.isDifficultyLocked());
         for (EntityPlayer player : (java.util.List<EntityPlayer>) (java.util.List) world.getPlayers()) {
@@ -715,26 +717,23 @@ public class WorldData {
     }
 
     public boolean isDifficultyLocked() {
-        return this.G;
+        return this.H;
     }
 
     public void e(boolean flag) {
-        this.G = flag;
+        this.H = flag;
     }
 
-    public CustomFunctionCallbackTimerQueue<MinecraftServer> y() {
-        return this.Y;
+    public CustomFunctionCallbackTimerQueue<MinecraftServer> z() {
+        return this.Z;
     }
 
     public void a(CrashReportSystemDetails crashreportsystemdetails) {
-        crashreportsystemdetails.a("Level name", () -> {
-            return this.levelName;
-        });
         crashreportsystemdetails.a("Level seed", () -> {
-            return String.valueOf(this.e);
+            return String.valueOf(this.getSeed());
         });
         crashreportsystemdetails.a("Level generator", () -> {
-            return String.format("ID %02d - %s, ver %d. Features enabled: %b", this.f.i(), this.f.name(), this.f.getVersion(), this.B);
+            return String.format("ID %02d - %s, ver %d. Features enabled: %b", this.f.i(), this.f.name(), this.f.getVersion(), this.C);
         });
         crashreportsystemdetails.a("Level generator options", () -> {
             return this.g.toString();
@@ -745,11 +744,14 @@ public class WorldData {
         crashreportsystemdetails.a("Level time", () -> {
             return String.format("%d game time, %d day time", this.l, this.m);
         });
+        crashreportsystemdetails.a("Level dimension", () -> {
+            return String.valueOf(this.t);
+        });
         crashreportsystemdetails.a("Level storage version", () -> {
             String s = "Unknown?";
 
             try {
-                switch (this.u) {
+                switch (this.v) {
                     case 19132:
                         s = "McRegion";
                         break;
@@ -760,61 +762,61 @@ public class WorldData {
                 ;
             }
 
-            return String.format("0x%05X - %s", this.u, s);
+            return String.format("0x%05X - %s", this.v, s);
         });
         crashreportsystemdetails.a("Level weather", () -> {
             return String.format("Rain time: %d (now: %b), thunder time: %d (now: %b)", this.rainTime, this.raining, this.thunderTime, this.thundering);
         });
         crashreportsystemdetails.a("Level game mode", () -> {
-            return String.format("Game mode: %s (ID %d). Hardcore: %b. Cheats: %b", this.A.b(), this.A.getId(), this.C, this.D);
+            return String.format("Game mode: %s (ID %d). Hardcore: %b. Cheats: %b", this.B.b(), this.B.getId(), this.D, this.E);
         });
     }
 
     public NBTTagCompound a(DimensionManager dimensionmanager) {
-        NBTTagCompound nbttagcompound = (NBTTagCompound) this.S.get(dimensionmanager);
+        NBTTagCompound nbttagcompound = (NBTTagCompound) this.T.get(dimensionmanager);
 
         return nbttagcompound == null ? new NBTTagCompound() : nbttagcompound;
     }
 
     public void a(DimensionManager dimensionmanager, NBTTagCompound nbttagcompound) {
-        this.S.put(dimensionmanager, nbttagcompound);
-    }
-
-    public Set<String> N() {
-        return this.Q;
+        this.T.put(dimensionmanager, nbttagcompound);
     }
 
     public Set<String> O() {
         return this.R;
     }
 
+    public Set<String> P() {
+        return this.S;
+    }
+
     @Nullable
     public NBTTagCompound getCustomBossEvents() {
-        return this.T;
+        return this.U;
     }
 
     public void c(@Nullable NBTTagCompound nbttagcompound) {
-        this.T = nbttagcompound;
+        this.U = nbttagcompound;
     }
 
-    public int Q() {
-        return this.U;
+    public int R() {
+        return this.V;
     }
 
     public void j(int i) {
-        this.U = i;
+        this.V = i;
     }
 
-    public int R() {
-        return this.V;
+    public int S() {
+        return this.W;
     }
 
     public void k(int i) {
-        this.V = i;
+        this.W = i;
     }
 
     public void a(UUID uuid) {
-        this.W = uuid;
+        this.X = uuid;
     }
 
     // CraftBukkit start - Check if the name stored in NBT is the correct one
diff --git a/src/main/java/net/minecraft/server/WorldGenStronghold.java b/src/main/java/net/minecraft/server/WorldGenStronghold.java
index c2188cee..fb3463fc 100644
--- a/src/main/java/net/minecraft/server/WorldGenStronghold.java
+++ b/src/main/java/net/minecraft/server/WorldGenStronghold.java
@@ -78,7 +78,7 @@ public class WorldGenStronghold extends StructureGenerator<WorldGenFeatureEmptyC
 
     @Nullable
     @Override
-    public synchronized BlockPosition getNearestGeneratedFeature(World world, ChunkGenerator<? extends GeneratorSettingsDefault> chunkgenerator, BlockPosition blockposition, int i, boolean flag) { // CraftBukkit - synchronized
+    public BlockPosition getNearestGeneratedFeature(World world, ChunkGenerator<? extends GeneratorSettingsDefault> chunkgenerator, BlockPosition blockposition, int i, boolean flag) {
         if (!chunkgenerator.getWorldChunkManager().a(this)) {
             return null;
         } else {
diff --git a/src/main/java/net/minecraft/server/WorldMap.java b/src/main/java/net/minecraft/server/WorldMap.java
index 090d3dbd..acbd381c 100644
--- a/src/main/java/net/minecraft/server/WorldMap.java
+++ b/src/main/java/net/minecraft/server/WorldMap.java
@@ -68,11 +68,10 @@ public class WorldMap extends PersistentBase {
 
     @Override
     public void a(NBTTagCompound nbttagcompound) {
-        int i = nbttagcompound.getInt("dimension");
         // CraftBukkit start
-        DimensionManager dimensionmanager = null;
+        int dimension = nbttagcompound.getInt("dimension");
 
-        if (i >= CraftWorld.CUSTOM_DIMENSION_OFFSET) {
+        if (dimension >= CraftWorld.CUSTOM_DIMENSION_OFFSET) {
             long least = nbttagcompound.getLong("UUIDLeast");
             long most = nbttagcompound.getLong("UUIDMost");
 
@@ -84,51 +83,46 @@ public class WorldMap extends PersistentBase {
                 if (world == null) {
                     /* All Maps which do not have their valid world loaded are set to a dimension which hopefully won't be reached.
                        This is to prevent them being corrupted with the wrong map data. */
-                    dimensionmanager = new DimensionManager(127, null, null, null, false, DimensionManager.OVERWORLD);
+                    this.map = new DimensionManager(127, null, null, null, false, DimensionManager.OVERWORLD);
                 } else {
-                    dimensionmanager = world.getHandle().getWorldProvider().getDimensionManager();
+                    this.map = world.getHandle().getWorldProvider().getDimensionManager();
                 }
             }
         } else {
-            dimensionmanager = DimensionManager.a(i);
+            this.map = DimensionManager.a(dimension);
         }
-        // CraftBukkit end
 
-        if (dimensionmanager == null) {
-            throw new IllegalArgumentException("Invalid map dimension: " + i);
-        } else {
-            this.map = dimensionmanager;
-            this.centerX = nbttagcompound.getInt("xCenter");
-            this.centerZ = nbttagcompound.getInt("zCenter");
-            this.scale = (byte) MathHelper.clamp(nbttagcompound.getByte("scale"), 0, 4);
-            this.track = !nbttagcompound.hasKeyOfType("trackingPosition", 1) || nbttagcompound.getBoolean("trackingPosition");
-            this.unlimitedTracking = nbttagcompound.getBoolean("unlimitedTracking");
-            this.locked = nbttagcompound.getBoolean("locked");
-            this.colors = nbttagcompound.getByteArray("colors");
-            if (this.colors.length != 16384) {
-                this.colors = new byte[16384];
-            }
+        // CraftBukkit end
+        this.centerX = nbttagcompound.getInt("xCenter");
+        this.centerZ = nbttagcompound.getInt("zCenter");
+        this.scale = (byte) MathHelper.clamp(nbttagcompound.getByte("scale"), 0, 4);
+        this.track = !nbttagcompound.hasKeyOfType("trackingPosition", 1) || nbttagcompound.getBoolean("trackingPosition");
+        this.unlimitedTracking = nbttagcompound.getBoolean("unlimitedTracking");
+        this.locked = nbttagcompound.getBoolean("locked");
+        this.colors = nbttagcompound.getByteArray("colors");
+        if (this.colors.length != 16384) {
+            this.colors = new byte[16384];
+        }
 
-            NBTTagList nbttaglist = nbttagcompound.getList("banners", 10);
+        NBTTagList nbttaglist = nbttagcompound.getList("banners", 10);
 
-            for (int j = 0; j < nbttaglist.size(); ++j) {
-                MapIconBanner mapiconbanner = MapIconBanner.a(nbttaglist.getCompound(j));
+        for (int i = 0; i < nbttaglist.size(); ++i) {
+            MapIconBanner mapiconbanner = MapIconBanner.a(nbttaglist.getCompound(i));
 
-                this.l.put(mapiconbanner.f(), mapiconbanner);
-                this.a(mapiconbanner.c(), (GeneratorAccess) null, mapiconbanner.f(), (double) mapiconbanner.a().getX(), (double) mapiconbanner.a().getZ(), 180.0D, mapiconbanner.d());
-            }
+            this.l.put(mapiconbanner.f(), mapiconbanner);
+            this.a(mapiconbanner.c(), (GeneratorAccess) null, mapiconbanner.f(), (double) mapiconbanner.a().getX(), (double) mapiconbanner.a().getZ(), 180.0D, mapiconbanner.d());
+        }
         vanillaRender.buffer = colors; // Paper
 
-            NBTTagList nbttaglist1 = nbttagcompound.getList("frames", 10);
+        NBTTagList nbttaglist1 = nbttagcompound.getList("frames", 10);
 
-            for (int k = 0; k < nbttaglist1.size(); ++k) {
-                WorldMapFrame worldmapframe = WorldMapFrame.a(nbttaglist1.getCompound(k));
-
-                this.m.put(worldmapframe.e(), worldmapframe);
-                this.a(MapIcon.Type.FRAME, (GeneratorAccess) null, "frame-" + worldmapframe.d(), (double) worldmapframe.b().getX(), (double) worldmapframe.b().getZ(), (double) worldmapframe.c(), (IChatBaseComponent) null);
-            }
+        for (int j = 0; j < nbttaglist1.size(); ++j) {
+            WorldMapFrame worldmapframe = WorldMapFrame.a(nbttaglist1.getCompound(j));
 
+            this.m.put(worldmapframe.e(), worldmapframe);
+            this.a(MapIcon.Type.FRAME, (GeneratorAccess) null, "frame-" + worldmapframe.d(), (double) worldmapframe.b().getX(), (double) worldmapframe.b().getZ(), (double) worldmapframe.c(), (IChatBaseComponent) null);
         }
+
     }
 
     @Override
@@ -230,9 +224,9 @@ public class WorldMap extends PersistentBase {
                 this.decorations.remove("frame-" + worldmapframe.d());
             }
 
-            WorldMapFrame worldmapframe1 = new WorldMapFrame(blockposition, entityitemframe.getDirection().get2DRotationValue() * 90, entityitemframe.getId());
+            WorldMapFrame worldmapframe1 = new WorldMapFrame(blockposition, entityitemframe.direction.get2DRotationValue() * 90, entityitemframe.getId());
 
-            this.a(MapIcon.Type.FRAME, entityhuman.world, "frame-" + entityitemframe.getId(), (double) blockposition.getX(), (double) blockposition.getZ(), (double) (entityitemframe.getDirection().get2DRotationValue() * 90), (IChatBaseComponent) null);
+            this.a(MapIcon.Type.FRAME, entityhuman.world, "frame-" + entityitemframe.getId(), (double) blockposition.getX(), (double) blockposition.getZ(), (double) (entityitemframe.direction.get2DRotationValue() * 90), (IChatBaseComponent) null);
             this.m.put(worldmapframe1.e(), worldmapframe1);
         }
 
diff --git a/src/main/java/net/minecraft/server/WorldPersistentData.java b/src/main/java/net/minecraft/server/WorldPersistentData.java
index 00e9a173..62081349 100644
--- a/src/main/java/net/minecraft/server/WorldPersistentData.java
+++ b/src/main/java/net/minecraft/server/WorldPersistentData.java
@@ -26,6 +26,7 @@ public class WorldPersistentData {
         this.c = datafixer;
         this.d = file;
     }
+    private static final PersistentBase NO_RESULT = new ForcedChunk(); // Paper
 
     private File a(String s) {
         return new File(this.d, s + ".dat");
@@ -46,33 +47,26 @@ public class WorldPersistentData {
 
     @Nullable
     public <T extends PersistentBase> T b(Supplier<T> supplier, String s) {
-        T persistentbase = (T) this.data.get(s); // Paper - decompile fix
-
-        if (persistentbase == null && !this.data.containsKey(s)) {
-            persistentbase = this.c(supplier, s);
-            this.data.put(s, persistentbase);
-        }
-
-        return persistentbase;
-    }
-
-    @Nullable
-    private <T extends PersistentBase> T c(Supplier<T> supplier, String s) {
-        try {
-            File file = this.a(s);
-
-            if (file.exists()) {
-                T t0 = supplier.get(); // Paper - decompile fix
-                NBTTagCompound nbttagcompound = this.a(s, SharedConstants.a().getWorldVersion());
-
-                t0.a(nbttagcompound.getCompound("data"));
-                return t0;
+        if ("Mineshaft_index".equals(s) || "Mineshaft".equals(s)) return null; // Paper - mineshaft is useless data
+        PersistentBase persistentbase = (PersistentBase) this.data.get(s);
+
+        if (persistentbase == null) {
+            try {
+                File file = this.a(s);
+
+                if (file.exists()) {
+                    persistentbase = (PersistentBase) supplier.get();
+                    NBTTagCompound nbttagcompound = this.a(s, SharedConstants.a().getWorldVersion());
+
+                    persistentbase.a(nbttagcompound.getCompound("data"));
+                    this.data.put(s, persistentbase);
+                } else this.data.put(s, NO_RESULT); // Paper
+            } catch (Exception exception) {
+                WorldPersistentData.LOGGER.error("Error loading saved data: {}", s, exception);
             }
-        } catch (Exception exception) {
-            WorldPersistentData.LOGGER.error("Error loading saved data: {}", s, exception);
         }
 
-        return null;
+        return (T) persistentbase == NO_RESULT ? null : (T) persistentbase; // Paper - decompile fix // Paper
     }
 
     public void a(PersistentBase persistentbase) {
@@ -80,6 +74,7 @@ public class WorldPersistentData {
     }
 
     public NBTTagCompound a(String s, int i) throws IOException {
+        if ("Mineshaft".equals(s) || "Mineshaft_index".equals(s)) return new NBTTagCompound(); // Paper
         File file = this.a(s);
         PushbackInputStream pushbackinputstream = new PushbackInputStream(new FileInputStream(file), 2);
         Throwable throwable = null;
@@ -167,9 +162,7 @@ public class WorldPersistentData {
         while (iterator.hasNext()) {
             PersistentBase persistentbase = (PersistentBase) iterator.next();
 
-            if (persistentbase != null) {
-                persistentbase.a(this.a(persistentbase.getId()));
-            }
+            persistentbase.a(this.a(persistentbase.getId()));
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/WorldProvider.java b/src/main/java/net/minecraft/server/WorldProvider.java
index d65e10cb..28f9f377 100644
--- a/src/main/java/net/minecraft/server/WorldProvider.java
+++ b/src/main/java/net/minecraft/server/WorldProvider.java
@@ -60,6 +60,9 @@ public abstract class WorldProvider {
 
     public void k() {}
 
+    // MCMT | Helper
+    public void doBossBattle(){ this.l(); }
+
     public void l() {}
 
     public abstract ChunkGenerator<?> getChunkGenerator();
diff --git a/src/main/java/net/minecraft/server/WorldProviderNormal.java b/src/main/java/net/minecraft/server/WorldProviderNormal.java
index 86188711..e349df44 100644
--- a/src/main/java/net/minecraft/server/WorldProviderNormal.java
+++ b/src/main/java/net/minecraft/server/WorldProviderNormal.java
@@ -52,15 +52,14 @@ public class WorldProviderNormal extends WorldProvider {
             WorldChunkManager worldchunkmanager = null;
             JsonElement jsonelement = (JsonElement) Dynamic.convert(DynamicOpsNBT.a, JsonOps.INSTANCE, this.b.getWorldData().getGeneratorOptions());
             JsonObject jsonobject = jsonelement.getAsJsonObject();
-            JsonObject jsonobject1 = jsonobject.getAsJsonObject("biome_source");
 
-            if (jsonobject1 != null && jsonobject1.has("type") && jsonobject1.has("options")) {
-                BiomeLayout<?, ?> biomelayout3 = (BiomeLayout) IRegistry.BIOME_SOURCE_TYPE.get(new MinecraftKey(jsonobject1.getAsJsonPrimitive("type").getAsString()));
-                JsonObject jsonobject2 = jsonobject1.getAsJsonObject("options");
+            if (jsonobject.has("biome_source") && jsonobject.getAsJsonObject("biome_source").has("type") && jsonobject.getAsJsonObject("biome_source").has("options")) {
+                BiomeLayout<?, ?> biomelayout3 = (BiomeLayout) IRegistry.BIOME_SOURCE_TYPE.get(new MinecraftKey(jsonobject.getAsJsonObject("biome_source").getAsJsonPrimitive("type").getAsString()));
+                JsonObject jsonobject1 = jsonobject.getAsJsonObject("biome_source").getAsJsonObject("options");
                 BiomeBase[] abiomebase = new BiomeBase[]{Biomes.OCEAN};
 
-                if (jsonobject2.has("biomes")) {
-                    JsonArray jsonarray = jsonobject2.getAsJsonArray("biomes");
+                if (jsonobject1.has("biomes")) {
+                    JsonArray jsonarray = jsonobject1.getAsJsonArray("biomes");
 
                     abiomebase = jsonarray.size() > 0 ? new BiomeBase[jsonarray.size()] : new BiomeBase[]{Biomes.OCEAN};
 
@@ -76,7 +75,7 @@ public class WorldProviderNormal extends WorldProvider {
                 }
 
                 if (BiomeLayout.a == biomelayout3) {
-                    int j = jsonobject2.has("size") ? jsonobject2.getAsJsonPrimitive("size").getAsInt() : 2;
+                    int j = jsonobject1.has("size") ? jsonobject1.getAsJsonPrimitive("size").getAsInt() : 2;
                     BiomeLayoutCheckerboardConfiguration biomelayoutcheckerboardconfiguration = ((BiomeLayoutCheckerboardConfiguration) biomelayout2.a()).a(abiomebase).a(j);
 
                     worldchunkmanager = biomelayout2.a(biomelayoutcheckerboardconfiguration);
@@ -95,25 +94,23 @@ public class WorldProviderNormal extends WorldProvider {
 
             IBlockData iblockdata = Blocks.STONE.getBlockData();
             IBlockData iblockdata1 = Blocks.WATER.getBlockData();
-            JsonObject jsonobject3 = jsonobject.getAsJsonObject("chunk_generator");
 
-            if (jsonobject3 != null && jsonobject3.has("options")) {
-                JsonObject jsonobject4 = jsonobject3.getAsJsonObject("options");
+            if (jsonobject.has("chunk_generator") && jsonobject.getAsJsonObject("chunk_generator").has("options")) {
                 String s;
 
-                if (jsonobject4.has("default_block")) {
-                    s = jsonobject4.getAsJsonPrimitive("default_block").getAsString();
+                if (jsonobject.getAsJsonObject("chunk_generator").getAsJsonObject("options").has("default_block")) {
+                    s = jsonobject.getAsJsonObject("chunk_generator").getAsJsonObject("options").getAsJsonPrimitive("default_block").getAsString();
                     iblockdata = ((Block) IRegistry.BLOCK.get(new MinecraftKey(s))).getBlockData();
                 }
 
-                if (jsonobject4.has("default_fluid")) {
-                    s = jsonobject4.getAsJsonPrimitive("default_fluid").getAsString();
+                if (jsonobject.getAsJsonObject("chunk_generator").getAsJsonObject("options").has("default_fluid")) {
+                    s = jsonobject.getAsJsonObject("chunk_generator").getAsJsonObject("options").getAsJsonPrimitive("default_fluid").getAsString();
                     iblockdata1 = ((Block) IRegistry.BLOCK.get(new MinecraftKey(s))).getBlockData();
                 }
             }
 
-            if (jsonobject3 != null && jsonobject3.has("type")) {
-                ChunkGeneratorType<?, ?> chunkgeneratortype5 = (ChunkGeneratorType) IRegistry.CHUNK_GENERATOR_TYPE.get(new MinecraftKey(jsonobject3.getAsJsonPrimitive("type").getAsString()));
+            if (jsonobject.has("chunk_generator") && jsonobject.getAsJsonObject("chunk_generator").has("type")) {
+                ChunkGeneratorType<?, ?> chunkgeneratortype5 = (ChunkGeneratorType) IRegistry.CHUNK_GENERATOR_TYPE.get(new MinecraftKey(jsonobject.getAsJsonObject("chunk_generator").getAsJsonPrimitive("type").getAsString()));
 
                 if (ChunkGeneratorType.b == chunkgeneratortype5) {
                     GeneratorSettingsNether generatorsettingsnether = (GeneratorSettingsNether) chunkgeneratortype2.a();
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index b8e964c9..e0056dc0 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -1,8 +1,5 @@
 package net.minecraft.server;
 
-import co.aikar.timings.TimingHistory;
-import co.aikar.timings.Timings;
-
 import com.destroystokyo.paper.PaperWorldConfig;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
@@ -10,17 +7,12 @@ import com.google.common.collect.Queues;
 import com.google.common.collect.Sets;
 import it.unimi.dsi.fastutil.ints.Int2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
-import it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.longs.LongSets;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
-import java.io.BufferedWriter;
-import java.io.IOException;
-import java.io.Writer;
-import java.nio.file.Files;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -59,14 +51,15 @@ public class WorldServer extends World {
     private final MinecraftServer server;
     private final WorldNBTStorage dataManager;
     public boolean savingDisabled;
-    private boolean C;
+    private boolean D;
     private int emptyTime;
     private final PortalTravelAgent portalTravelAgent;
     private final TickListServer<Block> nextTickListBlock;
     private final TickListServer<FluidType> nextTickListFluid;
-    private final Set<NavigationAbstract> H;
+    private final Set<NavigationAbstract> I;
     protected final PersistentRaid c;
-    private final ObjectLinkedOpenHashSet<BlockActionData> I;
+    protected final VillageSiege siegeManager;
+    private final ObjectLinkedOpenHashSet<BlockActionData> J;
     private boolean ticking;
     @Nullable
     private final MobSpawnerTrader mobSpawnerTrader;
@@ -90,7 +83,7 @@ public class WorldServer extends World {
                 chunkGenerator = worldprovider.getChunkGenerator();
             }
 
-            return new ChunkProviderServer((WorldServer) world, worldnbtstorage.getDirectory(), worldnbtstorage.getDataFixer(), worldnbtstorage.f(), executor, chunkGenerator, world.spigotConfig.viewDistance, worldloadlistener, () -> { // Spigot
+            return new ChunkProviderServer((WorldServer) world, worldnbtstorage.getDirectory(), worldnbtstorage.getDataFixer(), worldnbtstorage.f(), executor, chunkGenerator, world.spigotConfig.viewDistance, world.spigotConfig.viewDistance - 2, worldloadlistener, () -> { // Spigot
                 return minecraftserver.getWorldServer(DimensionManager.OVERWORLD).getWorldPersistentData();
             });
             // CraftBukkit end
@@ -104,14 +97,15 @@ public class WorldServer extends World {
         this.nextTickListFluid = new TickListServer<>(this, (fluidtype) -> {
             return fluidtype == null || fluidtype == FluidTypes.EMPTY;
         }, IRegistry.FLUID::getKey, IRegistry.FLUID::get, this::a, "Fluids"); // Paper - Timings
-        this.H = Sets.newHashSet();
-        this.I = new ObjectLinkedOpenHashSet();
+        this.I = Sets.newHashSet();
+        this.siegeManager = new VillageSiege(this);
+        this.J = new ObjectLinkedOpenHashSet();
         this.dataManager = worldnbtstorage;
         this.server = minecraftserver;
         this.portalTravelAgent = new PortalTravelAgent(this);
         this.M();
         this.N();
-        this.getWorldBorder().a(minecraftserver.aw());
+        this.getWorldBorder().a(minecraftserver.av());
         this.c = (PersistentRaid) this.getWorldPersistentData().a(() -> {
             return new PersistentRaid(this);
         }, PersistentRaid.a(this.worldProvider));
@@ -121,6 +115,13 @@ public class WorldServer extends World {
 
         this.mobSpawnerTrader = this.worldProvider.getDimensionManager().getType() == DimensionManager.OVERWORLD ? new MobSpawnerTrader(this) : null; // CraftBukkit - getType()
         this.getServer().addWorld(this.getWorld()); // CraftBukkit
+
+        this.partitionManager = new PartitionManager(this);
+    }
+
+    private PartitionManager partitionManager;
+    public PartitionManager getPartitionManager() {
+        return this.partitionManager;
     }
 
     public void doTick(BooleanSupplier booleansupplier) {
@@ -134,8 +135,8 @@ public class WorldServer extends World {
         int i;
 
         if (this.worldProvider.g()) {
-            if (this.getGameRules().getBoolean(GameRules.DO_WEATHER_CYCLE)) {
-                int j = this.worldData.z();
+            if (this.getGameRules().getBoolean("doWeatherCycle")) {
+                int j = this.worldData.A();
 
                 i = this.worldData.getThunderDuration();
                 int k = this.worldData.getWeatherDuration();
@@ -242,11 +243,11 @@ public class WorldServer extends World {
             this.getWorldData().setDifficulty(EnumDifficulty.HARD);
         }
 
-        if (this.C && this.players.stream().noneMatch((entityplayer) -> {
+        if (this.D && this.players.stream().noneMatch((entityplayer) -> {
             return !entityplayer.isSpectator() && !entityplayer.isDeeplySleeping() && !entityplayer.fauxSleeping; // CraftBukkit
         })) {
-            this.C = false;
-            if (this.getGameRules().getBoolean(GameRules.DO_DAYLIGHT_CYCLE)) {
+            this.D = false;
+            if (this.getGameRules().getBoolean("doDaylightCycle")) {
                 long l = this.worldData.getDayTime() + 24000L;
 
                 this.setDayTime(l - l % 24000L);
@@ -255,7 +256,7 @@ public class WorldServer extends World {
             this.players.stream().filter(EntityLiving::isSleeping).forEach((entityplayer) -> {
                 entityplayer.wakeup(false, false, true);
             });
-            if (this.getGameRules().getBoolean(GameRules.DO_WEATHER_CYCLE)) {
+            if (this.getGameRules().getBoolean("doWeatherCycle")) {
                 this.clearWeather();
             }
         }
@@ -263,28 +264,28 @@ public class WorldServer extends World {
         this.M();
         this.a();
         gameprofilerfiller.exitEnter("chunkSource");
-        this.timings.chunkProviderTick.startTiming(); // Paper - timings
         this.getChunkProvider().tick(booleansupplier);
-        this.timings.chunkProviderTick.stopTiming(); // Paper - timings
         gameprofilerfiller.exitEnter("tickPending");
         timings.scheduledBlocks.startTiming(); // Spigot
         if (this.worldData.getType() != WorldType.DEBUG_ALL_BLOCK_STATES) {
-            this.nextTickListBlock.b();
-            this.nextTickListFluid.b();
+            this.nextTickListBlock.doTick();
+            this.nextTickListFluid.doTick();
         }
         timings.scheduledBlocks.stopTiming(); // Spigot
 
+        gameprofilerfiller.exitEnter("village");
+        timings.doVillages.startTiming(); // Spigot
+        this.siegeManager.a();
+        timings.doVillages.stopTiming(); // Spigot
         gameprofilerfiller.exitEnter("portalForcer");
         timings.doPortalForcer.startTiming(); // Spigot
         this.portalTravelAgent.a(this.getTime());
         timings.doPortalForcer.stopTiming(); // Spigot
         gameprofilerfiller.exitEnter("raid");
-        this.timings.raids.startTiming(); // Paper - timings
         this.c.a();
         if (this.mobSpawnerTrader != null) {
             this.mobSpawnerTrader.a();
         }
-        this.timings.raids.stopTiming(); // Paper - timings
 
         gameprofilerfiller.exitEnter("blockEvents");
         timings.doSounds.startTiming(); // Spigot
@@ -299,91 +300,21 @@ public class WorldServer extends World {
         }
 
         if (flag3 || this.emptyTime++ < 300) {
-            timings.tickEntities.startTiming(); // Spigot
-            this.worldProvider.l();
-            gameprofilerfiller.enter("global");
-
+            
             Entity entity;
-
-            for (i = 0; i < this.globalEntityList.size(); ++i) {
-                entity = (Entity) this.globalEntityList.get(i);
-                // CraftBukkit start - Fixed an NPE
-                if (entity == null) {
-                    continue;
-                }
-                // CraftBukkit end
-                this.a((entity1) -> {
-                    ++entity1.ticksLived;
-                    entity1.tick();
-                }, entity);
-                if (entity.dead) {
-                    this.globalEntityList.remove(i--);
-                }
-            }
-
-            gameprofilerfiller.exitEnter("regular");
-            this.tickingEntities = true;
-            ObjectIterator objectiterator = this.entitiesById.int2ObjectEntrySet().iterator();
-
-            org.spigotmc.ActivationRange.activateEntities(this); // Spigot
-            timings.entityTick.startTiming(); // Spigot
-            TimingHistory.entityTicks += this.globalEntityList.size(); // Paper
-            while (objectiterator.hasNext()) {
-                Entry<Entity> entry = (Entry) objectiterator.next();
-                Entity entity1 = (Entity) entry.getValue();
-                Entity entity2 = entity1.getVehicle();
-
-                /* CraftBukkit start - We prevent spawning in general, so this butchering is not needed
-                if (!this.server.getSpawnAnimals() && (entity1 instanceof EntityAnimal || entity1 instanceof EntityWaterAnimal)) {
-                    entity1.die();
-                }
-
-                if (!this.server.getSpawnNPCs() && entity1 instanceof NPC) {
-                    entity1.die();
-                }
-                // CraftBukkit end */
-
-                if (entity2 != null) {
-                    if (!entity2.dead && entity2.w(entity1)) {
-                        continue;
-                    }
-
-                    entity1.stopRiding();
-                }
-
-                gameprofilerfiller.enter("tick");
-                if (!entity1.dead && !(entity1 instanceof EntityComplexPart)) {
-                    this.a(this::entityJoinedWorld, entity1);
-                    ++TimingHistory.entityTicks; // Paper
-                }
-
-                gameprofilerfiller.exit();
-                gameprofilerfiller.enter("remove");
-                if (entity1.dead) {
-                    this.removeEntityFromChunk(entity1);
-                    objectiterator.remove();
-                    this.unregisterEntity(entity1);
-                }
-
-                gameprofilerfiller.exit();
-            }
-            timings.entityTick.stopTiming(); // Spigot
-
-            this.tickingEntities = false;
-
-            try (co.aikar.timings.Timing ignored = this.timings.newEntities.startTiming()) { // Paper - timings
             while ((entity = (Entity) this.entitiesToAdd.poll()) != null) {
                 this.registerEntity(entity);
             }
-            } // Paper - timings
-
-            gameprofilerfiller.exit();
-            timings.tickEntities.stopTiming(); // Spigot
+            
             this.tickBlockEntities();
         }
 
         gameprofilerfiller.exit();
     }
+    
+    public void tickPartition(int index) {
+        this.getChunkProvider().tickPartition(index, this.getPartitionManager());
+    }
 
     public void a(Chunk chunk, int i) {
         ChunkCoordIntPair chunkcoordintpair = chunk.getPos();
@@ -399,7 +330,7 @@ public class WorldServer extends World {
             blockposition = this.a(this.a(j, 0, k, 15));
             if (this.isRainingAt(blockposition)) {
                 DifficultyDamageScaler difficultydamagescaler = this.getDamageScaler(blockposition);
-                boolean flag1 = this.getGameRules().getBoolean(GameRules.DO_MOB_SPAWNING) && this.random.nextDouble() < (double) difficultydamagescaler.b() * paperConfig.skeleHorseSpawnChance; // Paper
+                boolean flag1 = this.getGameRules().getBoolean("doMobSpawning") && this.random.nextDouble() < (double) difficultydamagescaler.b() * paperConfig.skeleHorseSpawnChance; // Paper;
 
                 if (flag1) {
                     EntityHorseSkeleton entityhorseskeleton = (EntityHorseSkeleton) EntityTypes.SKELETON_HORSE.a((World) this);
@@ -455,9 +386,9 @@ public class WorldServer extends World {
                             iblockdata.b((World) this, blockposition2, this.random);
                         }
 
-                        Fluid fluid = iblockdata.p();
+                        Fluid fluid = chunksection.b(blockposition2.getX() - j, blockposition2.getY() - j1, blockposition2.getZ() - k);
 
-                        if (fluid.h()) {
+                        if (fluid.g()) {
                             fluid.b(this, blockposition2, this.random);
                         }
 
@@ -493,7 +424,7 @@ public class WorldServer extends World {
     }
 
     public void everyoneSleeping() {
-        this.C = false;
+        this.D = false;
         if (!this.players.isEmpty()) {
             int i = 0;
             int j = 0;
@@ -509,7 +440,7 @@ public class WorldServer extends World {
                 }
             }
 
-            this.C = j > 0 && j >= this.players.size() - i;
+            this.D = j > 0 && j >= this.players.size() - i;
         }
 
     }
@@ -542,7 +473,7 @@ public class WorldServer extends World {
         this.emptyTime = 0;
     }
 
-    private void a(NextTickListEntry<FluidType> nextticklistentry) {
+    public void a(NextTickListEntry<FluidType> nextticklistentry) {
         Fluid fluid = this.getFluid(nextticklistentry.a);
 
         if (fluid.getType() == nextticklistentry.b()) {
@@ -551,7 +482,7 @@ public class WorldServer extends World {
 
     }
 
-    private void b(NextTickListEntry<Block> nextticklistentry) {
+    public void b(NextTickListEntry<Block> nextticklistentry) {
         IBlockData iblockdata = this.getType(nextticklistentry.a);
 
         if (iblockdata.getBlock() == nextticklistentry.b()) {
@@ -561,7 +492,7 @@ public class WorldServer extends World {
     }
 
     public void entityJoinedWorld(Entity entity) {
-        if (entity instanceof EntityHuman || this.getChunkProvider().a(entity)) {
+        if (entity instanceof EntityHuman) {
             // Spigot start
             if (!org.spigotmc.ActivationRange.checkIfActive(entity)) {
                 entity.ticksLived++;
@@ -642,7 +573,7 @@ public class WorldServer extends World {
                 this.getChunkAt(entity.chunkX, entity.chunkZ).a(entity, entity.chunkY);
             }
 
-            if (!entity.valid && !entity.bU() && !this.isChunkLoaded(i, k)) { // Paper - always load chunks to register valid entities location
+            if (!entity.valid && !entity.bT() && !this.isChunkLoaded(i, k)) { // Paper - always load chunks to register valid entities location
                 entity.inChunk = false;
             } else {
                 this.getChunkAt(i, k).a(entity);
@@ -760,9 +691,8 @@ public class WorldServer extends World {
         ChunkProviderServer chunkproviderserver = this.getChunkProvider();
 
         if (!flag1) {
-            if (flag || server.serverAutoSave) org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(getWorld())); // CraftBukkit // Paper - full saves only
+            org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(getWorld())); // CraftBukkit
             try (co.aikar.timings.Timing ignored = timings.worldSave.startTiming()) { // Paper
-            if (flag || server.serverAutoSave) { // Paper
             if (iprogressupdate != null) {
                 iprogressupdate.a(new ChatMessage("menu.savingLevel", new Object[0]));
             }
@@ -771,25 +701,12 @@ public class WorldServer extends World {
             if (iprogressupdate != null) {
                 iprogressupdate.c(new ChatMessage("menu.savingChunks", new Object[0]));
             }
-            } // Paper
 
             timings.worldSaveChunks.startTiming(); // Paper
             chunkproviderserver.save(flag);
             timings.worldSaveChunks.stopTiming(); // Paper
             } // Paper
         }
-
-        if (flag || server.serverAutoSave) { // Paper
-        // CraftBukkit start - moved from MinecraftServer.saveChunks
-        // PAIL - rename
-        WorldServer worldserver1 = this;
-        WorldData worlddata = worldserver1.getWorldData();
-
-        worldserver1.getWorldBorder().a(worlddata);
-        worlddata.c(this.server.getBossBattleCustomData().c());
-        worldserver1.getDataManager().saveWorldData(worlddata, this.server.getPlayerList().r());
-        // CraftBukkit end
-        } // Paper
     }
 
     protected void k_() throws ExceptionWorldConflict {
@@ -858,26 +775,23 @@ public class WorldServer extends World {
         while (objectiterator.hasNext()) {
             Entity entity = (Entity) objectiterator.next();
             if (entity.shouldBeRemoved) continue; // Paper
+            // CraftBukkit start - Split out persistent check, don't apply it to special persistent mobs
             if (entity instanceof EntityInsentient) {
                 EntityInsentient entityinsentient = (EntityInsentient) entity;
-
-                // CraftBukkit - Split out persistent check, don't apply it to special persistent mobs
                 if (entityinsentient.isTypeNotPersistent(0) && entityinsentient.isPersistent()) {
                     continue;
                 }
             }
 
-            EnumCreatureType enumcreaturetype = entity.getEntityType().e();
+            if (true || !(entity instanceof EntityInsentient) || !((EntityInsentient) entity).isPersistent()) {
+                // CraftBukkit end
+                EnumCreatureType enumcreaturetype = entity.getEntityType().d();
 
-            if (enumcreaturetype != EnumCreatureType.MISC && this.getChunkProvider().b(entity)) {
-                // Paper start - Only count natural spawns
-                if (!this.paperConfig.countAllMobsForSpawning &&
-                    !(entity.spawnReason == CreatureSpawnEvent.SpawnReason.NATURAL ||
-                        entity.spawnReason == CreatureSpawnEvent.SpawnReason.CHUNK_GEN)) {
-                    continue;
+                if (enumcreaturetype != EnumCreatureType.MISC && this.getChunkProvider().a(entity)) {
+                    object2intmap.computeInt(enumcreaturetype, (enumcreaturetype1, integer) -> {
+                        return 1 + (integer == null ? 0 : integer);
+                    });
                 }
-                // Paper end
-                object2intmap.mergeInt(enumcreaturetype, 1, Integer::sum);
             }
         }
 
@@ -955,7 +869,7 @@ public class WorldServer extends World {
 
     // CraftBukkit start
     private boolean addEntity0(Entity entity, CreatureSpawnEvent.SpawnReason spawnReason) {
-        org.spigotmc.AsyncCatcher.catchOp("entity add"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp( "entity add"); // Spigot
         if (entity.spawnReason == null) entity.spawnReason = spawnReason; // Paper
         if (entity.valid) { MinecraftServer.LOGGER.error("Attempted Double World add on " + entity, new Throwable()); return true; } // Paper
         if (entity.dead) {
@@ -1063,7 +977,7 @@ public class WorldServer extends World {
 
                 if (!(entity instanceof EntityPlayer)) {
                     if (this.tickingEntities) {
-                        throw new IllegalStateException("Removing entity while ticking!");
+                        //throw new IllegalStateException("Removing entity while ticking!");
                     }
 
                     this.entitiesById.remove(entity.getId());
@@ -1075,7 +989,6 @@ public class WorldServer extends World {
     }
 
     public void unregisterEntity(Entity entity) {
-        org.spigotmc.AsyncCatcher.catchOp("entity unregister"); // Spigot
         // Spigot start
         if ( entity instanceof EntityHuman )
         {
@@ -1101,6 +1014,8 @@ public class WorldServer extends World {
         }
         // Spigot end
 
+        this.getPartitionManager().removeEntity(entity);
+        
         if (entity instanceof EntityEnderDragon) {
             EntityComplexPart[] aentitycomplexpart = ((EntityEnderDragon) entity).dT();
             int i = aentitycomplexpart.length;
@@ -1122,66 +1037,64 @@ public class WorldServer extends World {
 
         this.getScoreboard().a(entity);
         if (entity instanceof EntityInsentient) {
-            this.H.remove(((EntityInsentient) entity).getNavigation());
+            this.I.remove(((EntityInsentient) entity).getNavigation());
         }
 
         entity.valid = false; // CraftBukkit
     }
 
     private void registerEntity(Entity entity) {
-        org.spigotmc.AsyncCatcher.catchOp("entity register"); // Spigot
-        if (this.tickingEntities) {
-            this.entitiesToAdd.add(entity);
-        } else {
-            this.entitiesById.put(entity.getId(), entity);
-            if (entity instanceof EntityEnderDragon) {
-                EntityComplexPart[] aentitycomplexpart = ((EntityEnderDragon) entity).dT();
-                int i = aentitycomplexpart.length;
+        
+        this.getPartitionManager().addEntity(entity);
+        
+        this.entitiesById.put(entity.getId(), entity);
+        if (entity instanceof EntityEnderDragon) {
+            EntityComplexPart[] aentitycomplexpart = ((EntityEnderDragon) entity).dT();
+            int i = aentitycomplexpart.length;
 
-                for (int j = 0; j < i; ++j) {
-                    EntityComplexPart entitycomplexpart = aentitycomplexpart[j];
+            for (int j = 0; j < i; ++j) {
+                EntityComplexPart entitycomplexpart = aentitycomplexpart[j];
 
-                    this.entitiesById.put(entitycomplexpart.getId(), entitycomplexpart);
-                }
+                this.entitiesById.put(entitycomplexpart.getId(), entitycomplexpart);
             }
+        }
 
-            if (DEBUG_ENTITIES) {
-                entity.addedToWorldStack = getAddToWorldStackTrace(entity);
-            }
+        if (DEBUG_ENTITIES) {
+            entity.addedToWorldStack = getAddToWorldStackTrace(entity);
+        }
 
-            Entity old = this.entitiesByUUID.put(entity.getUniqueID(), entity);
-            if (old != null && old.getId() != entity.getId() && old.valid && entity.world.paperConfig.duplicateUUIDMode != com.destroystokyo.paper.PaperWorldConfig.DuplicateUUIDMode.NOTHING) { // Paper
-                Logger logger = LogManager.getLogger();
-                logger.error("Overwrote an existing entity " + old + " with " + entity);
-                if (DEBUG_ENTITIES) {
-                    if (old.addedToWorldStack != null) {
-                        old.addedToWorldStack.printStackTrace();
-                    } else {
-                        logger.error("Oddly, the old entity was not added to the world in the normal way. Plugins?");
-                    }
-                    entity.addedToWorldStack.printStackTrace();
+        Entity old = this.entitiesByUUID.put(entity.getUniqueID(), entity);
+        if (old != null && old.getId() != entity.getId() && old.valid && entity.world.paperConfig.duplicateUUIDMode != com.destroystokyo.paper.PaperWorldConfig.DuplicateUUIDMode.NOTHING) { // Paper
+            Logger logger = LogManager.getLogger();
+            logger.error("Overwrote an existing entity " + old + " with " + entity);
+            if (DEBUG_ENTITIES) {
+                if (old.addedToWorldStack != null) {
+                    old.addedToWorldStack.printStackTrace();
+                } else {
+                    logger.error("Oddly, the old entity was not added to the world in the normal way. Plugins?");
                 }
+                entity.addedToWorldStack.printStackTrace();
             }
-
-            this.getChunkProvider().addEntity(entity);
-            if (entity instanceof EntityInsentient) {
-                this.H.add(((EntityInsentient) entity).getNavigation());
-            }
-            entity.valid = true; // CraftBukkit
-            // Paper start - Set origin location when the entity is being added to the world
-            if (entity.origin == null) {
-                entity.origin = entity.getBukkitEntity().getLocation();
-            }
-            // Paper end
-            entity.shouldBeRemoved = false; // Paper - shouldn't be removed after being re-added
-            new com.destroystokyo.paper.event.entity.EntityAddToWorldEvent(entity.getBukkitEntity()).callEvent(); // Paper - fire while valid
         }
 
+        this.getChunkProvider().addEntity(entity);
+        if (entity instanceof EntityInsentient) {
+            this.I.add(((EntityInsentient) entity).getNavigation());
+        }
+        entity.valid = true; // CraftBukkit
+        // Paper start - Set origin location when the entity is being added to the world
+        if (entity.origin == null) {
+            entity.origin = entity.getBukkitEntity().getLocation();
+        }
+        // Paper end
+        entity.shouldBeRemoved = false; // Paper - shouldn't be removed after being re-added
+        new com.destroystokyo.paper.event.entity.EntityAddToWorldEvent(entity.getBukkitEntity()).callEvent(); // Paper - fire while valid
     }
 
     public void removeEntity(Entity entity) {
+        org.spigotmc.AsyncCatcher.catchOp( "entity remove"); // Spigot
         if (this.tickingEntities) {
-            throw new IllegalStateException("Removing entity while ticking!");
+            //throw new IllegalStateException("Removing entity while ticking!");
         } else {
             new com.destroystokyo.paper.event.entity.EntityRemoveFromWorldEvent(entity.getBukkitEntity()).callEvent(); // Paper - fire while valid
             this.removeEntityFromChunk(entity);
@@ -1191,7 +1104,7 @@ public class WorldServer extends World {
         }
     }
 
-    private void removeEntityFromChunk(Entity entity) {
+    public void removeEntityFromChunk(Entity entity) {
         IChunkAccess ichunkaccess = this.getChunkAt(entity.chunkX, entity.chunkZ, ChunkStatus.FULL, false);
 
         if (ichunkaccess instanceof Chunk) {
@@ -1256,12 +1169,12 @@ public class WorldServer extends World {
     }
 
     @Override
-    public void playSound(@Nullable EntityHuman entityhuman, double d0, double d1, double d2, SoundEffect soundeffect, SoundCategory soundcategory, float f, float f1) {
+    public void a(@Nullable EntityHuman entityhuman, double d0, double d1, double d2, SoundEffect soundeffect, SoundCategory soundcategory, float f, float f1) {
         this.server.getPlayerList().sendPacketNearby(entityhuman, d0, d1, d2, f > 1.0F ? (double) (16.0F * f) : 16.0D, this.worldProvider.getDimensionManager(), new PacketPlayOutNamedSoundEffect(soundeffect, soundcategory, d0, d1, d2, f, f1));
     }
 
     @Override
-    public void playSound(@Nullable EntityHuman entityhuman, Entity entity, SoundEffect soundeffect, SoundCategory soundcategory, float f, float f1) {
+    public void a(@Nullable EntityHuman entityhuman, Entity entity, SoundEffect soundeffect, SoundCategory soundcategory, float f, float f1) {
         this.server.getPlayerList().sendPacketNearby(entityhuman, entity.locX, entity.locY, entity.locZ, f > 1.0F ? (double) (16.0F * f) : 16.0D, this.worldProvider.getDimensionManager(), new PacketPlayOutEntitySound(soundeffect, soundcategory, entity, f, f1));
     }
 
@@ -1282,13 +1195,13 @@ public class WorldServer extends World {
         VoxelShape voxelshape1 = iblockdata1.getCollisionShape(this, blockposition);
 
         if (VoxelShapes.c(voxelshape, voxelshape1, OperatorBoolean.NOT_SAME)) {
-            Iterator iterator = this.H.iterator();
+            Iterator iterator = this.I.iterator();
 
             while (iterator.hasNext()) {
                 NavigationAbstract navigationabstract = (NavigationAbstract) iterator.next();
 
                 if (!navigationabstract.j()) {
-                    navigationabstract.b(blockposition);
+                    navigationabstract.c(blockposition);
                 }
             }
 
@@ -1344,12 +1257,12 @@ public class WorldServer extends World {
 
     @Override
     public void playBlockAction(BlockPosition blockposition, Block block, int i, int j) {
-        this.I.add(new BlockActionData(blockposition, block, i, j));
+        this.J.add(new BlockActionData(blockposition, block, i, j));
     }
 
     private void ae() {
-        while (!this.I.isEmpty()) {
-            BlockActionData blockactiondata = (BlockActionData) this.I.removeFirst();
+        while (!this.J.isEmpty()) {
+            BlockActionData blockactiondata = (BlockActionData) this.J.removeFirst();
 
             if (this.a(blockactiondata)) {
                 this.server.getPlayerList().sendPacketNearby((EntityHuman) null, (double) blockactiondata.a().getX(), (double) blockactiondata.a().getY(), (double) blockactiondata.a().getZ(), 64.0D, this, new PacketPlayOutBlockAction(blockactiondata.a(), blockactiondata.b(), blockactiondata.c(), blockactiondata.d()));
@@ -1364,14 +1277,16 @@ public class WorldServer extends World {
         return iblockdata.getBlock() == blockactiondata.b() ? iblockdata.a(this, blockactiondata.a(), blockactiondata.c(), blockactiondata.d()) : false;
     }
 
+    // MCMT
     @Override
-    public TickListServer<Block> getBlockTickList() {
-        return this.nextTickListBlock;
+    public PartitionedTickList<Block> getBlockTickList() {
+        return this.partitionManager.getPartionBlockTickList();
     }
 
+    // MCMT
     @Override
-    public TickListServer<FluidType> getFluidTickList() {
-        return this.nextTickListFluid;
+    public PartitionedTickList<FluidType> getFluidTickList() {
+        return this.partitionManager.getPartionFluidTickList();
     }
 
     @Nonnull
@@ -1466,7 +1381,7 @@ public class WorldServer extends World {
     @Override
     public void a(long i) {
         super.a(i);
-        this.worldData.y().a(this.server, i);
+        this.worldData.z().a(this.server, i);
     }
 
     @Override
@@ -1512,68 +1427,20 @@ public class WorldServer extends World {
 
     // Paper start - helper function for configurable spawn radius
     public void addTicketsForSpawn(int radiusInBlocks, BlockPosition spawn) {
-        // In order to respect vanilla behavior, which is ensuring everything but the spawn border can tick, we add tickets
-        // with level 31 for the non-border spawn chunks
         ChunkProviderServer chunkproviderserver = this.getChunkProvider();
-        int tickRadius = radiusInBlocks - 16;
-
-        // add ticking chunks
-        for (int x = -tickRadius; x <= tickRadius; x += 16) {
-            for (int z = -tickRadius; z <= tickRadius; z += 16) {
-                // radius of 2 will have the current chunk be level 31
-                chunkproviderserver.addTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, z)), 2, Unit.INSTANCE);
+        for (int x = -radiusInBlocks; x <= radiusInBlocks; x+= 16) {
+            for (int z = -radiusInBlocks; z <= radiusInBlocks; z += 16) {
+                chunkproviderserver.addTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, z)), 1, Unit.INSTANCE);
             }
         }
-
-        // add border chunks
-
-        // add border along x axis (including corner chunks)
-        for (int x = -radiusInBlocks; x <= radiusInBlocks; x += 16) {
-            // top
-            chunkproviderserver.addTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, radiusInBlocks)), 1, Unit.INSTANCE); // level 32
-            // bottom
-            chunkproviderserver.addTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, -radiusInBlocks)), 1, Unit.INSTANCE); // level 32
-        }
-
-        // add border along z axis (excluding corner chunks)
-        for (int z = -radiusInBlocks + 16; z < radiusInBlocks; z += 16) {
-            // right
-            chunkproviderserver.addTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(radiusInBlocks, 0, z)), 1, Unit.INSTANCE); // level 32
-            // left
-            chunkproviderserver.addTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(-radiusInBlocks, 0, z)), 1, Unit.INSTANCE); // level 32
-        }
     }
     public void removeTicketsForSpawn(int radiusInBlocks, BlockPosition spawn) {
-        // In order to respect vanilla behavior, which is ensuring everything but the spawn border can tick, we added tickets
-        // with level 31 for the non-border spawn chunks
         ChunkProviderServer chunkproviderserver = this.getChunkProvider();
-        int tickRadius = radiusInBlocks - 16;
-
-        // remove ticking chunks
-        for (int x = -tickRadius; x <= tickRadius; x += 16) {
-            for (int z = -tickRadius; z <= tickRadius; z += 16) {
-                // radius of 2 will have the current chunk be level 31
-                chunkproviderserver.removeTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, z)), 2, Unit.INSTANCE);
+        for (int x = -radiusInBlocks; x <= radiusInBlocks; x+= 16) {
+            for (int z = -radiusInBlocks; z <= radiusInBlocks; z += 16) {
+                chunkproviderserver.removeTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, z)), 1, Unit.INSTANCE);
             }
         }
-
-        // remove border chunks
-
-        // remove border along x axis (including corner chunks)
-        for (int x = -radiusInBlocks; x <= radiusInBlocks; x += 16) {
-            // top
-            chunkproviderserver.removeTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, radiusInBlocks)), 1, Unit.INSTANCE); // level 32
-            // bottom
-            chunkproviderserver.removeTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, -radiusInBlocks)), 1, Unit.INSTANCE); // level 32
-        }
-
-        // remove border along z axis (excluding corner chunks)
-        for (int z = -radiusInBlocks + 16; z < radiusInBlocks; z += 16) {
-            // right
-            chunkproviderserver.removeTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(radiusInBlocks, 0, z)), 1, Unit.INSTANCE); // level 32
-            // left
-            chunkproviderserver.removeTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(-radiusInBlocks, 0, z)), 1, Unit.INSTANCE); // level 32
-        }
     }
     // Paper end
 
@@ -1649,7 +1516,7 @@ public class WorldServer extends World {
     }
 
     public VillagePlace B() {
-        return this.getChunkProvider().j();
+        return this.getChunkProvider().i();
     }
 
     public boolean b_(BlockPosition blockposition) {
@@ -1674,7 +1541,9 @@ public class WorldServer extends World {
 
     @Nullable
     public Raid c_(BlockPosition blockposition) {
-        return this.c.a(blockposition, 9216);
+        Raid raid = this.c.a(blockposition, 9216);
+
+        return this.b_(blockposition) ? raid : null;
     }
 
     public boolean d_(BlockPosition blockposition) {
@@ -1684,194 +1553,4 @@ public class WorldServer extends World {
     public void a(ReputationEvent reputationevent, Entity entity, ReputationHandler reputationhandler) {
         reputationhandler.a(reputationevent, entity);
     }
-
-    public void a(java.nio.file.Path java_nio_file_path) throws IOException {
-        PlayerChunkMap playerchunkmap = this.getChunkProvider().playerChunkMap;
-        BufferedWriter bufferedwriter = Files.newBufferedWriter(java_nio_file_path.resolve("stats.txt"));
-        Throwable throwable = null;
-
-        try {
-            bufferedwriter.write(String.format("spawning_chunks: %d\n", playerchunkmap.e().b()));
-            ObjectIterator objectiterator = this.l().object2IntEntrySet().iterator();
-
-            while (objectiterator.hasNext()) {
-                it.unimi.dsi.fastutil.objects.Object2IntMap.Entry<EnumCreatureType> it_unimi_dsi_fastutil_objects_object2intmap_entry = (it.unimi.dsi.fastutil.objects.Object2IntMap.Entry) objectiterator.next();
-
-                bufferedwriter.write(String.format("spawn_count.%s: %d\n", ((EnumCreatureType) it_unimi_dsi_fastutil_objects_object2intmap_entry.getKey()).a(), it_unimi_dsi_fastutil_objects_object2intmap_entry.getIntValue()));
-            }
-
-            bufferedwriter.write(String.format("entities: %d\n", this.entitiesById.size()));
-            bufferedwriter.write(String.format("block_entities: %d\n", this.tileEntityListTick.size())); // Paper - remove unused list
-            bufferedwriter.write(String.format("block_ticks: %d\n", this.getBlockTickList().a()));
-            bufferedwriter.write(String.format("fluid_ticks: %d\n", this.getFluidTickList().a()));
-            bufferedwriter.write("distance_manager: " + playerchunkmap.e().c() + "\n");
-            bufferedwriter.write(String.format("pending_tasks: %d\n", this.getChunkProvider().f()));
-        } catch (Throwable throwable1) {
-            throwable = throwable1;
-            throw throwable1;
-        } finally {
-            if (bufferedwriter != null) {
-                if (throwable != null) {
-                    try {
-                        bufferedwriter.close();
-                    } catch (Throwable throwable2) {
-                        throwable.addSuppressed(throwable2);
-                    }
-                } else {
-                    bufferedwriter.close();
-                }
-            }
-
-        }
-
-        CrashReport crashreport = new CrashReport("Level dump", new Exception("dummy"));
-
-        this.a(crashreport);
-        BufferedWriter bufferedwriter1 = Files.newBufferedWriter(java_nio_file_path.resolve("example_crash.txt"));
-        Throwable throwable3 = null;
-
-        try {
-            bufferedwriter1.write(crashreport.e());
-        } catch (Throwable throwable4) {
-            throwable3 = throwable4;
-            throw throwable4;
-        } finally {
-            if (bufferedwriter1 != null) {
-                if (throwable3 != null) {
-                    try {
-                        bufferedwriter1.close();
-                    } catch (Throwable throwable5) {
-                        throwable3.addSuppressed(throwable5);
-                    }
-                } else {
-                    bufferedwriter1.close();
-                }
-            }
-
-        }
-
-        java.nio.file.Path java_nio_file_path1 = java_nio_file_path.resolve("chunks.csv");
-        BufferedWriter bufferedwriter2 = Files.newBufferedWriter(java_nio_file_path1);
-        Throwable throwable6 = null;
-
-        try {
-            playerchunkmap.a((Writer) bufferedwriter2);
-        } catch (Throwable throwable7) {
-            throwable6 = throwable7;
-            throw throwable7;
-        } finally {
-            if (bufferedwriter2 != null) {
-                if (throwable6 != null) {
-                    try {
-                        bufferedwriter2.close();
-                    } catch (Throwable throwable8) {
-                        throwable6.addSuppressed(throwable8);
-                    }
-                } else {
-                    bufferedwriter2.close();
-                }
-            }
-
-        }
-
-        java.nio.file.Path java_nio_file_path2 = java_nio_file_path.resolve("entities.csv");
-        BufferedWriter bufferedwriter3 = Files.newBufferedWriter(java_nio_file_path2);
-        Throwable throwable9 = null;
-
-        try {
-            a((Writer) bufferedwriter3, (Iterable) this.entitiesById.values());
-        } catch (Throwable throwable10) {
-            throwable9 = throwable10;
-            throw throwable10;
-        } finally {
-            if (bufferedwriter3 != null) {
-                if (throwable9 != null) {
-                    try {
-                        bufferedwriter3.close();
-                    } catch (Throwable throwable11) {
-                        throwable9.addSuppressed(throwable11);
-                    }
-                } else {
-                    bufferedwriter3.close();
-                }
-            }
-
-        }
-
-        java.nio.file.Path java_nio_file_path3 = java_nio_file_path.resolve("global_entities.csv");
-        BufferedWriter bufferedwriter4 = Files.newBufferedWriter(java_nio_file_path3);
-        Throwable throwable12 = null;
-
-        try {
-            a((Writer) bufferedwriter4, (Iterable) this.globalEntityList);
-        } catch (Throwable throwable13) {
-            throwable12 = throwable13;
-            throw throwable13;
-        } finally {
-            if (bufferedwriter4 != null) {
-                if (throwable12 != null) {
-                    try {
-                        bufferedwriter4.close();
-                    } catch (Throwable throwable14) {
-                        throwable12.addSuppressed(throwable14);
-                    }
-                } else {
-                    bufferedwriter4.close();
-                }
-            }
-
-        }
-
-        java.nio.file.Path java_nio_file_path4 = java_nio_file_path.resolve("block_entities.csv");
-        BufferedWriter bufferedwriter5 = Files.newBufferedWriter(java_nio_file_path4);
-        Throwable throwable15 = null;
-
-        try {
-            this.a((Writer) bufferedwriter5);
-        } catch (Throwable throwable16) {
-            throwable15 = throwable16;
-            throw throwable16;
-        } finally {
-            if (bufferedwriter5 != null) {
-                if (throwable15 != null) {
-                    try {
-                        bufferedwriter5.close();
-                    } catch (Throwable throwable17) {
-                        throwable15.addSuppressed(throwable17);
-                    }
-                } else {
-                    bufferedwriter5.close();
-                }
-            }
-
-        }
-
-    }
-
-    private static void a(Writer writer, Iterable<Entity> iterable) throws IOException {
-        CSVWriter csvwriter = CSVWriter.a().a("x").a("y").a("z").a("uuid").a("type").a("alive").a("display_name").a("custom_name").a(writer);
-        Iterator iterator = iterable.iterator();
-
-        while (iterator.hasNext()) {
-            Entity entity = (Entity) iterator.next();
-            IChatBaseComponent ichatbasecomponent = entity.getCustomName();
-            IChatBaseComponent ichatbasecomponent1 = entity.getScoreboardDisplayName();
-
-            csvwriter.a(entity.locX, entity.locY, entity.locZ, entity.getUniqueID(), IRegistry.ENTITY_TYPE.getKey(entity.getEntityType()), entity.isAlive(), ichatbasecomponent1.getString(), ichatbasecomponent != null ? ichatbasecomponent.getString() : null);
-        }
-
-    }
-
-    private void a(Writer writer) throws IOException {
-        CSVWriter csvwriter = CSVWriter.a().a("x").a("y").a("z").a("type").a(writer);
-        Iterator iterator = this.tileEntityListTick.iterator(); // Paper - remove unused list
-
-        while (iterator.hasNext()) {
-            TileEntity tileentity = (TileEntity) iterator.next();
-            BlockPosition blockposition = tileentity.getPosition();
-
-            csvwriter.a(blockposition.getX(), blockposition.getY(), blockposition.getZ(), IRegistry.BLOCK_ENTITY_TYPE.getKey(tileentity.q()));
-        }
-
-    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index bb3e4805..011e4045 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -3,7 +3,6 @@ package org.bukkit.craftbukkit;
 import com.google.common.base.Preconditions;
 import java.lang.ref.WeakReference;
 import java.util.Arrays;
-import java.util.Collection;
 import net.minecraft.server.BiomeBase;
 import net.minecraft.server.BlockPosition;
 import net.minecraft.server.Blocks;
@@ -28,7 +27,6 @@ import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.Entity;
-import org.bukkit.plugin.Plugin;
 
 public class CraftChunk implements Chunk {
     private WeakReference<net.minecraft.server.Chunk> weakChunk;
@@ -191,21 +189,6 @@ public class CraftChunk implements Chunk {
         getWorld().setChunkForceLoaded(getX(), getZ(), forced);
     }
 
-    @Override
-    public boolean addPluginChunkTicket(Plugin plugin) {
-        return getWorld().addPluginChunkTicket(getX(), getZ(), plugin);
-    }
-
-    @Override
-    public boolean removePluginChunkTicket(Plugin plugin) {
-        return getWorld().removePluginChunkTicket(getX(), getZ(), plugin);
-    }
-
-    @Override
-    public Collection<Plugin> getPluginChunkTickets() {
-        return getWorld().getPluginChunkTickets(getX(), getZ());
-    }
-
     @Override
     public ChunkSnapshot getChunkSnapshot() {
         return getChunkSnapshot(true, false, false);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java b/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java
index 7511e381..21c21e10 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftCrashReport.java
@@ -3,13 +3,10 @@ package org.bukkit.craftbukkit;
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.util.Arrays;
-import java.util.Collection;
 import java.util.Map;
 import net.minecraft.server.CrashReportCallable;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
-import org.bukkit.Chunk;
-import org.bukkit.World;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.PluginDescriptionFile;
@@ -34,15 +31,6 @@ public class CraftCrashReport implements CrashReportCallable<Object> {
                 value.append(' ').append(entry.getKey().getState().name()).append(' ').append(entry.getKey().getName()).append(": ").append(Arrays.toString(entry.getValue())).append(',');
             }
             value.append("}\n   ").append(Bukkit.getScheduler().toString());
-            value.append("\n   Force Loaded Chunks: {");
-            for (World world : Bukkit.getWorlds()) {
-                value.append(' ').append(world.getName()).append(": {");
-                for (Map.Entry<Plugin, Collection<Chunk>> entry : world.getPluginChunkTickets().entrySet()) {
-                    value.append(' ').append(entry.getKey().getDescription().getFullName()).append(": ").append(Integer.toString(entry.getValue().size())).append(',');
-                }
-                value.append("},");
-            }
-            value.append("}");
         } catch (Throwable t) {
             value.append("\n   Failed to handle CraftCrashReport:\n");
             PrintWriter writer = new PrintWriter(value);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftParticle.java b/src/main/java/org/bukkit/craftbukkit/CraftParticle.java
index 99377033..179b267d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftParticle.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftParticle.java
@@ -151,7 +151,7 @@ public enum CraftParticle {
     }
 
     public static Particle toBukkit(net.minecraft.server.ParticleParam nms) {
-        return toBukkit(nms.getParticle());
+        return toBukkit(nms.b());
     }
 
     public static Particle toBukkit(net.minecraft.server.Particle nms) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 05886414..5884d92f 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -48,6 +48,7 @@ import net.minecraft.server.BlockPosition;
 import net.minecraft.server.BossBattleCustom;
 import net.minecraft.server.CommandDispatcher;
 import net.minecraft.server.CommandListenerWrapper;
+import net.minecraft.server.CraftingManager;
 import net.minecraft.server.DedicatedPlayerList;
 import net.minecraft.server.DedicatedServer;
 import net.minecraft.server.DedicatedServerProperties;
@@ -68,7 +69,6 @@ import net.minecraft.server.MobEffects;
 import net.minecraft.server.PlayerList;
 import net.minecraft.server.ServerCommand;
 import net.minecraft.server.TagsServer;
-import net.minecraft.server.TicketType;
 import net.minecraft.server.Vec3D;
 import net.minecraft.server.WorldData;
 import net.minecraft.server.WorldMap;
@@ -226,7 +226,6 @@ public final class CraftServer implements Server {
     private int ambientSpawn = -1;
     private File container;
     private WarningState warningState = WarningState.DEFAULT;
-    public String minimumAPI;
     public CraftScoreboardManager scoreboardManager;
     public boolean playerCommandState;
     private boolean printSaveWarning;
@@ -313,8 +312,6 @@ public final class CraftServer implements Server {
         ambientSpawn = configuration.getInt("spawn-limits.ambient");
         console.autosavePeriod = configuration.getInt("ticks-per.autosave");
         warningState = WarningState.value(configuration.getString("settings.deprecated-verbose"));
-        TicketType.PLUGIN.loadPeriod = configuration.getInt("chunk-gc.period-in-ticks");
-        minimumAPI = configuration.getString("settings.minimum-api");
         loadIcon();
     }
 
@@ -711,7 +708,7 @@ public final class CraftServer implements Server {
     public boolean dispatchCommand(CommandSender sender, String commandLine) {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(commandLine, "CommandLine cannot be null");
-        org.spigotmc.AsyncCatcher.catchOp("command dispatch"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp( "command dispatch" ); // Spigot
 
         // Paper Start
         if (!org.spigotmc.AsyncCatcher.shuttingDown && !Bukkit.isPrimaryThread()) {
@@ -774,8 +771,6 @@ public final class CraftServer implements Server {
         waterAnimalSpawn = configuration.getInt("spawn-limits.water-animals");
         ambientSpawn = configuration.getInt("spawn-limits.ambient");
         warningState = WarningState.value(configuration.getString("settings.deprecated-verbose"));
-        TicketType.PLUGIN.loadPeriod = configuration.getInt("chunk-gc.period-in-ticks");
-        minimumAPI = configuration.getString("settings.minimum-api");
         printSaveWarning = false;
         console.autosavePeriod = configuration.getInt("ticks-per.autosave");
         loadIcon();
@@ -1183,12 +1178,12 @@ public final class CraftServer implements Server {
 
     @Override
     public void clearRecipes() {
-        console.getCraftingManager().clearRecipes();
+        CraftingManager.initializeRecipeMap(console.getCraftingManager().recipes);
     }
 
     @Override
     public void resetRecipes() {
-        console.reload(); // Not ideal but hard to reload a subset of a resource pack
+        console.getCraftingManager().a(console.getResourceManager());
     }
 
     @Override
@@ -1890,7 +1885,7 @@ public final class CraftServer implements Server {
 
     @Override
     public Iterator<org.bukkit.advancement.Advancement> advancementIterator() {
-        return Iterators.unmodifiableIterator(Iterators.transform(console.getAdvancementData().a().iterator(), new Function<Advancement, org.bukkit.advancement.Advancement>() { // PAIL: rename
+        return Iterators.unmodifiableIterator(Iterators.transform(console.getAdvancementData().b().iterator(), new Function<Advancement, org.bukkit.advancement.Advancement>() { // PAIL: rename
             @Override
             public org.bukkit.advancement.Advancement apply(Advancement advancement) {
                 return advancement.bukkit;
@@ -1939,11 +1934,11 @@ public final class CraftServer implements Server {
             case org.bukkit.Tag.REGISTRY_BLOCKS:
                 Preconditions.checkArgument(clazz == org.bukkit.Material.class, "Block namespace must have material type");
 
-                return (org.bukkit.Tag<T>) new CraftBlockTag(console.getTagRegistry().getBlockTags(), key);
+                return (org.bukkit.Tag<T>) new CraftBlockTag(console.getTagRegistry().a(), key);
             case org.bukkit.Tag.REGISTRY_ITEMS:
                 Preconditions.checkArgument(clazz == org.bukkit.Material.class, "Item namespace must have material type");
 
-                return (org.bukkit.Tag<T>) new CraftItemTag(console.getTagRegistry().getItemTags(), key);
+                return (org.bukkit.Tag<T>) new CraftItemTag(console.getTagRegistry().b(), key);
             default:
                 throw new IllegalArgumentException();
         }
@@ -1956,13 +1951,13 @@ public final class CraftServer implements Server {
             case org.bukkit.Tag.REGISTRY_BLOCKS:
                 Preconditions.checkArgument(clazz == org.bukkit.Material.class, "Block namespace must have material type");
 
-                TagsServer<Block> blockTags = console.getTagRegistry().getBlockTags();
-                return blockTags.b().keySet().stream().map(key -> (org.bukkit.Tag<T>) new CraftBlockTag(blockTags, key)).collect(ImmutableList.toImmutableList());
+                TagsServer<Block> blockTags = console.getTagRegistry().a(); // PAIL: getBlockTags
+                return blockTags.c().keySet().stream().map(key -> (org.bukkit.Tag<T>) new CraftBlockTag(blockTags, key)).collect(ImmutableList.toImmutableList());
             case org.bukkit.Tag.REGISTRY_ITEMS:
                 Preconditions.checkArgument(clazz == org.bukkit.Material.class, "Item namespace must have material type");
 
-                TagsServer<Item> itemTags = console.getTagRegistry().getItemTags();
-                return itemTags.b().keySet().stream().map(key -> (org.bukkit.Tag<T>) new CraftItemTag(itemTags, key)).collect(ImmutableList.toImmutableList());
+                TagsServer<Item> itemTags = console.getTagRegistry().b(); // PAIL: getItemTags
+                return itemTags.c().keySet().stream().map(key -> (org.bukkit.Tag<T>) new CraftItemTag(itemTags, key)).collect(ImmutableList.toImmutableList());
             default:
                 throw new IllegalArgumentException();
         }
@@ -2067,31 +2062,22 @@ public final class CraftServer implements Server {
 
     // Paper start
     @SuppressWarnings({"rawtypes", "unchecked"})
-    public static java.nio.file.Path dumpHeap(java.nio.file.Path dir, String name) {
+    public static boolean dumpHeap(File file) {
         try {
-            java.nio.file.Files.createDirectories(dir);
-
-            javax.management.MBeanServer server = java.lang.management.ManagementFactory.getPlatformMBeanServer();
-            java.nio.file.Path file;
-
-            try {
-                Class clazz = Class.forName("openj9.lang.management.OpenJ9DiagnosticsMXBean");
-                Object openj9Mbean = java.lang.management.ManagementFactory.newPlatformMXBeanProxy(server, "openj9.lang.management:type=OpenJ9Diagnostics", clazz);
-                java.lang.reflect.Method m = clazz.getMethod("triggerDumpToFile", String.class, String.class);
-                file = dir.resolve(name + ".phd");
-                m.invoke(openj9Mbean, "heap", file.toString());
-            } catch (ClassNotFoundException e) {
-                Class clazz = Class.forName("com.sun.management.HotSpotDiagnosticMXBean");
-                Object hotspotMBean = java.lang.management.ManagementFactory.newPlatformMXBeanProxy(server, "com.sun.management:type=HotSpotDiagnostic", clazz);
-                java.lang.reflect.Method m = clazz.getMethod("dumpHeap", String.class, boolean.class);
-                file = dir.resolve(name + ".hprof");
-                m.invoke(hotspotMBean, file.toString(), true);
+            if (file.getParentFile() != null) {
+                file.getParentFile().mkdirs();
             }
 
-            return file;
+            Class clazz = Class.forName("com.sun.management.HotSpotDiagnosticMXBean");
+            javax.management.MBeanServer server = java.lang.management.ManagementFactory.getPlatformMBeanServer();
+            Object hotspotMBean = java.lang.management.ManagementFactory.newPlatformMXBeanProxy(server, "com.sun.management:type=HotSpotDiagnostic", clazz);
+            java.lang.reflect.Method m = clazz.getMethod("dumpHeap", String.class, boolean.class);
+            m.invoke(hotspotMBean, file.getPath(), true);
+            return true;
         } catch (Throwable t) {
-            Bukkit.getLogger().log(Level.SEVERE, "Could not write heap", t);
-            return null;
+            Bukkit.getLogger().severe("Could not write heap to " + file);
+            t.printStackTrace();
+            return false;
         }
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java b/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
index 4536b70d..7d529052 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
@@ -113,8 +113,8 @@ public enum CraftStatistic {
     }
 
     public static org.bukkit.Statistic getBukkitStatistic(net.minecraft.server.Statistic<?> statistic) {
-        IRegistry statRegistry = statistic.getWrapper().getRegistry();
-        MinecraftKey nmsKey = IRegistry.STATS.getKey(statistic.getWrapper());
+        IRegistry statRegistry = statistic.a().a();
+        MinecraftKey nmsKey = IRegistry.STATS.getKey(statistic.a());
 
         if (statRegistry == IRegistry.CUSTOM_STAT) {
             nmsKey = (MinecraftKey) statistic.b();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index a2b6c3c9..0c537953 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -1,27 +1,21 @@
 package org.bukkit.craftbukkit;
 
 import com.google.common.base.Preconditions;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
 import java.util.Objects;
 import java.util.Random;
 import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Predicate;
-import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
-import it.unimi.dsi.fastutil.objects.ObjectSortedSet;
 import net.minecraft.server.AxisAlignedBB;
 import net.minecraft.server.BiomeBase;
 import net.minecraft.server.BlockChorusFlower;
@@ -29,7 +23,6 @@ import net.minecraft.server.BlockDiodeAbstract;
 import net.minecraft.server.BlockPosition;
 import net.minecraft.server.Blocks;
 import net.minecraft.server.ChunkCoordIntPair;
-import net.minecraft.server.ChunkMapDistance;
 import net.minecraft.server.ChunkStatus;
 import net.minecraft.server.EntityAreaEffectCloud;
 import net.minecraft.server.EntityArmorStand;
@@ -82,14 +75,15 @@ import net.minecraft.server.PlayerChunk;
 import net.minecraft.server.ProtoChunkExtension;
 import net.minecraft.server.RayTrace;
 import net.minecraft.server.SoundCategory;
-import net.minecraft.server.Ticket;
 import net.minecraft.server.TicketType;
 import net.minecraft.server.Unit;
 import net.minecraft.server.Vec3D;
 import net.minecraft.server.WorldGenFeatureEmptyConfiguration;
-import net.minecraft.server.WorldGenHugeMushroomConfiguration;
 import net.minecraft.server.WorldGenerator;
 import net.minecraft.server.WorldNBTStorage;
+import net.minecraft.server.WorldProviderHell;
+import net.minecraft.server.WorldProviderNormal;
+import net.minecraft.server.WorldProviderTheEnd;
 import net.minecraft.server.WorldServer;
 import org.apache.commons.lang.Validate;
 import org.bukkit.BlockChangeDelegate;
@@ -388,27 +382,13 @@ public class CraftWorld implements World {
 
     @Override
     public boolean isChunkLoaded(int x, int z) {
-        return world.getChunkProvider().getChunkAtIfLoadedImmediately(x, z) != null; // Paper
+        return world.getChunkProvider().isLoaded(x, z);// Paper
     }
 
     @Override
     public boolean isChunkGenerated(int x, int z) {
-        // Paper start - Fix this method
-        if (!Bukkit.isPrimaryThread()) {
-            return CompletableFuture.supplyAsync(() -> {
-                return CraftWorld.this.isChunkGenerated(x, z);
-            }, world.getChunkProvider().serverThreadQueue).join();
-        }
-        IChunkAccess chunk = world.getChunkProvider().getChunkAtImmediately(x, z);
-        if (chunk == null) {
-            chunk = world.getChunkProvider().playerChunkMap.getUnloadingChunk(x, z);
-        }
-        if (chunk != null) {
-            return chunk instanceof ProtoChunkExtension || chunk instanceof net.minecraft.server.Chunk;
-        }
         try {
-            return world.getChunkProvider().playerChunkMap.getChunkStatusOnDisk(new ChunkCoordIntPair(x, z)) == ChunkStatus.FULL;
-            // Paper end
+            return isChunkLoaded(x, z) || world.getChunkProvider().playerChunkMap.chunkExists(new ChunkCoordIntPair(x, z));
         } catch (IOException ex) {
             throw new RuntimeException(ex);
         }
@@ -442,7 +422,7 @@ public class CraftWorld implements World {
 
     @Override
     public boolean unloadChunkRequest(int x, int z) {
-        org.spigotmc.AsyncCatcher.catchOp("chunk unload"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp( "chunk unload"); // Spigot
         net.minecraft.server.IChunkAccess chunk = world.getChunkProvider().getChunkAt(x, z, ChunkStatus.FULL, false);
         if (chunk != null) {
             world.getChunkProvider().removeTicket(TicketType.PLUGIN, chunk.getPos(), 1, Unit.INSTANCE);
@@ -452,7 +432,7 @@ public class CraftWorld implements World {
     }
 
     private boolean unloadChunk0(int x, int z, boolean save) {
-        org.spigotmc.AsyncCatcher.catchOp("chunk unload"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp( "chunk unload" ); // Spigot
         net.minecraft.server.Chunk chunk = (net.minecraft.server.Chunk) world.getChunkProvider().getChunkAt(x, z, ChunkStatus.FULL, false);
         if (chunk == null) {
             return true;
@@ -467,7 +447,7 @@ public class CraftWorld implements World {
 
     @Override
     public boolean regenerateChunk(int x, int z) {
-        org.spigotmc.AsyncCatcher.catchOp("chunk regenerate"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp( "chunk regenerate" ); // Spigot
         throw new UnsupportedOperationException("Not supported in this Minecraft version! Unless you can fix it, this is not a bug :)");
         /*
         if (!unloadChunk0(x, z, false)) {
@@ -519,50 +499,21 @@ public class CraftWorld implements World {
 
     @Override
     public boolean loadChunk(int x, int z, boolean generate) {
-        org.spigotmc.AsyncCatcher.catchOp("chunk load"); // Spigot
-        // Paper start - Optimize this method
-        ChunkCoordIntPair chunkPos = new ChunkCoordIntPair(x, z);
-
-        if (!generate) {
-
-            IChunkAccess immediate = world.getChunkProvider().getChunkAtImmediately(x, z);
-            if (immediate == null) {
-                immediate = world.getChunkProvider().playerChunkMap.getUnloadingChunk(x, z);
-            }
-            if (immediate != null) {
-                if (!(immediate instanceof ProtoChunkExtension) && !(immediate instanceof net.minecraft.server.Chunk)) {
-                    return false; // not full status
-                }
-                world.getChunkProvider().addTicket(TicketType.PLUGIN, chunkPos, 1, Unit.INSTANCE);
-                world.getChunkAt(x, z); // make sure we're at ticket level 32 or lower
-                return true;
-            }
+        org.spigotmc.AsyncCatcher.catchOp( "chunk load"); // Spigot
+        IChunkAccess chunk = world.getChunkProvider().getChunkAt(x, z, generate || isChunkGenerated(x, z) ? ChunkStatus.FULL : ChunkStatus.EMPTY, true);
 
-            net.minecraft.server.RegionFile file;
-            try {
-                file = world.getChunkProvider().playerChunkMap.getRegionFile(chunkPos, false);
-            } catch (IOException ex) {
-                throw new RuntimeException(ex);
-            }
-
-            ChunkStatus status = file.getStatusIfCached(x, z);
-            if (!file.chunkExists(chunkPos) || (status != null && status != ChunkStatus.FULL)) {
-                return false;
-            }
-
-            IChunkAccess chunk = world.getChunkProvider().getChunkAt(x, z, ChunkStatus.EMPTY, true);
-            if (!(chunk instanceof ProtoChunkExtension) && !(chunk instanceof net.minecraft.server.Chunk)) {
-                return false;
-            }
+        // If generate = false, but the chunk already exists, we will get this back.
+        if (chunk instanceof ProtoChunkExtension) {
+            // We then cycle through again to get the full chunk immediately, rather than after the ticket addition
+            chunk = world.getChunkProvider().getChunkAt(x, z, ChunkStatus.FULL, true);
+        }
 
-            // fall through to load
-            // we do this so we do not re-read the chunk data on disk
+        if (chunk instanceof net.minecraft.server.Chunk) {
+            world.getChunkProvider().addTicket(TicketType.PLUGIN, new ChunkCoordIntPair(x, z), 1, Unit.INSTANCE);
+            return true;
         }
 
-        world.getChunkProvider().addTicket(TicketType.PLUGIN, chunkPos, 1, Unit.INSTANCE);
-        world.getChunkProvider().getChunkAt(x, z, ChunkStatus.FULL, true);
-        return true;
-        // Paper end
+        return false;
     }
 
     @Override
@@ -576,82 +527,6 @@ public class CraftWorld implements World {
         ((CraftChunk) getChunkAt(chunk.getX(), chunk.getZ())).getHandle().bukkitChunk = chunk;
     }
 
-    @Override
-    public boolean addPluginChunkTicket(int x, int z, Plugin plugin) {
-        Preconditions.checkArgument(plugin != null, "null plugin");
-        Preconditions.checkArgument(plugin.isEnabled(), "plugin is not enabled");
-
-        ChunkMapDistance chunkDistanceManager = this.world.getChunkProvider().playerChunkMap.chunkDistanceManager;
-
-        if (chunkDistanceManager.addTicketAtLevel(TicketType.PLUGIN_TICKET, new ChunkCoordIntPair(x, z), 31, plugin)) { // keep in-line with force loading, add at level 31
-            this.getChunkAt(x, z); // ensure loaded
-            return true;
-        }
-
-        return false;
-    }
-
-    @Override
-    public boolean removePluginChunkTicket(int x, int z, Plugin plugin) {
-        Preconditions.checkNotNull(plugin, "null plugin");
-
-        ChunkMapDistance chunkDistanceManager = this.world.getChunkProvider().playerChunkMap.chunkDistanceManager;
-        return chunkDistanceManager.removeTicketAtLevel(TicketType.PLUGIN_TICKET, new ChunkCoordIntPair(x, z), 31, plugin); // keep in-line with force loading, remove at level 31
-    }
-
-    @Override
-    public void removePluginChunkTickets(Plugin plugin) {
-        Preconditions.checkNotNull(plugin, "null plugin");
-
-        ChunkMapDistance chunkDistanceManager = this.world.getChunkProvider().playerChunkMap.chunkDistanceManager;
-        chunkDistanceManager.removeAllTicketsFor(TicketType.PLUGIN_TICKET, 31, plugin); // keep in-line with force loading, remove at level 31
-    }
-
-    @Override
-    public Collection<Plugin> getPluginChunkTickets(int x, int z) {
-        ChunkMapDistance chunkDistanceManager = this.world.getChunkProvider().playerChunkMap.chunkDistanceManager;
-        ObjectSortedSet<Ticket<?>> tickets = chunkDistanceManager.tickets.get(ChunkCoordIntPair.pair(x, z));
-
-        if (tickets == null) {
-            return Collections.emptyList();
-        }
-
-        ImmutableList.Builder<Plugin> ret = ImmutableList.builder();
-        for (Ticket<?> ticket : tickets) {
-            if (ticket.getTicketType() == TicketType.PLUGIN_TICKET) {
-                ret.add((Plugin) ticket.identifier);
-            }
-        }
-
-        return ret.build();
-    }
-
-    @Override
-    public Map<Plugin, Collection<Chunk>> getPluginChunkTickets() {
-        Map<Plugin, ImmutableList.Builder<Chunk>> ret = new HashMap<>();
-        ChunkMapDistance chunkDistanceManager = this.world.getChunkProvider().playerChunkMap.chunkDistanceManager;
-
-        for (Long2ObjectMap.Entry<ObjectSortedSet<Ticket<?>>> chunkTickets : chunkDistanceManager.tickets.long2ObjectEntrySet()) {
-            long chunkKey = chunkTickets.getLongKey();
-            ObjectSortedSet<Ticket<?>> tickets = chunkTickets.getValue();
-
-            Chunk chunk = null;
-            for (Ticket<?> ticket : tickets) {
-                if (ticket.getTicketType() != TicketType.PLUGIN_TICKET) {
-                    continue;
-                }
-
-                if (chunk == null) {
-                    chunk = this.getChunkAt(ChunkCoordIntPair.getX(chunkKey), ChunkCoordIntPair.getZ(chunkKey));
-                }
-
-                ret.computeIfAbsent((Plugin) ticket.identifier, (key) -> ImmutableList.builder()).add(chunk);
-            }
-        }
-
-        return ret.entrySet().stream().collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, (entry) -> entry.getValue().build()));
-    }
-
     @Override
     public boolean isChunkForceLoaded(int x, int z) {
         return getHandle().getForceLoadedChunks().contains(ChunkCoordIntPair.pair(x, z));
@@ -753,9 +628,8 @@ public class CraftWorld implements World {
         BlockPosition pos = new BlockPosition(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ());
 
         net.minecraft.server.WorldGenerator gen;
-        net.minecraft.server.WorldGenFeatureConfiguration conf = new WorldGenFeatureEmptyConfiguration();
         switch (type) {
-            case BIG_TREE:
+        case BIG_TREE:
             gen = WorldGenerator.FANCY_TREE;
             break;
         case BIRCH:
@@ -781,11 +655,9 @@ public class CraftWorld implements World {
             break;
         case RED_MUSHROOM:
             gen = WorldGenerator.HUGE_RED_MUSHROOM;
-            conf = new WorldGenHugeMushroomConfiguration(true);
             break;
         case BROWN_MUSHROOM:
             gen = WorldGenerator.HUGE_BROWN_MUSHROOM;
-            conf = new WorldGenHugeMushroomConfiguration(true);
             break;
         case SWAMP:
             gen = WorldGenerator.SWAMP_TREE;
@@ -811,7 +683,7 @@ public class CraftWorld implements World {
             break;
         }
 
-        return gen.generate(world, world.worldProvider.getChunkGenerator(), rand, pos, conf);
+        return gen.generate(world, world.worldProvider.getChunkGenerator(), rand, pos, new WorldGenFeatureEmptyConfiguration());
     }
 
     @Override
@@ -886,7 +758,7 @@ public class CraftWorld implements World {
             CraftPlayer cp = (CraftPlayer) p;
             if (cp.getHandle().playerConnection == null) continue;
 
-            cp.getHandle().playerConnection.sendPacket(new PacketPlayOutUpdateTime(cp.getHandle().world.getTime(), cp.getHandle().getPlayerTime(), cp.getHandle().world.getGameRules().getBoolean(GameRules.DO_DAYLIGHT_CYCLE)));
+            cp.getHandle().playerConnection.sendPacket(new PacketPlayOutUpdateTime(cp.getHandle().world.getTime(), cp.getHandle().getPlayerTime(), cp.getHandle().world.getGameRules().getBoolean("doDaylightCycle")));
         }
     }
 
@@ -1060,7 +932,7 @@ public class CraftWorld implements World {
 
                 Class<?> bukkitClass = bukkitEntity.getClass();
 
-                if (clazz.isAssignableFrom(bukkitClass) && bukkitEntity.isValid()) {
+                if (clazz.isAssignableFrom(bukkitClass)) {
                     list.add((T) bukkitEntity);
                 }
             }
@@ -1086,9 +958,7 @@ public class CraftWorld implements World {
 
                 for (Class<?> clazz : classes) {
                     if (clazz.isAssignableFrom(bukkitClass)) {
-                        if (bukkitEntity.isValid()) {
-                            list.add(bukkitEntity);
-                        }
+                        list.add(bukkitEntity);
                         break;
                     }
                 }
@@ -1748,14 +1618,12 @@ public class CraftWorld implements World {
             }
 
             BlockFace[] faces = new BlockFace[]{BlockFace.EAST, BlockFace.NORTH, BlockFace.WEST, BlockFace.SOUTH, BlockFace.UP, BlockFace.DOWN};
-            final BlockPosition pos = new BlockPosition(x, y, z);
+            final BlockPosition pos = new BlockPosition((int) x, (int) y, (int) z);
             for (BlockFace dir : faces) {
                 IBlockData nmsBlock = world.getType(pos.shift(CraftBlock.blockFaceToNotch(dir)));
                 if (nmsBlock.getMaterial().isBuildable() || BlockDiodeAbstract.isDiode(nmsBlock)) {
                     boolean taken = false;
-                    AxisAlignedBB bb = (ItemFrame.class.isAssignableFrom(clazz))
-                            ? EntityItemFrame.calculateBoundingBox(null, pos, CraftBlock.blockFaceToNotch(dir).opposite(), width, height)
-                            : EntityHanging.calculateBoundingBox(null, pos, CraftBlock.blockFaceToNotch(dir).opposite(), width, height);
+                    AxisAlignedBB bb = EntityHanging.calculateBoundingBox(null, pos, CraftBlock.blockFaceToNotch(dir).opposite(), width, height);
                     List<net.minecraft.server.Entity> list = (List<net.minecraft.server.Entity>) world.getEntities(null, bb);
                     for (Iterator<net.minecraft.server.Entity> it = list.iterator(); !taken && it.hasNext();) {
                         net.minecraft.server.Entity e = it.next();
@@ -1772,7 +1640,7 @@ public class CraftWorld implements World {
             }
 
             if (LeashHitch.class.isAssignableFrom(clazz)) {
-                entity = new EntityLeash(world, new BlockPosition(x, y, z));
+                entity = new EntityLeash(world, new BlockPosition((int) x, (int) y, (int) z));
                 entity.attachedToPlayer = true;
             } else {
                 // No valid face found
@@ -1780,9 +1648,9 @@ public class CraftWorld implements World {
 
                 EnumDirection dir = CraftBlock.blockFaceToNotch(face).opposite();
                 if (Painting.class.isAssignableFrom(clazz)) {
-                    entity = new EntityPainting(world, new BlockPosition(x, y, z), dir);
+                    entity = new EntityPainting(world, new BlockPosition((int) x, (int) y, (int) z), dir);
                 } else if (ItemFrame.class.isAssignableFrom(clazz)) {
-                    entity = new EntityItemFrame(world, new BlockPosition(x, y, z), dir);
+                    entity = new EntityItemFrame(world, new BlockPosition((int) x, (int) y, (int) z), dir);
                 }
             }
 
@@ -2065,7 +1933,7 @@ public class CraftWorld implements World {
         double y = loc.getY();
         double z = loc.getZ();
 
-        getHandle().playSound(null, x, y, z, CraftSound.getSoundEffect(CraftSound.getSound(sound)), SoundCategory.valueOf(category.name()), volume, pitch);
+        getHandle().a(null, x, y, z, CraftSound.getSoundEffect(CraftSound.getSound(sound)), SoundCategory.valueOf(category.name()), volume, pitch); // PAIL: rename
     }
 
     @Override
@@ -2080,40 +1948,6 @@ public class CraftWorld implements World {
         world.getMinecraftServer().getPlayerList().sendPacketNearby(null, x, y, z, volume > 1.0F ? 16.0F * volume : 16.0D, this.world, packet); // Paper - this.world.dimension -> this.world
     }
 
-    private static Map<String, GameRules.GameRuleKey<?>> gamerules;
-    public static synchronized Map<String, GameRules.GameRuleKey<?>> getGameRulesNMS() {
-        if (gamerules != null) {
-            return gamerules;
-        }
-
-        Map<String, GameRules.GameRuleKey<?>> gamerules = new HashMap<>();
-        GameRules.a(new GameRules.GameRuleVisitor() {
-            @Override
-            public <T extends GameRules.GameRuleValue<T>> void a(GameRules.GameRuleKey<T> gamerules_gamerulekey, GameRules.GameRuleDefinition<T> gamerules_gameruledefinition) {
-                gamerules.put(gamerules_gamerulekey.a(), gamerules_gamerulekey);
-            }
-        });
-
-        return CraftWorld.gamerules = gamerules;
-    }
-
-    private static Map<String, GameRules.GameRuleDefinition<?>> gameruleDefinitions;
-    public static synchronized Map<String, GameRules.GameRuleDefinition<?>> getGameRuleDefinitions() {
-        if (gameruleDefinitions != null) {
-            return gameruleDefinitions;
-        }
-
-        Map<String, GameRules.GameRuleDefinition<?>> gameruleDefinitions = new HashMap<>();
-        GameRules.a(new GameRules.GameRuleVisitor() {
-            @Override
-            public <T extends GameRules.GameRuleValue<T>> void a(GameRules.GameRuleKey<T> gamerules_gamerulekey, GameRules.GameRuleDefinition<T> gamerules_gameruledefinition) {
-                gameruleDefinitions.put(gamerules_gamerulekey.a(), gamerules_gameruledefinition);
-            }
-        });
-
-        return CraftWorld.gameruleDefinitions = gameruleDefinitions;
-    }
-
     @Override
     public String getGameRuleValue(String rule) {
         // In method contract for some reason
@@ -2121,8 +1955,8 @@ public class CraftWorld implements World {
             return null;
         }
 
-        GameRules.GameRuleValue<?> value = getHandle().getGameRules().get(getGameRulesNMS().get(rule));
-        return value != null ? value.toString() : "";
+        GameRules.GameRuleValue value = getHandle().getGameRules().get(rule);
+        return value != null ? value.getValue() : "";
     }
 
     @Override
@@ -2132,33 +1966,31 @@ public class CraftWorld implements World {
 
         if (!isGameRule(rule)) return false;
 
-        GameRules.GameRuleValue<?> handle = getHandle().getGameRules().get(getGameRulesNMS().get(rule));
-        handle.setValue(value);
-        handle.onChange(getHandle().getMinecraftServer());
+        getHandle().getGameRules().set(rule, value, getHandle().getMinecraftServer());
         return true;
     }
 
     @Override
     public String[] getGameRules() {
-        return getGameRulesNMS().keySet().toArray(new String[getGameRulesNMS().size()]);
+        return GameRules.getGameRules().keySet().toArray(new String[GameRules.getGameRules().size()]);
     }
 
     @Override
     public boolean isGameRule(String rule) {
         Validate.isTrue(rule != null && !rule.isEmpty(), "Rule cannot be null nor empty");
-        return getGameRulesNMS().containsKey(rule);
+        return GameRules.getGameRules().containsKey(rule);
     }
 
     @Override
     public <T> T getGameRuleValue(GameRule<T> rule) {
         Validate.notNull(rule, "GameRule cannot be null");
-        return convert(rule, getHandle().getGameRules().get(getGameRulesNMS().get(rule.getName())));
+        return convert(rule, getHandle().getGameRules().get(rule.getName()));
     }
 
     @Override
     public <T> T getGameRuleDefault(GameRule<T> rule) {
         Validate.notNull(rule, "GameRule cannot be null");
-        return convert(rule, getGameRuleDefinitions().get(rule.getName()).getValue());
+        return convert(rule, GameRules.getGameRules().get(rule.getName()).a());
     }
 
     @Override
@@ -2168,23 +2000,22 @@ public class CraftWorld implements World {
 
         if (!isGameRule(rule.getName())) return false;
 
-        GameRules.GameRuleValue<?> handle = getHandle().getGameRules().get(getGameRulesNMS().get(rule.getName()));
-        handle.setValue(newValue.toString());
-        handle.onChange(getHandle().getMinecraftServer());
+        getHandle().getGameRules().set(rule.getName(), newValue.toString(), getHandle().getMinecraftServer());
         return true;
     }
 
-    private <T> T convert(GameRule<T> rule, GameRules.GameRuleValue<?> value) {
+    private <T> T convert(GameRule<T> rule, GameRules.GameRuleValue value) {
         if (value == null) {
             return null;
         }
 
-        if (value instanceof GameRules.GameRuleBoolean) {
-            return rule.getType().cast(((GameRules.GameRuleBoolean) value).a());
-        } else if (value instanceof GameRules.GameRuleInt) {
-            return rule.getType().cast(value.getIntValue());
-        } else {
-            throw new IllegalArgumentException("Invalid GameRule type (" + value + ") for GameRule " + rule.getName());
+        switch (value.getType()) {
+            case BOOLEAN_VALUE:
+                return rule.getType().cast(value.getBooleanValue());
+            case NUMERICAL_VALUE:
+                return rule.getType().cast(value.getIntValue());
+            default:
+                throw new IllegalArgumentException("Invalid GameRule type (" + value.getType() + ") for GameRule " + rule.getName());
         }
     }
 
@@ -2294,44 +2125,21 @@ public class CraftWorld implements World {
 
     // Paper start
     private Chunk getChunkAtGen(int x, int z, boolean gen) {
-        // Note: Copied from loadChunk()
-        ChunkCoordIntPair chunkPos = new ChunkCoordIntPair(x, z);
-
-        if (!gen) {
+        // copied from loadChunk()
+        // this function is identical except we do not add a plugin ticket
+        IChunkAccess chunk = world.getChunkProvider().getChunkAt(x, z, gen || isChunkGenerated(x, z) ? ChunkStatus.FULL : ChunkStatus.EMPTY, true);
 
-            IChunkAccess immediate = world.getChunkProvider().getChunkAtImmediately(x, z);
-            if (immediate == null) {
-                immediate = world.getChunkProvider().playerChunkMap.getUnloadingChunk(x, z);
-            }
-            if (immediate != null) {
-                if (!(immediate instanceof ProtoChunkExtension) && !(immediate instanceof net.minecraft.server.Chunk)) {
-                    return null; // not full status
-                }
-                return world.getChunkAt(x, z).bukkitChunk; // make sure we're at ticket level 33 or lower
-            }
-
-            net.minecraft.server.RegionFile file;
-            try {
-                file = world.getChunkProvider().playerChunkMap.getRegionFile(chunkPos, false);
-            } catch (IOException ex) {
-                throw new RuntimeException(ex);
-            }
-
-            ChunkStatus status = file.getStatusIfCached(x, z);
-            if (!file.chunkExists(chunkPos) || (status != null && status != ChunkStatus.FULL)) {
-                return null;
-            }
-
-            IChunkAccess chunk = world.getChunkProvider().getChunkAt(x, z, ChunkStatus.EMPTY, true);
-            if (!(chunk instanceof ProtoChunkExtension) && !(chunk instanceof net.minecraft.server.Chunk)) {
-                return null;
-            }
+        // If generate = false, but the chunk already exists, we will get this back.
+        if (chunk instanceof ProtoChunkExtension) {
+            // We then cycle through again to get the full chunk immediately, rather than after the ticket addition
+            chunk = world.getChunkProvider().getChunkAt(x, z, ChunkStatus.FULL, true);
+        }
 
-            // fall through to load
-            // we load at empty so we don't double-load chunk data in this case
+        if (chunk instanceof net.minecraft.server.Chunk) {
+            return ((net.minecraft.server.Chunk)chunk).bukkitChunk;
         }
 
-        return world.getChunkAt(x, z).bukkitChunk;
+        return null;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 1fa81904..405ea5c4 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -215,7 +215,7 @@ public class Main {
                     Date buildDate = new SimpleDateFormat("yyyyMMdd-HHmm").parse(Main.class.getPackage().getImplementationVendor());
 
                     Calendar deadline = Calendar.getInstance();
-                    deadline.add(Calendar.DAY_OF_YEAR, -7);
+                    deadline.add(Calendar.DAY_OF_YEAR, -3);
                     if (buildDate.before(deadline.getTime())) {
                         // Paper start - This is some stupid bullshit
                         System.err.println("*** Warning, you've not updated in a while! ***");
diff --git a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeInstance.java b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeInstance.java
index f9da97c0..49852d97 100644
--- a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeInstance.java
+++ b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeInstance.java
@@ -25,7 +25,7 @@ public class CraftAttributeInstance implements AttributeInstance {
 
     @Override
     public double getBaseValue() {
-        return handle.getBaseValue();
+        return handle.b();
     }
 
     @Override
@@ -36,7 +36,7 @@ public class CraftAttributeInstance implements AttributeInstance {
     @Override
     public Collection<AttributeModifier> getModifiers() {
         List<AttributeModifier> result = new ArrayList<AttributeModifier>();
-        for (net.minecraft.server.AttributeModifier nms : handle.getModifiers()) {
+        for (net.minecraft.server.AttributeModifier nms : handle.c()) {
             result.add(convert(nms));
         }
 
@@ -46,13 +46,13 @@ public class CraftAttributeInstance implements AttributeInstance {
     @Override
     public void addModifier(AttributeModifier modifier) {
         Preconditions.checkArgument(modifier != null, "modifier");
-        handle.addModifier(convert(modifier));
+        handle.b(convert(modifier));
     }
 
     @Override
     public void removeModifier(AttributeModifier modifier) {
         Preconditions.checkArgument(modifier != null, "modifier");
-        handle.removeModifier(convert(modifier));
+        handle.c(convert(modifier));
     }
 
     @Override
@@ -70,6 +70,6 @@ public class CraftAttributeInstance implements AttributeInstance {
     }
 
     public static AttributeModifier convert(net.minecraft.server.AttributeModifier nms) {
-        return new AttributeModifier(nms.getUniqueId(), nms.getName(), nms.getAmount(), AttributeModifier.Operation.values()[nms.getOperation().ordinal()]);
+        return new AttributeModifier(nms.a(), nms.b(), nms.d(), AttributeModifier.Operation.values()[nms.c().ordinal()]);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
index 75420563..1939a881 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
@@ -3,7 +3,6 @@ package org.bukkit.craftbukkit.block;
 import com.google.common.base.Preconditions;
 import java.util.ArrayList;
 import java.util.List;
-import net.minecraft.server.BlockBannerAbstract;
 import net.minecraft.server.EnumColor;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.NBTTagList;
@@ -32,7 +31,9 @@ public class CraftBanner extends CraftBlockEntityState<TileEntityBanner> impleme
     public void load(TileEntityBanner banner) {
         super.load(banner);
 
-        base = DyeColor.getByWoolData((byte) ((BlockBannerAbstract) this.data.getBlock()).getColor().getColorIndex());
+        if (banner.color != null) {
+            base = DyeColor.getByWoolData((byte) banner.color.getColorIndex());
+        }
         patterns = new ArrayList<Pattern>();
 
         if (banner.patterns != null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
index 3e22d558..7cb4c3e5 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
@@ -4,6 +4,7 @@ import com.google.common.base.Preconditions;
 import net.minecraft.server.BlockPosition;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.TileEntity;
+import net.minecraft.server.World;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.block.TileState;
@@ -19,8 +20,6 @@ public class CraftBlockEntityState<T extends TileEntity> extends CraftBlockState
     public CraftBlockEntityState(Block block, Class<T> tileEntityClass) {
         super(block);
 
-        try {// Paper - show location on failure
-
         this.tileEntityClass = tileEntityClass;
 
         // get tile entity from block:
@@ -33,21 +32,13 @@ public class CraftBlockEntityState<T extends TileEntity> extends CraftBlockState
         if (DISABLE_SNAPSHOT) {
             this.snapshot = this.tileEntity;
         } else {
-            this.snapshot = this.createSnapshot(this.tileEntity);
+            this.snapshot = this.createSnapshot(this.tileEntity, world.getHandle());
         }
         // copy tile entity data:
         if(this.snapshot != null) {
             this.load(this.snapshot);
         }
         // Paper end
-        // Paper start - show location on failure
-        } catch (Throwable thr) {
-            if (thr instanceof ThreadDeath) {
-                throw (ThreadDeath)thr;
-            }
-            throw new RuntimeException("Failed to read BlockState at: world: " + block.getWorld().getName() + " location: (" + block.getX() + ", " + block.getY() + ", " + block.getZ() + ")", thr);
-        }
-        // Paper end
     }
 
     public final boolean snapshotDisabled; // Paper
@@ -63,7 +54,7 @@ public class CraftBlockEntityState<T extends TileEntity> extends CraftBlockState
         if (DISABLE_SNAPSHOT) {
             this.snapshot = this.tileEntity;
         } else {
-            this.snapshot = this.createSnapshot(this.tileEntity);
+            this.snapshot = this.createSnapshot(this.tileEntity, null);
         }
         // copy tile entity data:
         if(this.snapshot != null) {
@@ -72,13 +63,13 @@ public class CraftBlockEntityState<T extends TileEntity> extends CraftBlockState
         // Paper end
     }
 
-    private T createSnapshot(T tileEntity) {
+    private T createSnapshot(T tileEntity, World world) {
         if (tileEntity == null) {
             return null;
         }
 
         NBTTagCompound nbtTagCompound = tileEntity.save(new NBTTagCompound());
-        T snapshot = (T) TileEntity.create(nbtTagCompound);
+        T snapshot = (T) TileEntity.create(nbtTagCompound, world);
 
         return snapshot;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
index 839e645b..3c29abd5 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
@@ -22,7 +22,6 @@ import net.minecraft.server.IBlockData;
 import net.minecraft.server.IBlockState;
 import net.minecraft.server.INamable;
 import net.minecraft.server.IRegistry;
-import net.minecraft.server.NBTTagCompound;
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
 import org.bukkit.block.data.BlockData;
@@ -76,7 +75,7 @@ public class CraftBlockData implements BlockData {
     protected <B extends Enum<B>> Set<B> getValues(BlockStateEnum<?> nms, Class<B> bukkit) {
         ImmutableSet.Builder<B> values = ImmutableSet.builder();
 
-        for (Enum<?> e : nms.getValues()) {
+        for (Enum<?> e : nms.d()) {
             values.add(toBukkit(e, bukkit));
         }
 
@@ -276,16 +275,8 @@ public class CraftBlockData implements BlockData {
         return stateString.toString();
     }
 
-    public NBTTagCompound toStates() {
-        NBTTagCompound compound = new NBTTagCompound();
-
-        for (Map.Entry<IBlockState<?>, Comparable<?>> entry : state.getStateMap().entrySet()) {
-            IBlockState iblockstate = (IBlockState) entry.getKey();
-
-            compound.setString(iblockstate.a(), iblockstate.a(entry.getValue()));
-        }
-
-        return compound;
+    public String toStates() {
+        return ((BlockDataAbstract) state).getStateMap().entrySet().stream().map(BlockDataAbstract.STATE_TO_VALUE).collect(Collectors.joining(",")).toString();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
index a3ae4a9f..59d82cf6 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
@@ -74,7 +74,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
             return ((EntityMinecartCommandBlock) ((CraftMinecartCommand) sender).getHandle()).getCommandBlock().getWrapper();
         }
         if (sender instanceof RemoteConsoleCommandSender) {
-            return ((DedicatedServer) MinecraftServer.getServer()).remoteControlCommandListener.getWrapper();
+            return ((DedicatedServer) MinecraftServer.getServer()).remoteControlCommandListener.f();
         }
         if (sender instanceof ConsoleCommandSender) {
             return ((CraftServer) sender.getServer()).getServer().getServerCommandListener();
diff --git a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
index 8602069c..6818e1ad 100644
--- a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
+++ b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
@@ -183,7 +183,7 @@ public class CraftEnchantment extends Enchantment {
             return false;
         }
         CraftEnchantment ench = (CraftEnchantment) other;
-        return !target.isCompatible(ench.target);
+        return !target.b(ench.target);
     }
 
     public net.minecraft.server.Enchantment getHandle() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
index ab6cbf56..a52eae8c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
@@ -151,7 +151,7 @@ public class CraftAreaEffectCloud extends CraftEntity implements AreaEffectCloud
             }
             getHandle().effects.remove(existing);
         }
-        getHandle().addEffect(CraftPotionUtil.fromBukkit(effect));
+        getHandle().a(CraftPotionUtil.fromBukkit(effect));
         getHandle().refreshEffects();
         return true;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
index 29d23db4..0e4afe8f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
@@ -39,18 +39,6 @@ public class CraftArrow extends AbstractProjectile implements AbstractArrow {
         getHandle().setDamage(damage);
     }
 
-    @Override
-    public int getPierceLevel() {
-        return getHandle().getPierceLevel();
-    }
-
-    @Override
-    public void setPierceLevel(int pierceLevel) {
-        Preconditions.checkArgument(0 <= pierceLevel && pierceLevel <= Byte.MAX_VALUE, "Pierce level out of range, expected 0 < level < 127");
-
-        getHandle().setPierceLevel((byte) pierceLevel);
-    }
-
     @Override
     public boolean isCritical() {
         return getHandle().isCritical();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
index 075a5e77..2d38823c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
@@ -64,16 +64,6 @@ public class CraftCreeper extends CraftMonster implements Creeper {
         return getHandle().explosionRadius;
     }
 
-    @Override
-    public void explode() {
-        getHandle().explode();
-    }
-
-    @Override
-    public void ignite() {
-        getHandle().ignite();
-    }
-
     @Override
     public EntityCreeper getHandle() {
         return (EntityCreeper) entity;
@@ -101,5 +91,9 @@ public class CraftCreeper extends CraftMonster implements Creeper {
     public int getFuseTicks() {
         return getHandle().fuseTicks;
     }
+
+    public void explode() {
+        getHandle().explode();
+    }
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
index 54a9f39d..fc3dae30 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
@@ -26,7 +26,7 @@ public class CraftHanging extends CraftEntity implements Hanging {
     @Override
     public boolean setFacingDirection(BlockFace face, boolean force) {
         EntityHanging hanging = getHandle();
-        EnumDirection dir = hanging.getDirection();
+        EnumDirection dir = hanging.direction;
         switch (face) {
             case SOUTH:
             default:
@@ -52,7 +52,7 @@ public class CraftHanging extends CraftEntity implements Hanging {
 
     @Override
     public BlockFace getFacing() {
-        EnumDirection direction = this.getHandle().getDirection();
+        EnumDirection direction = this.getHandle().direction;
         if (direction == null) return BlockFace.SELF;
         return CraftBlock.notchToBlockFace(direction);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
index 92c7449b..4a941801 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
@@ -173,8 +173,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
 
     @Override
     public boolean sleep(Location location, boolean force) {
-        Preconditions.checkArgument(location != null, "Location cannot be null");
-        Preconditions.checkArgument(location.getWorld() != null, "Location needs to be in a world");
+        Preconditions.checkArgument(location != null, "Location == null");
         Preconditions.checkArgument(location.getWorld().equals(getWorld()), "Cannot sleep across worlds");
 
         BlockPosition blockposition = new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ());
@@ -597,13 +596,11 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
 
         IMerchant mcMerchant;
         IChatBaseComponent name;
-        int level = 1; // note: using level 0 with active 'is-regular-villager'-flag allows hiding the name suffix
-        if (merchant instanceof CraftAbstractVillager) {
-            mcMerchant = ((CraftAbstractVillager) merchant).getHandle();
-            name = ((CraftAbstractVillager) merchant).getHandle().getScoreboardDisplayName();
-            if (merchant instanceof CraftVillager) {
-                level = ((CraftVillager) merchant).getHandle().getVillagerData().getLevel();
-            }
+        int level = 0;
+        if (merchant instanceof CraftVillager) {
+            mcMerchant = ((CraftVillager) merchant).getHandle();
+            name = ((CraftVillager) merchant).getHandle().getScoreboardDisplayName();
+            level = ((CraftVillager) merchant).getHandle().getVillagerData().getLevel();
         } else if (merchant instanceof CraftMerchantCustom) {
             mcMerchant = ((CraftMerchantCustom) merchant).getMerchant();
             name = ((CraftMerchantCustom) merchant).getMerchant().getScoreboardDisplayName();
@@ -651,7 +648,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     public boolean hasCooldown(Material material) {
         Preconditions.checkArgument(material != null, "material");
 
-        return getHandle().getCooldownTracker().hasCooldown(CraftMagicNumbers.getItem(material));
+        return getHandle().getCooldownTracker().a(CraftMagicNumbers.getItem(material));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
index 9ad180d9..712ec431 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
@@ -24,7 +24,7 @@ public class CraftItemFrame extends CraftHanging implements ItemFrame {
     @Override
     public boolean setFacingDirection(BlockFace face, boolean force) {
         EntityHanging hanging = getHandle();
-        EnumDirection oldDir = hanging.getDirection();
+        EnumDirection oldDir = hanging.direction;
         EnumDirection newDir = CraftBlock.blockFaceToNotch(face);
 
         getHandle().setDirection(newDir);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index e0de3820..c4aa1945 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -106,7 +106,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         if ((health < 0) || (health > getMaxHealth())) {
             // Paper - Be more informative
             throw new IllegalArgumentException("Health must be between 0 and " + getMaxHealth() + ", but was " + health
-                    + ". (attribute base value: " + this.getHandle().getAttributeInstance(GenericAttributes.MAX_HEALTH).getBaseValue()
+                    + ". (attribute base value: " + this.getHandle().getAttributeInstance(GenericAttributes.MAX_HEALTH).b()
                     + (this instanceof CraftPlayer ? ", player: " + this.getName() + ')' : ')'));
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
index 7960839b..805261cb 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
@@ -34,11 +34,11 @@ public class CraftPainting extends CraftHanging implements Painting {
         EntityPainting painting = this.getHandle();
         Paintings oldArt = painting.art;
         painting.art = CraftArt.BukkitToNotch(art);
-        painting.setDirection(painting.getDirection());
+        painting.setDirection(painting.direction);
         if (!force && !painting.survives()) {
             // Revert painting since it doesn't fit
             painting.art = oldArt;
-            painting.setDirection(painting.getDirection());
+            painting.setDirection(painting.direction);
             return false;
         }
         this.update();
@@ -60,7 +60,7 @@ public class CraftPainting extends CraftHanging implements Painting {
         EntityPainting painting = EntityTypes.PAINTING.a(world);
         painting.blockPosition = getHandle().blockPosition;
         painting.art = getHandle().art;
-        painting.setDirection(getHandle().getDirection());
+        painting.setDirection(getHandle().direction);
         getHandle().die();
         getHandle().velocityChanged = true; // because this occurs when the painting is broken, so it might be important
         world.addEntity(painting);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index e920545d..651ca319 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -39,7 +39,6 @@ import net.minecraft.server.Entity;
 import net.minecraft.server.EntityLiving;
 import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.EnumChatFormat;
-import net.minecraft.server.EnumColor;
 import net.minecraft.server.EnumGamemode;
 import net.minecraft.server.IChatBaseComponent;
 import net.minecraft.server.MapIcon;
@@ -72,7 +71,6 @@ import org.apache.commons.lang.Validate;
 import org.bukkit.Achievement;
 import org.bukkit.BanList;
 import org.bukkit.Bukkit;
-import org.bukkit.DyeColor;
 import org.bukkit.Effect;
 import org.bukkit.GameMode;
 import org.bukkit.Instrument;
@@ -427,7 +425,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void kickPlayer(String message) {
-        org.spigotmc.AsyncCatcher.catchOp("player kick"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp( "player kick"); // Spigot
         if (getHandle().playerConnection == null) return;
 
         getHandle().playerConnection.disconnect(message == null ? "" : message);
@@ -653,11 +651,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void sendSignChange(Location loc, String[] lines) {
-       sendSignChange(loc, lines, DyeColor.BLACK);
-    }
-
-    @Override
-    public void sendSignChange(Location loc, String[] lines, DyeColor dyeColor) {
         if (getHandle().playerConnection == null) {
             return;
         }
@@ -667,7 +660,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
 
         Validate.notNull(loc, "Location can not be null");
-        Validate.notNull(dyeColor, "DyeColor can not be null");
         if (lines.length < 4) {
             throw new IllegalArgumentException("Must have at least 4 lines");
         }
@@ -675,7 +667,6 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         IChatBaseComponent[] components = CraftSign.sanitizeLines(lines);
         TileEntitySign sign = new TileEntitySign();
         sign.setPosition(new BlockPosition(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ()));
-        sign.setColor(EnumColor.fromColorIndex(dyeColor.getWoolData()));
         System.arraycopy(components, 0, sign.lines, 0, sign.lines.length);
 
         getHandle().playerConnection.sendPacket(sign.getUpdatePacket());
@@ -1958,7 +1949,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         ItemStack hand = getInventory().getItemInMainHand();
         getInventory().setItemInMainHand(book);
-        getHandle().openBook(org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(book), net.minecraft.server.EnumHand.MAIN_HAND);
+        getHandle().a(org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(book), net.minecraft.server.EnumHand.MAIN_HAND); // PAIL rename openBook
         getInventory().setItemInMainHand(hand);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
index ecdaa2b9..ced99327 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
@@ -51,7 +51,7 @@ public class CraftTippedArrow extends CraftArrow implements Arrow {
             }
             getHandle().effects.remove(existing);
         }
-        getHandle().addEffect(CraftPotionUtil.fromBukkit(effect));
+        getHandle().a(CraftPotionUtil.fromBukkit(effect));
         getHandle().refreshEffects();
         return true;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
index f291a8d7..ba769f98 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
@@ -5,11 +5,7 @@ import java.util.Locale;
 import net.minecraft.server.EntityVillager;
 import net.minecraft.server.IRegistry;
 import net.minecraft.server.VillagerProfession;
-import net.minecraft.server.IBlockData;
-import net.minecraft.server.BlockPosition;
-import net.minecraft.server.BlockBed;
 import org.apache.commons.lang.Validate;
-import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.entity.EntityType;
@@ -82,29 +78,6 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {
         getHandle().setExperience(experience);
     }
 
-    @Override
-    public boolean sleep(Location location) {
-        Preconditions.checkArgument(location != null, "Location cannot be null");
-        Preconditions.checkArgument(location.getWorld() != null, "Location needs to be in a world");
-        Preconditions.checkArgument(location.getWorld().equals(getWorld()), "Cannot sleep across worlds");
-
-        BlockPosition position = new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ());
-        IBlockData iblockdata = getHandle().world.getType(position);
-        if (!(iblockdata.getBlock() instanceof BlockBed)) {
-            return false;
-        }
-
-        getHandle().e(position); // PAIL rename sleep
-        return true;
-    }
-
-    @Override
-    public void wakeup() {
-        Preconditions.checkState(isSleeping(), "Cannot wakeup if not sleeping");
-
-        getHandle().dy(); // PAIL rename wakeup
-    }
-
     public static Profession nmsToBukkitProfession(VillagerProfession nms) {
         return Profession.valueOf(IRegistry.VILLAGER_PROFESSION.getKey(nms).getKey().toUpperCase(Locale.ROOT));
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/memory/CraftMemoryMapper.java b/src/main/java/org/bukkit/craftbukkit/entity/memory/CraftMemoryMapper.java
index 65470e7e..d7a7951d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/memory/CraftMemoryMapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/memory/CraftMemoryMapper.java
@@ -22,12 +22,8 @@ public final class CraftMemoryMapper {
     }
 
     public static Object toNms(Object object) {
-        if (object == null) {
-            return null;
-        } else if (object instanceof Location) {
+        if (object instanceof Location) {
             return toNms((Location) object);
-        } else if (object instanceof Long) {
-            return object;
         }
 
         throw new UnsupportedOperationException("Do not know how to map " + object);
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 22aa4767..0d667655 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -1081,11 +1081,7 @@ public class CraftEventFactory {
     }
 
     public static FoodLevelChangeEvent callFoodLevelChangeEvent(EntityHuman entity, int level) {
-        return callFoodLevelChangeEvent(entity, level, null);
-    }
-
-    public static FoodLevelChangeEvent callFoodLevelChangeEvent(EntityHuman entity, int level, ItemStack item) {
-        FoodLevelChangeEvent event = new FoodLevelChangeEvent(entity.getBukkitEntity(), level, (item == null) ? null : CraftItemStack.asBukkitCopy(item));
+        FoodLevelChangeEvent event = new FoodLevelChangeEvent(entity.getBukkitEntity(), level);
         entity.getBukkitEntity().getServer().getPluginManager().callEvent(event);
         return event;
     }
@@ -1370,7 +1366,7 @@ public class CraftEventFactory {
         c.setChatModifier(modi);
         if (c instanceof ChatMessage) {
             ChatMessage cm = (ChatMessage) c;
-            Object[] oo = cm.getArgs();
+            Object[] oo = cm.l();
             for (int i = 0; i < oo.length; i++) {
                 Object o = oo[i];
                 if (o instanceof IChatBaseComponent) {
@@ -1378,7 +1374,7 @@ public class CraftEventFactory {
                 }
             }
         }
-        List<IChatBaseComponent> ls = c.getSiblings();
+        List<IChatBaseComponent> ls = c.a();
         if (ls != null) {
             for (int i = 0; i < ls.size(); i++) {
                 ls.set(i, stripEvents(ls.get(i)));
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java b/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
index 4570ed99..7772d590 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
@@ -21,11 +21,9 @@ public final class CraftChunkData implements ChunkGenerator.ChunkData {
     private final int maxHeight;
     private final ChunkSection[] sections;
     private Set<BlockPosition> tiles;
-    private World world; // Paper - Anti-Xray
 
     public CraftChunkData(World world) {
         this(world.getMaxHeight());
-        this.world = world; // Paper - Anti-Xray
     }
 
     /* pp for tests */ CraftChunkData(int maxHeight) {
@@ -159,7 +157,7 @@ public final class CraftChunkData implements ChunkGenerator.ChunkData {
     private ChunkSection getChunkSection(int y, boolean create) {
         ChunkSection section = sections[y >> 4];
         if (create && section == null) {
-            sections[y >> 4] = section = new ChunkSection(y, null, world instanceof org.bukkit.craftbukkit.CraftWorld ? ((org.bukkit.craftbukkit.CraftWorld) world).getHandle() : null, true); // Paper - Anti-Xray
+            sections[y >> 4] = section = new ChunkSection(y);
         }
         return section;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
index 68d38655..90edf5e5 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
@@ -13,13 +13,9 @@ import net.minecraft.server.GeneratorSettingsDefault;
 import net.minecraft.server.HeightMap;
 import net.minecraft.server.IChunkAccess;
 import net.minecraft.server.ITileEntity;
-import net.minecraft.server.MobSpawnerCat;
-import net.minecraft.server.MobSpawnerPatrol;
-import net.minecraft.server.MobSpawnerPhantom;
 import net.minecraft.server.RegionLimitedWorldAccess;
 import net.minecraft.server.StructureGenerator;
 import net.minecraft.server.TileEntity;
-import net.minecraft.server.VillageSiege;
 import net.minecraft.server.World;
 import net.minecraft.server.WorldGenFeatureConfiguration;
 import net.minecraft.server.WorldGenStage;
@@ -37,10 +33,6 @@ public class CustomChunkGenerator extends InternalChunkGenerator<GeneratorSettin
     private final long seed;
     private final Random random;
     private final StructureGenerator strongholdGen = WorldGenerator.STRONGHOLD;
-    private final MobSpawnerPhantom mobSpawnerPhantom = new MobSpawnerPhantom();
-    private final MobSpawnerPatrol mobSpawnerPatrol = new MobSpawnerPatrol();
-    private final MobSpawnerCat mobSpawnerCat = new MobSpawnerCat();
-    private final VillageSiege villageSiege = new VillageSiege();
 
     private static class CustomBiomeGrid implements BiomeGrid {
         BiomeBase[] biome;
@@ -159,10 +151,6 @@ public class CustomChunkGenerator extends InternalChunkGenerator<GeneratorSettin
 
     @Override
     public void doMobSpawning(WorldServer worldserver, boolean flag, boolean flag1) {
-        this.mobSpawnerPhantom.a(worldserver, flag, flag1);
-        this.mobSpawnerPatrol.a(worldserver, flag, flag1);
-        this.mobSpawnerCat.a(worldserver, flag, flag1);
-        this.villageSiege.a(worldserver, flag, flag1);
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
index 026a0c39..f05f4c1d 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
@@ -10,6 +10,7 @@ import net.minecraft.server.InventoryEnderChest;
 import net.minecraft.server.InventoryMerchant;
 import net.minecraft.server.PlayerInventory;
 import net.minecraft.server.TileEntityBarrel;
+import net.minecraft.server.TileEntityBeacon;
 import net.minecraft.server.TileEntityBlastFurnace;
 import net.minecraft.server.TileEntityBrewingStand;
 import net.minecraft.server.TileEntityDispenser;
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java
index 9374c270..70c9605c 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryAnvil.java
@@ -5,18 +5,54 @@ import net.minecraft.server.ContainerAnvil;
 import net.minecraft.server.IInventory;
 import org.bukkit.Location;
 import org.bukkit.inventory.AnvilInventory;
+import org.bukkit.inventory.ItemStack;
 
-public class CraftInventoryAnvil extends CraftResultInventory implements AnvilInventory {
+public class CraftInventoryAnvil extends CraftInventory implements AnvilInventory {
 
     private final Location location;
+    private final IInventory resultInventory;
     private final ContainerAnvil container;
 
     public CraftInventoryAnvil(Location location, IInventory inventory, IInventory resultInventory, ContainerAnvil container) {
-        super(inventory, resultInventory);
+        super(inventory);
         this.location = location;
+        this.resultInventory = resultInventory;
         this.container = container;
     }
 
+    public IInventory getResultInventory() {
+        return resultInventory;
+    }
+
+    public IInventory getIngredientsInventory() {
+        return inventory;
+    }
+
+    @Override
+    public ItemStack getItem(int slot) {
+        if (slot < getIngredientsInventory().getSize()) {
+            net.minecraft.server.ItemStack item = getIngredientsInventory().getItem(slot);
+            return item.isEmpty() ? null : CraftItemStack.asCraftMirror(item);
+        } else {
+            net.minecraft.server.ItemStack item = getResultInventory().getItem(slot - getIngredientsInventory().getSize());
+            return item.isEmpty() ? null : CraftItemStack.asCraftMirror(item);
+        }
+    }
+
+    @Override
+    public void setItem(int index, ItemStack item) {
+        if (index < getIngredientsInventory().getSize()) {
+            getIngredientsInventory().setItem(index, CraftItemStack.asNMSCopy(item));
+        } else {
+            getResultInventory().setItem((index - getIngredientsInventory().getSize()), CraftItemStack.asNMSCopy(item));
+        }
+    }
+
+    @Override
+    public int getSize() {
+        return getResultInventory().getSize() + getIngredientsInventory().getSize();
+    }
+
     @Override
     public Location getLocation() {
         return location;
@@ -29,12 +65,12 @@ public class CraftInventoryAnvil extends CraftResultInventory implements AnvilIn
 
     @Override
     public int getRepairCost() {
-        return container.levelCost.get();
+        return container.levelCost.b();
     }
 
     @Override
     public void setRepairCost(int i) {
-        container.levelCost.set(i);
+        container.levelCost.a(i);
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCartography.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCartography.java
index 9458de90..892fc902 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCartography.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCartography.java
@@ -3,9 +3,17 @@ package org.bukkit.craftbukkit.inventory;
 import net.minecraft.server.IInventory;
 import org.bukkit.inventory.CartographyInventory;
 
-public class CraftInventoryCartography extends CraftResultInventory implements CartographyInventory {
+public class CraftInventoryCartography extends CraftInventory implements CartographyInventory {
+
+    private final IInventory resultInventory;
 
     public CraftInventoryCartography(IInventory inventory, IInventory resultInventory) {
-        super(inventory, resultInventory);
+        super(inventory);
+        this.resultInventory = resultInventory;
+    }
+
+    @Override
+    public int getSize() {
+        return super.getSize() + resultInventory.getSize();
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryGrindstone.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryGrindstone.java
index ce89ce76..704d6504 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryGrindstone.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryGrindstone.java
@@ -3,9 +3,12 @@ package org.bukkit.craftbukkit.inventory;
 import net.minecraft.server.IInventory;
 import org.bukkit.inventory.GrindstoneInventory;
 
-public class CraftInventoryGrindstone extends CraftResultInventory implements GrindstoneInventory {
+public class CraftInventoryGrindstone extends CraftInventory implements GrindstoneInventory {
+
+    private final IInventory resultInventory;
 
     public CraftInventoryGrindstone(IInventory inventory, IInventory resultInventory) {
-        super(inventory, resultInventory);
+        super(inventory);
+        this.resultInventory = resultInventory;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryLoom.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryLoom.java
index d3c54179..341d831a 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryLoom.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryLoom.java
@@ -3,9 +3,12 @@ package org.bukkit.craftbukkit.inventory;
 import net.minecraft.server.IInventory;
 import org.bukkit.inventory.LoomInventory;
 
-public class CraftInventoryLoom extends CraftResultInventory implements LoomInventory {
+public class CraftInventoryLoom extends CraftInventory implements LoomInventory {
+
+    private final IInventory resultInventory;
 
     public CraftInventoryLoom(IInventory inventory, IInventory resultInventory) {
-        super(inventory, resultInventory);
+        super(inventory);
+        this.resultInventory = resultInventory;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryStonecutter.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryStonecutter.java
index e4135b67..880df2a1 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryStonecutter.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryStonecutter.java
@@ -3,9 +3,9 @@ package org.bukkit.craftbukkit.inventory;
 import net.minecraft.server.IInventory;
 import org.bukkit.inventory.StonecutterInventory;
 
-public class CraftInventoryStonecutter extends CraftResultInventory implements StonecutterInventory {
+public class CraftInventoryStonecutter extends CraftInventory implements StonecutterInventory {
 
-    public CraftInventoryStonecutter(IInventory inventory, IInventory resultInventory) {
-        super(inventory, resultInventory);
+    public CraftInventoryStonecutter(IInventory inventory) {
+        super(inventory);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
index 80f71a77..df70c5c0 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
@@ -142,20 +142,18 @@ public final class CraftItemFactory implements ItemFactory {
             return meta instanceof CraftMetaBanner ? meta : new CraftMetaBanner(meta);
         case BAT_SPAWN_EGG:
         case BLAZE_SPAWN_EGG:
-        case CAT_SPAWN_EGG:
         case CAVE_SPIDER_SPAWN_EGG:
         case CHICKEN_SPAWN_EGG:
         case COD_SPAWN_EGG:
         case COW_SPAWN_EGG:
         case CREEPER_SPAWN_EGG:
         case DOLPHIN_SPAWN_EGG:
-        case DONKEY_SPAWN_EGG:
         case DROWNED_SPAWN_EGG:
+        case DONKEY_SPAWN_EGG:
         case ELDER_GUARDIAN_SPAWN_EGG:
         case ENDERMAN_SPAWN_EGG:
         case ENDERMITE_SPAWN_EGG:
         case EVOKER_SPAWN_EGG:
-        case FOX_SPAWN_EGG:
         case GHAST_SPAWN_EGG:
         case GUARDIAN_SPAWN_EGG:
         case HORSE_SPAWN_EGG:
@@ -165,15 +163,12 @@ public final class CraftItemFactory implements ItemFactory {
         case MOOSHROOM_SPAWN_EGG:
         case MULE_SPAWN_EGG:
         case OCELOT_SPAWN_EGG:
-        case PANDA_SPAWN_EGG:
         case PARROT_SPAWN_EGG:
         case PHANTOM_SPAWN_EGG:
         case PIG_SPAWN_EGG:
-        case PILLAGER_SPAWN_EGG:
         case POLAR_BEAR_SPAWN_EGG:
         case PUFFERFISH_SPAWN_EGG:
         case RABBIT_SPAWN_EGG:
-        case RAVAGER_SPAWN_EGG:
         case SALMON_SPAWN_EGG:
         case SHEEP_SPAWN_EGG:
         case SHULKER_SPAWN_EGG:
@@ -184,13 +179,11 @@ public final class CraftItemFactory implements ItemFactory {
         case SPIDER_SPAWN_EGG:
         case SQUID_SPAWN_EGG:
         case STRAY_SPAWN_EGG:
-        case TRADER_LLAMA_SPAWN_EGG:
         case TROPICAL_FISH_SPAWN_EGG:
         case TURTLE_SPAWN_EGG:
         case VEX_SPAWN_EGG:
         case VILLAGER_SPAWN_EGG:
         case VINDICATOR_SPAWN_EGG:
-        case WANDERING_TRADER_SPAWN_EGG:
         case WITCH_SPAWN_EGG:
         case WITHER_SKELETON_SPAWN_EGG:
         case WOLF_SPAWN_EGG:
@@ -199,10 +192,10 @@ public final class CraftItemFactory implements ItemFactory {
         case ZOMBIE_SPAWN_EGG:
         case ZOMBIE_VILLAGER_SPAWN_EGG:
             return meta instanceof CraftMetaSpawnEgg ? meta : new CraftMetaSpawnEgg(meta);
-        case ARMOR_STAND:
-            return meta instanceof CraftMetaArmorStand ? meta : new CraftMetaArmorStand(meta);
         case KNOWLEDGE_BOOK:
             return meta instanceof CraftMetaKnowledgeBook ? meta : new CraftMetaKnowledgeBook(meta);
+        case ARMOR_STAND:
+            return meta instanceof CraftMetaArmorStand ? meta : new CraftMetaArmorStand(meta); // Paper
         case FURNACE:
         case CHEST:
         case TRAPPED_CHEST:
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index b8775dee..8a6a1353 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -350,20 +350,18 @@ public final class CraftItemStack extends ItemStack {
                 return new CraftMetaBanner(item.getTag());
             case BAT_SPAWN_EGG:
             case BLAZE_SPAWN_EGG:
-            case CAT_SPAWN_EGG:
             case CAVE_SPIDER_SPAWN_EGG:
             case CHICKEN_SPAWN_EGG:
             case COD_SPAWN_EGG:
             case COW_SPAWN_EGG:
             case CREEPER_SPAWN_EGG:
             case DOLPHIN_SPAWN_EGG:
-            case DONKEY_SPAWN_EGG:
             case DROWNED_SPAWN_EGG:
+            case DONKEY_SPAWN_EGG:
             case ELDER_GUARDIAN_SPAWN_EGG:
             case ENDERMAN_SPAWN_EGG:
             case ENDERMITE_SPAWN_EGG:
             case EVOKER_SPAWN_EGG:
-            case FOX_SPAWN_EGG:
             case GHAST_SPAWN_EGG:
             case GUARDIAN_SPAWN_EGG:
             case HORSE_SPAWN_EGG:
@@ -373,15 +371,12 @@ public final class CraftItemStack extends ItemStack {
             case MOOSHROOM_SPAWN_EGG:
             case MULE_SPAWN_EGG:
             case OCELOT_SPAWN_EGG:
-            case PANDA_SPAWN_EGG:
             case PARROT_SPAWN_EGG:
             case PHANTOM_SPAWN_EGG:
             case PIG_SPAWN_EGG:
-            case PILLAGER_SPAWN_EGG:
             case POLAR_BEAR_SPAWN_EGG:
             case PUFFERFISH_SPAWN_EGG:
             case RABBIT_SPAWN_EGG:
-            case RAVAGER_SPAWN_EGG:
             case SALMON_SPAWN_EGG:
             case SHEEP_SPAWN_EGG:
             case SHULKER_SPAWN_EGG:
@@ -392,13 +387,11 @@ public final class CraftItemStack extends ItemStack {
             case SPIDER_SPAWN_EGG:
             case SQUID_SPAWN_EGG:
             case STRAY_SPAWN_EGG:
-            case TRADER_LLAMA_SPAWN_EGG:
             case TROPICAL_FISH_SPAWN_EGG:
             case TURTLE_SPAWN_EGG:
             case VEX_SPAWN_EGG:
             case VILLAGER_SPAWN_EGG:
             case VINDICATOR_SPAWN_EGG:
-            case WANDERING_TRADER_SPAWN_EGG:
             case WITCH_SPAWN_EGG:
             case WITHER_SKELETON_SPAWN_EGG:
             case WOLF_SPAWN_EGG:
@@ -407,10 +400,10 @@ public final class CraftItemStack extends ItemStack {
             case ZOMBIE_SPAWN_EGG:
             case ZOMBIE_VILLAGER_SPAWN_EGG:
                 return new CraftMetaSpawnEgg(item.getTag());
-            case ARMOR_STAND:
-                return new CraftMetaArmorStand(item.getTag());
             case KNOWLEDGE_BOOK:
                 return new CraftMetaKnowledgeBook(item.getTag());
+            case ARMOR_STAND:
+                return new CraftMetaArmorStand(item.getTag()); // Paper
             case FURNACE:
             case CHEST:
             case TRAPPED_CHEST:
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantCustom.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantCustom.java
index b8f2904f..b9c99f2d 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantCustom.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantCustom.java
@@ -90,12 +90,12 @@ public class CraftMerchantCustom extends CraftMerchant {
         }
 
         @Override
-        public void s(int i) {
+        public void r(int i) {
         }
 
         @Override
         public boolean ea() {
-            return false; // is-regular-villager flag (hides some gui elements: xp bar, name suffix)
+            return true;
         }
 
         @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaArmorStand.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaArmorStand.java
index 3723facc..c00b89c8 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaArmorStand.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaArmorStand.java
@@ -1,35 +1,44 @@
 package org.bukkit.craftbukkit.inventory;
 
-import com.google.common.collect.ImmutableMap.Builder;
-import java.util.Map;
+import com.destroystokyo.paper.inventory.meta.ArmorStandMeta;
+import com.google.common.collect.ImmutableMap;
+import com.mojang.datafixers.Dynamic;
+
+import net.minecraft.server.DataConverterTypes;
+import net.minecraft.server.DynamicOpsNBT;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.NBTBase;
 import net.minecraft.server.NBTTagCompound;
+
+import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+
+import java.util.Map;
 
+// Paper - Created entire class
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
-public class CraftMetaArmorStand extends CraftMetaItem implements com.destroystokyo.paper.inventory.meta.ArmorStandMeta { // Paper
+public class CraftMetaArmorStand extends CraftMetaItem implements ArmorStandMeta {
 
     static final ItemMetaKey ENTITY_TAG = new ItemMetaKey("EntityTag", "entity-tag");
-    // Paper start
     static final ItemMetaKey INVISIBLE = new ItemMetaKey("Invisible", "invisible");
     static final ItemMetaKey NO_BASE_PLATE = new ItemMetaKey("NoBasePlate", "no-base-plate");
     static final ItemMetaKey SHOW_ARMS = new ItemMetaKey("ShowArms", "show-arms");
     static final ItemMetaKey SMALL = new ItemMetaKey("Small", "small");
     static final ItemMetaKey MARKER = new ItemMetaKey("Marker", "marker");
 
+    private NBTTagCompound entityTag;
+
     private boolean invisible;
     private boolean noBasePlate;
     private boolean showArms;
     private boolean small;
     private boolean marker;
-    // Paper end
-    NBTTagCompound entityTag;
 
     CraftMetaArmorStand(CraftMetaItem meta) {
         super(meta);
-        
-        // Paper start
+
         if (!(meta instanceof CraftMetaArmorStand)) {
             return;
         }
@@ -40,7 +49,6 @@ public class CraftMetaArmorStand extends CraftMetaItem implements com.destroysto
         this.showArms = standMeta.showArms;
         this.small = standMeta.small;
         this.marker = standMeta.marker;
-        // Paper end
     }
 
     CraftMetaArmorStand(NBTTagCompound tag) {
@@ -49,7 +57,6 @@ public class CraftMetaArmorStand extends CraftMetaItem implements com.destroysto
         if (tag.hasKey(ENTITY_TAG.NBT)) {
             entityTag = tag.getCompound(ENTITY_TAG.NBT);
 
-            // Paper start
             if (entityTag.hasKey(INVISIBLE.NBT)) {
                 invisible = entityTag.getBoolean(INVISIBLE.NBT);
             }
@@ -69,14 +76,12 @@ public class CraftMetaArmorStand extends CraftMetaItem implements com.destroysto
             if (entityTag.hasKey(MARKER.NBT)) {
                 marker = entityTag.getBoolean(MARKER.NBT);
             }
-            // Paper end
         }
     }
 
     CraftMetaArmorStand(Map<String, Object> map) {
         super(map);
 
-        // Paper start
         boolean invis = SerializableMeta.getBoolean(map, INVISIBLE.BUKKIT);
         boolean noBase = SerializableMeta.getBoolean(map, NO_BASE_PLATE.BUKKIT);
         boolean showArms = SerializableMeta.getBoolean(map, SHOW_ARMS.BUKKIT);
@@ -88,30 +93,12 @@ public class CraftMetaArmorStand extends CraftMetaItem implements com.destroysto
         this.showArms = showArms;
         this.small = small;
         this.marker = marker;
-        // Paper end
-    }
-
-    @Override
-    void deserializeInternal(NBTTagCompound tag, Object context) {
-        super.deserializeInternal(tag, context);
-
-        if (tag.hasKey(ENTITY_TAG.NBT)) {
-            entityTag = tag.getCompound(ENTITY_TAG.NBT);
-        }
-    }
-
-    @Override
-    void serializeInternal(Map<String, NBTBase> internalTags) {
-        if (entityTag != null && !entityTag.isEmpty()) {
-            internalTags.put(ENTITY_TAG.NBT, entityTag);
-        }
     }
 
     @Override
     void applyToItem(NBTTagCompound tag) {
         super.applyToItem(tag);
 
-        // Paper start
         if (!isArmorStandEmpty() && entityTag == null) {
             entityTag = new NBTTagCompound();
         }
@@ -135,7 +122,6 @@ public class CraftMetaArmorStand extends CraftMetaItem implements com.destroysto
         if (isMarker()) {
             entityTag.setBoolean(MARKER.NBT, marker);
         }
-        // Paper end
 
         if (entityTag != null) {
             tag.set(ENTITY_TAG.NBT, entityTag);
@@ -162,51 +148,9 @@ public class CraftMetaArmorStand extends CraftMetaItem implements com.destroysto
     }
 
     @Override
-    boolean equalsCommon(CraftMetaItem meta) {
-        if (!super.equalsCommon(meta)) {
-            return false;
-        }
-        if (meta instanceof CraftMetaArmorStand) {
-            CraftMetaArmorStand that = (CraftMetaArmorStand) meta;
-
-            // Paper start
-            return invisible == that.invisible &&
-                noBasePlate == that.noBasePlate &&
-                showArms == that.showArms &&
-                small == that.small &&
-                marker == that.marker;
-            // Paper end
-        }
-        return true;
-    }
-
-    @Override
-    boolean notUncommon(CraftMetaItem meta) {
-        return super.notUncommon(meta) && (meta instanceof CraftMetaArmorStand || isArmorStandEmpty());
-    }
-
-    @Override
-    int applyHash() {
-        final int original;
-        int hash = original = super.applyHash();
-
-        // Paper start
-        hash += entityTag != null ? 73 * hash + entityTag.hashCode() : 0;
-        hash += isInvisible() ? 61 * hash + 1231 : 0;
-        hash += hasNoBasePlate() ? 61 * hash + 1231 : 0;
-        hash += shouldShowArms() ? 61 * hash + 1231 : 0;
-        hash += isSmall() ? 61 * hash + 1231 : 0;
-        hash += isMarker() ? 61 * hash + 1231 : 0;
-        // Paper end
-
-        return original != hash ? CraftMetaArmorStand.class.hashCode() ^ hash : hash;
-    }
-
-    @Override
-    Builder<String, Object> serialize(Builder<String, Object> builder) {
+    ImmutableMap.Builder<String, Object> serialize(ImmutableMap.Builder<String, Object> builder) {
         super.serialize(builder);
 
-        // Paper start
         if (isInvisible()) {
             builder.put(INVISIBLE.BUKKIT, invisible);
         }
@@ -226,23 +170,69 @@ public class CraftMetaArmorStand extends CraftMetaItem implements com.destroysto
         if (isMarker()) {
             builder.put(MARKER.BUKKIT, marker);
         }
-        // Paper end
 
         return builder;
     }
 
     @Override
-    public CraftMetaArmorStand clone() {
-        CraftMetaArmorStand clone = (CraftMetaArmorStand) super.clone();
+    void deserializeInternal(NBTTagCompound tag, Object context) {
+        super.deserializeInternal(tag, context);
 
-        if (entityTag != null) {
-            clone.entityTag = entityTag.clone();
+        if (tag.hasKey(ENTITY_TAG.NBT)) {
+            entityTag = tag.getCompound(ENTITY_TAG.NBT);
+            MinecraftServer.getServer().dataConverterManager.update(DataConverterTypes.ENTITY, new Dynamic(DynamicOpsNBT.a, entityTag), -1, Bukkit.getUnsafe().getDataVersion());
+
+            if (entityTag.hasKey(INVISIBLE.NBT)) {
+                invisible = entityTag.getBoolean(INVISIBLE.NBT);
+            }
+
+            if (entityTag.hasKey(NO_BASE_PLATE.NBT)) {
+                noBasePlate = entityTag.getBoolean(NO_BASE_PLATE.NBT);
+            }
+
+            if (entityTag.hasKey(SHOW_ARMS.NBT)) {
+                showArms = entityTag.getBoolean(SHOW_ARMS.NBT);
+            }
+
+            if (entityTag.hasKey(SMALL.NBT)) {
+                small = entityTag.getBoolean(SMALL.NBT);
+            }
+
+            if (entityTag.hasKey(MARKER.NBT)) {
+                marker = entityTag.getBoolean(MARKER.NBT);
+            }
+        }
+    }
+
+    @Override
+    boolean equalsCommon(CraftMetaItem meta) {
+        if (!super.equalsCommon(meta)) {
+            return false;
         }
+        if (meta instanceof CraftMetaArmorStand) {
+            CraftMetaArmorStand that = (CraftMetaArmorStand) meta;
 
-        return clone;
+            return invisible == that.invisible &&
+                    noBasePlate == that.noBasePlate &&
+                    showArms == that.showArms &&
+                    small == that.small &&
+                    marker == that.marker;
+        }
+        return true;
+    }
+
+    @Override
+    boolean notUncommon(CraftMetaItem meta) {
+        return super.notUncommon(meta) && (meta instanceof CraftMetaArmorStand || isArmorStandEmpty());
+    }
+
+    @Override
+    void serializeInternal(Map<String, NBTBase> internalTags) {
+        if (entityTag != null) {
+            internalTags.put(ENTITY_TAG.NBT, entityTag);
+        }
     }
 
-    // Paper start
     @Override
     public boolean isInvisible() {
         return invisible;
@@ -292,5 +282,30 @@ public class CraftMetaArmorStand extends CraftMetaItem implements com.destroysto
     public void setMarker(boolean marker) {
         this.marker = marker;
     }
-    // Paper end
+
+    @Override
+    int applyHash() {
+        final int original;
+        int hash = original = super.applyHash();
+
+        hash += entityTag != null ? 73 * hash + entityTag.hashCode() : 0;
+        hash += isInvisible() ? 61 * hash + 1231 : 0;
+        hash += hasNoBasePlate() ? 61 * hash + 1231 : 0;
+        hash += shouldShowArms() ? 61 * hash + 1231 : 0;
+        hash += isSmall() ? 61 * hash + 1231 : 0;
+        hash += isMarker() ? 61 * hash + 1231 : 0;
+
+        return original != hash ? CraftMetaArmorStand.class.hashCode() ^ hash : hash;
+    }
+
+    @Override
+    public CraftMetaArmorStand clone() {
+        CraftMetaArmorStand clone = (CraftMetaArmorStand) super.clone();
+
+        if (entityTag != null) {
+            clone.entityTag = entityTag.clone();
+        }
+
+        return clone;
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
index 7262920c..f8a3c971 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
@@ -33,7 +33,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     static final ItemMetaKey BOOK_PAGES = new ItemMetaKey("pages");
     static final ItemMetaKey RESOLVED = new ItemMetaKey("resolved");
     static final ItemMetaKey GENERATION = new ItemMetaKey("generation");
-    static final int MAX_PAGES = 100;
+    static final int MAX_PAGES = 50;
     static final int MAX_PAGE_LENGTH = 320; // 256 limit + 64 characters to allow for psuedo colour codes
     static final int MAX_TITLE_LENGTH = 32;
     private static final boolean OVERRIDE_CHECKS = Boolean.getBoolean("disable.book-limits"); // Paper - Add override
@@ -136,7 +136,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
             if (hasPages()) {
                 NBTTagList list = new NBTTagList();
                 for (IChatBaseComponent page : pages) {
-                    list.add(new NBTTagString(page == null ? "" : page.e())); // PAIL getLegacyString
+                    list.add(new NBTTagString(page == null ? "" : page.getString()));
                 }
                 itemData.set(BOOK_PAGES.NBT, list);
             }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
index 7a1c4d61..4c68273f 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
@@ -90,11 +90,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         List<FireworkEffect> effects = this.effects = new ArrayList<FireworkEffect>(fireworkEffects.size());
 
         for (int i = 0; i < fireworkEffects.size(); i++) {
-            try {
-                effects.add(getEffect((NBTTagCompound) fireworkEffects.get(i)));
-            } catch (IllegalArgumentException ex) {
-                // Ignore invalid effects
-            }
+            effects.add(getEffect((NBTTagCompound) fireworkEffects.get(i)));
         }
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index d484292d..c175c20a 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -6,7 +6,6 @@ import com.google.common.collect.HashMultimap;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableMultimap;
-import com.google.common.collect.ImmutableSortedMap; // Paper
 import com.google.common.collect.Lists;
 import com.google.common.collect.Multimap;
 import com.google.common.collect.SetMultimap;
@@ -44,7 +43,7 @@ import net.minecraft.server.EnumChatFormat;
 import net.minecraft.server.EnumItemSlot;
 import net.minecraft.server.GenericAttributes;
 import net.minecraft.server.IChatBaseComponent;
-import net.minecraft.server.ItemBlock;
+import com.google.common.collect.ImmutableSortedMap; // Paper
 import net.minecraft.server.NBTBase;
 import net.minecraft.server.NBTCompressedStreamTools;
 import net.minecraft.server.NBTTagCompound;
@@ -282,7 +281,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     private IChatBaseComponent locName;
     private List<IChatBaseComponent> lore;
     private Integer customModelData;
-    private NBTTagCompound blockData;
+    private String blockData;
     private EnchantmentMap enchantments; // Paper
     private Multimap<Attribute, AttributeModifier> attributeModifiers;
     private int repairCost;
@@ -388,8 +387,8 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         if (tag.hasKeyOfType(CUSTOM_MODEL_DATA.NBT, CraftMagicNumbers.NBT.TAG_INT)) {
             customModelData = tag.getInt(CUSTOM_MODEL_DATA.NBT);
         }
-        if (tag.hasKeyOfType(BLOCK_DATA.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND)) {
-            blockData = tag.getCompound(BLOCK_DATA.NBT);
+        if (tag.hasKeyOfType(BLOCK_DATA.NBT, CraftMagicNumbers.NBT.TAG_STRING)) {
+            blockData = tag.getString(BLOCK_DATA.NBT);
         }
 
         this.enchantments = buildEnchantments(tag, ENCHANTMENTS);
@@ -541,9 +540,9 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
             setCustomModelData(customModelData);
         }
 
-        Map blockData = SerializableMeta.getObject(Map.class, map, BLOCK_DATA.BUKKIT, true);
+        String blockData = SerializableMeta.getObject(String.class, map, BLOCK_DATA.BUKKIT, true);
         if (blockData != null) {
-            this.blockData = (NBTTagCompound) CraftNBTTagConfigSerializer.deserialize(blockData);
+            this.blockData = blockData;
         }
 
         enchantments = buildEnchantments(map, ENCHANTMENTS);
@@ -712,7 +711,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         }
 
         if (hasBlockData()) {
-            itemTag.set(BLOCK_DATA.NBT, blockData);
+            itemTag.setString(BLOCK_DATA.NBT, blockData);
         }
 
         if (hideFlag != 0) {
@@ -1043,7 +1042,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
 
     @Override
     public BlockData getBlockData(Material material) {
-        return CraftBlockData.fromData(ItemBlock.getBlockState(CraftMagicNumbers.getBlock(material).getBlockData(), blockData));
+        return CraftBlockData.newData(material, '[' + blockData + ']');
     }
 
     @Override
@@ -1365,7 +1364,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
             builder.put(CUSTOM_MODEL_DATA.BUKKIT, customModelData);
         }
         if (hasBlockData()) {
-            builder.put(BLOCK_DATA.BUKKIT, CraftNBTTagConfigSerializer.serialize(blockData));
+            builder.put(BLOCK_DATA.BUKKIT, blockData);
         }
 
         serializeEnchantments(enchantments, builder, ENCHANTMENTS);
@@ -1735,7 +1734,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         Namespaced resource = null;
         try {
             if (isTag) {
-                resource = new NamespacedTag(key.getNamespace(), key.getKey());
+                resource = new NamespacedTag(key.b(), key.getKey());
             } else {
                 resource = CraftNamespacedKey.fromMinecraft(key);
             }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
index 082f8511..d8914fa2 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
@@ -112,20 +112,18 @@ public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
         switch (type) {
             case BAT_SPAWN_EGG:
             case BLAZE_SPAWN_EGG:
-            case CAT_SPAWN_EGG:
             case CAVE_SPIDER_SPAWN_EGG:
             case CHICKEN_SPAWN_EGG:
             case COD_SPAWN_EGG:
             case COW_SPAWN_EGG:
             case CREEPER_SPAWN_EGG:
             case DOLPHIN_SPAWN_EGG:
-            case DONKEY_SPAWN_EGG:
             case DROWNED_SPAWN_EGG:
+            case DONKEY_SPAWN_EGG:
             case ELDER_GUARDIAN_SPAWN_EGG:
             case ENDERMAN_SPAWN_EGG:
             case ENDERMITE_SPAWN_EGG:
             case EVOKER_SPAWN_EGG:
-            case FOX_SPAWN_EGG:
             case GHAST_SPAWN_EGG:
             case GUARDIAN_SPAWN_EGG:
             case HORSE_SPAWN_EGG:
@@ -135,15 +133,12 @@ public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
             case MOOSHROOM_SPAWN_EGG:
             case MULE_SPAWN_EGG:
             case OCELOT_SPAWN_EGG:
-            case PANDA_SPAWN_EGG:
             case PARROT_SPAWN_EGG:
             case PHANTOM_SPAWN_EGG:
             case PIG_SPAWN_EGG:
-            case PILLAGER_SPAWN_EGG:
             case POLAR_BEAR_SPAWN_EGG:
             case PUFFERFISH_SPAWN_EGG:
             case RABBIT_SPAWN_EGG:
-            case RAVAGER_SPAWN_EGG:
             case SALMON_SPAWN_EGG:
             case SHEEP_SPAWN_EGG:
             case SHULKER_SPAWN_EGG:
@@ -154,20 +149,18 @@ public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
             case SPIDER_SPAWN_EGG:
             case SQUID_SPAWN_EGG:
             case STRAY_SPAWN_EGG:
-            case TRADER_LLAMA_SPAWN_EGG:
             case TROPICAL_FISH_SPAWN_EGG:
             case TURTLE_SPAWN_EGG:
             case VEX_SPAWN_EGG:
             case VILLAGER_SPAWN_EGG:
             case VINDICATOR_SPAWN_EGG:
-            case WANDERING_TRADER_SPAWN_EGG:
             case WITCH_SPAWN_EGG:
             case WITHER_SKELETON_SPAWN_EGG:
             case WOLF_SPAWN_EGG:
             case ZOMBIE_HORSE_SPAWN_EGG:
             case ZOMBIE_PIGMAN_SPAWN_EGG:
             case ZOMBIE_SPAWN_EGG:
-            case ZOMBIE_VILLAGER_SPAWN_EGG:
+        case ZOMBIE_VILLAGER_SPAWN_EGG:
                 return true;
             default:
                 return false;
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftResultInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftResultInventory.java
deleted file mode 100644
index ff7f589a..00000000
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftResultInventory.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package org.bukkit.craftbukkit.inventory;
-
-import net.minecraft.server.IInventory;
-import org.bukkit.inventory.ItemStack;
-
-public class CraftResultInventory extends CraftInventory {
-
-    private final IInventory resultInventory;
-
-    public CraftResultInventory(IInventory inventory, IInventory resultInventory) {
-        super(inventory);
-        this.resultInventory = resultInventory;
-    }
-
-    public IInventory getResultInventory() {
-        return resultInventory;
-    }
-
-    public IInventory getIngredientsInventory() {
-        return inventory;
-    }
-
-    @Override
-    public ItemStack getItem(int slot) {
-        if (slot < getIngredientsInventory().getSize()) {
-            net.minecraft.server.ItemStack item = getIngredientsInventory().getItem(slot);
-            return item.isEmpty() ? null : CraftItemStack.asCraftMirror(item);
-        } else {
-            net.minecraft.server.ItemStack item = getResultInventory().getItem(slot - getIngredientsInventory().getSize());
-            return item.isEmpty() ? null : CraftItemStack.asCraftMirror(item);
-        }
-    }
-
-    @Override
-    public void setItem(int index, ItemStack item) {
-        if (index < getIngredientsInventory().getSize()) {
-            getIngredientsInventory().setItem(index, CraftItemStack.asNMSCopy(item));
-        } else {
-            getResultInventory().setItem((index - getIngredientsInventory().getSize()), CraftItemStack.asNMSCopy(item));
-        }
-    }
-
-    @Override
-    public int getSize() {
-        return getResultInventory().getSize() + getIngredientsInventory().getSize();
-    }
-}
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
index 93b39092..8a4fbdca 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
@@ -42,7 +42,7 @@ public class CraftMapRenderer extends MapRenderer {
             }
 
             MapIcon decoration = (MapIcon) worldMap.decorations.get(key);
-            cursors.addCursor(decoration.getX(), decoration.getY(), (byte) (decoration.getRotation() & 15), decoration.getType().a(), true, CraftChatMessage.fromComponent(decoration.getName()));
+            cursors.addCursor(decoration.getX(), decoration.getY(), (byte) (decoration.getRotation() & 15), decoration.b().a(), true, CraftChatMessage.fromComponent(decoration.g()));
         }
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java b/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
index 834fc178..f7b48d11 100644
--- a/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
+++ b/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
@@ -69,7 +69,7 @@ public class CraftBlockProjectileSource implements BlockProjectileSource {
         SourceBlock isourceblock = new SourceBlock(dispenserBlock.getWorld(), dispenserBlock.getPosition());
         // Copied from DispenseBehaviorProjectile
         IPosition iposition = BlockDispenser.a(isourceblock);
-        EnumDirection enumdirection = (EnumDirection) isourceblock.getBlockData().get(BlockDispenser.FACING);
+        EnumDirection enumdirection = (EnumDirection) isourceblock.e().get(BlockDispenser.FACING);
         net.minecraft.server.World world = dispenserBlock.getWorld();
         net.minecraft.server.Entity launch = null;
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
index ca2be306..3ecc579a 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
@@ -41,7 +41,7 @@ public final class CraftScoreboardManager implements ScoreboardManager {
 
     @Override
     public CraftScoreboard getNewScoreboard() {
-        org.spigotmc.AsyncCatcher.catchOp("scoreboard creation"); // Spigot
+        org.spigotmc.AsyncCatcher.catchOp( "scoreboard creation"); // Spigot
         CraftScoreboard scoreboard = new CraftScoreboard(new ScoreboardServer(server));
         scoreboards.add(scoreboard);
         return scoreboard;
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
index e7a74172..811959c3 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
@@ -210,7 +210,7 @@ public final class CraftChatMessage {
                 ChatModifier modifier = text.getChatModifier() != null ?
                         text.getChatModifier() : new ChatModifier();
                 List<IChatBaseComponent> extras = new ArrayList<IChatBaseComponent>();
-                List<IChatBaseComponent> extrasOld = new ArrayList<IChatBaseComponent>(text.getSiblings());
+                List<IChatBaseComponent> extrasOld = new ArrayList<IChatBaseComponent>(text.a());
                 component = text = new ChatComponentText("");
 
                 int pos = 0;
@@ -245,21 +245,21 @@ public final class CraftChatMessage {
             }
         }
 
-        List<IChatBaseComponent> extras = component.getSiblings();
+        List extras = component.a();
         for (int i = 0; i < extras.size(); i++) {
-            IChatBaseComponent comp = extras.get(i);
-            if (comp.getChatModifier() != null && comp.getChatModifier().getClickEvent() == null) {
+            IChatBaseComponent comp = (IChatBaseComponent) extras.get(i);
+            if (comp.getChatModifier() != null && comp.getChatModifier().h() == null) {
                 extras.set(i, fixComponent(comp, matcher));
             }
         }
 
         if (component instanceof ChatMessage) {
-            Object[] subs = ((ChatMessage) component).getArgs();
+            Object[] subs = ((ChatMessage) component).l();
             for (int i = 0; i < subs.length; i++) {
                 Object comp = subs[i];
                 if (comp instanceof IChatBaseComponent) {
                     IChatBaseComponent c = (IChatBaseComponent) comp;
-                    if (c.getChatModifier() != null && c.getChatModifier().getClickEvent() == null) {
+                    if (c.getChatModifier() != null && c.getChatModifier().h() == null) {
                         subs[i] = fixComponent(c, matcher);
                     }
                 } else if (comp instanceof String && matcher.reset((String)comp).find()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 921c16df..ee5616cd 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -8,10 +8,8 @@ import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.datafixers.Dynamic;
 import java.io.File;
 import java.io.IOException;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.logging.Level;
@@ -188,7 +186,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
      * @return string
      */
     public String getMappingsVersion() {
-        return "11ae498d9cf909730659b6357e7c2afa";
+        return "df689a0f36ee29c2b2f456da8803f74d";
     }
 
     @Override
@@ -219,7 +217,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
         net.minecraft.server.Advancement.SerializedAdvancement nms = (net.minecraft.server.Advancement.SerializedAdvancement) ChatDeserializer.a(AdvancementDataWorld.DESERIALIZER, advancement, net.minecraft.server.Advancement.SerializedAdvancement.class);
         if (nms != null) {
-            MinecraftServer.getServer().getAdvancementData().REGISTRY.a(Maps.newHashMap(Collections.singletonMap(CraftNamespacedKey.toMinecraft(key), nms)));
+            AdvancementDataWorld.REGISTRY.a(Maps.newHashMap(Collections.singletonMap(CraftNamespacedKey.toMinecraft(key), nms)));
             Advancement bukkit = Bukkit.getAdvancement(key);
 
             if (bukkit != null) {
@@ -247,29 +245,14 @@ public final class CraftMagicNumbers implements UnsafeValues {
         return file.delete();
     }
 
-    private static final List<String> SUPPORTED_API = Arrays.asList("1.13", "1.14");
-
     @Override
     public void checkSupported(PluginDescriptionFile pdf) throws InvalidPluginException {
-        String minimumVersion = MinecraftServer.getServer().server.minimumAPI;
-        int minimumIndex = SUPPORTED_API.indexOf(minimumVersion);
-
         if (pdf.getAPIVersion() != null) {
-            int pluginIndex = SUPPORTED_API.indexOf(pdf.getAPIVersion());
-
-            if (pluginIndex == -1) {
+            if (!pdf.getAPIVersion().equals("1.13") && !pdf.getAPIVersion().equals("1.14")) {
                 throw new InvalidPluginException("Unsupported API version " + pdf.getAPIVersion());
             }
-
-            if (pluginIndex < minimumIndex) {
-                throw new InvalidPluginException("Plugin API version " + pdf.getAPIVersion() + " is lower than the minimum allowed version. Please update or replace it.");
-            }
         } else {
-            if (minimumIndex == -1) {
-                Bukkit.getLogger().log(Level.WARNING, "Plugin " + pdf.getFullName() + " does not specify an api-version.");
-            } else {
-                throw new InvalidPluginException("Plugin API version " + pdf.getAPIVersion() + " is lower than the minimum allowed version. Please update or replace it.");
-            }
+            Bukkit.getLogger().log(Level.WARNING, "Plugin " + pdf.getFullName() + " does not specify an api-version.");
         }
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftNamespacedKey.java b/src/main/java/org/bukkit/craftbukkit/util/CraftNamespacedKey.java
index b308b190..f1f41262 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftNamespacedKey.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftNamespacedKey.java
@@ -21,7 +21,7 @@ public final class CraftNamespacedKey {
     }
 
     public static NamespacedKey fromMinecraft(MinecraftKey minecraft) {
-        return new NamespacedKey(minecraft.getNamespace(), minecraft.getKey());
+        return new NamespacedKey(minecraft.b(), minecraft.getKey());
     }
 
     public static MinecraftKey toMinecraft(NamespacedKey key) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java b/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
index 5bae026d..cd910f3d 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
@@ -11,6 +11,7 @@ import net.minecraft.server.ChunkStatus;
 import net.minecraft.server.DifficultyDamageScaler;
 import net.minecraft.server.Entity;
 import net.minecraft.server.EntityHuman;
+import net.minecraft.server.EnumDirection;
 import net.minecraft.server.EnumSkyBlock;
 import net.minecraft.server.Fluid;
 import net.minecraft.server.FluidType;
@@ -82,7 +83,7 @@ public class DummyGeneratorAccess implements GeneratorAccess {
     }
 
     @Override
-    public void playSound(EntityHuman eh, BlockPosition bp, SoundEffect se, SoundCategory sc, float f, float f1) {
+    public void a(EntityHuman eh, BlockPosition bp, SoundEffect se, SoundCategory sc, float f, float f1) {
         throw new UnsupportedOperationException("Not supported yet.");
     }
 
diff --git a/src/main/java/org/mcmt/PartitionInfoCommand.java b/src/main/java/org/mcmt/PartitionInfoCommand.java
new file mode 100644
index 00000000..dac1d662
--- /dev/null
+++ b/src/main/java/org/mcmt/PartitionInfoCommand.java
@@ -0,0 +1,81 @@
+package org.mcmt;
+
+import net.minecraft.server.*;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
+import org.bukkit.util.BoundingBox;
+
+import java.util.List;
+
+public class PartitionInfoCommand extends Command
+{
+    public PartitionInfoCommand(String name)
+    {
+        super( name );
+        this.description = "Returns debug information about the current partition you are in";
+        this.usageMessage = "/partition";
+        this.setPermission( "bukkit.command.tps" );
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String currentAlias, String[] args)
+    {
+        if ( !testPermission( sender ) )
+        {
+            return true;
+        }
+
+        if (sender instanceof Player) {
+            Player player = (Player)sender;
+            Location location = player.getLocation();
+            BlockPosition position = new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ());
+            ChunkCoordIntPair coordinates = new ChunkCoordIntPair(position);
+
+            sender.sendMessage( ChatColor.GOLD + "Partition debug info:");
+            for (WorldServer world : MinecraftServer.getServer().getWorlds()) {
+                sender.sendMessage( ChatColor.DARK_GREEN + "World " + world.getWorld().getName());
+                List<Partition> partitions = world.getPartitionManager().getPartitions();
+                for (int i=0; i<partitions.size(); i++) {
+                    Partition partition = partitions.get(i);
+                    sender.sendMessage(ChatColor.BLUE + "Partition #" + i);
+                    int chunkCount = partition.chunks.size();
+                    if (chunkCount > 0) {
+                        sender.sendMessage(ChatColor.LIGHT_PURPLE + " - Chunks: " + chunkCount + " @ " + toChunkBoundingBox(partition.getChunkBoundingBox()));
+                    }
+                    int entityCount = partition.entities.size();
+                    if (entityCount > 0) {
+                        sender.sendMessage(ChatColor.LIGHT_PURPLE + " - Entities: " + entityCount + " @ " + toChunkBoundingBox(partition.getEntityBoundingBox()));
+                    }
+                    int blockCount = partition.blockTickListServer.getNextTickList().size();
+                    if (blockCount > 0) {
+                        sender.sendMessage(ChatColor.LIGHT_PURPLE + " - Blocks: " + blockCount + " @ " + toChunkBoundingBox(partition.getBlockTickBoundingBox()));
+                    }
+                    int fluidCount = partition.fluidTickListServer.getNextTickList().size();
+                    if (fluidCount > 0) {
+                        sender.sendMessage(ChatColor.LIGHT_PURPLE + " - Fluids: " + fluidCount + " @ " + toChunkBoundingBox(partition.getFluidTickBoundingBox()));
+                    }
+                }
+            }
+        }
+
+        return false;
+    }
+
+    private String toChunkBoundingBox(BoundingBox boundingBox) {
+        StringBuilder sb = new StringBuilder();
+        sb.append("[(");
+        sb.append(boundingBox.getMinX());
+        sb.append(",");
+        sb.append(boundingBox.getMinZ());
+        sb.append("),(");
+        sb.append(boundingBox.getMaxX());
+        sb.append(",");
+        sb.append(boundingBox.getMaxZ());
+        sb.append(")]");
+        return sb.toString();
+    }
+}
diff --git a/src/main/java/org/mcmt/ProfilingCommand.java b/src/main/java/org/mcmt/ProfilingCommand.java
new file mode 100644
index 00000000..9c593f4a
--- /dev/null
+++ b/src/main/java/org/mcmt/ProfilingCommand.java
@@ -0,0 +1,93 @@
+package org.mcmt;
+
+import net.minecraft.server.*;
+import org.apache.commons.lang3.StringUtils;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+import org.bukkit.util.BoundingBox;
+
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Optional;
+
+public class ProfilingCommand extends Command
+{
+    public ProfilingCommand(String name)
+    {
+        super( name );
+        this.description = "Returns debug information about the current partition you are in";
+        this.usageMessage = "/profiling <start|stop> <world> <partition>";
+        this.setPermission( "bukkit.command.tps" );
+    }
+
+    static int tryParseOrZero(String text) {
+        try {
+            return Integer.parseInt(text);
+        } catch (NumberFormatException e) {
+            return 0;
+        }
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String currentAlias, String[] args)
+    {
+        if ( !testPermission( sender ) ) {
+            return true;
+        }
+
+        if (args == null || args.length != 3) {
+            sender.sendMessage( ChatColor.RED + "Usage: /profiling <start|stop> <world> <partition_id>");
+            return true;
+        }
+
+        String action = args[0].toLowerCase();
+
+        WorldServer world = null;
+        Iterator<WorldServer> iterator = MinecraftServer.getServer().getWorlds().iterator();
+        while(iterator.hasNext()) {
+            if (world == null || iterator.next().getWorld().getName().equalsIgnoreCase(args[1])) {
+                world = iterator.next();
+            }
+        }
+
+        int index = tryParseOrZero(args[2]);
+
+        if (action.equalsIgnoreCase("start")) {
+            List<Partition> partitions = world.getPartitionManager().getPartitions();
+            if (partitions.size() > index) {
+                sender.sendMessage( ChatColor.GREEN + "MCMT | Starting profiling partition #" + index);
+
+                Partition partition = partitions.get(index);
+                partition.startProfiling();
+            }
+        } else {
+            List<Partition> partitions = world.getPartitionManager().getPartitions();
+            if (partitions.size() > index) {
+                sender.sendMessage( ChatColor.GREEN + "MCMT | Stopped profiling partition #" + index);
+
+                Partition partition = partitions.get(index);
+                Partition.Profile parent = partition.stopProfiling();
+
+                long sessionTime = parent.getElapsed();
+                long workingTime = parent.getChildren().stream().findFirst().get().getElapsed();
+
+                report(sender, parent, 0);
+
+                sender.sendMessage( ChatColor.GOLD + "MCMT | IDLE: " + (sessionTime-workingTime)/1_000_000 + "ms");
+                sender.sendMessage( ChatColor.GOLD + "MCMT | TOTAL: " + sessionTime/1_000_000 + "ms");
+            }
+        }
+
+        return false;
+    }
+    private void report(CommandSender sender, Partition.Profile parent, int indent) {
+        sender.sendMessage( ChatColor.GOLD + "MCMT | " + StringUtils.repeat("  |", indent) + "  |-" + parent.getKey() + ": " + parent.getElapsed()/1_000_000 + "ms");
+        for (Partition.Profile profile : parent.getChildren()) {
+            report(sender, profile, indent + 1);
+        }
+    }
+}
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 92601c58..7341dc2c 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -58,15 +58,15 @@ public class ActivationRange
      */
     public static ActivationType initializeEntityActivationType(Entity entity)
     {
-        if ( entity instanceof EntityRaider )
-        {
-            return ActivationType.RAIDER;
-        } else if ( entity instanceof EntityMonster || entity instanceof EntitySlime )
+        if ( entity instanceof EntityMonster || entity instanceof EntitySlime )
         {
             return ActivationType.MONSTER;
         } else if ( entity instanceof EntityCreature || entity instanceof EntityAmbient )
         {
             return ActivationType.ANIMAL;
+        } else if ( entity instanceof EntityRaider )
+        {
+            return ActivationType.RAIDER;
         } else
         {
             return ActivationType.MISC;
@@ -143,10 +143,9 @@ public class ActivationRange
             {
                 for ( int j1 = k; j1 <= l; ++j1 )
                 {
-                    Chunk chunk = (Chunk) world.getChunkIfLoadedImmediately( i1, j1 );
-                    if ( chunk != null )
+                    if ( world.getWorld().isChunkLoaded( i1, j1 ) )
                     {
-                        activateChunkEntities( chunk );
+                        activateChunkEntities( world.getChunkAt( i1, j1 ) );
                     }
                 }
             }
diff --git a/src/main/java/org/spigotmc/AsyncCatcher.java b/src/main/java/org/spigotmc/AsyncCatcher.java
index 9f7d2ef9..2f94f38e 100644
--- a/src/main/java/org/spigotmc/AsyncCatcher.java
+++ b/src/main/java/org/spigotmc/AsyncCatcher.java
@@ -5,7 +5,7 @@ import net.minecraft.server.MinecraftServer;
 public class AsyncCatcher
 {
 
-    public static boolean enabled = true;
+    public static boolean enabled = false;
     public static boolean shuttingDown = false; // Paper
 
     public static void catchOp(String reason)
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 4b8581f0..146871cd 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -27,6 +27,8 @@ import org.bukkit.command.Command;
 import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
+import org.mcmt.PartitionInfoCommand;
+import org.mcmt.ProfilingCommand;
 
 public class SpigotConfig
 {
@@ -282,6 +284,16 @@ public class SpigotConfig
         }
     }
 
+    private static void partitionCommand()
+    {
+        commands.put( "partition", new PartitionInfoCommand( "partition" ) );
+    }
+
+    private static void profilingCommand()
+    {
+        commands.put( "profiling", new ProfilingCommand( "profiling" ) );
+    }
+
     private static void tpsCommand()
     {
         commands.put( "tps", new TicksPerSecondCommand( "tps" ) );
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index b3afb901..4c1cb6d7 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -88,9 +88,6 @@ public class SpigotWorldConfig
     public int wartModifier;
     public int vineModifier;
     public int cocoaModifier;
-    public int bambooModifier;
-    public int sweetBerryModifier;
-    public int kelpModifier;
     private int getAndValidateGrowth(String crop)
     {
         int modifier = getInt( "growth." + crop.toLowerCase(java.util.Locale.ENGLISH) + "-modifier", 100 );
@@ -118,9 +115,6 @@ public class SpigotWorldConfig
         wartModifier = getAndValidateGrowth( "NetherWart" );
         vineModifier = getAndValidateGrowth( "Vine" );
         cocoaModifier = getAndValidateGrowth( "Cocoa" );
-        bambooModifier = getAndValidateGrowth( "Bamboo" );
-        sweetBerryModifier = getAndValidateGrowth( "SweetBerry" );
-        kelpModifier = getAndValidateGrowth( "Kelp" );
     }
 
     public double itemMerge;
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index 6d21c326..252d3494 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -1,5 +1,6 @@
 package org.spigotmc;
 
+import net.minecraft.server.MinecraftServer;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
@@ -30,7 +31,12 @@ public class TicksPerSecondCommand extends Command
         for ( int i = 0; i < tps.length; i++) {
             tpsAvg[i] = format( tps[i] );
         }
-        sender.sendMessage( ChatColor.GOLD + "TPS from last 1m, 5m, 15m: " + org.apache.commons.lang.StringUtils.join(tpsAvg, ", "));
+        sender.sendMessage( ChatColor.GOLD + "TPS Thread report: ");
+        MinecraftServer server = MinecraftServer.getServer();
+        for(int i = 0; i < server.tickingThreadCount; i++)
+        {
+            sender.sendMessage(ChatColor.GOLD + "Thread " + ChatColor.RED + "#" + Integer.toString(i) + " " + format(server.threadsTPS.get(i)));
+        }
         // Paper end
 
         return true;
diff --git a/src/main/resources/configurations/bukkit.yml b/src/main/resources/configurations/bukkit.yml
index 39dbf58c..e75ad475 100644
--- a/src/main/resources/configurations/bukkit.yml
+++ b/src/main/resources/configurations/bukkit.yml
@@ -22,14 +22,11 @@ settings:
     query-plugins: true
     deprecated-verbose: default
     shutdown-message: Server closed
-    minimum-api: none
 spawn-limits:
     monsters: 70
     animals: 10
     water-animals: 15
     ambient: 15
-chunk-gc:
-    period-in-ticks: 600
 ticks-per:
     animal-spawns: 400
     monster-spawns: 1
diff --git a/src/main/resources/log4j2.component.properties b/src/main/resources/log4j2.component.properties
index 30efeb5f..ee7c9078 100644
--- a/src/main/resources/log4j2.component.properties
+++ b/src/main/resources/log4j2.component.properties
@@ -1,3 +1 @@
 Log4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector
-log4j2.AsyncQueueFullPolicy="com.destroystokyo.paper.log.LogFullPolicy"
-log4j.skipJansi=true
diff --git a/src/test/java/org/bukkit/GameRuleTest.java b/src/test/java/org/bukkit/GameRuleTest.java
index ca598c58..40edb8d6 100644
--- a/src/test/java/org/bukkit/GameRuleTest.java
+++ b/src/test/java/org/bukkit/GameRuleTest.java
@@ -1,8 +1,8 @@
 package org.bukkit;
 
 import java.util.Map;
+import java.util.TreeMap;
 import net.minecraft.server.GameRules;
-import org.bukkit.craftbukkit.CraftWorld;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -21,12 +21,12 @@ public class GameRuleTest {
 
     @Test
     public void testMinecraftRules() {
-        Map<String, GameRules.GameRuleKey<?>> minecraftRules = CraftWorld.getGameRulesNMS();
+        Map<String, GameRules.GameRuleDefinition> minecraftRules = GameRules.getGameRules(); // Paper - Optimize GameRules
 
-        for (Map.Entry<String, GameRules.GameRuleKey<?>> entry : minecraftRules.entrySet()) {
+        for (Map.Entry<String, GameRules.GameRuleDefinition> entry : minecraftRules.entrySet()) {
             GameRule<?> bukkitRule = GameRule.getByName(entry.getKey());
 
-            Assert.assertNotNull("Missing " + entry.getKey(), bukkitRule);
+            Assert.assertNotNull(bukkitRule);
             Assert.assertEquals("Invalid GameRule Name", bukkitRule.getName(), entry.getKey());
         }
     }
diff --git a/src/test/java/org/bukkit/NibbleArrayTest.java b/src/test/java/org/bukkit/NibbleArrayTest.java
index 40ba97fb..0131ff04 100644
--- a/src/test/java/org/bukkit/NibbleArrayTest.java
+++ b/src/test/java/org/bukkit/NibbleArrayTest.java
@@ -23,7 +23,7 @@ public class NibbleArrayTest {
         }
 
         for (int i = 0; i < classic.length; i++) {
-            Assert.assertEquals("Nibble array mismatch", classic[i], nibble.b(i));
+            Assert.assertEquals("Nibble array mismatch", classic[i], nibble.a(i));
         }
     }
 }
diff --git a/src/test/java/org/bukkit/StatisticsAndAchievementsTest.java b/src/test/java/org/bukkit/StatisticsAndAchievementsTest.java
index f45fa3fd..fe8cad4a 100644
--- a/src/test/java/org/bukkit/StatisticsAndAchievementsTest.java
+++ b/src/test/java/org/bukkit/StatisticsAndAchievementsTest.java
@@ -32,16 +32,16 @@ public class StatisticsAndAchievementsTest extends AbstractTestingBase {
     public void verifyStatisticMapping() throws Throwable {
         HashMultiset<Statistic> statistics = HashMultiset.create();
         for (StatisticWrapper wrapper : IRegistry.STATS) {
-            for (Object child : wrapper.getRegistry()) {
+            for (Object child : wrapper.a()) {
                 net.minecraft.server.Statistic<?> statistic = wrapper.b(child);
                 String message = String.format("org.bukkit.Statistic is missing: '%s'", statistic);
 
                 Statistic subject = CraftStatistic.getBukkitStatistic(statistic);
                 assertThat(message, subject, is(not(nullValue())));
 
-                if (wrapper.getRegistry() == IRegistry.BLOCK || wrapper.getRegistry() == IRegistry.ITEM) {
-                    assertNotNull("Material type map missing for " + wrapper.getRegistry().getKey(child), CraftStatistic.getMaterialFromStatistic(statistic));
-                } else if (wrapper.getRegistry() == IRegistry.ENTITY_TYPE) {
+                if (wrapper.a() == IRegistry.BLOCK || wrapper.a() == IRegistry.ITEM) {
+                    assertNotNull("Material type map missing for " + wrapper.a().getKey(child), CraftStatistic.getMaterialFromStatistic(statistic));
+                } else if (wrapper.a() == IRegistry.ENTITY_TYPE) {
                     assertNotNull("Entity type map missing for " + EntityTypes.getName((EntityTypes<?>) child), CraftStatistic.getEntityTypeFromStatistic((net.minecraft.server.Statistic<EntityTypes<?>>) statistic));
                 }
 
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
index 761494fa..f30f7431 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
@@ -14,7 +14,6 @@ import net.minecraft.server.ITileEntity;
 import net.minecraft.server.Item;
 import net.minecraft.server.ItemBlock;
 import net.minecraft.server.ItemBlockWallable;
-import net.minecraft.server.NBTTagCompound;
 import org.bukkit.Bukkit;
 import org.bukkit.Color;
 import org.bukkit.DyeColor;
@@ -388,16 +387,16 @@ public class ItemMetaTest extends AbstractTestingBase {
                     return cleanStack;
                 }
             },
+            // Paper start
             new StackProvider(Material.ARMOR_STAND) {
                 @Override ItemStack operate(ItemStack cleanStack) {
-                    final CraftMetaArmorStand meta = (CraftMetaArmorStand) cleanStack.getItemMeta();
-                    meta.entityTag = new NBTTagCompound();
-                    meta.entityTag.setBoolean("Small", true);
-                    meta.setInvisible(true); // Paper
+                    final ArmorStandMeta meta = (ArmorStandMeta) cleanStack.getItemMeta();
+                    meta.setInvisible(true);
                     cleanStack.setItemMeta(meta);
                     return cleanStack;
                 }
             }
+            // paper end
         );
 
         assertThat("Forgotten test?", providers, hasSize(ItemStackTest.COMPOUND_MATERIALS.length - 4/* Normal item meta, skulls, eggs and tile entities */));
-- 
2.17.1

